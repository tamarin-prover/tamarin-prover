theory anonymity_Responder_peer_revealed_psk_revealed_passive_trusted_pki_NX begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman, multiset
functions: aead/4, decrypt/3, fst/1[destructor], h/1, kdf1/1, kdf2/1,
           kdf3/1, pair/2, snd/1[destructor], true/0, verify/4
equations:
    decrypt(k, n, aead(k, n, a, p)) = p,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(k, n, a, aead(k, n, a, p)) = true

tactic: equivalence
presort: s
prio: {id}
  regex"^My"
  regex"^I_"
  regex"^R_"
  regex"^St_"
  regex"^!Transport_"
  regex"^!SessionId\("
  regex"^Ek"
  regex"^Handshake"
  regex"^Peer"
prio: {id}
  regex"~~>" | regex"^!KD"
prio: {id}
  regex"^!Pk\("
prio: {id}
  regex"^!KU\(*~.*\)"
prio: {smallest}
  dhreNoise"diff"
prio: {smallest}
  regex"Receivable\(.*'"
  regex"Receivable\(.*\("
  regex"Recv\(.*\("
  regex"Recv\(.*'"
prio: {id}
  not regex"!KU\((\$?[a-zA-Z0-9.]+|'[^']+')\)"
  not regex"!KU\((?!(one|true))[a-zA-Z0-9.]+\)"





rule (modulo E) Init_Handshake_Initiator:
   [ Init_Handshake_Initiator( id, prologue ) ]
  -->
   [ HandshakeState_Initiator_0( id, h(<'NX', prologue>), 'NX' ) ]

rule (modulo E) Handshake_Initiator_Snd_1:
   [
   HandshakeState_Initiator_0( id, hash, ck ),
   Handshake_Snd_1( id, payload ), Ek( ~e0 )
   ]
  --[ RawSnd( 'Initiator1', <'g'^~e0, payload> ) ]->
   [
   MyEk_Initiator( id, 'g'^~e0 ),
   HandshakeState_Initiator_1( id, h(<h(<hash, 'g'^~e0>), payload>), ck, ~e0
   ),
   Send( <'g'^~e0, payload> )
   ]

rule (modulo E) Handshake_Initiator_Recv_2:
   [
   !Pk( something, 'g'^~rs4 )[no_precomp],
   HandshakeState_Initiator_1( id, hash, ck, ~e ),
   Recv( <'g'^~re0, 
          aead(kdf2(<ck, 'g'^~re0^~e>), '0', h(<hash, 'g'^~re0>), 'g'^~rs4), 
          aead(kdf2(<kdf1(<ck, 'g'^~re0^~e>), 'g'^~rs4^~e>), '0',
               h(<h(<hash, 'g'^~re0>), 
                  aead(kdf2(<ck, 'g'^~re0^~e>), '0', h(<hash, 'g'^~re0>), 'g'^~rs4)>),
               payload)
         >
   )
   ]
  --[
  RawRecv( 'Responder2',
           <'g'^~re0, 
            aead(kdf2(<ck, 'g'^~re0^~e>), '0', h(<hash, 'g'^~re0>), 'g'^~rs4), 
            aead(kdf2(<kdf1(<ck, 'g'^~re0^~e>), 'g'^~rs4^~e>), '0',
                 h(<h(<hash, 'g'^~re0>), 
                    aead(kdf2(<ck, 'g'^~re0^~e>), '0', h(<hash, 'g'^~re0>), 'g'^~rs4)>),
                 payload)
           >
  )
  ]->
   [
   PeerEk_Initiator( id, 'g'^~re0 ), PeerLtk_Initiator( id, 'g'^~rs4 ),
   HandshakeState_Initiator_2( id,
                               h(<
                                  h(<h(<hash, 'g'^~re0>), 
                                     aead(kdf2(<ck, 'g'^~re0^~e>), '0', h(<hash, 'g'^~re0>), 'g'^~rs4)>), 
                                  aead(kdf2(<kdf1(<ck, 'g'^~re0^~e>), 'g'^~rs4^~e>), '0',
                                       h(<h(<hash, 'g'^~re0>), 
                                          aead(kdf2(<ck, 'g'^~re0^~e>), '0', h(<hash, 'g'^~re0>), 'g'^~rs4)>),
                                       payload)
                                 >),
                               kdf1(<kdf1(<ck, 'g'^~re0^~e>), 'g'^~rs4^~e>),
                               kdf2(<kdf1(<ck, 'g'^~re0^~e>), 'g'^~rs4^~e>), ~e, 'g'^~re0, 'g'^~rs4
   ),
   Handshake_Recv_2( id, payload )
   ]

rule (modulo E) Initiator_to_transport_mode:
   [ HandshakeState_Initiator_2( id, hash, ck, k, ~e, 'g'^re, 'g'^rs ) ]
  -->
   [ !Transport_Initiator( id, kdf1(ck), kdf2(ck) ), !SessionId( id, hash )
   ]

rule (modulo E) Init_Handshake_Responder:
   [ Init_Handshake_Responder( id, prologue, ~s ) ]
  -->
   [ HandshakeState_Responder_0( id, h(<'NX', prologue>), 'NX', ~s ) ]

rule (modulo E) Handshake_Responder_Recv_1:
   [
   HandshakeState_Responder_0( id, hash, ck, ~s ),
   Recv( <'g'^~re0, payload> )
   ]
  --[ RawRecv( 'Initiator1', <'g'^~re0, payload> ) ]->
   [
   PeerEk_Responder( id, 'g'^~re0 ),
   HandshakeState_Responder_1( id, h(<h(<hash, 'g'^~re0>), payload>), ck,
                               'g'^~re0, ~s
   ),
   Handshake_Recv_1( id, payload )
   ]

rule (modulo E) Handshake_Responder_Snd_2:
   [
   HandshakeState_Responder_1( id, hash, ck, 'g'^~re, ~s ),
   Handshake_Snd_2( id, payload ), Ek( ~e0 )
   ]
  --[
  RawSnd( 'Responder2',
          <'g'^~e0, 
           aead(kdf2(<ck, 'g'^~re^~e0>), '0', h(<hash, 'g'^~e0>), 'g'^~s), 
           aead(kdf2(<kdf1(<ck, 'g'^~re^~e0>), 'g'^~re^~s>), '0',
                h(<h(<hash, 'g'^~e0>), 
                   aead(kdf2(<ck, 'g'^~re^~e0>), '0', h(<hash, 'g'^~e0>), 'g'^~s)>),
                payload)
          >
  )
  ]->
   [
   MyEk_Responder( id, 'g'^~e0 ),
   HandshakeState_Responder_2( id,
                               h(<
                                  h(<h(<hash, 'g'^~e0>), 
                                     aead(kdf2(<ck, 'g'^~re^~e0>), '0', h(<hash, 'g'^~e0>), 'g'^~s)>), 
                                  aead(kdf2(<kdf1(<ck, 'g'^~re^~e0>), 'g'^~re^~s>), '0',
                                       h(<h(<hash, 'g'^~e0>), 
                                          aead(kdf2(<ck, 'g'^~re^~e0>), '0', h(<hash, 'g'^~e0>), 'g'^~s)>),
                                       payload)
                                 >),
                               kdf1(<kdf1(<ck, 'g'^~re^~e0>), 'g'^~re^~s>),
                               kdf2(<kdf1(<ck, 'g'^~re^~e0>), 'g'^~re^~s>), ~e0, 'g'^~re, ~s
   ),
   Send( <'g'^~e0, 
          aead(kdf2(<ck, 'g'^~re^~e0>), '0', h(<hash, 'g'^~e0>), 'g'^~s), 
          aead(kdf2(<kdf1(<ck, 'g'^~re^~e0>), 'g'^~re^~s>), '0',
               h(<h(<hash, 'g'^~e0>), 
                  aead(kdf2(<ck, 'g'^~re^~e0>), '0', h(<hash, 'g'^~e0>), 'g'^~s)>),
               payload)
         >
   )
   ]

rule (modulo E) Responder_to_transport_mode:
   [ HandshakeState_Responder_2( id, hash, ck, k, ~e, 'g'^re, ~s ) ]
  -->
   [ !Transport_Responder( id, kdf1(ck), kdf2(ck) ), !SessionId( id, hash )
   ]

rule (modulo E) I_Recv_from_R:
   [
   Recv( <n, aead(kr2i, n, '0', msg)> ),
   !Transport_Initiator( id, ki2r, kr2i )
   ]
  --[ RawRecv( <'R', n>, <n, aead(kr2i, n, '0', msg)> ) ]->
   [ I_Recv( id, n, msg ) ]

rule (modulo E) R_Recv_from_I:
   [
   Recv( <n, aead(ki2r, n, '0', msg)> ),
   !Transport_Responder( id, ki2r, kr2i )
   ]
  --[ RawRecv( <'I', n>, <n, aead(ki2r, n, '0', msg)> ) ]->
   [ R_Recv( id, n, msg ) ]

rule (modulo E) I_Snd_to_R:
   [ I_Snd( id, n, msg ), !Transport_Initiator( id, ki2r, kr2i ) ]
  --[ RawSnd( <'I', n>, <n, aead(ki2r, n, '0', msg)> ) ]->
   [ Send( <n, aead(ki2r, n, '0', msg)> ) ]

rule (modulo E) R_Snd_to_I:
   [ R_Snd( id, n, msg ), !Transport_Responder( id, ki2r, kr2i ) ]
  --[ RawSnd( <'R', n>, <n, aead(kr2i, n, '0', msg)> ) ]->
   [ Send( <n, aead(kr2i, n, '0', msg)> ) ]

rule (modulo E) channel_send:
   [ Send( m ) ] --> [ Receivable( m ), Out( m ) ]

rule (modulo E) channel_receive:
   [ Receivable( m ) ] --> [ Recv( m ) ]

restriction at_most_1 [right]:
  "∀ tag #t0 #t1.
    ((Bounded( tag ) @ #t0) ∧ (Bounded( tag ) @ #t1)) ⇒ (#t0 = #t1)"
  // safety formula

restriction at_most_1 [left]:
  "∀ tag #t0 #t1.
    ((Bounded( tag ) @ #t0) ∧ (Bounded( tag ) @ #t1)) ⇒ (#t0 = #t1)"
  // safety formula

rule (modulo E) test_agent_keygen:
   [ Fr( ~a ), Fr( ~b ) ]
  -->
   [
   !TestPk( diff(~a, ~b), diff('g'^~a, 'g'^~b) ), Out( 'g'^~a ),
   Out( 'g'^~b ), !TestAlternatives( (~a+~b) )
   ]

rule (modulo E) test_common:
   [ !TestAlternatives( (~a+~b) ) ]
  -->
   [ !Pk( ~a, 'g'^~a ), !Pk( ~b, 'g'^~b ) ]

rule (modulo E) peer_keygen:
   [ Fr( ~s ) ]
  -->
   [
   !PeerPk( ~s, 'g'^~s ), !Pk( ~s, 'g'^~s ), !TestPk( ~s, 'g'^~s ),
   Out( 'g'^~s )
   ]

rule (modulo E) peer_reveal:
   [ !PeerPk( ~s, 'g'^~s ) ] --> [ Out( ~s ) ]

rule (modulo E) ephemeral_keygen:
   [ Fr( ~e ) ] --[ HonestEk( 'g'^~e ) ]-> [ Ek( ~e ), Out( 'g'^~e ) ]

rule (modulo E) Create_Initiator:
   [ Fr( ~id ), !PeerPk( ~ltk, me ) ]
  --[ Create_Initiator( ), Bounded( 'Initiator' ) ]->
   [ St_Initiator_0( ~id ), Init_Handshake_Initiator( ~id, 'prologue' ) ]

rule (modulo E) Instrumentation_Initiator_1:
   [ St_Initiator_0( ~id ) ]
  -->
   [ St_Initiator_1( ~id ), Handshake_Snd_1( ~id, $msg ) ]

rule (modulo E) Instrumentation_Initiator_2:
   [
   St_Initiator_1( ~id ), MyEk_Initiator( ~id, e ),
   Handshake_Recv_2( ~id, msg )
   ]
  -->
   [ St_Initiator_2( ~id, e ) ]

rule (modulo E) Instrumentation_Initiator_3:
   [
   St_Initiator_2( ~id, e ), PeerEk_Initiator( ~id, re ),
   PeerLtk_Initiator( ~id, peer )
   ]
  -->
   [ St_Initiator_3( ~id, e, re, peer ), I_Snd( ~id, '0', $msg ) ]

rule (modulo E) Instrumentation_Initiator_4:
   [ St_Initiator_3( ~id, e, re, peer ), I_Recv( ~id, '1', msg ) ]
  --[ Finish( ) ]->
   [ St_Initiator_4( ~id, e, re, peer ) ]

rule (modulo E) Create_Responder:
   [ Fr( ~id ), !TestPk( ~ltk, me ) ]
  --[ Create_Responder( ), Bounded( 'Responder' ) ]->
   [
   St_Responder_0( ~id, me ),
   Init_Handshake_Responder( ~id, 'prologue', ~ltk )
   ]

rule (modulo E) Instrumentation_Responder_1:
   [ St_Responder_0( ~id, me ), Handshake_Recv_1( ~id, msg ) ]
  -->
   [ St_Responder_1( ~id, me ) ]

rule (modulo E) Instrumentation_Responder_2:
   [ St_Responder_1( ~id, me ), PeerEk_Responder( ~id, re ) ]
  -->
   [ St_Responder_2( ~id, me, re ), Handshake_Snd_2( ~id, $msg ) ]

rule (modulo E) Instrumentation_Responder_3:
   [
   St_Responder_2( ~id, me, re ), MyEk_Responder( ~id, e ),
   R_Recv( ~id, '0', msg )
   ]
  -->
   [ St_Responder_3( ~id, e, me, re ) ]

rule (modulo E) Instrumentation_Responder_4:
   [ St_Responder_3( ~id, e, me, re ) ]
  -->
   [ St_Responder_4( ~id, e, me, re ), R_Snd( ~id, '1', $msg ) ]

lemma executabilityPassiveAdv [right]:
  exists-trace
  "(∃ #i. Finish( ) @ #i) ∧
   ((∀ id m #j.
      (RawRecv( id, m ) @ #j) ⇒ (∃ #k. (RawSnd( id, m ) @ #k) ∧ (#k < #j))) ∧
    ((∀ id m m2 #a #b.
       ((RawSnd( id, m ) @ #a) ∧ (RawSnd( id, m2 ) @ #b)) ⇒ (#a = #b)) ∧
     ((∀ #a #b.
        ((Create_Initiator( ) @ #a) ∧ (Create_Initiator( ) @ #b)) ⇒ (#a = #b)) ∧
      (∀ #a #b.
        ((Create_Responder( ) @ #a) ∧ (Create_Responder( ) @ #b)) ⇒
        (#a = #b)))))"
/*
guarded formula characterizing all satisfying traces:
"(∃ #i. (Finish( ) @ #i)) ∧
 (∀ id m #j.
   (RawRecv( id, m ) @ #j) ⇒ ∃ #k. (RawSnd( id, m ) @ #k) ∧ #k < #j) ∧
 (∀ id m m2 #a #b.
   (RawSnd( id, m ) @ #a) ∧ (RawSnd( id, m2 ) @ #b) ⇒ #a = #b) ∧
 (∀ #a #b.
   (Create_Initiator( ) @ #a) ∧ (Create_Initiator( ) @ #b) ⇒ #a = #b) ∧
 (∀ #a #b.
   (Create_Responder( ) @ #a) ∧ (Create_Responder( ) @ #b) ⇒ #a = #b)"
*/
simplify
solve( St_Initiator_3( ~id, e, re, peer ) ▶₀ #i )
  case Instrumentation_Initiator_3
  solve( I_Recv( ~id, '1', msg ) ▶₁ #i )
    case I_Recv_from_R
    solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.2 )
      case peer_keygen
      solve( RawSnd( <'R', '1'>,
                     <'1', 
                      aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '1', '0',
                           msg)
                     >
             ) @ #k.1 )
        case R_Snd_to_I
        solve( R_Snd( id.1, '1', msg ) ▶₀ #k )
          case Instrumentation_Responder_4_case_2
          solve( !Transport_Responder( ~id.1, ki2r,
                                       kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>))
                 ) ▶₁ #k )
            case Responder_to_transport_mode
            solve( Receivable( <'1', 
                                aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~e0)>), 'g'^(~e*~rs4)>)), '1', '0',
                                     $msg)
                               >
                   ) ▶₀ #vr.11 )
              case channel_send
              solve( RawSnd( <'I', '0'>,
                             <'0', 
                              aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~e0)>), 'g'^(~e*~rs4)>)), '0', '0',
                                   msg.6)
                             >
                     ) @ #k.2 )
                case I_Snd_to_R
                solve( I_Snd( id.2, '0', msg.5 ) ▶₀ #k.2 )
                  case Instrumentation_Initiator_3
                  solve( !Transport_Initiator( ~id,
                                               kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~e0)>), 'g'^(~e*~rs4)>)), kr2i
                         ) ▶₁ #k.2 )
                    case Initiator_to_transport_mode
                    solve( Receivable( <'0', 
                                        aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~e0)>), 'g'^(~e*~rs4)>)), '0',
                                             '0', $msg.1)
                                       >
                           ) ▶₀ #vr.21 )
                      case channel_send
                      solve( RawSnd( 'Responder2',
                                     <'g'^~e0, 
                                      aead(kdf2(<'NX', 'g'^(~e*~e0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.5>), 'g'^~e0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~e0)>), 'g'^(~e*~rs4)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.5>), 'g'^~e0>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~e0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.5>), 'g'^~e0
                                                     >),
                                                   'g'^~rs4)
                                             >),
                                           msg.4)
                                     >
                             ) @ #k.1 )
                        case Handshake_Responder_Snd_2
                        solve( Receivable( <'g'^~e0, 
                                            aead(kdf2(<'NX', 'g'^(~e*~e0)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~e0
                                                   >),
                                                 'g'^~rs4), 
                                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~e0)>), 'g'^(~e*~rs4)>), '0',
                                                 h(<
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 
                                                       'g'^~e0>), 
                                                    aead(kdf2(<'NX', 'g'^(~e*~e0)>), '0',
                                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 
                                                            'g'^~e0>),
                                                         'g'^~rs4)
                                                   >),
                                                 $msg.3)
                                           >
                               ) ▶₀ #vr.5 )
                          case channel_send
                          solve( Receivable( <'g'^~e, $msg.2> ) ▶₀ #vr.25 )
                            case channel_send
                            solve( RawSnd( 'Initiator1', <'g'^~e, $msg.2> ) @ #vr.4 )
                              case Handshake_Initiator_Snd_1
                              SOLVED // trace found
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma executabilityPassiveAdv [left]:
  exists-trace
  "(∃ #i. Finish( ) @ #i) ∧
   ((∀ id m #j.
      (RawRecv( id, m ) @ #j) ⇒ (∃ #k. (RawSnd( id, m ) @ #k) ∧ (#k < #j))) ∧
    ((∀ id m m2 #a #b.
       ((RawSnd( id, m ) @ #a) ∧ (RawSnd( id, m2 ) @ #b)) ⇒ (#a = #b)) ∧
     ((∀ #a #b.
        ((Create_Initiator( ) @ #a) ∧ (Create_Initiator( ) @ #b)) ⇒ (#a = #b)) ∧
      (∀ #a #b.
        ((Create_Responder( ) @ #a) ∧ (Create_Responder( ) @ #b)) ⇒
        (#a = #b)))))"
/*
guarded formula characterizing all satisfying traces:
"(∃ #i. (Finish( ) @ #i)) ∧
 (∀ id m #j.
   (RawRecv( id, m ) @ #j) ⇒ ∃ #k. (RawSnd( id, m ) @ #k) ∧ #k < #j) ∧
 (∀ id m m2 #a #b.
   (RawSnd( id, m ) @ #a) ∧ (RawSnd( id, m2 ) @ #b) ⇒ #a = #b) ∧
 (∀ #a #b.
   (Create_Initiator( ) @ #a) ∧ (Create_Initiator( ) @ #b) ⇒ #a = #b) ∧
 (∀ #a #b.
   (Create_Responder( ) @ #a) ∧ (Create_Responder( ) @ #b) ⇒ #a = #b)"
*/
simplify
solve( St_Initiator_3( ~id, e, re, peer ) ▶₀ #i )
  case Instrumentation_Initiator_3
  solve( I_Recv( ~id, '1', msg ) ▶₁ #i )
    case I_Recv_from_R
    solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.2 )
      case peer_keygen
      solve( RawSnd( <'R', '1'>,
                     <'1', 
                      aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '1', '0',
                           msg)
                     >
             ) @ #k.1 )
        case R_Snd_to_I
        solve( R_Snd( id.1, '1', msg ) ▶₀ #k )
          case Instrumentation_Responder_4_case_2
          solve( !Transport_Responder( ~id.1, ki2r,
                                       kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>))
                 ) ▶₁ #k )
            case Responder_to_transport_mode
            solve( Receivable( <'1', 
                                aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~e0)>), 'g'^(~e*~rs4)>)), '1', '0',
                                     $msg)
                               >
                   ) ▶₀ #vr.11 )
              case channel_send
              solve( RawSnd( <'I', '0'>,
                             <'0', 
                              aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~e0)>), 'g'^(~e*~rs4)>)), '0', '0',
                                   msg.6)
                             >
                     ) @ #k.2 )
                case I_Snd_to_R
                solve( I_Snd( id.2, '0', msg.5 ) ▶₀ #k.2 )
                  case Instrumentation_Initiator_3
                  solve( !Transport_Initiator( ~id,
                                               kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~e0)>), 'g'^(~e*~rs4)>)), kr2i
                         ) ▶₁ #k.2 )
                    case Initiator_to_transport_mode
                    solve( Receivable( <'0', 
                                        aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~e0)>), 'g'^(~e*~rs4)>)), '0',
                                             '0', $msg.1)
                                       >
                           ) ▶₀ #vr.21 )
                      case channel_send
                      solve( RawSnd( 'Responder2',
                                     <'g'^~e0, 
                                      aead(kdf2(<'NX', 'g'^(~e*~e0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.5>), 'g'^~e0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~e0)>), 'g'^(~e*~rs4)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.5>), 'g'^~e0>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~e0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.5>), 'g'^~e0
                                                     >),
                                                   'g'^~rs4)
                                             >),
                                           msg.4)
                                     >
                             ) @ #k.1 )
                        case Handshake_Responder_Snd_2
                        solve( Receivable( <'g'^~e0, 
                                            aead(kdf2(<'NX', 'g'^(~e*~e0)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~e0
                                                   >),
                                                 'g'^~rs4), 
                                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~e0)>), 'g'^(~e*~rs4)>), '0',
                                                 h(<
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 
                                                       'g'^~e0>), 
                                                    aead(kdf2(<'NX', 'g'^(~e*~e0)>), '0',
                                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 
                                                            'g'^~e0>),
                                                         'g'^~rs4)
                                                   >),
                                                 $msg.3)
                                           >
                               ) ▶₀ #vr.5 )
                          case channel_send
                          solve( Receivable( <'g'^~e, $msg.2> ) ▶₀ #vr.25 )
                            case channel_send
                            solve( RawSnd( 'Initiator1', <'g'^~e, $msg.2> ) @ #vr.4 )
                              case Handshake_Initiator_Snd_1
                              SOLVED // trace found
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All wellformedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Create_Initiator
  backward-search
    case LHS
    step( simplify )
    step( solve( !PeerPk( ~ltk, me ) ▶₁ #i ) )
      case peer_keygen
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( !PeerPk( ~ltk, me ) ▶₁ #i ) )
      case peer_keygen
      MIRRORED
    qed
  qed
next
  case Rule_Create_Responder
  backward-search
    case LHS
    step( simplify )
    step( solve( !TestPk( ~ltk, me ) ▶₁ #i ) )
      case peer_keygen
      MIRRORED
    next
      case test_agent_keygen
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( !TestPk( ~ltk, me ) ▶₁ #i ) )
      case peer_keygen
      MIRRORED
    next
      case test_agent_keygen
      MIRRORED
    qed
  qed
next
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case channel_send
      step( solve( Send( t ) ▶₀ #vr ) )
        case Handshake_Initiator_Snd_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( contradiction /* impossible chain */ )
        next
          case pair
          MIRRORED
        qed
      next
        case Handshake_Responder_Snd_2_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pair
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case pair
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
            case channel_send
            MIRRORED
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pair
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case pair
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
            case channel_send
            MIRRORED
          qed
        qed
      next
        case I_Snd_to_R
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
            case peer_keygen
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.2)
                                     >
                         ) ▶₀ #vr.8 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.20 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_1
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.2)
                                     >
                         ) ▶₀ #vr.8 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.21 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_2
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg.2)
                                        >
                            ) ▶₀ #vr.8 ) )
          next
            case test_common_case_3
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg.2)
                                        >
                            ) ▶₀ #vr.8 ) )
          next
            case test_common_case_4
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.2)
                                     >
                         ) ▶₀ #vr.8 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.21 ) )
                case channel_send
                MIRRORED
              qed
            qed
          qed
        qed
      next
        case R_Snd_to_I_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( Receivable( <'0', 
                                    aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                         msg.2)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.21 ) )
              case test_common_case_1
              step( solve( Receivable( <'g'^~e, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                        'g'^~e>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.24 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            next
              case test_common_case_2
              step( solve( Receivable( <'g'^~e, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                        'g'^~e>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.24 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case R_Snd_to_I_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( Receivable( <'0', 
                                    aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                         msg.2)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.21 ) )
              case peer_keygen
              step( solve( Receivable( <'g'^~e, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                        'g'^~e>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.24 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case ephemeral_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_reveal
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_1
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_2
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case channel_send
      step( solve( Send( t ) ▶₀ #vr ) )
        case Handshake_Initiator_Snd_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( contradiction /* impossible chain */ )
        next
          case pair
          MIRRORED
        qed
      next
        case Handshake_Responder_Snd_2_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pair
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case pair
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
            case channel_send
            MIRRORED
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pair
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case pair
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
            case channel_send
            MIRRORED
          qed
        qed
      next
        case I_Snd_to_R
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
            case peer_keygen
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.2)
                                     >
                         ) ▶₀ #vr.8 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.20 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_1
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg.2)
                                        >
                            ) ▶₀ #vr.8 ) )
          next
            case test_common_case_2
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.2)
                                     >
                         ) ▶₀ #vr.8 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.21 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_3
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.2)
                                     >
                         ) ▶₀ #vr.8 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.21 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_4
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg.2)
                                        >
                            ) ▶₀ #vr.8 ) )
          qed
        qed
      next
        case R_Snd_to_I_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( Receivable( <'0', 
                                    aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                         msg.2)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.21 ) )
              case test_common_case_1
              step( solve( Receivable( <'g'^~e, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                        'g'^~e>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.24 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            next
              case test_common_case_2
              step( solve( Receivable( <'g'^~e, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                        'g'^~e>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.24 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case R_Snd_to_I_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( Receivable( <'0', 
                                    aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                         msg.2)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.21 ) )
              case peer_keygen
              step( solve( Receivable( <'g'^~e, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                        'g'^~e>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.24 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case ephemeral_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_reveal
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_1
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_2
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case channel_send
      step( solve( Send( t ) ▶₀ #vr ) )
        case Handshake_Initiator_Snd_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( contradiction /* impossible chain */ )
        next
          case pair
          MIRRORED
        qed
      next
        case Handshake_Responder_Snd_2_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pair
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case pair
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
            case channel_send
            MIRRORED
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pair
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case pair
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
            case channel_send
            MIRRORED
          qed
        qed
      next
        case I_Snd_to_R
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
            case peer_keygen
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.2)
                                     >
                         ) ▶₀ #vr.8 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.20 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_1
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.2)
                                     >
                         ) ▶₀ #vr.8 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.21 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_2
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg.2)
                                        >
                            ) ▶₀ #vr.8 ) )
          next
            case test_common_case_3
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg.2)
                                        >
                            ) ▶₀ #vr.8 ) )
          next
            case test_common_case_4
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.2)
                                     >
                         ) ▶₀ #vr.8 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.21 ) )
                case channel_send
                MIRRORED
              qed
            qed
          qed
        qed
      next
        case R_Snd_to_I_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( Receivable( <'0', 
                                    aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                         msg.2)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.21 ) )
              case test_common_case_1
              step( solve( Receivable( <'g'^~e, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                        'g'^~e>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.24 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            next
              case test_common_case_2
              step( solve( Receivable( <'g'^~e, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                        'g'^~e>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.24 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case R_Snd_to_I_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( Receivable( <'0', 
                                    aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                         msg.2)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.21 ) )
              case peer_keygen
              step( solve( Receivable( <'g'^~e, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                        'g'^~e>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.24 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case ephemeral_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_reveal
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_1
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_2
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case channel_send
      step( solve( Send( t ) ▶₀ #vr ) )
        case Handshake_Initiator_Snd_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( contradiction /* impossible chain */ )
        next
          case pair
          MIRRORED
        qed
      next
        case Handshake_Responder_Snd_2_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pair
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case pair
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
            case channel_send
            MIRRORED
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pair
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case pair
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
            case channel_send
            MIRRORED
          qed
        qed
      next
        case I_Snd_to_R
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
            case peer_keygen
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.2)
                                     >
                         ) ▶₀ #vr.8 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.20 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_1
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg.2)
                                        >
                            ) ▶₀ #vr.8 ) )
          next
            case test_common_case_2
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.2)
                                     >
                         ) ▶₀ #vr.8 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.21 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_3
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.2)
                                     >
                         ) ▶₀ #vr.8 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.21 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_4
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg.2)
                                        >
                            ) ▶₀ #vr.8 ) )
          qed
        qed
      next
        case R_Snd_to_I_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( Receivable( <'0', 
                                    aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                         msg.2)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.21 ) )
              case test_common_case_1
              step( solve( Receivable( <'g'^~e, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                        'g'^~e>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.24 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            next
              case test_common_case_2
              step( solve( Receivable( <'g'^~e, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                        'g'^~e>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.24 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case R_Snd_to_I_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pair
          step( solve( Receivable( <'0', 
                                    aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                         msg.2)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.21 ) )
              case peer_keygen
              step( solve( Receivable( <'g'^~e, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                        'g'^~e>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.24 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case ephemeral_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_reveal
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_1
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_2
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_2_decrypt
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( aead(k, n, a, p) ) ▶₀ #i ) )
      case channel_send
      step( solve( Send( t ) ▶₀ #vr ) )
        case Handshake_Initiator_Snd_1
        by step( contradiction /* impossible chain */ )
      next
        case Handshake_Responder_Snd_2_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.4 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.5 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.5 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.4 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.7 ) )
                    case fresh
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case peer_reveal
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  qed
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~s ) @ #vk.5 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~s ) @ #vk.5 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.7 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( solve( !KU( ~re ) @ #vk.7 ) )
                next
                  case ephemeral_keygen
                  by step( solve( !KU( ~s ) @ #vk.5 ) )
                next
                  case peer_keygen
                  by step( solve( !KU( ~s ) @ #vk.5 ) )
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.5 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~s ) @ #vk.5 ) )
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~s ) @ #vk.5 ) )
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.4 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.5 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.5 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.4 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.7 ) )
                    case fresh
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case channel_send_case_1
                  step( solve( !KU( ~s ) @ #vk.5 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_2
                  step( solve( !KU( ~s ) @ #vk.5 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~e0)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~e0) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.7 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  step( solve( !KU( ~re ) @ #vk.7 ) )
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case ephemeral_keygen
                  step( solve( !KU( ~s ) @ #vk.5 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      next
                        case channel_send_case_3
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.5 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send_case_1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.5 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( ~re ) @ #vk.9 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( ~re ) @ #vk.9 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~s ) @ #vk.5 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.5 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case I_Snd_to_R
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
            case aead
            step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
              case peer_keygen
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_4
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_5
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_6
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_2
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_4
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_5
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_6
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_2
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_1
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_2
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_3
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_4
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            qed
          next
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case R_Snd_to_I_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case aead
            step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                         ) @ #vk ) )
              case c_kdf2
              step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.2 ) )
                case c_kdf1
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.5 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  next
                    case peer_reveal
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  qed
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( solve( !KU( ~re ) @ #vk.9 ) )
                next
                  case ephemeral_keygen
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case peer_keygen
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                qed
              qed
            qed
          next
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case R_Snd_to_I_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case aead
            step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                         ) @ #vk ) )
              case c_kdf2
              step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.2 ) )
                case c_kdf1
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.5 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case channel_send_case_1
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_2
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~e)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~e) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~re)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~re)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case ephemeral_keygen
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      next
                        case channel_send_case_3
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( ~re ) @ #vk.10 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( ~re ) @ #vk.10 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case ephemeral_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_reveal
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_1
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_2
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( aead(k, n, a, p) ) ▶₀ #i ) )
      case channel_send
      step( solve( Send( t ) ▶₀ #vr ) )
        case Handshake_Initiator_Snd_1
        by step( contradiction /* impossible chain */ )
      next
        case Handshake_Responder_Snd_2_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.4 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.5 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.5 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.4 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.7 ) )
                    case fresh
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case peer_reveal
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  qed
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~s ) @ #vk.5 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~s ) @ #vk.5 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.7 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( solve( !KU( ~re ) @ #vk.7 ) )
                next
                  case ephemeral_keygen
                  by step( solve( !KU( ~s ) @ #vk.5 ) )
                next
                  case peer_keygen
                  by step( solve( !KU( ~s ) @ #vk.5 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~s ) @ #vk.5 ) )
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.5 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~s ) @ #vk.5 ) )
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.4 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.5 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.5 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.4 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.7 ) )
                    case fresh
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case channel_send_case_1
                  step( solve( !KU( ~s ) @ #vk.5 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_2
                  step( solve( !KU( ~s ) @ #vk.5 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~e0)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~e0) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.7 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  step( solve( !KU( ~re ) @ #vk.7 ) )
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case ephemeral_keygen
                  step( solve( !KU( ~s ) @ #vk.5 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      next
                        case channel_send_case_3
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.5 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send_case_1
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.5 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( ~re ) @ #vk.9 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( ~re ) @ #vk.9 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~s ) @ #vk.5 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.5 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.8 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.9 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case I_Snd_to_R
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
            case aead
            step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
              case peer_keygen
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_4
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_5
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_6
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_2
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_4
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_5
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_6
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_2
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_1
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_2
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_3
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_4
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            qed
          next
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case R_Snd_to_I_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case aead
            step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                         ) @ #vk ) )
              case c_kdf2
              step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.2 ) )
                case c_kdf1
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.5 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  next
                    case peer_reveal
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  qed
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( solve( !KU( ~re ) @ #vk.9 ) )
                next
                  case ephemeral_keygen
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case peer_keygen
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                qed
              qed
            qed
          next
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case R_Snd_to_I_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case aead
            step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                         ) @ #vk ) )
              case c_kdf2
              step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.2 ) )
                case c_kdf1
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.5 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case channel_send_case_1
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_2
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~e)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~e) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~re)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~re)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case ephemeral_keygen
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      next
                        case channel_send_case_3
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( ~re ) @ #vk.10 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( ~re ) @ #vk.10 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case ephemeral_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_reveal
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_1
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_2
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_3_verify
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( aead(k, n, a, p) ) ▶₀ #i ) )
      case channel_send
      step( solve( Send( t ) ▶₀ #vr ) )
        case Handshake_Initiator_Snd_1
        by step( contradiction /* impossible chain */ )
      next
        case Handshake_Responder_Snd_2_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.5 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  next
                    case peer_reveal
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  qed
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( solve( !KU( ~re ) @ #vk.8 ) )
                next
                  case ephemeral_keygen
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case peer_keygen
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.5 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case channel_send_case_1
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_2
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~e0)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~e0) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~re)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~re)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~re)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~re)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                    qed
                  qed
                next
                  case ephemeral_keygen
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      next
                        case channel_send_case_3
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( ~re ) @ #vk.10 ) )
                          case peer_reveal
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( ~re ) @ #vk.10 ) )
                          case peer_reveal
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case I_Snd_to_R
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
            case aead
            step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
              case peer_keygen
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_4
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_5
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_6
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_2
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_4
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_5
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_6
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_2
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_1
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_2
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_3
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_4
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            qed
          next
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case R_Snd_to_I_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case aead
            step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                         ) @ #vk ) )
              case c_kdf2
              step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.3 ) )
                case c_kdf1
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.6 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case fresh
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  next
                    case peer_reveal
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  qed
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~s ) @ #vk.7 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~s ) @ #vk.7 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( solve( !KU( ~re ) @ #vk.9 ) )
                next
                  case ephemeral_keygen
                  by step( solve( !KU( ~s ) @ #vk.7 ) )
                next
                  case peer_keygen
                  by step( solve( !KU( ~s ) @ #vk.7 ) )
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.7 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~s ) @ #vk.7 ) )
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~s ) @ #vk.7 ) )
                qed
              qed
            qed
          next
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case R_Snd_to_I_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case aead
            step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                         ) @ #vk ) )
              case c_kdf2
              step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.3 ) )
                case c_kdf1
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.6 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case fresh
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case channel_send_case_1
                  step( solve( !KU( ~s ) @ #vk.7 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_2
                  step( solve( !KU( ~s ) @ #vk.7 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~e)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~e) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~re)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~re)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case ephemeral_keygen
                  step( solve( !KU( ~s ) @ #vk.7 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      next
                        case channel_send_case_3
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.7 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send_case_1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.7 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( ~re ) @ #vk.11 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( ~re ) @ #vk.11 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~s ) @ #vk.7 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.7 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case ephemeral_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_reveal
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_1
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_2
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( aead(k, n, a, p) ) ▶₀ #i ) )
      case channel_send
      step( solve( Send( t ) ▶₀ #vr ) )
        case Handshake_Initiator_Snd_1
        by step( contradiction /* impossible chain */ )
      next
        case Handshake_Responder_Snd_2_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.5 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  next
                    case peer_reveal
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  qed
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( solve( !KU( ~re ) @ #vk.8 ) )
                next
                  case ephemeral_keygen
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case peer_keygen
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~s ) @ #vk.6 ) )
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case aead
              step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.5 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case channel_send_case_1
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_2
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~e0)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~e0) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~re)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~re)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~re)
                                            >)
                                     ) @ #vk.9 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~re)
                                       ) @ #vk.13 ) )
                            case c_aead
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                    qed
                  qed
                next
                  case ephemeral_keygen
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      next
                        case channel_send_case_3
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.6 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.8 ) )
                          case c_h
                          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                       ) @ #vk.12 ) )
                            case c_aead
                            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                              case c_kdf2
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( ~re ) @ #vk.10 ) )
                          case peer_reveal
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( ~re ) @ #vk.10 ) )
                          case peer_reveal
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.6 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.10 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case I_Snd_to_R
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
            case aead
            step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
              case peer_keygen
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_4
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_5
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_6
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_2
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_4
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case channel_send_case_5
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_6
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_2
                          step( solve( !KU( ~re0 ) @ #vk.10 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        next
                          case test_agent_keygen_case_2
                          by step( solve( !KU( ~e ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_1
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_2
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_3
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case test_common_case_4
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.2 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.8 ) )
                  next
                    case channel_send
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.6 ) )
                  qed
                qed
              qed
            qed
          next
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case R_Snd_to_I_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case aead
            step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                         ) @ #vk ) )
              case c_kdf2
              step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.3 ) )
                case c_kdf1
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.6 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case fresh
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  next
                    case peer_reveal
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  qed
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~s ) @ #vk.7 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~s ) @ #vk.7 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( solve( !KU( ~re ) @ #vk.9 ) )
                next
                  case ephemeral_keygen
                  by step( solve( !KU( ~s ) @ #vk.7 ) )
                next
                  case peer_keygen
                  by step( solve( !KU( ~s ) @ #vk.7 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~s ) @ #vk.7 ) )
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.7 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~s ) @ #vk.7 ) )
                qed
              qed
            qed
          next
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case R_Snd_to_I_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
            case aead
            step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                         ) @ #vk ) )
              case c_kdf2
              step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.3 ) )
                case c_kdf1
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.6 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case fresh
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case channel_send_case_1
                  step( solve( !KU( ~s ) @ #vk.7 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_2
                  step( solve( !KU( ~s ) @ #vk.7 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~e)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~e) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  step( solve( !KU( ~re ) @ #vk.9 ) )
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.14 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~re)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~re)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case ephemeral_keygen
                  step( solve( !KU( ~s ) @ #vk.7 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      next
                        case channel_send_case_3
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.7 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send_case_1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.7 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( ~re ) @ #vk.11 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( ~re ) @ #vk.11 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~s ) @ #vk.7 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.7 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.11 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e ) @ #vk.11 ) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_2_decrypt
            by step( contradiction /* impossible chain */ )
          next
            case d_3_verify
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case ephemeral_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_reveal
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_1
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_2
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_exp
  backward-search
    case LHS
    step( simplify )
    step( solve( DiffIntrDestrd_exp( ) @ #i ) )
      case d_exp_case_01
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              MIRRORED
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                    case c_kdf2
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case channel_send_case_3
                      step( solve( !KU( ~re ) @ #vk.6 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case channel_send_case_4
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case ephemeral_keygen_case_2
                      step( solve( !KU( ~re ) @ #vk.6 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case test_agent_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case test_agent_keygen_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    qed
                  qed
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                    case c_kdf2
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case channel_send_case_3
                      step( solve( !KU( ~re ) @ #vk.6 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case channel_send_case_4
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case ephemeral_keygen_case_2
                      step( solve( !KU( ~re ) @ #vk.6 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case test_agent_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case test_agent_keygen_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    qed
                  qed
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          MIRRORED
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          MIRRORED
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          MIRRORED
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          MIRRORED
        qed
      qed
    next
      case d_exp_case_02
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_03
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_04
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_05
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_06
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_07
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_08
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_09
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_10
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_11
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_12
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_13
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_14
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_15
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_16
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_17
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_18
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_19
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_20
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_21
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_22
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_23
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_24
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_25
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_26
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_27
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_28
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_29
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_30
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_31
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_32
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_33
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_34
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_35
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_36
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_37
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_38
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_39
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_40
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_41
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_42
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_43
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_44
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_45
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( DiffIntrDestrd_exp( ) @ #i ) )
      case d_exp_case_01
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              MIRRORED
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                    case c_kdf2
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case channel_send_case_3
                      step( solve( !KU( ~re ) @ #vk.6 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case channel_send_case_4
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case ephemeral_keygen_case_2
                      step( solve( !KU( ~re ) @ #vk.6 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case test_agent_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case test_agent_keygen_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    qed
                  qed
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                    case c_kdf2
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case channel_send_case_3
                      step( solve( !KU( ~re ) @ #vk.6 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case channel_send_case_4
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case ephemeral_keygen_case_2
                      step( solve( !KU( ~re ) @ #vk.6 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case test_agent_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    next
                      case test_agent_keygen_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                    qed
                  qed
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          MIRRORED
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          MIRRORED
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          MIRRORED
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          MIRRORED
        qed
      qed
    next
      case d_exp_case_02
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_03
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_04
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_05
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_06
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_07
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_08
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_09
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_10
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_11
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_12
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_13
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case exp
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case exp
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_14
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_15
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_16
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_17
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_18
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_19
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_20
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_21
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_22
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_23
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_24
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_25
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_26
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_27
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_28
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_29
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_30
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_31
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_32
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_33
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_34
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_35
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_36
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_37
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_38
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_39
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_40
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_41
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_42
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_43
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_44
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    next
      case d_exp_case_45
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case channel_send
        step( solve( Send( t ) ▶₀ #vr ) )
          case Handshake_Initiator_Snd_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            by step( contradiction /* impossible chain */ )
          qed
        next
          case Handshake_Responder_Snd_2_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case Handshake_Responder_Snd_2_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                  case d_exp_case_1
                  by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                next
                  case d_exp_case_2
                  by step( contradiction /* impossible chain */ )
                next
                  case d_exp_case_3
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_4
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                next
                  case d_exp_case_5
                  by step( contradiction /* non-normal exponentiation rule instance */ )
                qed
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_snd
              step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                case d_2_decrypt
                by step( contradiction /* impossible chain */ )
              next
                case d_3_verify
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case I_Snd_to_R
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case R_Snd_to_I_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.16, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ephemeral_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_keygen
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case peer_reveal
        by step( contradiction /* impossible chain */ )
      next
        case test_agent_keygen_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      next
        case test_agent_keygen_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_exp_case_1
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        next
          case d_exp_case_2
          by step( contradiction /* impossible chain */ )
        next
          case d_exp_case_3
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_4
          by step( contradiction /* non-normal exponentiation rule instance */ )
        next
          case d_exp_case_5
          by step( contradiction /* non-normal exponentiation rule instance */ )
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_inv
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( inv(x) ) ▶₀ #i ) )
      case channel_send
      step( solve( Send( t ) ▶₀ #vr ) )
        case Handshake_Initiator_Snd_1
        by step( contradiction /* impossible chain */ )
      next
        case Handshake_Responder_Snd_2_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case I_Snd_to_R
        by step( contradiction /* impossible chain */ )
      next
        case R_Snd_to_I_case_1
        by step( contradiction /* impossible chain */ )
      next
        case R_Snd_to_I_case_2
        by step( contradiction /* impossible chain */ )
      qed
    next
      case ephemeral_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_reveal
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_1
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_2
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( inv(x) ) ▶₀ #i ) )
      case channel_send
      step( solve( Send( t ) ▶₀ #vr ) )
        case Handshake_Initiator_Snd_1
        by step( contradiction /* impossible chain */ )
      next
        case Handshake_Responder_Snd_2_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case I_Snd_to_R
        by step( contradiction /* impossible chain */ )
      next
        case R_Snd_to_I_case_1
        by step( contradiction /* impossible chain */ )
      next
        case R_Snd_to_I_case_2
        by step( contradiction /* impossible chain */ )
      qed
    next
      case ephemeral_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_reveal
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_1
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_2
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_union
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case channel_send
      step( solve( Send( t ) ▶₀ #vr ) )
        case Handshake_Initiator_Snd_1
        by step( contradiction /* impossible chain */ )
      next
        case Handshake_Responder_Snd_2_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case I_Snd_to_R
        by step( contradiction /* impossible chain */ )
      next
        case R_Snd_to_I_case_1
        by step( contradiction /* impossible chain */ )
      next
        case R_Snd_to_I_case_2
        by step( contradiction /* impossible chain */ )
      qed
    next
      case ephemeral_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_reveal
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_1
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_2
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case channel_send
      step( solve( Send( t ) ▶₀ #vr ) )
        case Handshake_Initiator_Snd_1
        by step( contradiction /* impossible chain */ )
      next
        case Handshake_Responder_Snd_2_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
              case d_2_decrypt
              by step( contradiction /* impossible chain */ )
            next
              case d_3_verify
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case I_Snd_to_R
        by step( contradiction /* impossible chain */ )
      next
        case R_Snd_to_I_case_1
        by step( contradiction /* impossible chain */ )
      next
        case R_Snd_to_I_case_2
        by step( contradiction /* impossible chain */ )
      qed
    next
      case ephemeral_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_keygen
      by step( contradiction /* impossible chain */ )
    next
      case peer_reveal
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_1
      by step( contradiction /* impossible chain */ )
    next
      case test_agent_keygen_case_2
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case channel_send
      step( solve( Send( t ) ▶₀ #vr ) )
        case Handshake_Initiator_Snd_1
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
            case d_exp_case_1
            step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
              case exp
              step( solve( !KU( 'g'^(~e0*x) ) @ #vk ) )
                case c_exp
                by step( solve( !KU( ~e0 ) @ #vk.4 ) )
              next
                case channel_send_case_01
                by step( solve( !KU( ~e0 ) @ #vk.1 ) )
              next
                case channel_send_case_02
                MIRRORED
              next
                case channel_send_case_03
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case channel_send_case_04
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case channel_send_case_05
                by step( solve( !KU( ~e0 ) @ #vk.3 ) )
              next
                case channel_send_case_06
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case channel_send_case_07
                by step( solve( !KU( ~e0 ) @ #vk.3 ) )
              next
                case channel_send_case_08
                by step( solve( !KU( ~e0 ) @ #vk.5 ) )
              next
                case channel_send_case_09
                by step( solve( !KU( ~e0 ) @ #vk.8 ) )
              next
                case channel_send_case_10
                by step( solve( !KU( ~e0 ) @ #vk.5 ) )
              next
                case channel_send_case_11
                by step( solve( !KU( ~e0 ) @ #vk.8 ) )
              next
                case ephemeral_keygen_case_1
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case ephemeral_keygen_case_2
                MIRRORED
              next
                case ephemeral_keygen_case_3
                by step( solve( !KU( ~e0 ) @ #vk.3 ) )
              next
                case peer_keygen_case_1
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case peer_keygen_case_2
                by step( solve( !KU( ~e0 ) @ #vk.3 ) )
              next
                case test_agent_keygen_case_1
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case test_agent_keygen_case_2
                by step( solve( !KU( ~e0 ) @ #vk.3 ) )
              next
                case test_agent_keygen_case_3
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case test_agent_keygen_case_4
                by step( solve( !KU( ~e0 ) @ #vk.3 ) )
              qed
            qed
          next
            case d_exp_case_2
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_3
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_4
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_5
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case exp
            step( solve( !KU( 'g'^~e0 ) @ #vk ) )
              case c_exp
              by step( solve( !KU( ~e0 ) @ #vk.2 ) )
            next
              case channel_send
              MIRRORED
            next
              case ephemeral_keygen
              MIRRORED
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
            case Var_pub_msg
            step( solve( !KU( $msg ) @ #vk ) )
              case coerce
              step( solve( !KD( $msg ) ▶₀ #vk ) )
                case channel_send
                step( solve( Send( t ) ▶₀ #vr.8 ) )
                  case Handshake_Initiator_Snd_1
                  by step( contradiction /* impossible chain */ )
                next
                  case Handshake_Responder_Snd_2_case_1
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.18, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.19, 0) ~~> (#vk, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.19, 0) ~~> (#vk, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Handshake_Responder_Snd_2_case_2
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.18, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.19, 0) ~~> (#vk, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.19, 0) ~~> (#vk, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case I_Snd_to_R
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_1
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case ephemeral_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_reveal
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_1
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_2
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              MIRRORED
            qed
          qed
        next
          case pair
          step( solve( !KU( 'g'^~e0 ) @ #vk.1 ) )
            case c_exp
            by step( solve( !KU( ~e0 ) @ #vk.4 ) )
          next
            case channel_send
            step( solve( !KU( $msg ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( $msg ) ▶₀ #vk.2 ) )
                case channel_send
                step( solve( Send( t ) ▶₀ #vr.8 ) )
                  case Handshake_Initiator_Snd_1
                  by step( contradiction /* impossible chain */ )
                next
                  case Handshake_Responder_Snd_2_case_1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.18, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.19, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.19, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Handshake_Responder_Snd_2_case_2
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.18, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.19, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.19, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case I_Snd_to_R
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_1
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case ephemeral_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_reveal
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_1
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_2
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              MIRRORED
            qed
          next
            case ephemeral_keygen
            step( solve( !KU( $msg ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( $msg ) ▶₀ #vk.2 ) )
                case channel_send
                step( solve( Send( t ) ▶₀ #vr.7 ) )
                  case Handshake_Initiator_Snd_1
                  by step( contradiction /* impossible chain */ )
                next
                  case Handshake_Responder_Snd_2_case_1
                  step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.17, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.18, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.18, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Handshake_Responder_Snd_2_case_2
                  step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.17, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.18, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.18, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case I_Snd_to_R
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_1
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case ephemeral_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_reveal
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_1
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_2
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              MIRRORED
            qed
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_1
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
            case d_exp_case_1
            step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
              case exp
              step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                case channel_send
                step( solve( !KU( 'g'^(~e0*x) ) @ #vk ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.4 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case channel_send_case_3
                  by step( solve( !KU( ~e0 ) @ #vk.1 ) )
                next
                  case channel_send_case_4
                  MIRRORED
                next
                  case channel_send_case_5
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case channel_send_case_6
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case channel_send_case_7
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case ephemeral_keygen_case_2
                  MIRRORED
                next
                  case ephemeral_keygen_case_3
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case peer_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case peer_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case test_agent_keygen_case_4
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                qed
              qed
            qed
          next
            case d_exp_case_2
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_3
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_4
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_5
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case exp
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
              case channel_send
              step( solve( !KU( 'g'^~e0 ) @ #vk ) )
                case c_exp
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case channel_send
                MIRRORED
              next
                case ephemeral_keygen
                MIRRORED
              qed
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
              case aead
              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 'g'^~s)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.7 ) )
                    case c_exp
                    by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case channel_send_case_4
                    by step( contradiction /* cyclic */ )
                  next
                    case ephemeral_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            next
              case d_2_decrypt
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case d_exp_case_1
                step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                  case exp
                  step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                    case c_kdf2
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case channel_send_case_3
                      step( solve( !KU( ~re ) @ #vk.7 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case channel_send_case_4
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case ephemeral_keygen_case_2
                      step( solve( !KU( ~re ) @ #vk.7 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case d_exp_case_2
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.6 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case channel_send_case_4
                    by step( contradiction /* cyclic */ )
                  next
                    case ephemeral_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case ephemeral_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.6 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case d_3_verify
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case true
                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.6 ) )
                    case c_exp
                    by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case channel_send_case_4
                    by step( contradiction /* cyclic */ )
                  next
                    case ephemeral_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case ephemeral_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  qed
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
              case aead
              step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                     '0',
                                     h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                        aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>),
                                             'g'^~s)
                                       >),
                                     $msg)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.7 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      by step( solve( !KU( ~s ) @ #vk.11 ) )
                    next
                      case peer_reveal
                      by step( solve( !KU( ~s ) @ #vk.11 ) )
                    qed
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    by step( solve( !KU( ~re ) @ #vk.10 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case peer_keygen
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_3
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            next
              case d_2_decrypt
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case Var_pub_msg
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.5 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      by step( solve( !KU( ~s ) @ #vk.9 ) )
                    next
                      case peer_reveal
                      by step( solve( !KU( ~s ) @ #vk.9 ) )
                    qed
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~s ) @ #vk.6 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~s ) @ #vk.6 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    by step( solve( !KU( ~re ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~s ) @ #vk.6 ) )
                  next
                    case peer_keygen
                    by step( solve( !KU( ~s ) @ #vk.6 ) )
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.6 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~s ) @ #vk.6 ) )
                  next
                    case test_agent_keygen_case_3
                    by step( solve( !KU( ~s ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case d_3_verify
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case true
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.6 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      by step( solve( !KU( ~s ) @ #vk.10 ) )
                    next
                      case peer_reveal
                      by step( solve( !KU( ~s ) @ #vk.10 ) )
                    qed
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    by step( solve( !KU( ~re ) @ #vk.9 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case peer_keygen
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_3
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  qed
                qed
              qed
            qed
          next
            case pair
            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 'g'^~s)
                         ) @ #vk.1 ) )
              case c_aead
              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.3 ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.10 ) )
                    case fresh
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          by step( solve( !KU( ~s ) @ #vk.19 ) )
                        next
                          case channel_send
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case test_agent_keygen
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          by step( solve( !KU( ~s ) @ #vk.19 ) )
                        next
                          case channel_send
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~s ) @ #vk.17 ) )
                        next
                          case test_agent_keygen
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.10 ) )
                    case fresh
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          by step( solve( !KU( ~s ) @ #vk.19 ) )
                        next
                          case channel_send
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case test_agent_keygen
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          by step( solve( !KU( ~s ) @ #vk.19 ) )
                        next
                          case channel_send
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~s ) @ #vk.17 ) )
                        next
                          case test_agent_keygen
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                qed
              qed
            next
              case channel_send
              step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                     '0',
                                     h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                        aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>),
                                             'g'^~s)
                                       >),
                                     $msg)
                           ) @ #vk.2 ) )
                case c_aead
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.3 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.9 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.12 ) )
                      case fresh
                      by step( solve( !KU( ~s ) @ #vk.13 ) )
                    next
                      case peer_reveal
                      by step( solve( !KU( ~s ) @ #vk.13 ) )
                    qed
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.12 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.14 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.14 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    by step( solve( !KU( ~re ) @ #vk.12 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  next
                    case peer_keygen
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  next
                    case test_agent_keygen_case_3
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        next
          case pair
          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 'g'^~s)
                       ) @ #vk.3 ) )
            case c_aead
            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
              case c_kdf2
              step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                case c_exp
                by step( solve( !KU( ~e0 ) @ #vk.14 ) )
              next
                case channel_send_case_1
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case channel_send_case_2
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case channel_send_case_3
                step( solve( !KU( ~re ) @ #vk.12 ) )
                  case fresh
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        by step( solve( !KU( ~s ) @ #vk.21 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case test_agent_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_reveal
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        by step( solve( !KU( ~s ) @ #vk.21 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~s ) @ #vk.19 ) )
                      next
                        case test_agent_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                qed
              next
                case channel_send_case_4
                by step( contradiction /* cyclic */ )
              next
                case ephemeral_keygen_case_1
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case ephemeral_keygen_case_2
                step( solve( !KU( ~re ) @ #vk.12 ) )
                  case fresh
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        by step( solve( !KU( ~s ) @ #vk.21 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case test_agent_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_reveal
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        by step( solve( !KU( ~s ) @ #vk.21 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~s ) @ #vk.19 ) )
                      next
                        case test_agent_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                qed
              next
                case peer_keygen
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case test_agent_keygen_case_1
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case test_agent_keygen_case_2
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              qed
            qed
          next
            case channel_send
            step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                   '0',
                                   h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>),
                                           'g'^~s)
                                     >),
                                   $msg)
                         ) @ #vk.4 ) )
              case c_aead
              step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.5 ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.11 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.14 ) )
                    case fresh
                    by step( solve( !KU( ~s ) @ #vk.15 ) )
                  next
                    case peer_reveal
                    by step( solve( !KU( ~s ) @ #vk.15 ) )
                  qed
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~s ) @ #vk.12 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~s ) @ #vk.12 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.14 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.16 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.19 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.16 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.19 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( solve( !KU( ~re ) @ #vk.14 ) )
                next
                  case ephemeral_keygen
                  by step( solve( !KU( ~s ) @ #vk.12 ) )
                next
                  case peer_keygen
                  by step( solve( !KU( ~s ) @ #vk.12 ) )
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.12 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~s ) @ #vk.12 ) )
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~s ) @ #vk.12 ) )
                qed
              qed
            next
              case channel_send
              step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                case channel_send
                step( solve( !KU( 'g'^~e0 ) @ #vk.4 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case channel_send
                  MIRRORED
                next
                  case ephemeral_keygen
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_2
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
            case d_exp_case_1
            step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
              case exp
              step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                case channel_send
                step( solve( !KU( 'g'^(~e0*x) ) @ #vk ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.4 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case channel_send_case_3
                  by step( solve( !KU( ~e0 ) @ #vk.1 ) )
                next
                  case channel_send_case_4
                  MIRRORED
                next
                  case channel_send_case_5
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case channel_send_case_6
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case channel_send_case_7
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case ephemeral_keygen_case_2
                  MIRRORED
                next
                  case ephemeral_keygen_case_3
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case peer_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case peer_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case test_agent_keygen_case_4
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                qed
              qed
            qed
          next
            case d_exp_case_2
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_3
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_4
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_5
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case exp
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
              case channel_send
              step( solve( !KU( 'g'^~e0 ) @ #vk ) )
                case c_exp
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case channel_send
                MIRRORED
              next
                case ephemeral_keygen
                MIRRORED
              qed
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
              case aead
              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 'g'^~s)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.7 ) )
                    case c_exp
                    by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case channel_send_case_4
                    by step( contradiction /* cyclic */ )
                  next
                    case ephemeral_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            next
              case d_2_decrypt
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case d_exp_case_1
                step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                  case exp
                  step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                    case c_kdf2
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case channel_send_case_3
                      step( solve( !KU( ~re ) @ #vk.7 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case channel_send_case_4
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case ephemeral_keygen_case_2
                      step( solve( !KU( ~re ) @ #vk.7 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case d_exp_case_2
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.6 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case channel_send_case_4
                    by step( contradiction /* cyclic */ )
                  next
                    case ephemeral_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case ephemeral_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.6 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case d_3_verify
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case true
                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.6 ) )
                    case c_exp
                    by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case channel_send_case_4
                    by step( contradiction /* cyclic */ )
                  next
                    case ephemeral_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case ephemeral_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  qed
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
              case aead
              step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                     '0',
                                     h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                        aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>),
                                             'g'^~s)
                                       >),
                                     $msg)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.7 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( ~s ) @ #vk.11 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.14 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                          next
                            case channel_send
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.17 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          next
                            case ephemeral_keygen
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.17 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( ~s ) @ #vk.11 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.14 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                          next
                            case channel_send_case_1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.17 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          next
                            case channel_send_case_2
                            by step( contradiction /* cyclic */ )
                          next
                            case ephemeral_keygen
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.17 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~e0)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~e0) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~re)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~re)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( ~re ) @ #vk.12 ) )
                            case peer_reveal
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.10 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.15 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( ~re ) @ #vk.12 ) )
                            case peer_reveal
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.10 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.15 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            next
              case d_2_decrypt
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case Var_pub_msg
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.5 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      step( solve( !KU( ~s ) @ #vk.9 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( ~s ) @ #vk.9 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                          next
                            case channel_send_case_1
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send_case_2
                            by step( contradiction /* cyclic */ )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~s ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    step( solve( !KU( ~s ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~e0)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~e0) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      qed
                    qed
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~s ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.6 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( ~re ) @ #vk.10 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( ~re ) @ #vk.10 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~s ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case d_3_verify
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case true
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.6 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      step( solve( !KU( ~s ) @ #vk.10 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                          next
                            case channel_send
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.16 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.17 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          next
                            case ephemeral_keygen
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.16 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.17 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( ~s ) @ #vk.10 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                          next
                            case channel_send_case_1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.16 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.17 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          next
                            case channel_send_case_2
                            by step( contradiction /* cyclic */ )
                          next
                            case ephemeral_keygen
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.16 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.17 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~e0)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~e0) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~re)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~re)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      qed
                    qed
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( ~re ) @ #vk.11 ) )
                            case peer_reveal
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.10 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.14 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( ~re ) @ #vk.11 ) )
                            case peer_reveal
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.10 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.14 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case pair
            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 'g'^~s)
                         ) @ #vk.1 ) )
              case c_aead
              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.3 ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.10 ) )
                    case fresh
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          step( solve( !KU( ~s ) @ #vk.19 ) )
                            case peer_reveal
                            step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                              case c_kdf1
                              step( solve( !KU( h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                           'g'^~e0>),
                                                        'g'^~s)
                                                  >)
                                           ) @ #vk.17 ) )
                                case c_h
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case channel_send
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          step( solve( !KU( ~s ) @ #vk.19 ) )
                            case peer_reveal
                            step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                              case c_kdf1
                              step( solve( !KU( h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                           'g'^~e0>),
                                                        'g'^~s)
                                                  >)
                                           ) @ #vk.17 ) )
                                case c_h
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case channel_send_case_1
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case channel_send_case_2
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~re)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen_case_1
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen_case_2
                          step( solve( !KU( ~s ) @ #vk.17 ) )
                            case peer_reveal
                            step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.17 ) )
                              case c_kdf1
                              step( solve( !KU( h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                           'g'^~e0>),
                                                        'g'^~s)
                                                  >)
                                           ) @ #vk.16 ) )
                                case c_h
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.10 ) )
                    case fresh
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          step( solve( !KU( ~s ) @ #vk.19 ) )
                            case peer_reveal
                            step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                              case c_kdf1
                              step( solve( !KU( h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                           'g'^~e0>),
                                                        'g'^~s)
                                                  >)
                                           ) @ #vk.17 ) )
                                case c_h
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case channel_send
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          step( solve( !KU( ~s ) @ #vk.19 ) )
                            case peer_reveal
                            step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                              case c_kdf1
                              step( solve( !KU( h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                           'g'^~e0>),
                                                        'g'^~s)
                                                  >)
                                           ) @ #vk.17 ) )
                                case c_h
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case channel_send_case_1
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case channel_send_case_2
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~re)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen_case_1
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen_case_2
                          step( solve( !KU( ~s ) @ #vk.17 ) )
                            case peer_reveal
                            step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.17 ) )
                              case c_kdf1
                              step( solve( !KU( h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                           'g'^~e0>),
                                                        'g'^~s)
                                                  >)
                                           ) @ #vk.16 ) )
                                case c_h
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                qed
              qed
            next
              case channel_send
              step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                     '0',
                                     h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                        aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>),
                                             'g'^~s)
                                       >),
                                     $msg)
                           ) @ #vk.2 ) )
                case c_aead
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.3 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.9 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.12 ) )
                      case fresh
                      step( solve( !KU( ~s ) @ #vk.13 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.16 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                          next
                            case channel_send
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.13 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case ephemeral_keygen
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.13 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( ~s ) @ #vk.13 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.16 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                          next
                            case channel_send_case_1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.13 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send_case_2
                            by step( contradiction /* cyclic */ )
                          next
                            case ephemeral_keygen
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.13 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~e0)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~e0) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.12 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.14 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.14 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    step( solve( !KU( ~re ) @ #vk.12 ) )
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.14 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      qed
                    qed
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( ~re ) @ #vk.14 ) )
                            case peer_reveal
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.12 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( ~re ) @ #vk.14 ) )
                            case peer_reveal
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.12 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        next
          case pair
          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 'g'^~s)
                       ) @ #vk.3 ) )
            case c_aead
            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
              case c_kdf2
              step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                case c_exp
                by step( solve( !KU( ~e0 ) @ #vk.14 ) )
              next
                case channel_send_case_1
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case channel_send_case_2
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case channel_send_case_3
                step( solve( !KU( ~re ) @ #vk.12 ) )
                  case fresh
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        step( solve( !KU( ~s ) @ #vk.21 ) )
                          case peer_reveal
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.20 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.19 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_reveal
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        step( solve( !KU( ~s ) @ #vk.21 ) )
                          case peer_reveal
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.20 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.19 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case channel_send_case_2
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen_case_2
                        step( solve( !KU( ~s ) @ #vk.19 ) )
                          case peer_reveal
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.19 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.18 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                qed
              next
                case channel_send_case_4
                by step( contradiction /* cyclic */ )
              next
                case ephemeral_keygen_case_1
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case ephemeral_keygen_case_2
                step( solve( !KU( ~re ) @ #vk.12 ) )
                  case fresh
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        step( solve( !KU( ~s ) @ #vk.21 ) )
                          case peer_reveal
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.20 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.19 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_reveal
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        step( solve( !KU( ~s ) @ #vk.21 ) )
                          case peer_reveal
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.20 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.19 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case channel_send_case_2
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen_case_2
                        step( solve( !KU( ~s ) @ #vk.19 ) )
                          case peer_reveal
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.19 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.18 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                qed
              next
                case peer_keygen
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case test_agent_keygen_case_1
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case test_agent_keygen_case_2
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              qed
            qed
          next
            case channel_send
            step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                   '0',
                                   h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>),
                                           'g'^~s)
                                     >),
                                   $msg)
                         ) @ #vk.4 ) )
              case c_aead
              step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.5 ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.11 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.14 ) )
                    case fresh
                    step( solve( !KU( ~s ) @ #vk.15 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.18 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.20 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.15 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.15 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( ~s ) @ #vk.15 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.18 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.20 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.15 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.15 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.19 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case channel_send_case_1
                  step( solve( !KU( ~s ) @ #vk.12 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_2
                  step( solve( !KU( ~s ) @ #vk.12 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~e0)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~e0) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.14 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.16 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.19 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.16 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.19 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  step( solve( !KU( ~re ) @ #vk.14 ) )
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.16 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.19 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~re)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~re)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                    qed
                  qed
                next
                  case ephemeral_keygen
                  step( solve( !KU( ~s ) @ #vk.12 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      next
                        case channel_send_case_3
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.12 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.12 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( ~re ) @ #vk.16 ) )
                          case peer_reveal
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.14 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( ~re ) @ #vk.16 ) )
                          case peer_reveal
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.14 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~s ) @ #vk.12 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.12 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case channel_send
              step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                case channel_send
                step( solve( !KU( 'g'^~e0 ) @ #vk.4 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case channel_send
                  MIRRORED
                next
                  case ephemeral_keygen
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case I_Snd_to_R
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
            case Const_pub_0
            step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
              case peer_keygen
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.8 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.21 ) )
                  case channel_send
                  step( solve( !KU( '0' ) @ #vk ) )
                    case coerce
                    step( solve( !KD( '0' ) ▶₀ #vk ) )
                      case channel_send
                      step( solve( Send( t ) ▶₀ #vr.25 ) )
                        case Handshake_Initiator_Snd_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Handshake_Responder_Snd_2
                        by step( contradiction /* impossible chain */ )
                      next
                        case I_Snd_to_R
                        by step( contradiction /* impossible chain */ )
                      next
                        case R_Snd_to_I
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case ephemeral_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_reveal
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            next
              case test_common_case_1
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.8 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.22 ) )
                  case channel_send
                  step( solve( !KU( '0' ) @ #vk ) )
                    case coerce
                    step( solve( !KD( '0' ) ▶₀ #vk ) )
                      case channel_send
                      step( solve( Send( t ) ▶₀ #vr.26 ) )
                        case Handshake_Initiator_Snd_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Handshake_Responder_Snd_2
                        by step( contradiction /* impossible chain */ )
                      next
                        case I_Snd_to_R
                        by step( contradiction /* impossible chain */ )
                      next
                        case R_Snd_to_I
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case ephemeral_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_reveal
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            next
              case test_common_case_2
              by step( solve( Receivable( <'g'^~re0, 
                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >),
                                                'g'^~rs4), 
                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                                h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                           'g'^~re0>),
                                                        'g'^~rs4)
                                                  >),
                                                msg.2)
                                          >
                              ) ▶₀ #vr.8 ) )
            next
              case test_common_case_3
              by step( solve( Receivable( <'g'^~re0, 
                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >),
                                                'g'^~rs4), 
                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                                h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                           'g'^~re0>),
                                                        'g'^~rs4)
                                                  >),
                                                msg.2)
                                          >
                              ) ▶₀ #vr.8 ) )
            next
              case test_common_case_4
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.8 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.22 ) )
                  case channel_send
                  step( solve( !KU( '0' ) @ #vk ) )
                    case coerce
                    step( solve( !KD( '0' ) ▶₀ #vk ) )
                      case channel_send
                      step( solve( Send( t ) ▶₀ #vr.26 ) )
                        case Handshake_Initiator_Snd_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Handshake_Responder_Snd_2
                        by step( contradiction /* impossible chain */ )
                      next
                        case I_Snd_to_R
                        by step( contradiction /* impossible chain */ )
                      next
                        case R_Snd_to_I
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case ephemeral_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_reveal
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
            case aead
            step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
              case peer_keygen
              step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                'g'^(~e*~rs4)>)),
                                     '0', '0', $msg)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.4 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.7 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.8 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.11 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.14 ) )
                          next
                            case channel_send_case_1
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case channel_send_case_2
                            step( solve( !KU( ~re0 ) @ #vk.12 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case channel_send_case_3
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case channel_send_case_4
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case channel_send_case_5
                            by step( solve( !KU( ~e ) @ #vk.14 ) )
                          next
                            case channel_send_case_6
                            by step( solve( !KU( ~e ) @ #vk.14 ) )
                          next
                            case ephemeral_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case ephemeral_keygen_case_2
                            step( solve( !KU( ~re0 ) @ #vk.12 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case test_agent_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case test_agent_keygen_case_2
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          qed
                        qed
                      qed
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.8 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.11 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.14 ) )
                          next
                            case channel_send_case_1
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case channel_send_case_2
                            step( solve( !KU( ~re0 ) @ #vk.12 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case channel_send_case_3
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case channel_send_case_4
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case channel_send_case_5
                            by step( solve( !KU( ~e ) @ #vk.14 ) )
                          next
                            case channel_send_case_6
                            by step( solve( !KU( ~e ) @ #vk.14 ) )
                          next
                            case ephemeral_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case ephemeral_keygen_case_2
                            step( solve( !KU( ~re0 ) @ #vk.12 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case test_agent_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case test_agent_keygen_case_2
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.8 ) )
                    qed
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re0, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                               'g'^~rs4), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                          'g'^~re0>),
                                                       'g'^~rs4)
                                                 >),
                                               msg.2)
                                         >
                             ) ▶₀ #vr.8 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.22 ) )
                    case channel_send
                    MIRRORED
                  qed
                qed
              qed
            next
              case test_common_case_1
              step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                'g'^(~e*~rs4)>)),
                                     '0', '0', $msg)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.4 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.7 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.8 ) )
                    qed
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re0, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                               'g'^~rs4), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                          'g'^~re0>),
                                                       'g'^~rs4)
                                                 >),
                                               msg.2)
                                         >
                             ) ▶₀ #vr.8 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.23 ) )
                    case channel_send
                    MIRRORED
                  qed
                qed
              qed
            next
              case test_common_case_2
              step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                'g'^(~e*~rs4)>)),
                                     '0', '0', $msg)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.4 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.7 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case channel_send
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.8 ) )
                    qed
                  qed
                qed
              next
                case channel_send
                by step( solve( Receivable( <'g'^~re0, 
                                             aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                    >),
                                                  'g'^~rs4), 
                                             aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                                  h(<
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>), 
                                                     aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                          h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                             'g'^~re0>),
                                                          'g'^~rs4)
                                                    >),
                                                  msg.2)
                                            >
                                ) ▶₀ #vr.8 ) )
              qed
            next
              case test_common_case_3
              step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                'g'^(~e*~rs4)>)),
                                     '0', '0', $msg)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.4 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.7 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case channel_send
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.8 ) )
                    qed
                  qed
                qed
              next
                case channel_send
                by step( solve( Receivable( <'g'^~re0, 
                                             aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                    >),
                                                  'g'^~rs4), 
                                             aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                                  h(<
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>), 
                                                     aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                          h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                             'g'^~re0>),
                                                          'g'^~rs4)
                                                    >),
                                                  msg.2)
                                            >
                                ) ▶₀ #vr.8 ) )
              qed
            next
              case test_common_case_4
              step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                'g'^(~e*~rs4)>)),
                                     '0', '0', $msg)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.4 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.7 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.8 ) )
                    qed
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re0, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                               'g'^~rs4), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                          'g'^~re0>),
                                                       'g'^~rs4)
                                                 >),
                                               msg.2)
                                         >
                             ) ▶₀ #vr.8 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.23 ) )
                    case channel_send
                    MIRRORED
                  qed
                qed
              qed
            qed
          next
            case d_2_decrypt
            step( solve( (#vr.14, 0) ~~> (#i, 1) ) )
              case Var_pub_msg
              step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
                case peer_keygen
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.7 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.10 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case channel_send_case_3
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_4
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_5
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_6
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case ephemeral_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case ephemeral_keygen_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_2
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          qed
                        qed
                      qed
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.7 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.10 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case channel_send_case_3
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_4
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_5
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_6
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case ephemeral_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case ephemeral_keygen_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_2
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_1
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_2
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_3
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_4
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_3_verify
            step( solve( (#vr.14, 0) ~~> (#i, 1) ) )
              case true
              step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
                case peer_keygen
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.7 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.10 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case channel_send_case_3
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_4
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_5
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_6
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case ephemeral_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case ephemeral_keygen_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_2
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          qed
                        qed
                      qed
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.7 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.10 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case channel_send_case_3
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_4
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_5
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_6
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case ephemeral_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case ephemeral_keygen_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_2
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_1
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_2
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_3
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_4
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case pair
          step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
            case peer_keygen
            step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                              'g'^(~e*~rs4)>)),
                                   '0', '0', $msg)
                         ) @ #vk.2 ) )
              case c_aead
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk.3 ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.5 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.8 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_2
                          step( solve( !KU( ~re0 ) @ #vk.13 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_4
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_5
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_6
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen_case_2
                          step( solve( !KU( ~re0 ) @ #vk.13 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case test_agent_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case test_agent_keygen_case_2
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_2
                          step( solve( !KU( ~re0 ) @ #vk.13 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_4
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_5
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_6
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen_case_2
                          step( solve( !KU( ~re0 ) @ #vk.13 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case test_agent_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case test_agent_keygen_case_2
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e ) @ #vk.9 ) )
                  qed
                qed
              qed
            next
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.8 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.21 ) )
                  case channel_send
                  step( solve( !KU( '0' ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( '0' ) ▶₀ #vk.2 ) )
                      case channel_send
                      step( solve( Send( t ) ▶₀ #vr.25 ) )
                        case Handshake_Initiator_Snd_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Handshake_Responder_Snd_2
                        by step( contradiction /* impossible chain */ )
                      next
                        case I_Snd_to_R
                        by step( contradiction /* impossible chain */ )
                      next
                        case R_Snd_to_I
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case ephemeral_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_reveal
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            qed
          next
            case test_common_case_1
            step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                              'g'^(~e*~rs4)>)),
                                   '0', '0', $msg)
                         ) @ #vk.2 ) )
              case c_aead
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk.3 ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.5 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.8 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.9 ) )
                  qed
                qed
              qed
            next
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.8 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.22 ) )
                  case channel_send
                  step( solve( !KU( '0' ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( '0' ) ▶₀ #vk.2 ) )
                      case channel_send
                      step( solve( Send( t ) ▶₀ #vr.26 ) )
                        case Handshake_Initiator_Snd_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Handshake_Responder_Snd_2
                        by step( contradiction /* impossible chain */ )
                      next
                        case I_Snd_to_R
                        by step( contradiction /* impossible chain */ )
                      next
                        case R_Snd_to_I
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case ephemeral_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_reveal
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            qed
          next
            case test_common_case_2
            step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                              'g'^(~e*~rs4)>)),
                                   '0', '0', $msg)
                         ) @ #vk.2 ) )
              case c_aead
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk.3 ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.5 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.8 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case channel_send
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.9 ) )
                  qed
                qed
              qed
            next
              case channel_send
              by step( solve( Receivable( <'g'^~re0, 
                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >),
                                                'g'^~rs4), 
                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                                h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                           'g'^~re0>),
                                                        'g'^~rs4)
                                                  >),
                                                msg.2)
                                          >
                              ) ▶₀ #vr.8 ) )
            qed
          next
            case test_common_case_3
            step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                              'g'^(~e*~rs4)>)),
                                   '0', '0', $msg)
                         ) @ #vk.2 ) )
              case c_aead
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk.3 ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.5 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.8 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case channel_send
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.9 ) )
                  qed
                qed
              qed
            next
              case channel_send
              by step( solve( Receivable( <'g'^~re0, 
                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >),
                                                'g'^~rs4), 
                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                                h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                           'g'^~re0>),
                                                        'g'^~rs4)
                                                  >),
                                                msg.2)
                                          >
                              ) ▶₀ #vr.8 ) )
            qed
          next
            case test_common_case_4
            step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                              'g'^(~e*~rs4)>)),
                                   '0', '0', $msg)
                         ) @ #vk.2 ) )
              case c_aead
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk.3 ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.5 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.8 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.9 ) )
                  qed
                qed
              qed
            next
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.8 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.22 ) )
                  case channel_send
                  step( solve( !KU( '0' ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( '0' ) ▶₀ #vk.2 ) )
                      case channel_send
                      step( solve( Send( t ) ▶₀ #vr.26 ) )
                        case Handshake_Initiator_Snd_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Handshake_Responder_Snd_2
                        by step( contradiction /* impossible chain */ )
                      next
                        case I_Snd_to_R
                        by step( contradiction /* impossible chain */ )
                      next
                        case R_Snd_to_I
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case ephemeral_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_reveal
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case R_Snd_to_I_case_1
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.16, 0) ~~> (#i, 1) ) )
            case Const_pub_1
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                           msg.2)
                                     >
                         ) ▶₀ #vr.11 ) )
              case channel_send
              step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.22 ) )
                case test_common_case_1
                step( solve( Receivable( <'g'^~e, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                               'g'^~s), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                          'g'^~e>),
                                                       'g'^~s)
                                                 >),
                                               msg.4)
                                         >
                             ) ▶₀ #vr.25 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                    case channel_send
                    step( solve( !KU( '1' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( '1' ) ▶₀ #vk ) )
                        case channel_send
                        step( solve( Send( t ) ▶₀ #vr.33 ) )
                          case Handshake_Initiator_Snd_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Handshake_Responder_Snd_2
                          by step( contradiction /* impossible chain */ )
                        next
                          case I_Snd_to_R
                          by step( contradiction /* impossible chain */ )
                        next
                          case R_Snd_to_I
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case ephemeral_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_reveal
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              next
                case test_common_case_2
                step( solve( Receivable( <'g'^~e, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                               'g'^~s), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                          'g'^~e>),
                                                       'g'^~s)
                                                 >),
                                               msg.4)
                                         >
                             ) ▶₀ #vr.25 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                    case channel_send
                    step( solve( !KU( '1' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( '1' ) ▶₀ #vk ) )
                        case channel_send
                        step( solve( Send( t ) ▶₀ #vr.33 ) )
                          case Handshake_Initiator_Snd_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Handshake_Responder_Snd_2
                          by step( contradiction /* impossible chain */ )
                        next
                          case I_Snd_to_R
                          by step( contradiction /* impossible chain */ )
                        next
                          case R_Snd_to_I
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case ephemeral_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_reveal
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 1) ) )
            case aead
            step( solve( !KU( aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                              'g'^(~re*~s)>)),
                                   '1', '0', $msg)
                         ) @ #vk ) )
              case c_aead
              step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                           ) @ #vk.1 ) )
                case c_kdf2
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.5 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.8 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.11 ) )
                      case fresh
                      by step( solve( !KU( ~s ) @ #vk.12 ) )
                    next
                      case peer_reveal
                      by step( solve( !KU( ~s ) @ #vk.12 ) )
                    qed
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.11 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    by step( solve( !KU( ~re ) @ #vk.11 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  next
                    case peer_keygen
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  next
                    case test_agent_keygen_case_3
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  qed
                qed
              qed
            next
              case channel_send
              step( solve( Receivable( <'0', 
                                        aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                             msg.2)
                                       >
                           ) ▶₀ #vr.11 ) )
                case channel_send
                step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.23 ) )
                  case test_common_case_1
                  step( solve( Receivable( <'g'^~e, 
                                            aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                   >),
                                                 'g'^~s), 
                                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                                 h(<
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                       'g'^~e>), 
                                                    aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                            'g'^~e>),
                                                         'g'^~s)
                                                   >),
                                                 msg.4)
                                           >
                               ) ▶₀ #vr.26 ) )
                    case channel_send
                    step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                      case channel_send
                      MIRRORED
                    qed
                  qed
                next
                  case test_common_case_2
                  step( solve( Receivable( <'g'^~e, 
                                            aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                   >),
                                                 'g'^~s), 
                                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                                 h(<
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                       'g'^~e>), 
                                                    aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                            'g'^~e>),
                                                         'g'^~s)
                                                   >),
                                                 msg.4)
                                           >
                               ) ▶₀ #vr.26 ) )
                    case channel_send
                    step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                      case channel_send
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_2_decrypt
            step( solve( (#vr.17, 0) ~~> (#i, 1) ) )
              case Var_pub_msg
              step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                           ) @ #vk.1 ) )
                case c_kdf2
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.3 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.6 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      by step( solve( !KU( ~s ) @ #vk.10 ) )
                    next
                      case peer_reveal
                      by step( solve( !KU( ~s ) @ #vk.10 ) )
                    qed
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    by step( solve( !KU( ~re ) @ #vk.10 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case peer_keygen
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_3
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  qed
                qed
              qed
            qed
          next
            case d_3_verify
            step( solve( (#vr.17, 0) ~~> (#i, 1) ) )
              case true
              step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                           ) @ #vk.1 ) )
                case c_kdf2
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.4 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.7 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      by step( solve( !KU( ~s ) @ #vk.11 ) )
                    next
                      case peer_reveal
                      by step( solve( !KU( ~s ) @ #vk.11 ) )
                    qed
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    by step( solve( !KU( ~re ) @ #vk.10 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case peer_keygen
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_3
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  qed
                qed
              qed
            qed
          qed
        next
          case pair
          step( solve( !KU( aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                            'g'^(~re*~s)>)),
                                 '1', '0', $msg)
                       ) @ #vk.2 ) )
            case c_aead
            step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                         ) @ #vk.3 ) )
              case c_kdf2
              step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.6 ) )
                case c_kdf1
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.9 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.12 ) )
                    case fresh
                    by step( solve( !KU( ~s ) @ #vk.13 ) )
                  next
                    case peer_reveal
                    by step( solve( !KU( ~s ) @ #vk.13 ) )
                  qed
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~s ) @ #vk.10 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~s ) @ #vk.10 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.12 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.14 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.17 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.14 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.17 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.15 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( solve( !KU( ~re ) @ #vk.12 ) )
                next
                  case ephemeral_keygen
                  by step( solve( !KU( ~s ) @ #vk.10 ) )
                next
                  case peer_keygen
                  by step( solve( !KU( ~s ) @ #vk.10 ) )
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.10 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~s ) @ #vk.10 ) )
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~s ) @ #vk.10 ) )
                qed
              qed
            qed
          next
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                           msg.2)
                                     >
                         ) ▶₀ #vr.11 ) )
              case channel_send
              step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.22 ) )
                case test_common_case_1
                step( solve( Receivable( <'g'^~e, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                               'g'^~s), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                          'g'^~e>),
                                                       'g'^~s)
                                                 >),
                                               msg.4)
                                         >
                             ) ▶₀ #vr.25 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                    case channel_send
                    step( solve( !KU( '1' ) @ #vk.2 ) )
                      case coerce
                      step( solve( !KD( '1' ) ▶₀ #vk.2 ) )
                        case channel_send
                        step( solve( Send( t ) ▶₀ #vr.33 ) )
                          case Handshake_Initiator_Snd_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Handshake_Responder_Snd_2
                          by step( contradiction /* impossible chain */ )
                        next
                          case I_Snd_to_R
                          by step( contradiction /* impossible chain */ )
                        next
                          case R_Snd_to_I
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case ephemeral_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_reveal
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              next
                case test_common_case_2
                step( solve( Receivable( <'g'^~e, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                               'g'^~s), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                          'g'^~e>),
                                                       'g'^~s)
                                                 >),
                                               msg.4)
                                         >
                             ) ▶₀ #vr.25 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                    case channel_send
                    step( solve( !KU( '1' ) @ #vk.2 ) )
                      case coerce
                      step( solve( !KD( '1' ) ▶₀ #vk.2 ) )
                        case channel_send
                        step( solve( Send( t ) ▶₀ #vr.33 ) )
                          case Handshake_Initiator_Snd_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Handshake_Responder_Snd_2
                          by step( contradiction /* impossible chain */ )
                        next
                          case I_Snd_to_R
                          by step( contradiction /* impossible chain */ )
                        next
                          case R_Snd_to_I
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case ephemeral_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_reveal
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case R_Snd_to_I_case_2
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.16, 0) ~~> (#i, 1) ) )
            case Const_pub_1
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                           msg.2)
                                     >
                         ) ▶₀ #vr.11 ) )
              case channel_send
              step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.22 ) )
                case peer_keygen
                step( solve( Receivable( <'g'^~e, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                               'g'^~s), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                          'g'^~e>),
                                                       'g'^~s)
                                                 >),
                                               msg.4)
                                         >
                             ) ▶₀ #vr.25 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                    case channel_send
                    step( solve( !KU( '1' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( '1' ) ▶₀ #vk ) )
                        case channel_send
                        step( solve( Send( t ) ▶₀ #vr.32 ) )
                          case Handshake_Initiator_Snd_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Handshake_Responder_Snd_2
                          by step( contradiction /* impossible chain */ )
                        next
                          case I_Snd_to_R
                          by step( contradiction /* impossible chain */ )
                        next
                          case R_Snd_to_I
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case ephemeral_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_reveal
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 1) ) )
            case aead
            step( solve( !KU( aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                              'g'^(~re*~s)>)),
                                   '1', '0', $msg)
                         ) @ #vk ) )
              case c_aead
              step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                           ) @ #vk.1 ) )
                case c_kdf2
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.5 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.8 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.11 ) )
                      case fresh
                      step( solve( !KU( ~s ) @ #vk.12 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re) ) @ #vk.15 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.17 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( ~s ) @ #vk.12 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re) ) @ #vk.15 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.17 ) )
                          next
                            case channel_send_case_1
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case channel_send_case_2
                            by step( contradiction /* cyclic */ )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.16 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~e)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~e) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.11 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    step( solve( !KU( ~re ) @ #vk.11 ) )
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~re)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~re)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( ~re ) @ #vk.13 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( ~re ) @ #vk.13 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case channel_send
              step( solve( Receivable( <'0', 
                                        aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                             msg.2)
                                       >
                           ) ▶₀ #vr.11 ) )
                case channel_send
                step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.23 ) )
                  case peer_keygen
                  step( solve( Receivable( <'g'^~e, 
                                            aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                   >),
                                                 'g'^~s), 
                                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                                 h(<
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                       'g'^~e>), 
                                                    aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                            'g'^~e>),
                                                         'g'^~s)
                                                   >),
                                                 msg.4)
                                           >
                               ) ▶₀ #vr.26 ) )
                    case channel_send
                    step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                      case channel_send
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_2_decrypt
            step( solve( (#vr.17, 0) ~~> (#i, 1) ) )
              case Var_pub_msg
              step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                           ) @ #vk.1 ) )
                case c_kdf2
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.3 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.6 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      step( solve( !KU( ~s ) @ #vk.10 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.15 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( ~s ) @ #vk.10 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.15 ) )
                          next
                            case channel_send_case_1
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case channel_send_case_2
                            by step( contradiction /* cyclic */ )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.14 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~e)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~e) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~re)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~re)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( ~re ) @ #vk.11 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( ~re ) @ #vk.11 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_3_verify
            step( solve( (#vr.17, 0) ~~> (#i, 1) ) )
              case true
              step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                           ) @ #vk.1 ) )
                case c_kdf2
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.4 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.7 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( ~s ) @ #vk.11 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re) ) @ #vk.14 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.16 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( ~s ) @ #vk.11 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re) ) @ #vk.14 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.16 ) )
                          next
                            case channel_send_case_1
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case channel_send_case_2
                            by step( contradiction /* cyclic */ )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.15 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~e)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~e) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~re)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~re)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( ~re ) @ #vk.12 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( ~re ) @ #vk.12 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case pair
          step( solve( !KU( aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                            'g'^(~re*~s)>)),
                                 '1', '0', $msg)
                       ) @ #vk.2 ) )
            case c_aead
            step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                         ) @ #vk.3 ) )
              case c_kdf2
              step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.6 ) )
                case c_kdf1
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.9 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.12 ) )
                    case fresh
                    step( solve( !KU( ~s ) @ #vk.13 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.16 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.18 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( ~s ) @ #vk.13 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.16 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.18 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.17 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case channel_send_case_1
                  step( solve( !KU( ~s ) @ #vk.10 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_2
                  step( solve( !KU( ~s ) @ #vk.10 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~e)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~e) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.12 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.14 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.17 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.14 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.17 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.15 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  step( solve( !KU( ~re ) @ #vk.12 ) )
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.14 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.17 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~re)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~re)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.15 ) )
                    qed
                  qed
                next
                  case ephemeral_keygen
                  step( solve( !KU( ~s ) @ #vk.10 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      next
                        case channel_send_case_3
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.10 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send_case_1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.10 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( ~re ) @ #vk.14 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( ~re ) @ #vk.14 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~s ) @ #vk.10 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.10 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                           msg.2)
                                     >
                         ) ▶₀ #vr.11 ) )
              case channel_send
              step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.22 ) )
                case peer_keygen
                step( solve( Receivable( <'g'^~e, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                               'g'^~s), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                          'g'^~e>),
                                                       'g'^~s)
                                                 >),
                                               msg.4)
                                         >
                             ) ▶₀ #vr.25 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                    case channel_send
                    step( solve( !KU( '1' ) @ #vk.2 ) )
                      case coerce
                      step( solve( !KD( '1' ) ▶₀ #vk.2 ) )
                        case channel_send
                        step( solve( Send( t ) ▶₀ #vr.32 ) )
                          case Handshake_Initiator_Snd_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Handshake_Responder_Snd_2
                          by step( contradiction /* impossible chain */ )
                        next
                          case I_Snd_to_R
                          by step( contradiction /* impossible chain */ )
                        next
                          case R_Snd_to_I
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case ephemeral_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_reveal
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case ephemeral_keygen
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_exp_case_1
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case exp
          step( solve( !KU( 'g'^(~e*x) ) @ #vk ) )
            case c_exp
            by step( solve( !KU( ~e ) @ #vk.4 ) )
          next
            case channel_send_case_01
            by step( solve( !KU( ~e ) @ #vk.2 ) )
          next
            case channel_send_case_02
            MIRRORED
          next
            case channel_send_case_03
            by step( solve( !KU( ~e ) @ #vk.3 ) )
          next
            case channel_send_case_04
            by step( solve( !KU( ~e ) @ #vk.2 ) )
          next
            case channel_send_case_05
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.9 ) )
              case channel_send
              MIRRORED
            qed
          next
            case channel_send_case_06
            by step( solve( !KU( ~e ) @ #vk.3 ) )
          next
            case channel_send_case_07
            by step( solve( !KU( ~e ) @ #vk.2 ) )
          next
            case channel_send_case_08
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.9 ) )
              case channel_send
              MIRRORED
            qed
          next
            case channel_send_case_09
            by step( solve( !KU( ~e ) @ #vk.3 ) )
          next
            case channel_send_case_10
            by step( solve( !KU( ~e ) @ #vk.5 ) )
          next
            case channel_send_case_11
            by step( solve( !KU( ~e ) @ #vk.8 ) )
          next
            case channel_send_case_12
            by step( solve( !KU( ~e ) @ #vk.5 ) )
          next
            case channel_send_case_13
            by step( solve( !KU( ~e ) @ #vk.8 ) )
          next
            case ephemeral_keygen_case_1
            by step( solve( !KU( ~e ) @ #vk.2 ) )
          next
            case ephemeral_keygen_case_2
            MIRRORED
          next
            case ephemeral_keygen_case_3
            by step( solve( !KU( ~e ) @ #vk.3 ) )
          next
            case peer_keygen_case_1
            by step( solve( !KU( ~e ) @ #vk.2 ) )
          next
            case peer_keygen_case_2
            by step( solve( !KU( ~e ) @ #vk.3 ) )
          next
            case test_agent_keygen_case_1
            by step( solve( !KU( ~e ) @ #vk.2 ) )
          next
            case test_agent_keygen_case_2
            by step( solve( !KU( ~e ) @ #vk.3 ) )
          next
            case test_agent_keygen_case_3
            by step( solve( !KU( ~e ) @ #vk.2 ) )
          next
            case test_agent_keygen_case_4
            by step( solve( !KU( ~e ) @ #vk.3 ) )
          qed
        qed
      next
        case d_exp_case_2
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_3
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_4
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_5
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case exp
        step( solve( !KU( 'g'^~e ) @ #vk ) )
          case c_exp
          by step( solve( !KU( ~e ) @ #vk.2 ) )
        next
          case channel_send_case_1
          MIRRORED
        next
          case channel_send_case_2
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.7 ) )
            case channel_send
            MIRRORED
          qed
        next
          case channel_send_case_3
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.7 ) )
            case channel_send
            MIRRORED
          qed
        next
          case ephemeral_keygen
          MIRRORED
        qed
      qed
    next
      case peer_keygen
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_exp_case_1
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case exp
          step( solve( !KU( 'g'^(~s*x) ) @ #vk ) )
            case c_exp
            step( solve( !KU( ~s ) @ #vk.4 ) )
              case peer_reveal
              step( solve( !KU( 'g' ) @ #vk.4 ) )
                case coerce
                step( solve( !KD( 'g' ) ▶₀ #vk.3 ) )
                  case channel_send
                  step( solve( Send( t ) ▶₀ #vr.3 ) )
                    case Handshake_Initiator_Snd_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Handshake_Responder_Snd_2_case_1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.13, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.14, 0) ~~> (#vk.3, 0) ) )
                          case d_2_decrypt
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_3_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.14, 0) ~~> (#vk.3, 0) ) )
                          case d_2_decrypt
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_3_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Handshake_Responder_Snd_2_case_2
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.13, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.14, 0) ~~> (#vk.3, 0) ) )
                          case d_2_decrypt
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_3_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.14, 0) ~~> (#vk.3, 0) ) )
                          case d_2_decrypt
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_3_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case I_Snd_to_R
                    by step( contradiction /* impossible chain */ )
                  next
                    case R_Snd_to_I_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case R_Snd_to_I_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case ephemeral_keygen
                  by step( contradiction /* impossible chain */ )
                next
                  case peer_keygen
                  by step( contradiction /* impossible chain */ )
                next
                  case peer_reveal
                  by step( contradiction /* impossible chain */ )
                next
                  case test_agent_keygen_case_1
                  by step( contradiction /* impossible chain */ )
                next
                  case test_agent_keygen_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                MIRRORED
              qed
            qed
          next
            case channel_send_case_01
            step( solve( !KU( ~s ) @ #vk.2 ) )
              case peer_reveal
              by step( solve( !KU( ~x ) @ #vk.2 ) )
            qed
          next
            case channel_send_case_02
            step( solve( !KU( ~s ) @ #vk.3 ) )
              case peer_reveal
              by step( solve( !KU( ~e0 ) @ #vk.5 ) )
            qed
          next
            case channel_send_case_03
            step( solve( !KU( ~s ) @ #vk.2 ) )
              case peer_reveal
              by step( solve( !KU( ~x ) @ #vk.2 ) )
            qed
          next
            case channel_send_case_04
            step( solve( !KU( ~s ) @ #vk.3 ) )
              case peer_reveal
              by step( solve( !KU( ~e0 ) @ #vk.5 ) )
            qed
          next
            case channel_send_case_05
            step( solve( !KU( ~s ) @ #vk.2 ) )
              case peer_reveal
              by step( solve( !KU( ~x ) @ #vk.2 ) )
            qed
          next
            case channel_send_case_06
            step( solve( !KU( ~s ) @ #vk.3 ) )
              case peer_reveal
              by step( solve( !KU( ~e0 ) @ #vk.5 ) )
            qed
          next
            case channel_send_case_07
            step( solve( !KU( ~s ) @ #vk.5 ) )
              case peer_reveal
              by step( solve( !KU( ~x ) @ #vk.4 ) )
            qed
          next
            case channel_send_case_08
            step( solve( !KU( ~s ) @ #vk.8 ) )
              case peer_reveal
              by step( solve( !KU( ~s.1 ) @ #vk.10 ) )
            qed
          next
            case channel_send_case_09
            step( solve( !KU( ~s ) @ #vk.5 ) )
              case peer_reveal
              step( solve( !KU( ~x ) @ #vk.4 ) )
                case peer_reveal
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.7 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                qed
              qed
            qed
          next
            case channel_send_case_10
            step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.6 ) )
              case c_exp
              by step( solve( !KU( ~e0 ) @ #vk.9 ) )
            next
              case channel_send_case_1
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case channel_send_case_2
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case channel_send_case_3
              step( solve( !KU( ~re ) @ #vk.7 ) )
                case fresh
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              next
                case peer_reveal
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              qed
            next
              case channel_send_case_4
              by step( contradiction /* cyclic */ )
            next
              case ephemeral_keygen_case_1
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case ephemeral_keygen_case_2
              step( solve( !KU( ~re ) @ #vk.7 ) )
                case fresh
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              next
                case peer_reveal
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              qed
            next
              case peer_keygen
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case test_agent_keygen_case_1
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case test_agent_keygen_case_2
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            qed
          next
            case channel_send_case_11
            step( solve( !KU( ~s ) @ #vk.8 ) )
              case peer_reveal
              step( solve( !KU( ~s.1 ) @ #vk.10 ) )
                case peer_reveal
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.11 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.11 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                qed
              qed
            qed
          next
            case ephemeral_keygen_case_1
            step( solve( !KU( ~s ) @ #vk.2 ) )
              case peer_reveal
              by step( solve( !KU( ~x ) @ #vk.2 ) )
            qed
          next
            case ephemeral_keygen_case_2
            step( solve( !KU( ~s ) @ #vk.3 ) )
              case peer_reveal
              by step( solve( !KU( ~e ) @ #vk.5 ) )
            qed
          next
            case peer_keygen_case_1
            step( solve( !KU( ~s ) @ #vk.2 ) )
              case peer_reveal
              step( solve( !KU( ~x ) @ #vk.2 ) )
                case peer_reveal
                MIRRORED
              qed
            qed
          next
            case peer_keygen_case_2
            MIRRORED
          next
            case peer_keygen_case_3
            step( solve( !KU( ~s ) @ #vk.3 ) )
              case peer_reveal
              step( solve( !KU( ~s.1 ) @ #vk.5 ) )
                case peer_reveal
                MIRRORED
              qed
            qed
          next
            case test_agent_keygen_case_1
            step( solve( !KU( ~s ) @ #vk.2 ) )
              case peer_reveal
              by step( solve( !KU( ~x ) @ #vk.2 ) )
            qed
          next
            case test_agent_keygen_case_2
            step( solve( !KU( ~s ) @ #vk.3 ) )
              case peer_reveal
              by step( solve( !KU( ~a ) @ #vk.5 ) )
            qed
          next
            case test_agent_keygen_case_3
            step( solve( !KU( ~s ) @ #vk.2 ) )
              case peer_reveal
              by step( solve( !KU( ~x ) @ #vk.2 ) )
            qed
          next
            case test_agent_keygen_case_4
            step( solve( !KU( ~s ) @ #vk.3 ) )
              case peer_reveal
              by step( solve( !KU( ~b ) @ #vk.5 ) )
            qed
          qed
        qed
      next
        case d_exp_case_2
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_3
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_4
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_5
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case exp
        step( solve( !KU( 'g'^~s ) @ #vk ) )
          case c_exp
          step( solve( !KU( ~s ) @ #vk.2 ) )
            case peer_reveal
            step( solve( !KU( 'g' ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( 'g' ) ▶₀ #vk.2 ) )
                case channel_send
                step( solve( Send( t ) ▶₀ #vr.2 ) )
                  case Handshake_Initiator_Snd_1
                  by step( contradiction /* impossible chain */ )
                next
                  case Handshake_Responder_Snd_2_case_1
                  step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.12, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.13, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.13, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Handshake_Responder_Snd_2_case_2
                  step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.12, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.13, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.13, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case I_Snd_to_R
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_1
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case ephemeral_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_reveal
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_1
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_2
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              MIRRORED
            qed
          qed
        next
          case channel_send
          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
            case c_exp
            by step( solve( !KU( ~e0 ) @ #vk.8 ) )
          next
            case channel_send_case_1
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case channel_send_case_2
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case channel_send_case_3
            step( solve( !KU( ~re ) @ #vk.6 ) )
              case fresh
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            next
              case peer_reveal
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            qed
          next
            case channel_send_case_4
            by step( contradiction /* cyclic */ )
          next
            case ephemeral_keygen_case_1
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case ephemeral_keygen_case_2
            step( solve( !KU( ~re ) @ #vk.6 ) )
              case fresh
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            next
              case peer_reveal
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            qed
          next
            case peer_keygen
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case test_agent_keygen_case_1
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case test_agent_keygen_case_2
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          qed
        next
          case peer_keygen
          MIRRORED
        qed
      qed
    next
      case peer_reveal
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_s
        step( solve( !KU( ~s ) @ #vk ) )
          case fresh
          by step( solve( !PeerPk( ~s, 'g'^~s ) ▶₀ #vr ) )
        next
          case peer_reveal
          step( solve( !PeerPk( ~s, 'g'^~s ) ▶₀ #vr ) )
            case peer_keygen
            MIRRORED
          qed
        qed
      qed
    next
      case test_agent_keygen_case_1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_exp_case_1
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case exp
          step( solve( !KU( 'g'^(~a*x) ) @ #vk ) )
            case c_exp
            by step( solve( !KU( ~a ) @ #vk.4 ) )
          next
            case channel_send_case_01
            by step( solve( !KU( ~a ) @ #vk.2 ) )
          next
            case channel_send_case_02
            by step( solve( !KU( ~a ) @ #vk.3 ) )
          next
            case channel_send_case_03
            by step( solve( !KU( ~a ) @ #vk.2 ) )
          next
            case channel_send_case_04
            by step( solve( !KU( ~a ) @ #vk.3 ) )
          next
            case channel_send_case_05
            by step( solve( !KU( ~a ) @ #vk.2 ) )
          next
            case channel_send_case_06
            by step( solve( !KU( ~a ) @ #vk.3 ) )
          next
            case channel_send_case_07
            by step( solve( !KU( ~a ) @ #vk.5 ) )
          next
            case channel_send_case_08
            step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.6 ) )
              case c_exp
              by step( solve( !KU( ~e0 ) @ #vk.9 ) )
            next
              case channel_send_case_1
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case channel_send_case_2
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case channel_send_case_3
              step( solve( !KU( ~re ) @ #vk.7 ) )
                case fresh
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              next
                case peer_reveal
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              qed
            next
              case channel_send_case_4
              by step( contradiction /* cyclic */ )
            next
              case ephemeral_keygen_case_1
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case ephemeral_keygen_case_2
              step( solve( !KU( ~re ) @ #vk.7 ) )
                case fresh
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              next
                case peer_reveal
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              qed
            next
              case peer_keygen
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case test_agent_keygen_case_1
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case test_agent_keygen_case_2
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            qed
          next
            case channel_send_case_09
            by step( solve( !KU( ~a ) @ #vk.8 ) )
          next
            case channel_send_case_10
            by step( solve( !KU( ~a ) @ #vk.5 ) )
          next
            case channel_send_case_11
            by step( solve( !KU( ~a ) @ #vk.8 ) )
          next
            case ephemeral_keygen_case_1
            by step( solve( !KU( ~a ) @ #vk.2 ) )
          next
            case ephemeral_keygen_case_2
            by step( solve( !KU( ~a ) @ #vk.3 ) )
          next
            case peer_keygen_case_1
            by step( solve( !KU( ~a ) @ #vk.2 ) )
          next
            case peer_keygen_case_2
            by step( solve( !KU( ~a ) @ #vk.3 ) )
          next
            case test_agent_keygen_case_1
            by step( solve( !KU( ~a ) @ #vk.2 ) )
          next
            case test_agent_keygen_case_2
            MIRRORED
          next
            case test_agent_keygen_case_3
            by step( solve( !KU( ~a ) @ #vk.3 ) )
          next
            case test_agent_keygen_case_4
            by step( solve( !KU( ~a ) @ #vk.2 ) )
          next
            case test_agent_keygen_case_5
            by step( solve( !KU( ~a ) @ #vk.3 ) )
          qed
        qed
      next
        case d_exp_case_2
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_3
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_4
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_5
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case exp
        step( solve( !KU( 'g'^~a ) @ #vk ) )
          case c_exp
          by step( solve( !KU( ~a ) @ #vk.2 ) )
        next
          case channel_send
          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
            case c_exp
            by step( solve( !KU( ~e0 ) @ #vk.8 ) )
          next
            case channel_send_case_1
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case channel_send_case_2
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case channel_send_case_3
            step( solve( !KU( ~re ) @ #vk.6 ) )
              case fresh
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            next
              case peer_reveal
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            qed
          next
            case channel_send_case_4
            by step( contradiction /* cyclic */ )
          next
            case ephemeral_keygen_case_1
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case ephemeral_keygen_case_2
            step( solve( !KU( ~re ) @ #vk.6 ) )
              case fresh
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            next
              case peer_reveal
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            qed
          next
            case peer_keygen
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case test_agent_keygen_case_1
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case test_agent_keygen_case_2
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          qed
        next
          case test_agent_keygen
          MIRRORED
        qed
      qed
    next
      case test_agent_keygen_case_2
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_exp_case_1
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case exp
          step( solve( !KU( 'g'^(~b*x) ) @ #vk ) )
            case c_exp
            by step( solve( !KU( ~b ) @ #vk.4 ) )
          next
            case channel_send_case_01
            by step( solve( !KU( ~b ) @ #vk.2 ) )
          next
            case channel_send_case_02
            by step( solve( !KU( ~b ) @ #vk.3 ) )
          next
            case channel_send_case_03
            by step( solve( !KU( ~b ) @ #vk.2 ) )
          next
            case channel_send_case_04
            by step( solve( !KU( ~b ) @ #vk.3 ) )
          next
            case channel_send_case_05
            by step( solve( !KU( ~b ) @ #vk.2 ) )
          next
            case channel_send_case_06
            by step( solve( !KU( ~b ) @ #vk.3 ) )
          next
            case channel_send_case_07
            by step( solve( !KU( ~b ) @ #vk.5 ) )
          next
            case channel_send_case_08
            by step( solve( !KU( ~b ) @ #vk.8 ) )
          next
            case channel_send_case_09
            by step( solve( !KU( ~b ) @ #vk.5 ) )
          next
            case channel_send_case_10
            by step( solve( !KU( ~b ) @ #vk.8 ) )
          next
            case ephemeral_keygen_case_1
            by step( solve( !KU( ~b ) @ #vk.2 ) )
          next
            case ephemeral_keygen_case_2
            by step( solve( !KU( ~b ) @ #vk.3 ) )
          next
            case peer_keygen_case_1
            by step( solve( !KU( ~b ) @ #vk.2 ) )
          next
            case peer_keygen_case_2
            by step( solve( !KU( ~b ) @ #vk.3 ) )
          next
            case test_agent_keygen_case_1
            by step( solve( !KU( ~b ) @ #vk.2 ) )
          next
            case test_agent_keygen_case_2
            by step( solve( !KU( ~b ) @ #vk.3 ) )
          next
            case test_agent_keygen_case_3
            by step( solve( !KU( ~b ) @ #vk.2 ) )
          next
            case test_agent_keygen_case_4
            MIRRORED
          next
            case test_agent_keygen_case_5
            by step( solve( !KU( ~b ) @ #vk.3 ) )
          qed
        qed
      next
        case d_exp_case_2
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_3
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_4
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_5
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case exp
        step( solve( !KU( 'g'^~b ) @ #vk ) )
          case c_exp
          by step( solve( !KU( ~b ) @ #vk.2 ) )
        next
          case test_agent_keygen
          MIRRORED
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case channel_send
      step( solve( Send( t ) ▶₀ #vr ) )
        case Handshake_Initiator_Snd_1
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
            case d_exp_case_1
            step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
              case exp
              step( solve( !KU( 'g'^(~e0*x) ) @ #vk ) )
                case c_exp
                by step( solve( !KU( ~e0 ) @ #vk.4 ) )
              next
                case channel_send_case_01
                by step( solve( !KU( ~e0 ) @ #vk.1 ) )
              next
                case channel_send_case_02
                MIRRORED
              next
                case channel_send_case_03
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case channel_send_case_04
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case channel_send_case_05
                by step( solve( !KU( ~e0 ) @ #vk.3 ) )
              next
                case channel_send_case_06
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case channel_send_case_07
                by step( solve( !KU( ~e0 ) @ #vk.3 ) )
              next
                case channel_send_case_08
                by step( solve( !KU( ~e0 ) @ #vk.5 ) )
              next
                case channel_send_case_09
                by step( solve( !KU( ~e0 ) @ #vk.8 ) )
              next
                case channel_send_case_10
                by step( solve( !KU( ~e0 ) @ #vk.5 ) )
              next
                case channel_send_case_11
                by step( solve( !KU( ~e0 ) @ #vk.8 ) )
              next
                case ephemeral_keygen_case_1
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case ephemeral_keygen_case_2
                MIRRORED
              next
                case ephemeral_keygen_case_3
                by step( solve( !KU( ~e0 ) @ #vk.3 ) )
              next
                case peer_keygen_case_1
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case peer_keygen_case_2
                by step( solve( !KU( ~e0 ) @ #vk.3 ) )
              next
                case test_agent_keygen_case_1
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case test_agent_keygen_case_2
                by step( solve( !KU( ~e0 ) @ #vk.3 ) )
              next
                case test_agent_keygen_case_3
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case test_agent_keygen_case_4
                by step( solve( !KU( ~e0 ) @ #vk.3 ) )
              qed
            qed
          next
            case d_exp_case_2
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_3
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_4
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_5
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case exp
            step( solve( !KU( 'g'^~e0 ) @ #vk ) )
              case c_exp
              by step( solve( !KU( ~e0 ) @ #vk.2 ) )
            next
              case channel_send
              MIRRORED
            next
              case ephemeral_keygen
              MIRRORED
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
            case Var_pub_msg
            step( solve( !KU( $msg ) @ #vk ) )
              case coerce
              step( solve( !KD( $msg ) ▶₀ #vk ) )
                case channel_send
                step( solve( Send( t ) ▶₀ #vr.8 ) )
                  case Handshake_Initiator_Snd_1
                  by step( contradiction /* impossible chain */ )
                next
                  case Handshake_Responder_Snd_2_case_1
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.18, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.19, 0) ~~> (#vk, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.19, 0) ~~> (#vk, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Handshake_Responder_Snd_2_case_2
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.18, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.19, 0) ~~> (#vk, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.19, 0) ~~> (#vk, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case I_Snd_to_R
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_1
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case ephemeral_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_reveal
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_1
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_2
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              MIRRORED
            qed
          qed
        next
          case pair
          step( solve( !KU( 'g'^~e0 ) @ #vk.1 ) )
            case c_exp
            by step( solve( !KU( ~e0 ) @ #vk.4 ) )
          next
            case channel_send
            step( solve( !KU( $msg ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( $msg ) ▶₀ #vk.2 ) )
                case channel_send
                step( solve( Send( t ) ▶₀ #vr.8 ) )
                  case Handshake_Initiator_Snd_1
                  by step( contradiction /* impossible chain */ )
                next
                  case Handshake_Responder_Snd_2_case_1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.18, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.19, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.19, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Handshake_Responder_Snd_2_case_2
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.18, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.19, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.19, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case I_Snd_to_R
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_1
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case ephemeral_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_reveal
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_1
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_2
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              MIRRORED
            qed
          next
            case ephemeral_keygen
            step( solve( !KU( $msg ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( $msg ) ▶₀ #vk.2 ) )
                case channel_send
                step( solve( Send( t ) ▶₀ #vr.7 ) )
                  case Handshake_Initiator_Snd_1
                  by step( contradiction /* impossible chain */ )
                next
                  case Handshake_Responder_Snd_2_case_1
                  step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.17, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.18, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.18, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Handshake_Responder_Snd_2_case_2
                  step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.17, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.18, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.18, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case I_Snd_to_R
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_1
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case ephemeral_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_reveal
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_1
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_2
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              MIRRORED
            qed
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_1
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
            case d_exp_case_1
            step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
              case exp
              step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                case channel_send
                step( solve( !KU( 'g'^(~e0*x) ) @ #vk ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.4 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case channel_send_case_3
                  by step( solve( !KU( ~e0 ) @ #vk.1 ) )
                next
                  case channel_send_case_4
                  MIRRORED
                next
                  case channel_send_case_5
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case channel_send_case_6
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case channel_send_case_7
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case ephemeral_keygen_case_2
                  MIRRORED
                next
                  case ephemeral_keygen_case_3
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case peer_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case peer_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case test_agent_keygen_case_4
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                qed
              qed
            qed
          next
            case d_exp_case_2
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_3
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_4
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_5
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case exp
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
              case channel_send
              step( solve( !KU( 'g'^~e0 ) @ #vk ) )
                case c_exp
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case channel_send
                MIRRORED
              next
                case ephemeral_keygen
                MIRRORED
              qed
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
              case aead
              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 'g'^~s)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.7 ) )
                    case c_exp
                    by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case channel_send_case_4
                    by step( contradiction /* cyclic */ )
                  next
                    case ephemeral_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            next
              case d_2_decrypt
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case d_exp_case_1
                step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                  case exp
                  step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                    case c_kdf2
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case channel_send_case_3
                      step( solve( !KU( ~re ) @ #vk.7 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case channel_send_case_4
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case ephemeral_keygen_case_2
                      step( solve( !KU( ~re ) @ #vk.7 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case d_exp_case_2
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.6 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case channel_send_case_4
                    by step( contradiction /* cyclic */ )
                  next
                    case ephemeral_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case ephemeral_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.6 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case d_3_verify
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case true
                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.6 ) )
                    case c_exp
                    by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case channel_send_case_4
                    by step( contradiction /* cyclic */ )
                  next
                    case ephemeral_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case ephemeral_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  qed
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
              case aead
              step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                     '0',
                                     h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                        aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>),
                                             'g'^~s)
                                       >),
                                     $msg)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.7 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      by step( solve( !KU( ~s ) @ #vk.11 ) )
                    next
                      case peer_reveal
                      by step( solve( !KU( ~s ) @ #vk.11 ) )
                    qed
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    by step( solve( !KU( ~re ) @ #vk.10 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case peer_keygen
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_3
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            next
              case d_2_decrypt
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case Var_pub_msg
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.5 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      by step( solve( !KU( ~s ) @ #vk.9 ) )
                    next
                      case peer_reveal
                      by step( solve( !KU( ~s ) @ #vk.9 ) )
                    qed
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~s ) @ #vk.6 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~s ) @ #vk.6 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    by step( solve( !KU( ~re ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~s ) @ #vk.6 ) )
                  next
                    case peer_keygen
                    by step( solve( !KU( ~s ) @ #vk.6 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~s ) @ #vk.6 ) )
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.6 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_3
                    by step( solve( !KU( ~s ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case d_3_verify
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case true
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.6 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      by step( solve( !KU( ~s ) @ #vk.10 ) )
                    next
                      case peer_reveal
                      by step( solve( !KU( ~s ) @ #vk.10 ) )
                    qed
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    by step( solve( !KU( ~re ) @ #vk.9 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case peer_keygen
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_3
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  qed
                qed
              qed
            qed
          next
            case pair
            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 'g'^~s)
                         ) @ #vk.1 ) )
              case c_aead
              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.3 ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.10 ) )
                    case fresh
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          by step( solve( !KU( ~s ) @ #vk.19 ) )
                        next
                          case channel_send
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case test_agent_keygen
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          by step( solve( !KU( ~s ) @ #vk.19 ) )
                        next
                          case channel_send
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~s ) @ #vk.17 ) )
                        next
                          case test_agent_keygen
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.10 ) )
                    case fresh
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          by step( solve( !KU( ~s ) @ #vk.19 ) )
                        next
                          case channel_send
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case test_agent_keygen
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          by step( solve( !KU( ~s ) @ #vk.19 ) )
                        next
                          case channel_send
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~s ) @ #vk.17 ) )
                        next
                          case test_agent_keygen
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                qed
              qed
            next
              case channel_send
              step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                     '0',
                                     h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                        aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>),
                                             'g'^~s)
                                       >),
                                     $msg)
                           ) @ #vk.2 ) )
                case c_aead
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.3 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.9 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.12 ) )
                      case fresh
                      by step( solve( !KU( ~s ) @ #vk.13 ) )
                    next
                      case peer_reveal
                      by step( solve( !KU( ~s ) @ #vk.13 ) )
                    qed
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.12 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.14 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.14 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    by step( solve( !KU( ~re ) @ #vk.12 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  next
                    case peer_keygen
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_3
                    by step( solve( !KU( ~s ) @ #vk.10 ) )
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        next
          case pair
          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 'g'^~s)
                       ) @ #vk.3 ) )
            case c_aead
            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
              case c_kdf2
              step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                case c_exp
                by step( solve( !KU( ~e0 ) @ #vk.14 ) )
              next
                case channel_send_case_1
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case channel_send_case_2
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case channel_send_case_3
                step( solve( !KU( ~re ) @ #vk.12 ) )
                  case fresh
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        by step( solve( !KU( ~s ) @ #vk.21 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case test_agent_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_reveal
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        by step( solve( !KU( ~s ) @ #vk.21 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~s ) @ #vk.19 ) )
                      next
                        case test_agent_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                qed
              next
                case channel_send_case_4
                by step( contradiction /* cyclic */ )
              next
                case ephemeral_keygen_case_1
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case ephemeral_keygen_case_2
                step( solve( !KU( ~re ) @ #vk.12 ) )
                  case fresh
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        by step( solve( !KU( ~s ) @ #vk.21 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case test_agent_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_reveal
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        by step( solve( !KU( ~s ) @ #vk.21 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~s ) @ #vk.19 ) )
                      next
                        case test_agent_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                qed
              next
                case peer_keygen
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case test_agent_keygen_case_1
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case test_agent_keygen_case_2
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              qed
            qed
          next
            case channel_send
            step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                   '0',
                                   h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>),
                                           'g'^~s)
                                     >),
                                   $msg)
                         ) @ #vk.4 ) )
              case c_aead
              step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.5 ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.11 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.14 ) )
                    case fresh
                    by step( solve( !KU( ~s ) @ #vk.15 ) )
                  next
                    case peer_reveal
                    by step( solve( !KU( ~s ) @ #vk.15 ) )
                  qed
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~s ) @ #vk.12 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~s ) @ #vk.12 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.14 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.16 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.19 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.16 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.19 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( solve( !KU( ~re ) @ #vk.14 ) )
                next
                  case ephemeral_keygen
                  by step( solve( !KU( ~s ) @ #vk.12 ) )
                next
                  case peer_keygen
                  by step( solve( !KU( ~s ) @ #vk.12 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~s ) @ #vk.12 ) )
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.12 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~s ) @ #vk.12 ) )
                qed
              qed
            next
              case channel_send
              step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                case channel_send
                step( solve( !KU( 'g'^~e0 ) @ #vk.4 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case channel_send
                  MIRRORED
                next
                  case ephemeral_keygen
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case Handshake_Responder_Snd_2_case_2
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
            case d_exp_case_1
            step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
              case exp
              step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                case channel_send
                step( solve( !KU( 'g'^(~e0*x) ) @ #vk ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.4 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case channel_send_case_3
                  by step( solve( !KU( ~e0 ) @ #vk.1 ) )
                next
                  case channel_send_case_4
                  MIRRORED
                next
                  case channel_send_case_5
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case channel_send_case_6
                  by step( solve( !KU( ~e0 ) @ #vk.5 ) )
                next
                  case channel_send_case_7
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case ephemeral_keygen_case_2
                  MIRRORED
                next
                  case ephemeral_keygen_case_3
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case peer_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case peer_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~e0 ) @ #vk.2 ) )
                next
                  case test_agent_keygen_case_4
                  by step( solve( !KU( ~e0 ) @ #vk.3 ) )
                qed
              qed
            qed
          next
            case d_exp_case_2
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_3
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_4
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_5
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case exp
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
              case channel_send
              step( solve( !KU( 'g'^~e0 ) @ #vk ) )
                case c_exp
                by step( solve( !KU( ~e0 ) @ #vk.2 ) )
              next
                case channel_send
                MIRRORED
              next
                case ephemeral_keygen
                MIRRORED
              qed
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
              case aead
              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 'g'^~s)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.7 ) )
                    case c_exp
                    by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case channel_send_case_4
                    by step( contradiction /* cyclic */ )
                  next
                    case ephemeral_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case ephemeral_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            next
              case d_2_decrypt
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case d_exp_case_1
                step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                  case exp
                  step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                    case c_kdf2
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case channel_send_case_3
                      step( solve( !KU( ~re ) @ #vk.7 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case channel_send_case_4
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case ephemeral_keygen_case_2
                      step( solve( !KU( ~re ) @ #vk.7 ) )
                        case fresh
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      next
                        case peer_reveal
                        by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen_case_1
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen_case_2
                      by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case d_exp_case_2
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
                    case c_exp
                    by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.6 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case channel_send_case_4
                    by step( contradiction /* cyclic */ )
                  next
                    case ephemeral_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case ephemeral_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.6 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case d_3_verify
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case true
                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.6 ) )
                    case c_exp
                    by step( solve( !KU( ~e0 ) @ #vk.9 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case channel_send_case_4
                    by step( contradiction /* cyclic */ )
                  next
                    case ephemeral_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case ephemeral_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    next
                      case peer_reveal
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_2
                    by step( solve( !KU( ~e0 ) @ #vk.7 ) )
                  qed
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
              case aead
              step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                     '0',
                                     h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                        aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>),
                                             'g'^~s)
                                       >),
                                     $msg)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.7 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( ~s ) @ #vk.11 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.14 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                          next
                            case channel_send
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.17 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          next
                            case ephemeral_keygen
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.17 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( ~s ) @ #vk.11 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.14 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                          next
                            case channel_send_case_1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.17 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          next
                            case channel_send_case_2
                            by step( contradiction /* cyclic */ )
                          next
                            case ephemeral_keygen
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.17 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~e0)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~e0) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~re)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~re)
                                         ) @ #vk.15 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( ~re ) @ #vk.12 ) )
                            case peer_reveal
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.10 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.15 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( ~re ) @ #vk.12 ) )
                            case peer_reveal
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.10 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.15 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            next
              case d_2_decrypt
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case Var_pub_msg
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.5 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      step( solve( !KU( ~s ) @ #vk.9 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( ~s ) @ #vk.9 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.8 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.12 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                          next
                            case channel_send_case_1
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case channel_send_case_2
                            by step( contradiction /* cyclic */ )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~s ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    step( solve( !KU( ~s ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~e0)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~e0) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                      qed
                    qed
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~s ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.6 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( ~re ) @ #vk.10 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( ~re ) @ #vk.10 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~s ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.6 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.6 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.10 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case d_3_verify
              step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                case true
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.1 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.6 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      step( solve( !KU( ~s ) @ #vk.10 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                          next
                            case channel_send
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.16 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.17 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          next
                            case ephemeral_keygen
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.16 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.17 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( ~s ) @ #vk.10 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                          next
                            case channel_send_case_1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.16 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.17 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          next
                            case channel_send_case_2
                            by step( contradiction /* cyclic */ )
                          next
                            case ephemeral_keygen
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.11 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.16 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.17 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~e0)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~e0) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~re)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.10 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~re)
                                         ) @ #vk.14 ) )
                              case c_aead
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                      qed
                    qed
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.9 ) )
                            case c_h
                            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                         ) @ #vk.13 ) )
                              case c_aead
                              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                                case c_kdf2
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            next
                              case channel_send
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( ~re ) @ #vk.11 ) )
                            case peer_reveal
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.10 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.14 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( ~re ) @ #vk.11 ) )
                            case peer_reveal
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.10 ) )
                              case c_h
                              step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                           ) @ #vk.14 ) )
                                case c_aead
                                step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                                  case c_kdf2
                                  by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                                qed
                              next
                                case channel_send
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case pair
            step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 'g'^~s)
                         ) @ #vk.1 ) )
              case c_aead
              step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.3 ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.12 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.10 ) )
                    case fresh
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          step( solve( !KU( ~s ) @ #vk.19 ) )
                            case peer_reveal
                            step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                              case c_kdf1
                              step( solve( !KU( h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                           'g'^~e0>),
                                                        'g'^~s)
                                                  >)
                                           ) @ #vk.17 ) )
                                case c_h
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case channel_send
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          step( solve( !KU( ~s ) @ #vk.19 ) )
                            case peer_reveal
                            step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                              case c_kdf1
                              step( solve( !KU( h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                           'g'^~e0>),
                                                        'g'^~s)
                                                  >)
                                           ) @ #vk.17 ) )
                                case c_h
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case channel_send_case_1
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case channel_send_case_2
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~re)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen_case_1
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen_case_2
                          step( solve( !KU( ~s ) @ #vk.17 ) )
                            case peer_reveal
                            step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.17 ) )
                              case c_kdf1
                              step( solve( !KU( h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                           'g'^~e0>),
                                                        'g'^~s)
                                                  >)
                                           ) @ #vk.16 ) )
                                case c_h
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.10 ) )
                    case fresh
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          step( solve( !KU( ~s ) @ #vk.19 ) )
                            case peer_reveal
                            step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                              case c_kdf1
                              step( solve( !KU( h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                           'g'^~e0>),
                                                        'g'^~s)
                                                  >)
                                           ) @ #vk.17 ) )
                                case c_h
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case channel_send
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                           '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           $msg)
                                 ) @ #vk.6 ) )
                      case c_aead
                      step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                   ) @ #vk.11 ) )
                        case c_kdf2
                        step( solve( !KU( 'g'^(~re*~s) ) @ #vk.16 ) )
                          case c_exp
                          step( solve( !KU( ~s ) @ #vk.19 ) )
                            case peer_reveal
                            step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                              case c_kdf1
                              step( solve( !KU( h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                           'g'^~e0>),
                                                        'g'^~s)
                                                  >)
                                           ) @ #vk.17 ) )
                                case c_h
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        next
                          case channel_send_case_1
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case channel_send_case_2
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~re)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen_case_1
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.16 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.15 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen_case_2
                          step( solve( !KU( ~s ) @ #vk.17 ) )
                            case peer_reveal
                            step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.17 ) )
                              case c_kdf1
                              step( solve( !KU( h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                      'g'^~e0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                           'g'^~e0>),
                                                        'g'^~s)
                                                  >)
                                           ) @ #vk.16 ) )
                                case c_h
                                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case channel_send
                      by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                    qed
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                qed
              qed
            next
              case channel_send
              step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                     '0',
                                     h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                        aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>),
                                             'g'^~s)
                                       >),
                                     $msg)
                           ) @ #vk.2 ) )
                case c_aead
                step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.3 ) )
                  case c_kdf2
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.9 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.12 ) )
                      case fresh
                      step( solve( !KU( ~s ) @ #vk.13 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.16 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                          next
                            case channel_send
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.13 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case ephemeral_keygen
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.13 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( ~s ) @ #vk.13 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.16 ) )
                            case c_exp
                            by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                          next
                            case channel_send_case_1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.13 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case channel_send_case_2
                            by step( contradiction /* cyclic */ )
                          next
                            case ephemeral_keygen
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.13 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~e0)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~e0) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.12 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.14 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.14 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    step( solve( !KU( ~re ) @ #vk.12 ) )
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.14 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.13 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.12 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.15 ) )
                      qed
                    qed
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.11 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( ~re ) @ #vk.14 ) )
                            case peer_reveal
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.12 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( ~re ) @ #vk.14 ) )
                            case peer_reveal
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.12 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.10 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.13 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.14 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.14 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        next
          case pair
          step( solve( !KU( aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 'g'^~s)
                       ) @ #vk.3 ) )
            case c_aead
            step( solve( !KU( kdf2(<'NX', 'g'^(~e0*~re)>) ) @ #vk.5 ) )
              case c_kdf2
              step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.11 ) )
                case c_exp
                by step( solve( !KU( ~e0 ) @ #vk.14 ) )
              next
                case channel_send_case_1
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case channel_send_case_2
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case channel_send_case_3
                step( solve( !KU( ~re ) @ #vk.12 ) )
                  case fresh
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        step( solve( !KU( ~s ) @ #vk.21 ) )
                          case peer_reveal
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.20 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.19 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_reveal
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        step( solve( !KU( ~s ) @ #vk.21 ) )
                          case peer_reveal
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.20 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.19 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case channel_send_case_2
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen_case_2
                        step( solve( !KU( ~s ) @ #vk.19 ) )
                          case peer_reveal
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.19 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.18 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                qed
              next
                case channel_send_case_4
                by step( contradiction /* cyclic */ )
              next
                case ephemeral_keygen_case_1
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case ephemeral_keygen_case_2
                step( solve( !KU( ~re ) @ #vk.12 ) )
                  case fresh
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        step( solve( !KU( ~s ) @ #vk.21 ) )
                          case peer_reveal
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.20 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.19 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                next
                  case peer_reveal
                  step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                         '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         $msg)
                               ) @ #vk.8 ) )
                    case c_aead
                    step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                                 ) @ #vk.13 ) )
                      case c_kdf2
                      step( solve( !KU( 'g'^(~re*~s) ) @ #vk.18 ) )
                        case c_exp
                        step( solve( !KU( ~s ) @ #vk.21 ) )
                          case peer_reveal
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.20 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.19 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case channel_send_case_2
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~re)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.18 ) )
                          case c_kdf1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.17 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen_case_2
                        step( solve( !KU( ~s ) @ #vk.19 ) )
                          case peer_reveal
                          step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.19 ) )
                            case c_kdf1
                            step( solve( !KU( h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                         'g'^~e0>),
                                                      'g'^~s)
                                                >)
                                         ) @ #vk.18 ) )
                              case c_h
                              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                  qed
                qed
              next
                case peer_keygen
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case test_agent_keygen_case_1
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              next
                case test_agent_keygen_case_2
                by step( solve( !KU( ~e0 ) @ #vk.12 ) )
              qed
            qed
          next
            case channel_send
            step( solve( !KU( aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>),
                                   '0',
                                   h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>),
                                           'g'^~s)
                                     >),
                                   $msg)
                         ) @ #vk.4 ) )
              case c_aead
              step( solve( !KU( kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.5 ) )
                case c_kdf2
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.11 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.14 ) )
                    case fresh
                    step( solve( !KU( ~s ) @ #vk.15 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.18 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.20 ) )
                        next
                          case channel_send
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.15 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.15 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( ~s ) @ #vk.15 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.14 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.18 ) )
                          case c_exp
                          by step( solve( !KU( ~e0 ) @ #vk.20 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.15 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.15 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e0 ) @ #vk.19 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case channel_send_case_1
                  step( solve( !KU( ~s ) @ #vk.12 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_2
                  step( solve( !KU( ~s ) @ #vk.12 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~e0)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~e0) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.14 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.16 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.19 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.16 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.19 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  step( solve( !KU( ~re ) @ #vk.14 ) )
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.16 ) )
                      case c_exp
                      by step( solve( !KU( ~e0 ) @ #vk.19 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~re)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.15 ) )
                        case c_kdf1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~re)
                                            >)
                                     ) @ #vk.14 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e0 ) @ #vk.17 ) )
                    qed
                  qed
                next
                  case ephemeral_keygen
                  step( solve( !KU( ~s ) @ #vk.12 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      next
                        case channel_send_case_3
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.12 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( h(<
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0>), 
                                             aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                     'g'^~e0>),
                                                  'g'^~s)
                                            >)
                                     ) @ #vk.13 ) )
                          case c_h
                          by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.12 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( ~re ) @ #vk.16 ) )
                          case peer_reveal
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.14 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( ~re ) @ #vk.16 ) )
                          case peer_reveal
                          step( solve( !KU( h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 'g'^~e0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), payload>), 
                                                       'g'^~e0>),
                                                    'g'^~s)
                                              >)
                                       ) @ #vk.14 ) )
                            case c_h
                            by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                          qed
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~s ) @ #vk.12 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.12 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e0*~re)>) ) @ #vk.12 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.15 ) )
                        case c_exp
                        by step( solve( !KU( ~e0 ) @ #vk.18 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.16 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e0 ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case channel_send
              step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.6 ) )
                case channel_send
                step( solve( !KU( 'g'^~e0 ) @ #vk.4 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.6 ) )
                next
                  case channel_send
                  MIRRORED
                next
                  case ephemeral_keygen
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case I_Snd_to_R
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
            case Const_pub_0
            step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
              case peer_keygen
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.8 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.21 ) )
                  case channel_send
                  step( solve( !KU( '0' ) @ #vk ) )
                    case coerce
                    step( solve( !KD( '0' ) ▶₀ #vk ) )
                      case channel_send
                      step( solve( Send( t ) ▶₀ #vr.25 ) )
                        case Handshake_Initiator_Snd_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Handshake_Responder_Snd_2
                        by step( contradiction /* impossible chain */ )
                      next
                        case I_Snd_to_R
                        by step( contradiction /* impossible chain */ )
                      next
                        case R_Snd_to_I
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case ephemeral_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_reveal
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            next
              case test_common_case_1
              by step( solve( Receivable( <'g'^~re0, 
                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >),
                                                'g'^~rs4), 
                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                                h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                           'g'^~re0>),
                                                        'g'^~rs4)
                                                  >),
                                                msg.2)
                                          >
                              ) ▶₀ #vr.8 ) )
            next
              case test_common_case_2
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.8 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.22 ) )
                  case channel_send
                  step( solve( !KU( '0' ) @ #vk ) )
                    case coerce
                    step( solve( !KD( '0' ) ▶₀ #vk ) )
                      case channel_send
                      step( solve( Send( t ) ▶₀ #vr.26 ) )
                        case Handshake_Initiator_Snd_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Handshake_Responder_Snd_2
                        by step( contradiction /* impossible chain */ )
                      next
                        case I_Snd_to_R
                        by step( contradiction /* impossible chain */ )
                      next
                        case R_Snd_to_I
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case ephemeral_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_reveal
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            next
              case test_common_case_3
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.8 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.22 ) )
                  case channel_send
                  step( solve( !KU( '0' ) @ #vk ) )
                    case coerce
                    step( solve( !KD( '0' ) ▶₀ #vk ) )
                      case channel_send
                      step( solve( Send( t ) ▶₀ #vr.26 ) )
                        case Handshake_Initiator_Snd_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Handshake_Responder_Snd_2
                        by step( contradiction /* impossible chain */ )
                      next
                        case I_Snd_to_R
                        by step( contradiction /* impossible chain */ )
                      next
                        case R_Snd_to_I
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case ephemeral_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_reveal
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            next
              case test_common_case_4
              by step( solve( Receivable( <'g'^~re0, 
                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >),
                                                'g'^~rs4), 
                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                                h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                           'g'^~re0>),
                                                        'g'^~rs4)
                                                  >),
                                                msg.2)
                                          >
                              ) ▶₀ #vr.8 ) )
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
            case aead
            step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
              case peer_keygen
              step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                'g'^(~e*~rs4)>)),
                                     '0', '0', $msg)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.4 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.7 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.8 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.11 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.14 ) )
                          next
                            case channel_send_case_1
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case channel_send_case_2
                            step( solve( !KU( ~re0 ) @ #vk.12 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case channel_send_case_3
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case channel_send_case_4
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case channel_send_case_5
                            by step( solve( !KU( ~e ) @ #vk.14 ) )
                          next
                            case channel_send_case_6
                            by step( solve( !KU( ~e ) @ #vk.14 ) )
                          next
                            case ephemeral_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case ephemeral_keygen_case_2
                            step( solve( !KU( ~re0 ) @ #vk.12 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case test_agent_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case test_agent_keygen_case_2
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          qed
                        qed
                      qed
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.8 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.11 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.14 ) )
                          next
                            case channel_send_case_1
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case channel_send_case_2
                            step( solve( !KU( ~re0 ) @ #vk.12 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case channel_send_case_3
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case channel_send_case_4
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case channel_send_case_5
                            by step( solve( !KU( ~e ) @ #vk.14 ) )
                          next
                            case channel_send_case_6
                            by step( solve( !KU( ~e ) @ #vk.14 ) )
                          next
                            case ephemeral_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case ephemeral_keygen_case_2
                            step( solve( !KU( ~re0 ) @ #vk.12 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case test_agent_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          next
                            case test_agent_keygen_case_2
                            by step( solve( !KU( ~e ) @ #vk.12 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.8 ) )
                    qed
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re0, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                               'g'^~rs4), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                          'g'^~re0>),
                                                       'g'^~rs4)
                                                 >),
                                               msg.2)
                                         >
                             ) ▶₀ #vr.8 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.22 ) )
                    case channel_send
                    MIRRORED
                  qed
                qed
              qed
            next
              case test_common_case_1
              step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                'g'^(~e*~rs4)>)),
                                     '0', '0', $msg)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.4 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.7 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case channel_send
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.8 ) )
                    qed
                  qed
                qed
              next
                case channel_send
                by step( solve( Receivable( <'g'^~re0, 
                                             aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                    >),
                                                  'g'^~rs4), 
                                             aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                                  h(<
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>), 
                                                     aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                          h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                             'g'^~re0>),
                                                          'g'^~rs4)
                                                    >),
                                                  msg.2)
                                            >
                                ) ▶₀ #vr.8 ) )
              qed
            next
              case test_common_case_2
              step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                'g'^(~e*~rs4)>)),
                                     '0', '0', $msg)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.4 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.7 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.8 ) )
                    qed
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re0, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                               'g'^~rs4), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                          'g'^~re0>),
                                                       'g'^~rs4)
                                                 >),
                                               msg.2)
                                         >
                             ) ▶₀ #vr.8 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.23 ) )
                    case channel_send
                    MIRRORED
                  qed
                qed
              qed
            next
              case test_common_case_3
              step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                'g'^(~e*~rs4)>)),
                                     '0', '0', $msg)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.4 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.7 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.8 ) )
                    qed
                  qed
                qed
              next
                case channel_send
                step( solve( Receivable( <'g'^~re0, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                               'g'^~rs4), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                          'g'^~re0>),
                                                       'g'^~rs4)
                                                 >),
                                               msg.2)
                                         >
                             ) ▶₀ #vr.8 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.23 ) )
                    case channel_send
                    MIRRORED
                  qed
                qed
              qed
            next
              case test_common_case_4
              step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                'g'^(~e*~rs4)>)),
                                     '0', '0', $msg)
                           ) @ #vk ) )
                case c_aead
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.4 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.7 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.10 ) )
                    next
                      case channel_send
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.8 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.8 ) )
                    qed
                  qed
                qed
              next
                case channel_send
                by step( solve( Receivable( <'g'^~re0, 
                                             aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                    >),
                                                  'g'^~rs4), 
                                             aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                                  h(<
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>), 
                                                     aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                          h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                             'g'^~re0>),
                                                          'g'^~rs4)
                                                    >),
                                                  msg.2)
                                            >
                                ) ▶₀ #vr.8 ) )
              qed
            qed
          next
            case d_2_decrypt
            step( solve( (#vr.14, 0) ~~> (#i, 1) ) )
              case Var_pub_msg
              step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
                case peer_keygen
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.7 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.10 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case channel_send_case_3
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_4
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_5
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_6
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case ephemeral_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case ephemeral_keygen_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_2
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          qed
                        qed
                      qed
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.7 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.10 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case channel_send_case_3
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_4
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_5
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_6
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case ephemeral_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case ephemeral_keygen_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_2
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_1
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_2
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_3
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_4
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_3_verify
            step( solve( (#vr.14, 0) ~~> (#i, 1) ) )
              case true
              step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
                case peer_keygen
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.7 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.10 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case channel_send_case_3
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_4
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_5
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_6
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case ephemeral_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case ephemeral_keygen_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_2
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          qed
                        qed
                      qed
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.7 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.10 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case channel_send_case_3
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_4
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case channel_send_case_5
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case channel_send_case_6
                            by step( solve( !KU( ~e ) @ #vk.13 ) )
                          next
                            case ephemeral_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case ephemeral_keygen_case_2
                            step( solve( !KU( ~re0 ) @ #vk.11 ) )
                              case fresh
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            next
                              case peer_reveal
                              by step( solve( Receivable( <'g'^~re0, 
                                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                h(<
                                                                   h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                      $msg.1>), 
                                                                   'g'^~re0>),
                                                                'g'^~rs4), 
                                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                                                      'g'^(~e*~rs4)>),
                                                                '0',
                                                                h(<
                                                                   h(<
                                                                      h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                         $msg.1>), 
                                                                      'g'^~re0>), 
                                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                        h(<
                                                                           h(<
                                                                              h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                                >), 
                                                                              $msg.1>), 
                                                                           'g'^~re0>),
                                                                        'g'^~rs4)
                                                                  >),
                                                                msg.2)
                                                          >
                                              ) ▶₀ #vr.8 ) )
                            qed
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_1
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          next
                            case test_agent_keygen_case_2
                            by step( solve( !KU( ~e ) @ #vk.11 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_1
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_2
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_3
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send_case_1
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case channel_send_case_2
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              next
                case test_common_case_4
                step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                            >))
                             ) @ #vk.1 ) )
                  case c_kdf1
                  step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                               ) @ #vk.3 ) )
                    case c_kdf1
                    step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.9 ) )
                    next
                      case channel_send
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case ephemeral_keygen
                      by step( solve( !KU( ~rs4 ) @ #vk.7 ) )
                    next
                      case test_agent_keygen
                      by step( solve( !KU( ~e ) @ #vk.7 ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case pair
          step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.5 ) )
            case peer_keygen
            step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                              'g'^(~e*~rs4)>)),
                                   '0', '0', $msg)
                         ) @ #vk.2 ) )
              case c_aead
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk.3 ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.5 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.8 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_2
                          step( solve( !KU( ~re0 ) @ #vk.13 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_4
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_5
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_6
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen_case_2
                          step( solve( !KU( ~re0 ) @ #vk.13 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case test_agent_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case test_agent_keygen_case_2
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re0)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re0) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_2
                          step( solve( !KU( ~re0 ) @ #vk.13 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_4
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_5
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_6
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen_case_2
                          step( solve( !KU( ~re0 ) @ #vk.13 ) )
                            case fresh
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          next
                            case peer_reveal
                            by step( solve( Receivable( <'g'^~re0, 
                                                         aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                              h(<
                                                                 h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1
                                                                   >), 
                                                                 'g'^~re0>),
                                                              'g'^~rs4), 
                                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                                                   >),
                                                              '0',
                                                              h(<
                                                                 h(<
                                                                    h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), 
                                                                       $msg.1>), 
                                                                    'g'^~re0>), 
                                                                 aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                                      h(<
                                                                         h(<
                                                                            h(<h(<'NX', 'prologue'>), 'g'^~e
                                                                              >), 
                                                                            $msg.1>), 
                                                                         'g'^~re0>),
                                                                      'g'^~rs4)
                                                                >),
                                                              msg.2)
                                                        >
                                            ) ▶₀ #vr.8 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case test_agent_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case test_agent_keygen_case_2
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen
                    by step( solve( !KU( ~e ) @ #vk.9 ) )
                  qed
                qed
              qed
            next
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.8 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.21 ) )
                  case channel_send
                  step( solve( !KU( '0' ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( '0' ) ▶₀ #vk.2 ) )
                      case channel_send
                      step( solve( Send( t ) ▶₀ #vr.25 ) )
                        case Handshake_Initiator_Snd_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Handshake_Responder_Snd_2
                        by step( contradiction /* impossible chain */ )
                      next
                        case I_Snd_to_R
                        by step( contradiction /* impossible chain */ )
                      next
                        case R_Snd_to_I
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case ephemeral_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_reveal
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            qed
          next
            case test_common_case_1
            step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                              'g'^(~e*~rs4)>)),
                                   '0', '0', $msg)
                         ) @ #vk.2 ) )
              case c_aead
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk.3 ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.5 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.8 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case channel_send
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.9 ) )
                  qed
                qed
              qed
            next
              case channel_send
              by step( solve( Receivable( <'g'^~re0, 
                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >),
                                                'g'^~rs4), 
                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                                h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                           'g'^~re0>),
                                                        'g'^~rs4)
                                                  >),
                                                msg.2)
                                          >
                              ) ▶₀ #vr.8 ) )
            qed
          next
            case test_common_case_2
            step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                              'g'^(~e*~rs4)>)),
                                   '0', '0', $msg)
                         ) @ #vk.2 ) )
              case c_aead
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk.3 ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.5 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.8 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.9 ) )
                  qed
                qed
              qed
            next
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.8 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.22 ) )
                  case channel_send
                  step( solve( !KU( '0' ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( '0' ) ▶₀ #vk.2 ) )
                      case channel_send
                      step( solve( Send( t ) ▶₀ #vr.26 ) )
                        case Handshake_Initiator_Snd_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Handshake_Responder_Snd_2
                        by step( contradiction /* impossible chain */ )
                      next
                        case I_Snd_to_R
                        by step( contradiction /* impossible chain */ )
                      next
                        case R_Snd_to_I
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case ephemeral_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_reveal
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            qed
          next
            case test_common_case_3
            step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                              'g'^(~e*~rs4)>)),
                                   '0', '0', $msg)
                         ) @ #vk.2 ) )
              case c_aead
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk.3 ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.5 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.8 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.9 ) )
                  qed
                qed
              qed
            next
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.8 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.22 ) )
                  case channel_send
                  step( solve( !KU( '0' ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( '0' ) ▶₀ #vk.2 ) )
                      case channel_send
                      step( solve( Send( t ) ▶₀ #vr.26 ) )
                        case Handshake_Initiator_Snd_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Handshake_Responder_Snd_2
                        by step( contradiction /* impossible chain */ )
                      next
                        case I_Snd_to_R
                        by step( contradiction /* impossible chain */ )
                      next
                        case R_Snd_to_I
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case ephemeral_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_keygen
                      by step( contradiction /* impossible chain */ )
                    next
                      case peer_reveal
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case test_agent_keygen_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            qed
          next
            case test_common_case_4
            step( solve( !KU( aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 
                                              'g'^(~e*~rs4)>)),
                                   '0', '0', $msg)
                         ) @ #vk.2 ) )
              case c_aead
              step( solve( !KU( kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)
                                          >))
                           ) @ #vk.3 ) )
                case c_kdf1
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)
                             ) @ #vk.5 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~e*~rs4) ) @ #vk.8 ) )
                    case c_exp
                    by step( solve( !KU( ~e ) @ #vk.11 ) )
                  next
                    case channel_send
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~rs4 ) @ #vk.9 ) )
                  next
                    case test_agent_keygen
                    by step( solve( !KU( ~e ) @ #vk.9 ) )
                  qed
                qed
              qed
            next
              case channel_send
              by step( solve( Receivable( <'g'^~re0, 
                                           aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >),
                                                'g'^~rs4), 
                                           aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                                h(<
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                      'g'^~re0>), 
                                                   aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                        h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                           'g'^~re0>),
                                                        'g'^~rs4)
                                                  >),
                                                msg.2)
                                          >
                              ) ▶₀ #vr.8 ) )
            qed
          qed
        qed
      next
        case R_Snd_to_I_case_1
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.16, 0) ~~> (#i, 1) ) )
            case Const_pub_1
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                           msg.2)
                                     >
                         ) ▶₀ #vr.11 ) )
              case channel_send
              step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.22 ) )
                case test_common_case_1
                step( solve( Receivable( <'g'^~e, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                               'g'^~s), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                          'g'^~e>),
                                                       'g'^~s)
                                                 >),
                                               msg.4)
                                         >
                             ) ▶₀ #vr.25 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                    case channel_send
                    step( solve( !KU( '1' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( '1' ) ▶₀ #vk ) )
                        case channel_send
                        step( solve( Send( t ) ▶₀ #vr.33 ) )
                          case Handshake_Initiator_Snd_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Handshake_Responder_Snd_2
                          by step( contradiction /* impossible chain */ )
                        next
                          case I_Snd_to_R
                          by step( contradiction /* impossible chain */ )
                        next
                          case R_Snd_to_I
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case ephemeral_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_reveal
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              next
                case test_common_case_2
                step( solve( Receivable( <'g'^~e, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                               'g'^~s), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                          'g'^~e>),
                                                       'g'^~s)
                                                 >),
                                               msg.4)
                                         >
                             ) ▶₀ #vr.25 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                    case channel_send
                    step( solve( !KU( '1' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( '1' ) ▶₀ #vk ) )
                        case channel_send
                        step( solve( Send( t ) ▶₀ #vr.33 ) )
                          case Handshake_Initiator_Snd_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Handshake_Responder_Snd_2
                          by step( contradiction /* impossible chain */ )
                        next
                          case I_Snd_to_R
                          by step( contradiction /* impossible chain */ )
                        next
                          case R_Snd_to_I
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case ephemeral_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_reveal
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 1) ) )
            case aead
            step( solve( !KU( aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                              'g'^(~re*~s)>)),
                                   '1', '0', $msg)
                         ) @ #vk ) )
              case c_aead
              step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                           ) @ #vk.1 ) )
                case c_kdf2
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.5 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.8 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.11 ) )
                      case fresh
                      by step( solve( !KU( ~s ) @ #vk.12 ) )
                    next
                      case peer_reveal
                      by step( solve( !KU( ~s ) @ #vk.12 ) )
                    qed
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.11 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    by step( solve( !KU( ~re ) @ #vk.11 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  next
                    case peer_keygen
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_3
                    by step( solve( !KU( ~s ) @ #vk.9 ) )
                  qed
                qed
              qed
            next
              case channel_send
              step( solve( Receivable( <'0', 
                                        aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                             msg.2)
                                       >
                           ) ▶₀ #vr.11 ) )
                case channel_send
                step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.23 ) )
                  case test_common_case_1
                  step( solve( Receivable( <'g'^~e, 
                                            aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                   >),
                                                 'g'^~s), 
                                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                                 h(<
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                       'g'^~e>), 
                                                    aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                            'g'^~e>),
                                                         'g'^~s)
                                                   >),
                                                 msg.4)
                                           >
                               ) ▶₀ #vr.26 ) )
                    case channel_send
                    step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                      case channel_send
                      MIRRORED
                    qed
                  qed
                next
                  case test_common_case_2
                  step( solve( Receivable( <'g'^~e, 
                                            aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                   >),
                                                 'g'^~s), 
                                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                                 h(<
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                       'g'^~e>), 
                                                    aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                            'g'^~e>),
                                                         'g'^~s)
                                                   >),
                                                 msg.4)
                                           >
                               ) ▶₀ #vr.26 ) )
                    case channel_send
                    step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                      case channel_send
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_2_decrypt
            step( solve( (#vr.17, 0) ~~> (#i, 1) ) )
              case Var_pub_msg
              step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                           ) @ #vk.1 ) )
                case c_kdf2
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.3 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.6 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      by step( solve( !KU( ~s ) @ #vk.10 ) )
                    next
                      case peer_reveal
                      by step( solve( !KU( ~s ) @ #vk.10 ) )
                    qed
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    by step( solve( !KU( ~re ) @ #vk.10 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case peer_keygen
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_3
                    by step( solve( !KU( ~s ) @ #vk.7 ) )
                  qed
                qed
              qed
            qed
          next
            case d_3_verify
            step( solve( (#vr.17, 0) ~~> (#i, 1) ) )
              case true
              step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                           ) @ #vk.1 ) )
                case c_kdf2
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.4 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.7 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      by step( solve( !KU( ~s ) @ #vk.11 ) )
                    next
                      case peer_reveal
                      by step( solve( !KU( ~s ) @ #vk.11 ) )
                    qed
                  next
                    case channel_send_case_1
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case channel_send_case_2
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    by step( solve( !KU( ~re ) @ #vk.10 ) )
                  next
                    case ephemeral_keygen
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case peer_keygen
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_1
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_3
                    by step( solve( !KU( ~s ) @ #vk.8 ) )
                  qed
                qed
              qed
            qed
          qed
        next
          case pair
          step( solve( !KU( aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                            'g'^(~re*~s)>)),
                                 '1', '0', $msg)
                       ) @ #vk.2 ) )
            case c_aead
            step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                         ) @ #vk.3 ) )
              case c_kdf2
              step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.6 ) )
                case c_kdf1
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.9 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.12 ) )
                    case fresh
                    by step( solve( !KU( ~s ) @ #vk.13 ) )
                  next
                    case peer_reveal
                    by step( solve( !KU( ~s ) @ #vk.13 ) )
                  qed
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~s ) @ #vk.10 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~s ) @ #vk.10 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.12 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.14 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.17 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.14 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.17 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.15 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  by step( solve( !KU( ~re ) @ #vk.12 ) )
                next
                  case ephemeral_keygen
                  by step( solve( !KU( ~s ) @ #vk.10 ) )
                next
                  case peer_keygen
                  by step( solve( !KU( ~s ) @ #vk.10 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~s ) @ #vk.10 ) )
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.10 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_3
                  by step( solve( !KU( ~s ) @ #vk.10 ) )
                qed
              qed
            qed
          next
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                           msg.2)
                                     >
                         ) ▶₀ #vr.11 ) )
              case channel_send
              step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.22 ) )
                case test_common_case_1
                step( solve( Receivable( <'g'^~e, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                               'g'^~s), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                          'g'^~e>),
                                                       'g'^~s)
                                                 >),
                                               msg.4)
                                         >
                             ) ▶₀ #vr.25 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                    case channel_send
                    step( solve( !KU( '1' ) @ #vk.2 ) )
                      case coerce
                      step( solve( !KD( '1' ) ▶₀ #vk.2 ) )
                        case channel_send
                        step( solve( Send( t ) ▶₀ #vr.33 ) )
                          case Handshake_Initiator_Snd_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Handshake_Responder_Snd_2
                          by step( contradiction /* impossible chain */ )
                        next
                          case I_Snd_to_R
                          by step( contradiction /* impossible chain */ )
                        next
                          case R_Snd_to_I
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case ephemeral_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_reveal
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              next
                case test_common_case_2
                step( solve( Receivable( <'g'^~e, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                               'g'^~s), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                          'g'^~e>),
                                                       'g'^~s)
                                                 >),
                                               msg.4)
                                         >
                             ) ▶₀ #vr.25 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                    case channel_send
                    step( solve( !KU( '1' ) @ #vk.2 ) )
                      case coerce
                      step( solve( !KD( '1' ) ▶₀ #vk.2 ) )
                        case channel_send
                        step( solve( Send( t ) ▶₀ #vr.33 ) )
                          case Handshake_Initiator_Snd_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Handshake_Responder_Snd_2
                          by step( contradiction /* impossible chain */ )
                        next
                          case I_Snd_to_R
                          by step( contradiction /* impossible chain */ )
                        next
                          case R_Snd_to_I
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case ephemeral_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_reveal
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case R_Snd_to_I_case_2
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.16, 0) ~~> (#i, 1) ) )
            case Const_pub_1
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                           msg.2)
                                     >
                         ) ▶₀ #vr.11 ) )
              case channel_send
              step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.22 ) )
                case peer_keygen
                step( solve( Receivable( <'g'^~e, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                               'g'^~s), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                          'g'^~e>),
                                                       'g'^~s)
                                                 >),
                                               msg.4)
                                         >
                             ) ▶₀ #vr.25 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                    case channel_send
                    step( solve( !KU( '1' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( '1' ) ▶₀ #vk ) )
                        case channel_send
                        step( solve( Send( t ) ▶₀ #vr.32 ) )
                          case Handshake_Initiator_Snd_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Handshake_Responder_Snd_2
                          by step( contradiction /* impossible chain */ )
                        next
                          case I_Snd_to_R
                          by step( contradiction /* impossible chain */ )
                        next
                          case R_Snd_to_I
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case ephemeral_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_reveal
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.16, 0) ~~> (#i, 1) ) )
            case aead
            step( solve( !KU( aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                              'g'^(~re*~s)>)),
                                   '1', '0', $msg)
                         ) @ #vk ) )
              case c_aead
              step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                           ) @ #vk.1 ) )
                case c_kdf2
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.5 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.8 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.11 ) )
                      case fresh
                      step( solve( !KU( ~s ) @ #vk.12 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re) ) @ #vk.15 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.17 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( ~s ) @ #vk.12 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re) ) @ #vk.15 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.17 ) )
                          next
                            case channel_send_case_1
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case channel_send_case_2
                            by step( contradiction /* cyclic */ )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.16 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~e)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~e) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.11 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    step( solve( !KU( ~re ) @ #vk.11 ) )
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~re)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~re)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( ~re ) @ #vk.13 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( ~re ) @ #vk.13 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.9 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.15 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.13 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case channel_send
              step( solve( Receivable( <'0', 
                                        aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                             msg.2)
                                       >
                           ) ▶₀ #vr.11 ) )
                case channel_send
                step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.23 ) )
                  case peer_keygen
                  step( solve( Receivable( <'g'^~e, 
                                            aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                   >),
                                                 'g'^~s), 
                                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                                 h(<
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                       'g'^~e>), 
                                                    aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                            'g'^~e>),
                                                         'g'^~s)
                                                   >),
                                                 msg.4)
                                           >
                               ) ▶₀ #vr.26 ) )
                    case channel_send
                    step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                      case channel_send
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_2_decrypt
            step( solve( (#vr.17, 0) ~~> (#i, 1) ) )
              case Var_pub_msg
              step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                           ) @ #vk.1 ) )
                case c_kdf2
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.3 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.6 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.9 ) )
                      case fresh
                      step( solve( !KU( ~s ) @ #vk.10 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.15 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( ~s ) @ #vk.10 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.9 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.15 ) )
                          next
                            case channel_send_case_1
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case channel_send_case_2
                            by step( contradiction /* cyclic */ )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.14 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~e)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~e) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~re)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~re)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.7 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( ~re ) @ #vk.11 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( ~re ) @ #vk.11 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.7 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.7 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.10 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.13 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.11 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e ) @ #vk.11 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_3_verify
            step( solve( (#vr.17, 0) ~~> (#i, 1) ) )
              case true
              step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                           ) @ #vk.1 ) )
                case c_kdf2
                step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                             ) @ #vk.4 ) )
                  case c_kdf1
                  step( solve( !KU( 'g'^(~re*~s) ) @ #vk.7 ) )
                    case c_exp
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( ~s ) @ #vk.11 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re) ) @ #vk.14 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.16 ) )
                          next
                            case channel_send
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( ~s ) @ #vk.11 ) )
                        case peer_reveal
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                          case c_kdf1
                          step( solve( !KU( 'g'^(~e*~re) ) @ #vk.14 ) )
                            case c_exp
                            by step( solve( !KU( ~e ) @ #vk.16 ) )
                          next
                            case channel_send_case_1
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case channel_send_case_2
                            by step( contradiction /* cyclic */ )
                          next
                            case ephemeral_keygen
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          next
                            case peer_keygen
                            by step( solve( !KU( ~e ) @ #vk.15 ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_1
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_2
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~e)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~e) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case channel_send_case_3
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case fresh
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case channel_send_case_4
                    step( solve( !KU( ~re ) @ #vk.10 ) )
                      case peer_reveal
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.12 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.15 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~re)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.11 ) )
                          case c_kdf1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~re)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case ephemeral_keygen
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_2
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case channel_send_case_3
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_1
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen_case_2
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_1
                    step( solve( !KU( ~re ) @ #vk.8 ) )
                      case fresh
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    next
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send_case_1
                          step( solve( !KU( ~re ) @ #vk.12 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          step( solve( !KU( ~re ) @ #vk.12 ) )
                            case peer_reveal
                            by step( solve( Receivable( <'0', 
                                                         aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                         'g'^(~re*~s)>)),
                                                              '0', '0', msg.2)
                                                        >
                                            ) ▶₀ #vr.11 ) )
                          qed
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_1
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  next
                    case test_agent_keygen_case_2
                    step( solve( !KU( ~s ) @ #vk.8 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.8 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.11 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.14 ) )
                        next
                          case channel_send
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( !KU( ~re ) @ #vk.12 ) )
                        next
                          case test_agent_keygen
                          by step( solve( !KU( ~e ) @ #vk.12 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case pair
          step( solve( !KU( aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                            'g'^(~re*~s)>)),
                                 '1', '0', $msg)
                       ) @ #vk.2 ) )
            case c_aead
            step( solve( !KU( kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>))
                         ) @ #vk.3 ) )
              case c_kdf2
              step( solve( !KU( kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)
                           ) @ #vk.6 ) )
                case c_kdf1
                step( solve( !KU( 'g'^(~re*~s) ) @ #vk.9 ) )
                  case c_exp
                  step( solve( !KU( ~re ) @ #vk.12 ) )
                    case fresh
                    step( solve( !KU( ~s ) @ #vk.13 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.16 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.18 ) )
                        next
                          case channel_send
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( ~s ) @ #vk.13 ) )
                      case peer_reveal
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.12 ) )
                        case c_kdf1
                        step( solve( !KU( 'g'^(~e*~re) ) @ #vk.16 ) )
                          case c_exp
                          by step( solve( !KU( ~e ) @ #vk.18 ) )
                        next
                          case channel_send_case_1
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case channel_send_case_2
                          by step( contradiction /* cyclic */ )
                        next
                          case ephemeral_keygen
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        next
                          case peer_keygen
                          by step( solve( !KU( ~e ) @ #vk.17 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case channel_send_case_1
                  step( solve( !KU( ~s ) @ #vk.10 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_2
                  step( solve( !KU( ~s ) @ #vk.10 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~e)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~e) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.12 ) )
                    case fresh
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.14 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.17 ) )
                    next
                      case channel_send
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.14 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.17 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.15 ) )
                    qed
                  qed
                next
                  case channel_send_case_4
                  step( solve( !KU( ~re ) @ #vk.12 ) )
                    case peer_reveal
                    step( solve( !KU( 'g'^(~e*~re) ) @ #vk.14 ) )
                      case c_exp
                      by step( solve( !KU( ~e ) @ #vk.17 ) )
                    next
                      case channel_send_case_1
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~re)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case channel_send_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case ephemeral_keygen
                      step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.13 ) )
                        case c_kdf1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~re)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    next
                      case peer_keygen
                      by step( solve( !KU( ~e ) @ #vk.15 ) )
                    qed
                  qed
                next
                  case ephemeral_keygen
                  step( solve( !KU( ~s ) @ #vk.10 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send_case_1
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      next
                        case channel_send_case_2
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      next
                        case channel_send_case_3
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      next
                        case ephemeral_keygen_case_1
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      next
                        case ephemeral_keygen_case_2
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_1
                  step( solve( !KU( ~re ) @ #vk.10 ) )
                    case fresh
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      qed
                    qed
                  next
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send_case_1
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        by step( solve( Receivable( <'0', 
                                                     aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)
                                                                    >)),
                                                          '0', '0', msg.2)
                                                    >
                                        ) ▶₀ #vr.11 ) )
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                next
                  case peer_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.10 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send_case_1
                        step( solve( !KU( ~re ) @ #vk.14 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case channel_send_case_2
                        by step( contradiction /* cyclic */ )
                      next
                        case ephemeral_keygen
                        step( solve( !KU( ~re ) @ #vk.14 ) )
                          case peer_reveal
                          by step( solve( Receivable( <'0', 
                                                       aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 
                                                                       'g'^(~re*~s)>)),
                                                            '0', '0', msg.2)
                                                      >
                                          ) ▶₀ #vr.11 ) )
                        qed
                      next
                        case peer_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_1
                  step( solve( !KU( ~s ) @ #vk.10 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                next
                  case test_agent_keygen_case_2
                  step( solve( !KU( ~s ) @ #vk.10 ) )
                    case peer_reveal
                    step( solve( !KU( kdf1(<'NX', 'g'^(~e*~re)>) ) @ #vk.10 ) )
                      case c_kdf1
                      step( solve( !KU( 'g'^(~e*~re) ) @ #vk.13 ) )
                        case c_exp
                        by step( solve( !KU( ~e ) @ #vk.16 ) )
                      next
                        case channel_send
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      next
                        case ephemeral_keygen
                        by step( solve( !KU( ~re ) @ #vk.14 ) )
                      next
                        case test_agent_keygen
                        by step( solve( !KU( ~e ) @ #vk.14 ) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                           msg.2)
                                     >
                         ) ▶₀ #vr.11 ) )
              case channel_send
              step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.22 ) )
                case peer_keygen
                step( solve( Receivable( <'g'^~e, 
                                          aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e>),
                                               'g'^~s), 
                                          aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                               h(<
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 'g'^~e
                                                    >), 
                                                  aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.3>), 
                                                          'g'^~e>),
                                                       'g'^~s)
                                                 >),
                                               msg.4)
                                         >
                             ) ▶₀ #vr.25 ) )
                  case channel_send
                  step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.13 ) )
                    case channel_send
                    step( solve( !KU( '1' ) @ #vk.2 ) )
                      case coerce
                      step( solve( !KD( '1' ) ▶₀ #vk.2 ) )
                        case channel_send
                        step( solve( Send( t ) ▶₀ #vr.32 ) )
                          case Handshake_Initiator_Snd_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Handshake_Responder_Snd_2
                          by step( contradiction /* impossible chain */ )
                        next
                          case I_Snd_to_R
                          by step( contradiction /* impossible chain */ )
                        next
                          case R_Snd_to_I
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case ephemeral_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_keygen
                        by step( contradiction /* impossible chain */ )
                      next
                        case peer_reveal
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case test_agent_keygen_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case ephemeral_keygen
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_exp_case_1
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case exp
          step( solve( !KU( 'g'^(~e*x) ) @ #vk ) )
            case c_exp
            by step( solve( !KU( ~e ) @ #vk.4 ) )
          next
            case channel_send_case_01
            by step( solve( !KU( ~e ) @ #vk.2 ) )
          next
            case channel_send_case_02
            MIRRORED
          next
            case channel_send_case_03
            by step( solve( !KU( ~e ) @ #vk.3 ) )
          next
            case channel_send_case_04
            by step( solve( !KU( ~e ) @ #vk.2 ) )
          next
            case channel_send_case_05
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.9 ) )
              case channel_send
              MIRRORED
            qed
          next
            case channel_send_case_06
            by step( solve( !KU( ~e ) @ #vk.3 ) )
          next
            case channel_send_case_07
            by step( solve( !KU( ~e ) @ #vk.2 ) )
          next
            case channel_send_case_08
            step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.9 ) )
              case channel_send
              MIRRORED
            qed
          next
            case channel_send_case_09
            by step( solve( !KU( ~e ) @ #vk.3 ) )
          next
            case channel_send_case_10
            by step( solve( !KU( ~e ) @ #vk.5 ) )
          next
            case channel_send_case_11
            by step( solve( !KU( ~e ) @ #vk.8 ) )
          next
            case channel_send_case_12
            by step( solve( !KU( ~e ) @ #vk.5 ) )
          next
            case channel_send_case_13
            by step( solve( !KU( ~e ) @ #vk.8 ) )
          next
            case ephemeral_keygen_case_1
            by step( solve( !KU( ~e ) @ #vk.2 ) )
          next
            case ephemeral_keygen_case_2
            MIRRORED
          next
            case ephemeral_keygen_case_3
            by step( solve( !KU( ~e ) @ #vk.3 ) )
          next
            case peer_keygen_case_1
            by step( solve( !KU( ~e ) @ #vk.2 ) )
          next
            case peer_keygen_case_2
            by step( solve( !KU( ~e ) @ #vk.3 ) )
          next
            case test_agent_keygen_case_1
            by step( solve( !KU( ~e ) @ #vk.2 ) )
          next
            case test_agent_keygen_case_2
            by step( solve( !KU( ~e ) @ #vk.3 ) )
          next
            case test_agent_keygen_case_3
            by step( solve( !KU( ~e ) @ #vk.2 ) )
          next
            case test_agent_keygen_case_4
            by step( solve( !KU( ~e ) @ #vk.3 ) )
          qed
        qed
      next
        case d_exp_case_2
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_3
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_4
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_5
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case exp
        step( solve( !KU( 'g'^~e ) @ #vk ) )
          case c_exp
          by step( solve( !KU( ~e ) @ #vk.2 ) )
        next
          case channel_send_case_1
          MIRRORED
        next
          case channel_send_case_2
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.7 ) )
            case channel_send
            MIRRORED
          qed
        next
          case channel_send_case_3
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.7 ) )
            case channel_send
            MIRRORED
          qed
        next
          case ephemeral_keygen
          MIRRORED
        qed
      qed
    next
      case peer_keygen
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_exp_case_1
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case exp
          step( solve( !KU( 'g'^(~s*x) ) @ #vk ) )
            case c_exp
            step( solve( !KU( ~s ) @ #vk.4 ) )
              case peer_reveal
              step( solve( !KU( 'g' ) @ #vk.4 ) )
                case coerce
                step( solve( !KD( 'g' ) ▶₀ #vk.3 ) )
                  case channel_send
                  step( solve( Send( t ) ▶₀ #vr.3 ) )
                    case Handshake_Initiator_Snd_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Handshake_Responder_Snd_2_case_1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.13, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.14, 0) ~~> (#vk.3, 0) ) )
                          case d_2_decrypt
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_3_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.14, 0) ~~> (#vk.3, 0) ) )
                          case d_2_decrypt
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_3_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Handshake_Responder_Snd_2_case_2
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.13, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.14, 0) ~~> (#vk.3, 0) ) )
                          case d_2_decrypt
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_3_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.14, 0) ~~> (#vk.3, 0) ) )
                          case d_2_decrypt
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_3_verify
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case I_Snd_to_R
                    by step( contradiction /* impossible chain */ )
                  next
                    case R_Snd_to_I_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case R_Snd_to_I_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case ephemeral_keygen
                  by step( contradiction /* impossible chain */ )
                next
                  case peer_keygen
                  by step( contradiction /* impossible chain */ )
                next
                  case peer_reveal
                  by step( contradiction /* impossible chain */ )
                next
                  case test_agent_keygen_case_1
                  by step( contradiction /* impossible chain */ )
                next
                  case test_agent_keygen_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                MIRRORED
              qed
            qed
          next
            case channel_send_case_01
            step( solve( !KU( ~s ) @ #vk.2 ) )
              case peer_reveal
              by step( solve( !KU( ~x ) @ #vk.2 ) )
            qed
          next
            case channel_send_case_02
            step( solve( !KU( ~s ) @ #vk.3 ) )
              case peer_reveal
              by step( solve( !KU( ~e0 ) @ #vk.5 ) )
            qed
          next
            case channel_send_case_03
            step( solve( !KU( ~s ) @ #vk.2 ) )
              case peer_reveal
              by step( solve( !KU( ~x ) @ #vk.2 ) )
            qed
          next
            case channel_send_case_04
            step( solve( !KU( ~s ) @ #vk.3 ) )
              case peer_reveal
              by step( solve( !KU( ~e0 ) @ #vk.5 ) )
            qed
          next
            case channel_send_case_05
            step( solve( !KU( ~s ) @ #vk.2 ) )
              case peer_reveal
              by step( solve( !KU( ~x ) @ #vk.2 ) )
            qed
          next
            case channel_send_case_06
            step( solve( !KU( ~s ) @ #vk.3 ) )
              case peer_reveal
              by step( solve( !KU( ~e0 ) @ #vk.5 ) )
            qed
          next
            case channel_send_case_07
            step( solve( !KU( ~s ) @ #vk.5 ) )
              case peer_reveal
              by step( solve( !KU( ~x ) @ #vk.4 ) )
            qed
          next
            case channel_send_case_08
            step( solve( !KU( ~s ) @ #vk.8 ) )
              case peer_reveal
              by step( solve( !KU( ~s.1 ) @ #vk.10 ) )
            qed
          next
            case channel_send_case_09
            step( solve( !KU( ~s ) @ #vk.5 ) )
              case peer_reveal
              step( solve( !KU( ~x ) @ #vk.4 ) )
                case peer_reveal
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.7 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.10 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.8 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.8 ) )
                qed
              qed
            qed
          next
            case channel_send_case_10
            step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.6 ) )
              case c_exp
              by step( solve( !KU( ~e0 ) @ #vk.9 ) )
            next
              case channel_send_case_1
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case channel_send_case_2
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case channel_send_case_3
              step( solve( !KU( ~re ) @ #vk.7 ) )
                case fresh
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              next
                case peer_reveal
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              qed
            next
              case channel_send_case_4
              by step( contradiction /* cyclic */ )
            next
              case ephemeral_keygen_case_1
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case ephemeral_keygen_case_2
              step( solve( !KU( ~re ) @ #vk.7 ) )
                case fresh
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              next
                case peer_reveal
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              qed
            next
              case peer_keygen
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case test_agent_keygen_case_1
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case test_agent_keygen_case_2
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            qed
          next
            case channel_send_case_11
            step( solve( !KU( ~s ) @ #vk.8 ) )
              case peer_reveal
              step( solve( !KU( ~s.1 ) @ #vk.10 ) )
                case peer_reveal
                step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.9 ) )
                  case c_exp
                  by step( solve( !KU( ~e0 ) @ #vk.13 ) )
                next
                  case channel_send_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                next
                  case channel_send_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                next
                  case channel_send_case_3
                  step( solve( !KU( ~re ) @ #vk.11 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  qed
                next
                  case channel_send_case_4
                  by step( contradiction /* cyclic */ )
                next
                  case ephemeral_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                next
                  case ephemeral_keygen_case_2
                  step( solve( !KU( ~re ) @ #vk.11 ) )
                    case fresh
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  next
                    case peer_reveal
                    by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
                  qed
                next
                  case peer_keygen
                  by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                next
                  case test_agent_keygen_case_1
                  by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                next
                  case test_agent_keygen_case_2
                  by step( solve( !KU( ~e0 ) @ #vk.11 ) )
                qed
              qed
            qed
          next
            case ephemeral_keygen_case_1
            step( solve( !KU( ~s ) @ #vk.2 ) )
              case peer_reveal
              by step( solve( !KU( ~x ) @ #vk.2 ) )
            qed
          next
            case ephemeral_keygen_case_2
            step( solve( !KU( ~s ) @ #vk.3 ) )
              case peer_reveal
              by step( solve( !KU( ~e ) @ #vk.5 ) )
            qed
          next
            case peer_keygen_case_1
            step( solve( !KU( ~s ) @ #vk.2 ) )
              case peer_reveal
              step( solve( !KU( ~x ) @ #vk.2 ) )
                case peer_reveal
                MIRRORED
              qed
            qed
          next
            case peer_keygen_case_2
            MIRRORED
          next
            case peer_keygen_case_3
            step( solve( !KU( ~s ) @ #vk.3 ) )
              case peer_reveal
              step( solve( !KU( ~s.1 ) @ #vk.5 ) )
                case peer_reveal
                MIRRORED
              qed
            qed
          next
            case test_agent_keygen_case_1
            step( solve( !KU( ~s ) @ #vk.2 ) )
              case peer_reveal
              by step( solve( !KU( ~x ) @ #vk.2 ) )
            qed
          next
            case test_agent_keygen_case_2
            step( solve( !KU( ~s ) @ #vk.3 ) )
              case peer_reveal
              by step( solve( !KU( ~a ) @ #vk.5 ) )
            qed
          next
            case test_agent_keygen_case_3
            step( solve( !KU( ~s ) @ #vk.2 ) )
              case peer_reveal
              by step( solve( !KU( ~x ) @ #vk.2 ) )
            qed
          next
            case test_agent_keygen_case_4
            step( solve( !KU( ~s ) @ #vk.3 ) )
              case peer_reveal
              by step( solve( !KU( ~b ) @ #vk.5 ) )
            qed
          qed
        qed
      next
        case d_exp_case_2
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_3
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_4
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_5
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case exp
        step( solve( !KU( 'g'^~s ) @ #vk ) )
          case c_exp
          step( solve( !KU( ~s ) @ #vk.2 ) )
            case peer_reveal
            step( solve( !KU( 'g' ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( 'g' ) ▶₀ #vk.2 ) )
                case channel_send
                step( solve( Send( t ) ▶₀ #vr.2 ) )
                  case Handshake_Initiator_Snd_1
                  by step( contradiction /* impossible chain */ )
                next
                  case Handshake_Responder_Snd_2_case_1
                  step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.12, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.13, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.13, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Handshake_Responder_Snd_2_case_2
                  step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.12, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.13, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.13, 0) ~~> (#vk.2, 0) ) )
                        case d_2_decrypt
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_3_verify
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case I_Snd_to_R
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_1
                  by step( contradiction /* impossible chain */ )
                next
                  case R_Snd_to_I_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case ephemeral_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_keygen
                by step( contradiction /* impossible chain */ )
              next
                case peer_reveal
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_1
                by step( contradiction /* impossible chain */ )
              next
                case test_agent_keygen_case_2
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              MIRRORED
            qed
          qed
        next
          case channel_send
          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
            case c_exp
            by step( solve( !KU( ~e0 ) @ #vk.8 ) )
          next
            case channel_send_case_1
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case channel_send_case_2
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case channel_send_case_3
            step( solve( !KU( ~re ) @ #vk.6 ) )
              case fresh
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            next
              case peer_reveal
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            qed
          next
            case channel_send_case_4
            by step( contradiction /* cyclic */ )
          next
            case ephemeral_keygen_case_1
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case ephemeral_keygen_case_2
            step( solve( !KU( ~re ) @ #vk.6 ) )
              case fresh
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            next
              case peer_reveal
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            qed
          next
            case peer_keygen
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case test_agent_keygen_case_1
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case test_agent_keygen_case_2
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          qed
        next
          case peer_keygen
          MIRRORED
        qed
      qed
    next
      case peer_reveal
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_s
        step( solve( !KU( ~s ) @ #vk ) )
          case fresh
          by step( solve( !PeerPk( ~s, 'g'^~s ) ▶₀ #vr ) )
        next
          case peer_reveal
          step( solve( !PeerPk( ~s, 'g'^~s ) ▶₀ #vr ) )
            case peer_keygen
            MIRRORED
          qed
        qed
      qed
    next
      case test_agent_keygen_case_1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_exp_case_1
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case exp
          step( solve( !KU( 'g'^(~a*x) ) @ #vk ) )
            case c_exp
            by step( solve( !KU( ~a ) @ #vk.4 ) )
          next
            case channel_send_case_01
            by step( solve( !KU( ~a ) @ #vk.2 ) )
          next
            case channel_send_case_02
            by step( solve( !KU( ~a ) @ #vk.3 ) )
          next
            case channel_send_case_03
            by step( solve( !KU( ~a ) @ #vk.2 ) )
          next
            case channel_send_case_04
            by step( solve( !KU( ~a ) @ #vk.3 ) )
          next
            case channel_send_case_05
            by step( solve( !KU( ~a ) @ #vk.2 ) )
          next
            case channel_send_case_06
            by step( solve( !KU( ~a ) @ #vk.3 ) )
          next
            case channel_send_case_07
            by step( solve( !KU( ~a ) @ #vk.5 ) )
          next
            case channel_send_case_08
            by step( solve( !KU( ~a ) @ #vk.8 ) )
          next
            case channel_send_case_09
            by step( solve( !KU( ~a ) @ #vk.5 ) )
          next
            case channel_send_case_10
            by step( solve( !KU( ~a ) @ #vk.8 ) )
          next
            case ephemeral_keygen_case_1
            by step( solve( !KU( ~a ) @ #vk.2 ) )
          next
            case ephemeral_keygen_case_2
            by step( solve( !KU( ~a ) @ #vk.3 ) )
          next
            case peer_keygen_case_1
            by step( solve( !KU( ~a ) @ #vk.2 ) )
          next
            case peer_keygen_case_2
            by step( solve( !KU( ~a ) @ #vk.3 ) )
          next
            case test_agent_keygen_case_1
            by step( solve( !KU( ~a ) @ #vk.2 ) )
          next
            case test_agent_keygen_case_2
            MIRRORED
          next
            case test_agent_keygen_case_3
            by step( solve( !KU( ~a ) @ #vk.3 ) )
          next
            case test_agent_keygen_case_4
            by step( solve( !KU( ~a ) @ #vk.2 ) )
          next
            case test_agent_keygen_case_5
            by step( solve( !KU( ~a ) @ #vk.3 ) )
          qed
        qed
      next
        case d_exp_case_2
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_3
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_4
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_5
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case exp
        step( solve( !KU( 'g'^~a ) @ #vk ) )
          case c_exp
          by step( solve( !KU( ~a ) @ #vk.2 ) )
        next
          case test_agent_keygen
          MIRRORED
        qed
      qed
    next
      case test_agent_keygen_case_2
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_exp_case_1
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case exp
          step( solve( !KU( 'g'^(~b*x) ) @ #vk ) )
            case c_exp
            by step( solve( !KU( ~b ) @ #vk.4 ) )
          next
            case channel_send_case_01
            by step( solve( !KU( ~b ) @ #vk.2 ) )
          next
            case channel_send_case_02
            by step( solve( !KU( ~b ) @ #vk.3 ) )
          next
            case channel_send_case_03
            by step( solve( !KU( ~b ) @ #vk.2 ) )
          next
            case channel_send_case_04
            by step( solve( !KU( ~b ) @ #vk.3 ) )
          next
            case channel_send_case_05
            by step( solve( !KU( ~b ) @ #vk.2 ) )
          next
            case channel_send_case_06
            by step( solve( !KU( ~b ) @ #vk.3 ) )
          next
            case channel_send_case_07
            by step( solve( !KU( ~b ) @ #vk.5 ) )
          next
            case channel_send_case_08
            step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.6 ) )
              case c_exp
              by step( solve( !KU( ~e0 ) @ #vk.9 ) )
            next
              case channel_send_case_1
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case channel_send_case_2
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case channel_send_case_3
              step( solve( !KU( ~re ) @ #vk.7 ) )
                case fresh
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              next
                case peer_reveal
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              qed
            next
              case channel_send_case_4
              by step( contradiction /* cyclic */ )
            next
              case ephemeral_keygen_case_1
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case ephemeral_keygen_case_2
              step( solve( !KU( ~re ) @ #vk.7 ) )
                case fresh
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              next
                case peer_reveal
                by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.12 ) )
              qed
            next
              case peer_keygen
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case test_agent_keygen_case_1
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            next
              case test_agent_keygen_case_2
              by step( solve( !KU( ~e0 ) @ #vk.7 ) )
            qed
          next
            case channel_send_case_09
            by step( solve( !KU( ~b ) @ #vk.8 ) )
          next
            case channel_send_case_10
            by step( solve( !KU( ~b ) @ #vk.5 ) )
          next
            case channel_send_case_11
            by step( solve( !KU( ~b ) @ #vk.8 ) )
          next
            case ephemeral_keygen_case_1
            by step( solve( !KU( ~b ) @ #vk.2 ) )
          next
            case ephemeral_keygen_case_2
            by step( solve( !KU( ~b ) @ #vk.3 ) )
          next
            case peer_keygen_case_1
            by step( solve( !KU( ~b ) @ #vk.2 ) )
          next
            case peer_keygen_case_2
            by step( solve( !KU( ~b ) @ #vk.3 ) )
          next
            case test_agent_keygen_case_1
            by step( solve( !KU( ~b ) @ #vk.2 ) )
          next
            case test_agent_keygen_case_2
            by step( solve( !KU( ~b ) @ #vk.3 ) )
          next
            case test_agent_keygen_case_3
            by step( solve( !KU( ~b ) @ #vk.2 ) )
          next
            case test_agent_keygen_case_4
            MIRRORED
          next
            case test_agent_keygen_case_5
            by step( solve( !KU( ~b ) @ #vk.3 ) )
          qed
        qed
      next
        case d_exp_case_2
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_3
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_4
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case d_exp_case_5
        by step( contradiction /* non-normal exponentiation rule instance */ )
      next
        case exp
        step( solve( !KU( 'g'^~b ) @ #vk ) )
          case c_exp
          by step( solve( !KU( ~b ) @ #vk.2 ) )
        next
          case channel_send
          step( solve( !KU( 'g'^(~e0*~re) ) @ #vk.5 ) )
            case c_exp
            by step( solve( !KU( ~e0 ) @ #vk.8 ) )
          next
            case channel_send_case_1
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case channel_send_case_2
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case channel_send_case_3
            step( solve( !KU( ~re ) @ #vk.6 ) )
              case fresh
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            next
              case peer_reveal
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            qed
          next
            case channel_send_case_4
            by step( contradiction /* cyclic */ )
          next
            case ephemeral_keygen_case_1
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case ephemeral_keygen_case_2
            step( solve( !KU( ~re ) @ #vk.6 ) )
              case fresh
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            next
              case peer_reveal
              by step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.10 ) )
            qed
          next
            case peer_keygen
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case test_agent_keygen_case_1
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          next
            case test_agent_keygen_case_2
            by step( solve( !KU( ~e0 ) @ #vk.6 ) )
          qed
        next
          case test_agent_keygen
          MIRRORED
        qed
      qed
    qed
  qed
next
  case Rule_Handshake_Initiator_Recv_2
  backward-search
    case LHS
    step( simplify )
    step( solve( HandshakeState_Initiator_1( id, hash, ck, ~e ) ▶₁ #i ) )
      case Handshake_Initiator_Snd_1
      step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #i ) )
        case peer_keygen
        step( solve( Recv( <'g'^~re0, 
                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 'g'^~rs4), 
                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                 h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4)
                                   >),
                                 payload)
                           >
                     ) ▶₂ #i ) )
          case channel_receive
          step( solve( Receivable( <'g'^~re0, 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                                 'g'^~rs4)
                                           >),
                                         payload)
                                   >
                       ) ▶₀ #vr.7 ) )
            case channel_send
            step( solve( Receivable( <'g'^~e, $msg> ) ▶₀ #vr.14 ) )
              case channel_send
              MIRRORED
            qed
          qed
        qed
      next
        case test_common_case_1
        step( solve( Recv( <'g'^~re0, 
                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 'g'^~rs4), 
                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                 h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4)
                                   >),
                                 payload)
                           >
                     ) ▶₂ #i ) )
          case channel_receive
          step( solve( Receivable( <'g'^~re0, 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                                 'g'^~rs4)
                                           >),
                                         payload)
                                   >
                       ) ▶₀ #vr.8 ) )
            case channel_send
            step( solve( Receivable( <'g'^~e, $msg> ) ▶₀ #vr.15 ) )
              case channel_send
              MIRRORED
            qed
          qed
        qed
      next
        case test_common_case_2
        step( solve( Recv( <'g'^~re0, 
                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 'g'^~rs4), 
                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                 h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4)
                                   >),
                                 payload)
                           >
                     ) ▶₂ #i ) )
          case channel_receive
          by step( solve( Receivable( <'g'^~re0, 
                                       aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                            h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                            'g'^~rs4), 
                                       aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                            h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                               aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0
                                                      >),
                                                    'g'^~rs4)
                                              >),
                                            payload)
                                      >
                          ) ▶₀ #vr.8 ) )
        qed
      next
        case test_common_case_3
        step( solve( Recv( <'g'^~re0, 
                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 'g'^~rs4), 
                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                 h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4)
                                   >),
                                 payload)
                           >
                     ) ▶₂ #i ) )
          case channel_receive
          by step( solve( Receivable( <'g'^~re0, 
                                       aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                            h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                            'g'^~rs4), 
                                       aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                            h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                               aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0
                                                      >),
                                                    'g'^~rs4)
                                              >),
                                            payload)
                                      >
                          ) ▶₀ #vr.8 ) )
        qed
      next
        case test_common_case_4
        step( solve( Recv( <'g'^~re0, 
                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 'g'^~rs4), 
                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                 h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4)
                                   >),
                                 payload)
                           >
                     ) ▶₂ #i ) )
          case channel_receive
          step( solve( Receivable( <'g'^~re0, 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                                 'g'^~rs4)
                                           >),
                                         payload)
                                   >
                       ) ▶₀ #vr.8 ) )
            case channel_send
            step( solve( Receivable( <'g'^~e, $msg> ) ▶₀ #vr.15 ) )
              case channel_send
              MIRRORED
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( HandshakeState_Initiator_1( id, hash, ck, ~e ) ▶₁ #i ) )
      case Handshake_Initiator_Snd_1
      step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #i ) )
        case peer_keygen
        step( solve( Recv( <'g'^~re0, 
                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 'g'^~rs4), 
                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                 h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4)
                                   >),
                                 payload)
                           >
                     ) ▶₂ #i ) )
          case channel_receive
          step( solve( Receivable( <'g'^~re0, 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                                 'g'^~rs4)
                                           >),
                                         payload)
                                   >
                       ) ▶₀ #vr.7 ) )
            case channel_send
            step( solve( Receivable( <'g'^~e, $msg> ) ▶₀ #vr.14 ) )
              case channel_send
              MIRRORED
            qed
          qed
        qed
      next
        case test_common_case_1
        step( solve( Recv( <'g'^~re0, 
                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 'g'^~rs4), 
                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                 h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4)
                                   >),
                                 payload)
                           >
                     ) ▶₂ #i ) )
          case channel_receive
          by step( solve( Receivable( <'g'^~re0, 
                                       aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                            h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                            'g'^~rs4), 
                                       aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                            h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                               aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0
                                                      >),
                                                    'g'^~rs4)
                                              >),
                                            payload)
                                      >
                          ) ▶₀ #vr.8 ) )
        qed
      next
        case test_common_case_2
        step( solve( Recv( <'g'^~re0, 
                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 'g'^~rs4), 
                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                 h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4)
                                   >),
                                 payload)
                           >
                     ) ▶₂ #i ) )
          case channel_receive
          step( solve( Receivable( <'g'^~re0, 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                                 'g'^~rs4)
                                           >),
                                         payload)
                                   >
                       ) ▶₀ #vr.8 ) )
            case channel_send
            step( solve( Receivable( <'g'^~e, $msg> ) ▶₀ #vr.15 ) )
              case channel_send
              MIRRORED
            qed
          qed
        qed
      next
        case test_common_case_3
        step( solve( Recv( <'g'^~re0, 
                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 'g'^~rs4), 
                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                 h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4)
                                   >),
                                 payload)
                           >
                     ) ▶₂ #i ) )
          case channel_receive
          step( solve( Receivable( <'g'^~re0, 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                                 'g'^~rs4)
                                           >),
                                         payload)
                                   >
                       ) ▶₀ #vr.8 ) )
            case channel_send
            step( solve( Receivable( <'g'^~e, $msg> ) ▶₀ #vr.15 ) )
              case channel_send
              MIRRORED
            qed
          qed
        qed
      next
        case test_common_case_4
        step( solve( Recv( <'g'^~re0, 
                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 'g'^~rs4), 
                            aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                 h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                         'g'^~rs4)
                                   >),
                                 payload)
                           >
                     ) ▶₂ #i ) )
          case channel_receive
          by step( solve( Receivable( <'g'^~re0, 
                                       aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                            h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                            'g'^~rs4), 
                                       aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                            h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                               aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0
                                                      >),
                                                    'g'^~rs4)
                                              >),
                                            payload)
                                      >
                          ) ▶₀ #vr.8 ) )
        qed
      qed
    qed
  qed
next
  case Rule_Handshake_Initiator_Snd_1
  backward-search
    case LHS
    step( simplify )
    step( solve( HandshakeState_Initiator_0( id, hash, ck ) ▶₀ #i ) )
      case Init_Handshake_Initiator
      step( solve( Handshake_Snd_1( ~id, payload ) ▶₁ #i ) )
        case Instrumentation_Initiator_1
        step( solve( Ek( ~e0 ) ▶₂ #i ) )
          case ephemeral_keygen
          MIRRORED
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( HandshakeState_Initiator_0( id, hash, ck ) ▶₀ #i ) )
      case Init_Handshake_Initiator
      step( solve( Handshake_Snd_1( ~id, payload ) ▶₁ #i ) )
        case Instrumentation_Initiator_1
        step( solve( Ek( ~e0 ) ▶₂ #i ) )
          case ephemeral_keygen
          MIRRORED
        qed
      qed
    qed
  qed
next
  case Rule_Handshake_Responder_Recv_1
  backward-search
    case LHS
    step( simplify )
    step( solve( HandshakeState_Responder_0( id, hash, ck, ~s ) ▶₀ #i ) )
      case Init_Handshake_Responder_case_1
      step( solve( Recv( <'g'^~re0, payload> ) ▶₁ #i ) )
        case channel_receive
        step( solve( Receivable( <'g'^~re0, payload> ) ▶₀ #vr.3 ) )
          case channel_send
          MIRRORED
        qed
      qed
    next
      case Init_Handshake_Responder_case_2
      step( solve( Recv( <'g'^~re0, payload> ) ▶₁ #i ) )
        case channel_receive
        step( solve( Receivable( <'g'^~re0, payload> ) ▶₀ #vr.3 ) )
          case channel_send
          MIRRORED
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( HandshakeState_Responder_0( id, hash, ck, ~s ) ▶₀ #i ) )
      case Init_Handshake_Responder_case_1
      step( solve( Recv( <'g'^~re0, payload> ) ▶₁ #i ) )
        case channel_receive
        step( solve( Receivable( <'g'^~re0, payload> ) ▶₀ #vr.3 ) )
          case channel_send
          MIRRORED
        qed
      qed
    next
      case Init_Handshake_Responder_case_2
      step( solve( Recv( <'g'^~re0, payload> ) ▶₁ #i ) )
        case channel_receive
        step( solve( Receivable( <'g'^~re0, payload> ) ▶₀ #vr.3 ) )
          case channel_send
          MIRRORED
        qed
      qed
    qed
  qed
next
  case Rule_Handshake_Responder_Snd_2
  backward-search
    case LHS
    step( simplify )
    step( solve( HandshakeState_Responder_1( id, hash, ck, 'g'^~re, ~s
                 ) ▶₀ #i ) )
      case Handshake_Responder_Recv_1_case_1
      step( solve( Handshake_Snd_2( ~id, payload.1 ) ▶₁ #i ) )
        case Instrumentation_Responder_2
        step( solve( Ek( ~e0 ) ▶₂ #i ) )
          case ephemeral_keygen
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.2 ) )
            case channel_send
            MIRRORED
          qed
        qed
      qed
    next
      case Handshake_Responder_Recv_1_case_2
      step( solve( Handshake_Snd_2( ~id, payload.1 ) ▶₁ #i ) )
        case Instrumentation_Responder_2
        step( solve( Ek( ~e0 ) ▶₂ #i ) )
          case ephemeral_keygen
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.2 ) )
            case channel_send
            MIRRORED
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( HandshakeState_Responder_1( id, hash, ck, 'g'^~re, ~s
                 ) ▶₀ #i ) )
      case Handshake_Responder_Recv_1_case_1
      step( solve( Handshake_Snd_2( ~id, payload.1 ) ▶₁ #i ) )
        case Instrumentation_Responder_2
        step( solve( Ek( ~e0 ) ▶₂ #i ) )
          case ephemeral_keygen
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.2 ) )
            case channel_send
            MIRRORED
          qed
        qed
      qed
    next
      case Handshake_Responder_Recv_1_case_2
      step( solve( Handshake_Snd_2( ~id, payload.1 ) ▶₁ #i ) )
        case Instrumentation_Responder_2
        step( solve( Ek( ~e0 ) ▶₂ #i ) )
          case ephemeral_keygen
          step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.2 ) )
            case channel_send
            MIRRORED
          qed
        qed
      qed
    qed
  qed
next
  case Rule_I_Recv_from_R
  backward-search
    case LHS
    step( simplify )
    step( solve( !Transport_Initiator( id, ki2r, kr2i ) ▶₁ #i ) )
      case Initiator_to_transport_mode
      step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.1 ) )
        case peer_keygen
        step( solve( Recv( <n, 
                            aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                 msg)
                           >
                     ) ▶₀ #i ) )
          case channel_receive
          step( solve( Receivable( <n, 
                                    aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.10 ) )
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '0', '0',
                                           msg.3)
                                     >
                         ) ▶₀ #vr.22 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             payload)
                                       >
                           ) ▶₀ #vr.3 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.24 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case test_common_case_1
        step( solve( Recv( <n, 
                            aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                 msg)
                           >
                     ) ▶₀ #i ) )
          case channel_receive
          step( solve( Receivable( <n, 
                                    aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '0', '0',
                                           msg.3)
                                     >
                         ) ▶₀ #vr.23 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             payload)
                                       >
                           ) ▶₀ #vr.3 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.25 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case test_common_case_2
        step( solve( Recv( <n, 
                            aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                 msg)
                           >
                     ) ▶₀ #i ) )
          case channel_receive
          by step( solve( Receivable( <n, 
                                       aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                            msg)
                                      >
                          ) ▶₀ #vr.11 ) )
        qed
      next
        case test_common_case_3
        step( solve( Recv( <n, 
                            aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                 msg)
                           >
                     ) ▶₀ #i ) )
          case channel_receive
          by step( solve( Receivable( <n, 
                                       aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                            msg)
                                      >
                          ) ▶₀ #vr.11 ) )
        qed
      next
        case test_common_case_4
        step( solve( Recv( <n, 
                            aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                 msg)
                           >
                     ) ▶₀ #i ) )
          case channel_receive
          step( solve( Receivable( <n, 
                                    aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '0', '0',
                                           msg.3)
                                     >
                         ) ▶₀ #vr.23 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             payload)
                                       >
                           ) ▶₀ #vr.3 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.25 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Transport_Initiator( id, ki2r, kr2i ) ▶₁ #i ) )
      case Initiator_to_transport_mode
      step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.1 ) )
        case peer_keygen
        step( solve( Recv( <n, 
                            aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                 msg)
                           >
                     ) ▶₀ #i ) )
          case channel_receive
          step( solve( Receivable( <n, 
                                    aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.10 ) )
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '0', '0',
                                           msg.3)
                                     >
                         ) ▶₀ #vr.22 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             payload)
                                       >
                           ) ▶₀ #vr.3 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.24 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case test_common_case_1
        step( solve( Recv( <n, 
                            aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                 msg)
                           >
                     ) ▶₀ #i ) )
          case channel_receive
          by step( solve( Receivable( <n, 
                                       aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                            msg)
                                      >
                          ) ▶₀ #vr.11 ) )
        qed
      next
        case test_common_case_2
        step( solve( Recv( <n, 
                            aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                 msg)
                           >
                     ) ▶₀ #i ) )
          case channel_receive
          step( solve( Receivable( <n, 
                                    aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '0', '0',
                                           msg.3)
                                     >
                         ) ▶₀ #vr.23 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             payload)
                                       >
                           ) ▶₀ #vr.3 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.25 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case test_common_case_3
        step( solve( Recv( <n, 
                            aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                 msg)
                           >
                     ) ▶₀ #i ) )
          case channel_receive
          step( solve( Receivable( <n, 
                                    aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '0', '0',
                                           msg.3)
                                     >
                         ) ▶₀ #vr.23 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.1>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             payload)
                                       >
                           ) ▶₀ #vr.3 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.1> ) ▶₀ #vr.25 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      next
        case test_common_case_4
        step( solve( Recv( <n, 
                            aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                 msg)
                           >
                     ) ▶₀ #i ) )
          case channel_receive
          by step( solve( Receivable( <n, 
                                       aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), n, '0',
                                            msg)
                                      >
                          ) ▶₀ #vr.11 ) )
        qed
      qed
    qed
  qed
next
  case Rule_I_Snd_to_R
  backward-search
    case LHS
    step( simplify )
    step( solve( I_Snd( id, n, msg ) ▶₀ #i ) )
      case Instrumentation_Initiator_3
      step( solve( !Transport_Initiator( ~id, ki2r, kr2i ) ▶₁ #i ) )
        case Initiator_to_transport_mode
        step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.2 ) )
          case peer_keygen
          step( solve( Receivable( <'g'^~re0, 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>),
                                         'g'^~rs4), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>), 
                                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0
                                                   >),
                                                 'g'^~rs4)
                                           >),
                                         msg.1)
                                   >
                       ) ▶₀ #vr.5 ) )
            case channel_send
            step( solve( Receivable( <'g'^~e, $msg.2> ) ▶₀ #vr.18 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case test_common_case_1
          step( solve( Receivable( <'g'^~re0, 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>),
                                         'g'^~rs4), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>), 
                                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0
                                                   >),
                                                 'g'^~rs4)
                                           >),
                                         msg.1)
                                   >
                       ) ▶₀ #vr.5 ) )
            case channel_send
            step( solve( Receivable( <'g'^~e, $msg.2> ) ▶₀ #vr.19 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case test_common_case_2
          by step( solve( Receivable( <'g'^~re0, 
                                       aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                            h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>),
                                            'g'^~rs4), 
                                       aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                            h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 
                                                       'g'^~re0>),
                                                    'g'^~rs4)
                                              >),
                                            msg.1)
                                      >
                          ) ▶₀ #vr.5 ) )
        next
          case test_common_case_3
          by step( solve( Receivable( <'g'^~re0, 
                                       aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                            h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>),
                                            'g'^~rs4), 
                                       aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                            h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 
                                                       'g'^~re0>),
                                                    'g'^~rs4)
                                              >),
                                            msg.1)
                                      >
                          ) ▶₀ #vr.5 ) )
        next
          case test_common_case_4
          step( solve( Receivable( <'g'^~re0, 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>),
                                         'g'^~rs4), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>), 
                                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0
                                                   >),
                                                 'g'^~rs4)
                                           >),
                                         msg.1)
                                   >
                       ) ▶₀ #vr.5 ) )
            case channel_send
            step( solve( Receivable( <'g'^~e, $msg.2> ) ▶₀ #vr.19 ) )
              case channel_send
              MIRRORED
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( I_Snd( id, n, msg ) ▶₀ #i ) )
      case Instrumentation_Initiator_3
      step( solve( !Transport_Initiator( ~id, ki2r, kr2i ) ▶₁ #i ) )
        case Initiator_to_transport_mode
        step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.2 ) )
          case peer_keygen
          step( solve( Receivable( <'g'^~re0, 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>),
                                         'g'^~rs4), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>), 
                                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0
                                                   >),
                                                 'g'^~rs4)
                                           >),
                                         msg.1)
                                   >
                       ) ▶₀ #vr.5 ) )
            case channel_send
            step( solve( Receivable( <'g'^~e, $msg.2> ) ▶₀ #vr.18 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case test_common_case_1
          by step( solve( Receivable( <'g'^~re0, 
                                       aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                            h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>),
                                            'g'^~rs4), 
                                       aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                            h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 
                                                       'g'^~re0>),
                                                    'g'^~rs4)
                                              >),
                                            msg.1)
                                      >
                          ) ▶₀ #vr.5 ) )
        next
          case test_common_case_2
          step( solve( Receivable( <'g'^~re0, 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>),
                                         'g'^~rs4), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>), 
                                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0
                                                   >),
                                                 'g'^~rs4)
                                           >),
                                         msg.1)
                                   >
                       ) ▶₀ #vr.5 ) )
            case channel_send
            step( solve( Receivable( <'g'^~e, $msg.2> ) ▶₀ #vr.19 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case test_common_case_3
          step( solve( Receivable( <'g'^~re0, 
                                    aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>),
                                         'g'^~rs4), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>), 
                                            aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0
                                                   >),
                                                 'g'^~rs4)
                                           >),
                                         msg.1)
                                   >
                       ) ▶₀ #vr.5 ) )
            case channel_send
            step( solve( Receivable( <'g'^~e, $msg.2> ) ▶₀ #vr.19 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case test_common_case_4
          by step( solve( Receivable( <'g'^~re0, 
                                       aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                            h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0>),
                                            'g'^~rs4), 
                                       aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                            h(<
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 'g'^~re0
                                                 >), 
                                               aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                    h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.2>), 
                                                       'g'^~re0>),
                                                    'g'^~rs4)
                                              >),
                                            msg.1)
                                      >
                          ) ▶₀ #vr.5 ) )
        qed
      qed
    qed
  qed
next
  case Rule_Init_Handshake_Initiator
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_Init_Handshake_Responder
  backward-search
    case LHS
    step( simplify )
    step( solve( Init_Handshake_Responder( id, prologue, ~s ) ▶₀ #i ) )
      case Create_Responder_case_1
      MIRRORED
    next
      case Create_Responder_case_2
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( Init_Handshake_Responder( id, prologue, ~s ) ▶₀ #i ) )
      case Create_Responder_case_1
      MIRRORED
    next
      case Create_Responder_case_2
      MIRRORED
    qed
  qed
next
  case Rule_Initiator_to_transport_mode
  backward-search
    case LHS
    step( simplify )
    step( solve( HandshakeState_Initiator_2( id, hash, ck, k, ~e, z, z.1
                 ) ▶₀ #i ) )
      case Handshake_Initiator_Recv_2
      step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr ) )
        case peer_keygen
        step( solve( Receivable( <'g'^~re0, 
                                  aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                       'g'^~rs4), 
                                  aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                       h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                          aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                               'g'^~rs4)
                                         >),
                                       payload)
                                 >
                     ) ▶₀ #vr.2 ) )
          case channel_send
          step( solve( Receivable( <'g'^~e, $msg> ) ▶₀ #vr.15 ) )
            case channel_send
            MIRRORED
          qed
        qed
      next
        case test_common_case_1
        step( solve( Receivable( <'g'^~re0, 
                                  aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                       'g'^~rs4), 
                                  aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                       h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                          aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                               'g'^~rs4)
                                         >),
                                       payload)
                                 >
                     ) ▶₀ #vr.2 ) )
          case channel_send
          step( solve( Receivable( <'g'^~e, $msg> ) ▶₀ #vr.16 ) )
            case channel_send
            MIRRORED
          qed
        qed
      next
        case test_common_case_2
        by step( solve( Receivable( <'g'^~re0, 
                                     aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                          h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                          'g'^~rs4), 
                                     aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                          h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                             aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0
                                                    >),
                                                  'g'^~rs4)
                                            >),
                                          payload)
                                    >
                        ) ▶₀ #vr.2 ) )
      next
        case test_common_case_3
        by step( solve( Receivable( <'g'^~re0, 
                                     aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                          h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                          'g'^~rs4), 
                                     aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                          h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                             aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0
                                                    >),
                                                  'g'^~rs4)
                                            >),
                                          payload)
                                    >
                        ) ▶₀ #vr.2 ) )
      next
        case test_common_case_4
        step( solve( Receivable( <'g'^~re0, 
                                  aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                       'g'^~rs4), 
                                  aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                       h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                          aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                               'g'^~rs4)
                                         >),
                                       payload)
                                 >
                     ) ▶₀ #vr.2 ) )
          case channel_send
          step( solve( Receivable( <'g'^~e, $msg> ) ▶₀ #vr.16 ) )
            case channel_send
            MIRRORED
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( HandshakeState_Initiator_2( id, hash, ck, k, ~e, z, z.1
                 ) ▶₀ #i ) )
      case Handshake_Initiator_Recv_2
      step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr ) )
        case peer_keygen
        step( solve( Receivable( <'g'^~re0, 
                                  aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                       'g'^~rs4), 
                                  aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                       h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                          aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                               'g'^~rs4)
                                         >),
                                       payload)
                                 >
                     ) ▶₀ #vr.2 ) )
          case channel_send
          step( solve( Receivable( <'g'^~e, $msg> ) ▶₀ #vr.15 ) )
            case channel_send
            MIRRORED
          qed
        qed
      next
        case test_common_case_1
        by step( solve( Receivable( <'g'^~re0, 
                                     aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                          h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                          'g'^~rs4), 
                                     aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                          h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                             aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0
                                                    >),
                                                  'g'^~rs4)
                                            >),
                                          payload)
                                    >
                        ) ▶₀ #vr.2 ) )
      next
        case test_common_case_2
        step( solve( Receivable( <'g'^~re0, 
                                  aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                       'g'^~rs4), 
                                  aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                       h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                          aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                               'g'^~rs4)
                                         >),
                                       payload)
                                 >
                     ) ▶₀ #vr.2 ) )
          case channel_send
          step( solve( Receivable( <'g'^~e, $msg> ) ▶₀ #vr.16 ) )
            case channel_send
            MIRRORED
          qed
        qed
      next
        case test_common_case_3
        step( solve( Receivable( <'g'^~re0, 
                                  aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                       h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                       'g'^~rs4), 
                                  aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                       h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                          aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                               h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                               'g'^~rs4)
                                         >),
                                       payload)
                                 >
                     ) ▶₀ #vr.2 ) )
          case channel_send
          step( solve( Receivable( <'g'^~e, $msg> ) ▶₀ #vr.16 ) )
            case channel_send
            MIRRORED
          qed
        qed
      next
        case test_common_case_4
        by step( solve( Receivable( <'g'^~re0, 
                                     aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                          h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>),
                                          'g'^~rs4), 
                                     aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                          h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0>), 
                                             aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                  h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg>), 'g'^~re0
                                                    >),
                                                  'g'^~rs4)
                                            >),
                                          payload)
                                    >
                        ) ▶₀ #vr.2 ) )
      qed
    qed
  qed
next
  case Rule_Instrumentation_Initiator_1
  backward-search
    case LHS
    step( simplify )
    step( solve( St_Initiator_0( ~id ) ▶₀ #i ) )
      case Create_Initiator
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( St_Initiator_0( ~id ) ▶₀ #i ) )
      case Create_Initiator
      MIRRORED
    qed
  qed
next
  case Rule_Instrumentation_Initiator_2
  backward-search
    case LHS
    step( simplify )
    step( solve( St_Initiator_1( ~id ) ▶₀ #i ) )
      case Instrumentation_Initiator_1
      step( solve( MyEk_Initiator( ~id, e ) ▶₁ #i ) )
        case Handshake_Initiator_Snd_1
        step( solve( Handshake_Recv_2( ~id, msg ) ▶₂ #i ) )
          case Handshake_Initiator_Recv_2
          step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.6 ) )
            case peer_keygen
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg)
                                     >
                         ) ▶₀ #vr.7 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e0, $msg.1> ) ▶₀ #vr.15 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_1
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg)
                                     >
                         ) ▶₀ #vr.7 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e0, $msg.1> ) ▶₀ #vr.16 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_2
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg)
                                        >
                            ) ▶₀ #vr.7 ) )
          next
            case test_common_case_3
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg)
                                        >
                            ) ▶₀ #vr.7 ) )
          next
            case test_common_case_4
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg)
                                     >
                         ) ▶₀ #vr.7 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e0, $msg.1> ) ▶₀ #vr.16 ) )
                case channel_send
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( St_Initiator_1( ~id ) ▶₀ #i ) )
      case Instrumentation_Initiator_1
      step( solve( MyEk_Initiator( ~id, e ) ▶₁ #i ) )
        case Handshake_Initiator_Snd_1
        step( solve( Handshake_Recv_2( ~id, msg ) ▶₂ #i ) )
          case Handshake_Initiator_Recv_2
          step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.6 ) )
            case peer_keygen
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg)
                                     >
                         ) ▶₀ #vr.7 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e0, $msg.1> ) ▶₀ #vr.15 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_1
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg)
                                        >
                            ) ▶₀ #vr.7 ) )
          next
            case test_common_case_2
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg)
                                     >
                         ) ▶₀ #vr.7 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e0, $msg.1> ) ▶₀ #vr.16 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_3
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg)
                                     >
                         ) ▶₀ #vr.7 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e0, $msg.1> ) ▶₀ #vr.16 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_4
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.1>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg)
                                        >
                            ) ▶₀ #vr.7 ) )
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Instrumentation_Initiator_3
  backward-search
    case LHS
    step( simplify )
    step( solve( St_Initiator_2( ~id, e ) ▶₀ #i ) )
      case Instrumentation_Initiator_2
      step( solve( PeerEk_Initiator( ~id, re ) ▶₁ #i ) )
        case Handshake_Initiator_Recv_2
        step( solve( PeerLtk_Initiator( ~id, peer ) ▶₂ #i ) )
          case Handshake_Initiator_Recv_2
          step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.3 ) )
            case peer_keygen
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.1)
                                     >
                         ) ▶₀ #vr.7 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e0, $msg.2> ) ▶₀ #vr.16 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_1
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.1)
                                     >
                         ) ▶₀ #vr.7 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e0, $msg.2> ) ▶₀ #vr.17 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_2
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg.1)
                                        >
                            ) ▶₀ #vr.7 ) )
          next
            case test_common_case_3
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg.1)
                                        >
                            ) ▶₀ #vr.7 ) )
          next
            case test_common_case_4
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.1)
                                     >
                         ) ▶₀ #vr.7 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e0, $msg.2> ) ▶₀ #vr.17 ) )
                case channel_send
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( St_Initiator_2( ~id, e ) ▶₀ #i ) )
      case Instrumentation_Initiator_2
      step( solve( PeerEk_Initiator( ~id, re ) ▶₁ #i ) )
        case Handshake_Initiator_Recv_2
        step( solve( PeerLtk_Initiator( ~id, peer ) ▶₂ #i ) )
          case Handshake_Initiator_Recv_2
          step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.3 ) )
            case peer_keygen
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.1)
                                     >
                         ) ▶₀ #vr.7 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e0, $msg.2> ) ▶₀ #vr.16 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_1
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg.1)
                                        >
                            ) ▶₀ #vr.7 ) )
          next
            case test_common_case_2
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.1)
                                     >
                         ) ▶₀ #vr.7 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e0, $msg.2> ) ▶₀ #vr.17 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_3
            step( solve( Receivable( <'g'^~re0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0>),
                                           'g'^~rs4), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                           h(<
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0
                                                >), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 
                                                      'g'^~re0>),
                                                   'g'^~rs4)
                                             >),
                                           msg.1)
                                     >
                         ) ▶₀ #vr.7 ) )
              case channel_send
              step( solve( Receivable( <'g'^~e0, $msg.2> ) ▶₀ #vr.17 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_4
            by step( solve( Receivable( <'g'^~re0, 
                                         aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                              h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0>),
                                              'g'^~rs4), 
                                         aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~e0*~rs4)>), '0',
                                              h(<
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 'g'^~re0
                                                   >), 
                                                 aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                      h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e0>), $msg.2>), 
                                                         'g'^~re0>),
                                                      'g'^~rs4)
                                                >),
                                              msg.1)
                                        >
                            ) ▶₀ #vr.7 ) )
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Instrumentation_Initiator_4
  backward-search
    case LHS
    step( simplify )
    step( solve( St_Initiator_3( ~id, e, re, peer ) ▶₀ #i ) )
      case Instrumentation_Initiator_3
      step( solve( I_Recv( ~id, '1', msg ) ▶₁ #i ) )
        case I_Recv_from_R
        step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.2 ) )
          case peer_keygen
          step( solve( Receivable( <'1', 
                                    aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '1', '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '0', '0',
                                           msg.5)
                                     >
                         ) ▶₀ #vr.25 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.5 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.3> ) ▶₀ #vr.27 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        next
          case test_common_case_1
          step( solve( Receivable( <'1', 
                                    aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '1', '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '0', '0',
                                           msg.5)
                                     >
                         ) ▶₀ #vr.26 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.5 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.3> ) ▶₀ #vr.28 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        next
          case test_common_case_2
          by step( solve( Receivable( <'1', 
                                       aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '1',
                                            '0', msg)
                                      >
                          ) ▶₀ #vr.11 ) )
        next
          case test_common_case_3
          by step( solve( Receivable( <'1', 
                                       aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '1',
                                            '0', msg)
                                      >
                          ) ▶₀ #vr.11 ) )
        next
          case test_common_case_4
          step( solve( Receivable( <'1', 
                                    aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '1', '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '0', '0',
                                           msg.5)
                                     >
                         ) ▶₀ #vr.26 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.5 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.3> ) ▶₀ #vr.28 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( St_Initiator_3( ~id, e, re, peer ) ▶₀ #i ) )
      case Instrumentation_Initiator_3
      step( solve( I_Recv( ~id, '1', msg ) ▶₁ #i ) )
        case I_Recv_from_R
        step( solve( !Pk( something, 'g'^~rs4 )[no_precomp] ▶₀ #vr.2 ) )
          case peer_keygen
          step( solve( Receivable( <'1', 
                                    aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '1', '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '0', '0',
                                           msg.5)
                                     >
                         ) ▶₀ #vr.25 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.5 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.3> ) ▶₀ #vr.27 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        next
          case test_common_case_1
          by step( solve( Receivable( <'1', 
                                       aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '1',
                                            '0', msg)
                                      >
                          ) ▶₀ #vr.11 ) )
        next
          case test_common_case_2
          step( solve( Receivable( <'1', 
                                    aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '1', '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '0', '0',
                                           msg.5)
                                     >
                         ) ▶₀ #vr.26 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.5 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.3> ) ▶₀ #vr.28 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        next
          case test_common_case_3
          step( solve( Receivable( <'1', 
                                    aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '1', '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.11 ) )
            case channel_send
            step( solve( Receivable( <'0', 
                                      aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '0', '0',
                                           msg.5)
                                     >
                         ) ▶₀ #vr.26 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re0, 
                                        aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 'g'^~re0>),
                                             'g'^~rs4), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 'g'^~re0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~e>), $msg.3>), 
                                                        'g'^~re0>),
                                                     'g'^~rs4)
                                               >),
                                             msg.2)
                                       >
                           ) ▶₀ #vr.5 ) )
                case channel_send
                step( solve( Receivable( <'g'^~e, $msg.3> ) ▶₀ #vr.28 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        next
          case test_common_case_4
          by step( solve( Receivable( <'1', 
                                       aead(kdf2(kdf1(<kdf1(<'NX', 'g'^(~e*~re0)>), 'g'^(~e*~rs4)>)), '1',
                                            '0', msg)
                                      >
                          ) ▶₀ #vr.11 ) )
        qed
      qed
    qed
  qed
next
  case Rule_Instrumentation_Responder_1
  backward-search
    case LHS
    step( simplify )
    step( solve( St_Responder_0( ~id, me ) ▶₀ #i ) )
      case Create_Responder_case_1
      step( solve( Handshake_Recv_1( ~id, msg ) ▶₁ #i ) )
        case Handshake_Responder_Recv_1
        step( solve( Receivable( <'g'^~re0, msg> ) ▶₀ #vr.4 ) )
          case channel_send
          MIRRORED
        qed
      qed
    next
      case Create_Responder_case_2
      step( solve( Handshake_Recv_1( ~id, msg ) ▶₁ #i ) )
        case Handshake_Responder_Recv_1
        step( solve( Receivable( <'g'^~re0, msg> ) ▶₀ #vr.4 ) )
          case channel_send
          MIRRORED
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( St_Responder_0( ~id, me ) ▶₀ #i ) )
      case Create_Responder_case_1
      step( solve( Handshake_Recv_1( ~id, msg ) ▶₁ #i ) )
        case Handshake_Responder_Recv_1
        step( solve( Receivable( <'g'^~re0, msg> ) ▶₀ #vr.4 ) )
          case channel_send
          MIRRORED
        qed
      qed
    next
      case Create_Responder_case_2
      step( solve( Handshake_Recv_1( ~id, msg ) ▶₁ #i ) )
        case Handshake_Responder_Recv_1
        step( solve( Receivable( <'g'^~re0, msg> ) ▶₀ #vr.4 ) )
          case channel_send
          MIRRORED
        qed
      qed
    qed
  qed
next
  case Rule_Instrumentation_Responder_2
  backward-search
    case LHS
    step( simplify )
    step( solve( St_Responder_1( ~id, me ) ▶₀ #i ) )
      case Instrumentation_Responder_1_case_1
      step( solve( PeerEk_Responder( ~id, re ) ▶₁ #i ) )
        case Handshake_Responder_Recv_1
        step( solve( Receivable( <'g'^~re0, msg.1> ) ▶₀ #vr.5 ) )
          case channel_send
          MIRRORED
        qed
      qed
    next
      case Instrumentation_Responder_1_case_2
      step( solve( PeerEk_Responder( ~id, re ) ▶₁ #i ) )
        case Handshake_Responder_Recv_1
        step( solve( Receivable( <'g'^~re0, msg.1> ) ▶₀ #vr.5 ) )
          case channel_send
          MIRRORED
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( St_Responder_1( ~id, me ) ▶₀ #i ) )
      case Instrumentation_Responder_1_case_1
      step( solve( PeerEk_Responder( ~id, re ) ▶₁ #i ) )
        case Handshake_Responder_Recv_1
        step( solve( Receivable( <'g'^~re0, msg.1> ) ▶₀ #vr.5 ) )
          case channel_send
          MIRRORED
        qed
      qed
    next
      case Instrumentation_Responder_1_case_2
      step( solve( PeerEk_Responder( ~id, re ) ▶₁ #i ) )
        case Handshake_Responder_Recv_1
        step( solve( Receivable( <'g'^~re0, msg.1> ) ▶₀ #vr.5 ) )
          case channel_send
          MIRRORED
        qed
      qed
    qed
  qed
next
  case Rule_Instrumentation_Responder_3
  backward-search
    case LHS
    step( simplify )
    step( solve( St_Responder_2( ~id, me, re ) ▶₀ #i ) )
      case Instrumentation_Responder_2_case_1
      step( solve( MyEk_Responder( ~id, e ) ▶₁ #i ) )
        case Handshake_Responder_Snd_2
        step( solve( R_Recv( ~id, '0', msg ) ▶₂ #i ) )
          case R_Recv_from_I
          step( solve( Receivable( <'0', 
                                    aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~re0*~s)>)), '0', '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.10 ) )
            case channel_send
            step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.17 ) )
              case test_common_case_1
              step( solve( Receivable( <'g'^~e0, 
                                        aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 'g'^~e0>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~re0*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 'g'^~e0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.20 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re0, $msg.2> ) ▶₀ #vr.5 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            next
              case test_common_case_2
              step( solve( Receivable( <'g'^~e0, 
                                        aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 'g'^~e0>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~re0*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 'g'^~e0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.20 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re0, $msg.2> ) ▶₀ #vr.5 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Instrumentation_Responder_2_case_2
      step( solve( MyEk_Responder( ~id, e ) ▶₁ #i ) )
        case Handshake_Responder_Snd_2
        step( solve( R_Recv( ~id, '0', msg ) ▶₂ #i ) )
          case R_Recv_from_I
          step( solve( Receivable( <'0', 
                                    aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~re0*~s)>)), '0', '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.10 ) )
            case channel_send
            step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.17 ) )
              case peer_keygen
              step( solve( Receivable( <'g'^~e0, 
                                        aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 'g'^~e0>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~re0*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 'g'^~e0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.20 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re0, $msg.2> ) ▶₀ #vr.5 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( St_Responder_2( ~id, me, re ) ▶₀ #i ) )
      case Instrumentation_Responder_2_case_1
      step( solve( MyEk_Responder( ~id, e ) ▶₁ #i ) )
        case Handshake_Responder_Snd_2
        step( solve( R_Recv( ~id, '0', msg ) ▶₂ #i ) )
          case R_Recv_from_I
          step( solve( Receivable( <'0', 
                                    aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~re0*~s)>)), '0', '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.10 ) )
            case channel_send
            step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.17 ) )
              case test_common_case_1
              step( solve( Receivable( <'g'^~e0, 
                                        aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 'g'^~e0>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~re0*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 'g'^~e0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.20 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re0, $msg.2> ) ▶₀ #vr.5 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            next
              case test_common_case_2
              step( solve( Receivable( <'g'^~e0, 
                                        aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 'g'^~e0>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~re0*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 'g'^~e0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.20 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re0, $msg.2> ) ▶₀ #vr.5 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Instrumentation_Responder_2_case_2
      step( solve( MyEk_Responder( ~id, e ) ▶₁ #i ) )
        case Handshake_Responder_Snd_2
        step( solve( R_Recv( ~id, '0', msg ) ▶₂ #i ) )
          case R_Recv_from_I
          step( solve( Receivable( <'0', 
                                    aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~re0*~s)>)), '0', '0',
                                         msg)
                                   >
                       ) ▶₀ #vr.10 ) )
            case channel_send
            step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.17 ) )
              case peer_keygen
              step( solve( Receivable( <'g'^~e0, 
                                        aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                             h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 'g'^~e0>),
                                             'g'^~s), 
                                        aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re0)>), 'g'^(~re0*~s)>), '0',
                                             h(<
                                                h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 'g'^~e0
                                                  >), 
                                                aead(kdf2(<'NX', 'g'^(~e0*~re0)>), '0',
                                                     h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re0>), $msg.3>), 
                                                        'g'^~e0>),
                                                     'g'^~s)
                                               >),
                                             msg.4)
                                       >
                           ) ▶₀ #vr.20 ) )
                case channel_send
                step( solve( Receivable( <'g'^~re0, $msg.2> ) ▶₀ #vr.5 ) )
                  case channel_send
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Instrumentation_Responder_4
  backward-search
    case LHS
    step( simplify )
    step( solve( St_Responder_3( ~id, e, me, re ) ▶₀ #i ) )
      case Instrumentation_Responder_3_case_1
      step( solve( Receivable( <'0', 
                                aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                     msg.1)
                               >
                   ) ▶₀ #vr.7 ) )
        case channel_send
        step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.18 ) )
          case test_common_case_1
          step( solve( Receivable( <'g'^~e0, 
                                    aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>),
                                         'g'^~s), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         msg.5)
                                   >
                       ) ▶₀ #vr.21 ) )
            case channel_send
            step( solve( Receivable( <'g'^~re, $msg.3> ) ▶₀ #vr.11 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case test_common_case_2
          step( solve( Receivable( <'g'^~e0, 
                                    aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>),
                                         'g'^~s), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         msg.5)
                                   >
                       ) ▶₀ #vr.21 ) )
            case channel_send
            step( solve( Receivable( <'g'^~re, $msg.3> ) ▶₀ #vr.11 ) )
              case channel_send
              MIRRORED
            qed
          qed
        qed
      qed
    next
      case Instrumentation_Responder_3_case_2
      step( solve( Receivable( <'0', 
                                aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                     msg.1)
                               >
                   ) ▶₀ #vr.7 ) )
        case channel_send
        step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.18 ) )
          case peer_keygen
          step( solve( Receivable( <'g'^~e0, 
                                    aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>),
                                         'g'^~s), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         msg.5)
                                   >
                       ) ▶₀ #vr.21 ) )
            case channel_send
            step( solve( Receivable( <'g'^~re, $msg.3> ) ▶₀ #vr.11 ) )
              case channel_send
              MIRRORED
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( St_Responder_3( ~id, e, me, re ) ▶₀ #i ) )
      case Instrumentation_Responder_3_case_1
      step( solve( Receivable( <'0', 
                                aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                     msg.1)
                               >
                   ) ▶₀ #vr.7 ) )
        case channel_send
        step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.18 ) )
          case test_common_case_1
          step( solve( Receivable( <'g'^~e0, 
                                    aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>),
                                         'g'^~s), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         msg.5)
                                   >
                       ) ▶₀ #vr.21 ) )
            case channel_send
            step( solve( Receivable( <'g'^~re, $msg.3> ) ▶₀ #vr.11 ) )
              case channel_send
              MIRRORED
            qed
          qed
        next
          case test_common_case_2
          step( solve( Receivable( <'g'^~e0, 
                                    aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>),
                                         'g'^~s), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         msg.5)
                                   >
                       ) ▶₀ #vr.21 ) )
            case channel_send
            step( solve( Receivable( <'g'^~re, $msg.3> ) ▶₀ #vr.11 ) )
              case channel_send
              MIRRORED
            qed
          qed
        qed
      qed
    next
      case Instrumentation_Responder_3_case_2
      step( solve( Receivable( <'0', 
                                aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                     msg.1)
                               >
                   ) ▶₀ #vr.7 ) )
        case channel_send
        step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.18 ) )
          case peer_keygen
          step( solve( Receivable( <'g'^~e0, 
                                    aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                         h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>),
                                         'g'^~s), 
                                    aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>), '0',
                                         h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>), 
                                            aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                 h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0
                                                   >),
                                                 'g'^~s)
                                           >),
                                         msg.5)
                                   >
                       ) ▶₀ #vr.21 ) )
            case channel_send
            step( solve( Receivable( <'g'^~re, $msg.3> ) ▶₀ #vr.11 ) )
              case channel_send
              MIRRORED
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_R_Recv_from_I
  backward-search
    case LHS
    step( simplify )
    step( solve( !Transport_Responder( id, ki2r, kr2i ) ▶₁ #i ) )
      case Responder_to_transport_mode_case_1
      step( solve( Recv( <n, 
                          aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), n, '0', msg)
                         >
                   ) ▶₀ #i ) )
        case channel_receive
        step( solve( Receivable( <n, 
                                  aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), n, '0', msg)
                                 >
                     ) ▶₀ #vr.10 ) )
          case channel_send
          step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.16 ) )
            case test_common_case_1
            step( solve( Receivable( <'g'^~e, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e>),
                                           'g'^~s), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e
                                                     >),
                                                   'g'^~s)
                                             >),
                                           msg.3)
                                     >
                         ) ▶₀ #vr.19 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.6 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_2
            step( solve( Receivable( <'g'^~e, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e>),
                                           'g'^~s), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e
                                                     >),
                                                   'g'^~s)
                                             >),
                                           msg.3)
                                     >
                         ) ▶₀ #vr.19 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.6 ) )
                case channel_send
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    next
      case Responder_to_transport_mode_case_2
      step( solve( Recv( <n, 
                          aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), n, '0', msg)
                         >
                   ) ▶₀ #i ) )
        case channel_receive
        step( solve( Receivable( <n, 
                                  aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), n, '0', msg)
                                 >
                     ) ▶₀ #vr.10 ) )
          case channel_send
          step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.16 ) )
            case peer_keygen
            step( solve( Receivable( <'g'^~e, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e>),
                                           'g'^~s), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e
                                                     >),
                                                   'g'^~s)
                                             >),
                                           msg.3)
                                     >
                         ) ▶₀ #vr.19 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.6 ) )
                case channel_send
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Transport_Responder( id, ki2r, kr2i ) ▶₁ #i ) )
      case Responder_to_transport_mode_case_1
      step( solve( Recv( <n, 
                          aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), n, '0', msg)
                         >
                   ) ▶₀ #i ) )
        case channel_receive
        step( solve( Receivable( <n, 
                                  aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), n, '0', msg)
                                 >
                     ) ▶₀ #vr.10 ) )
          case channel_send
          step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.16 ) )
            case test_common_case_1
            step( solve( Receivable( <'g'^~e, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e>),
                                           'g'^~s), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e
                                                     >),
                                                   'g'^~s)
                                             >),
                                           msg.3)
                                     >
                         ) ▶₀ #vr.19 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.6 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_2
            step( solve( Receivable( <'g'^~e, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e>),
                                           'g'^~s), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e
                                                     >),
                                                   'g'^~s)
                                             >),
                                           msg.3)
                                     >
                         ) ▶₀ #vr.19 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.6 ) )
                case channel_send
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    next
      case Responder_to_transport_mode_case_2
      step( solve( Recv( <n, 
                          aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), n, '0', msg)
                         >
                   ) ▶₀ #i ) )
        case channel_receive
        step( solve( Receivable( <n, 
                                  aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>)), n, '0', msg)
                                 >
                     ) ▶₀ #vr.10 ) )
          case channel_send
          step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.16 ) )
            case peer_keygen
            step( solve( Receivable( <'g'^~e, 
                                      aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e>),
                                           'g'^~s), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e*~re)>), 'g'^(~re*~s)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e>), 
                                              aead(kdf2(<'NX', 'g'^(~e*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.2>), 'g'^~e
                                                     >),
                                                   'g'^~s)
                                             >),
                                           msg.3)
                                     >
                         ) ▶₀ #vr.19 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re, $msg.1> ) ▶₀ #vr.6 ) )
                case channel_send
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_R_Snd_to_I
  backward-search
    case LHS
    step( simplify )
    step( solve( R_Snd( id, n, msg ) ▶₀ #i ) )
      case Instrumentation_Responder_4_case_1
      step( solve( !Transport_Responder( ~id, ki2r, kr2i ) ▶₁ #i ) )
        case Responder_to_transport_mode
        step( solve( Receivable( <'0', 
                                  aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                       msg.1)
                                 >
                     ) ▶₀ #vr.8 ) )
          case channel_send
          step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.19 ) )
            case test_common_case_1
            step( solve( Receivable( <'g'^~e0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>),
                                           'g'^~s), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           msg.5)
                                     >
                         ) ▶₀ #vr.22 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re, $msg.3> ) ▶₀ #vr.12 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_2
            step( solve( Receivable( <'g'^~e0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>),
                                           'g'^~s), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           msg.5)
                                     >
                         ) ▶₀ #vr.22 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re, $msg.3> ) ▶₀ #vr.12 ) )
                case channel_send
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    next
      case Instrumentation_Responder_4_case_2
      step( solve( !Transport_Responder( ~id, ki2r, kr2i ) ▶₁ #i ) )
        case Responder_to_transport_mode
        step( solve( Receivable( <'0', 
                                  aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                       msg.1)
                                 >
                     ) ▶₀ #vr.8 ) )
          case channel_send
          step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.19 ) )
            case peer_keygen
            step( solve( Receivable( <'g'^~e0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>),
                                           'g'^~s), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           msg.5)
                                     >
                         ) ▶₀ #vr.22 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re, $msg.3> ) ▶₀ #vr.12 ) )
                case channel_send
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( R_Snd( id, n, msg ) ▶₀ #i ) )
      case Instrumentation_Responder_4_case_1
      step( solve( !Transport_Responder( ~id, ki2r, kr2i ) ▶₁ #i ) )
        case Responder_to_transport_mode
        step( solve( Receivable( <'0', 
                                  aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                       msg.1)
                                 >
                     ) ▶₀ #vr.8 ) )
          case channel_send
          step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.19 ) )
            case test_common_case_1
            step( solve( Receivable( <'g'^~e0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>),
                                           'g'^~s), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           msg.5)
                                     >
                         ) ▶₀ #vr.22 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re, $msg.3> ) ▶₀ #vr.12 ) )
                case channel_send
                MIRRORED
              qed
            qed
          next
            case test_common_case_2
            step( solve( Receivable( <'g'^~e0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>),
                                           'g'^~s), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           msg.5)
                                     >
                         ) ▶₀ #vr.22 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re, $msg.3> ) ▶₀ #vr.12 ) )
                case channel_send
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    next
      case Instrumentation_Responder_4_case_2
      step( solve( !Transport_Responder( ~id, ki2r, kr2i ) ▶₁ #i ) )
        case Responder_to_transport_mode
        step( solve( Receivable( <'0', 
                                  aead(kdf1(kdf1(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>)), '0', '0',
                                       msg.1)
                                 >
                     ) ▶₀ #vr.8 ) )
          case channel_send
          step( solve( !Pk( something, 'g'^~s )[no_precomp] ▶₀ #vr.19 ) )
            case peer_keygen
            step( solve( Receivable( <'g'^~e0, 
                                      aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                           h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>),
                                           'g'^~s), 
                                      aead(kdf2(<kdf1(<'NX', 'g'^(~e0*~re)>), 'g'^(~re*~s)>), '0',
                                           h(<h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 'g'^~e0>), 
                                              aead(kdf2(<'NX', 'g'^(~e0*~re)>), '0',
                                                   h(<h(<h(<h(<'NX', 'prologue'>), 'g'^~re>), $msg.4>), 
                                                      'g'^~e0>),
                                                   'g'^~s)
                                             >),
                                           msg.5)
                                     >
                         ) ▶₀ #vr.22 ) )
              case channel_send
              step( solve( Receivable( <'g'^~re, $msg.3> ) ▶₀ #vr.12 ) )
                case channel_send
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Responder_to_transport_mode
  backward-search
    case LHS
    step( simplify )
    step( solve( HandshakeState_Responder_2( id, hash, ck, k, ~e, z, ~s
                 ) ▶₀ #i ) )
      case Handshake_Responder_Snd_2_case_1
      step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.5 ) )
        case channel_send
        MIRRORED
      qed
    next
      case Handshake_Responder_Snd_2_case_2
      step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.5 ) )
        case channel_send
        MIRRORED
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( HandshakeState_Responder_2( id, hash, ck, k, ~e, z, ~s
                 ) ▶₀ #i ) )
      case Handshake_Responder_Snd_2_case_1
      step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.5 ) )
        case channel_send
        MIRRORED
      qed
    next
      case Handshake_Responder_Snd_2_case_2
      step( solve( Receivable( <'g'^~re, payload> ) ▶₀ #vr.5 ) )
        case channel_send
        MIRRORED
      qed
    qed
  qed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_channel_receive
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_channel_send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_ephemeral_keygen
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_peer_keygen
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_peer_reveal
  backward-search
    case LHS
    step( simplify )
    step( solve( !PeerPk( ~s, 'g'^~s ) ▶₀ #i ) )
      case peer_keygen
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( !PeerPk( ~s, 'g'^~s ) ▶₀ #i ) )
      case peer_keygen
      MIRRORED
    qed
  qed
next
  case Rule_test_agent_keygen
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_test_common
  backward-search
    case LHS
    step( simplify )
    step( solve( !TestAlternatives( (~a+~b) ) ▶₀ #i ) )
      case test_agent_keygen_case_1
      MIRRORED
    next
      case test_agent_keygen_case_2
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( !TestAlternatives( (~a+~b) ) ▶₀ #i ) )
      case test_agent_keygen_case_1
      MIRRORED
    next
      case test_agent_keygen_case_2
      MIRRORED
    qed
  qed
qed

/*
Generated from:
Tamarin version 1.7.1
Maude version 2.7.1
Git revision: 3cb7de8d32abb28af2c15661792ee709093dfac5 (with uncommited changes), branch: tacticParser
Compiled at: 2023-01-23 09:28:22.913257386 UTC
*/

end