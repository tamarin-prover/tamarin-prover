/*
  Example for the Tamarin Prover
  ==============================

  Authors:       Jannik Dreier
  Date:             April 2020
  Time:                 ?

  Description from SPORE:
  (http://www.lsv.fr/Software/spore/ccittx509_3BAN.html)

  BAN modified version of CCITT X.509 (3)

  A, B :    principal
  Na, Nb :    nonce
  Ya, Yb :    userdata
  Xa, Xb :    userdata
  PK, SK :    principal -> key (keypair)

  Spore specification
  1.    A  ->  B  :    A, {Na, B, Xa, {Ya}PK(B)}SK(A)
  2.    B  ->  A  :    B, {Nb, A, Na, Xb, {Yb}PK(A)}SK(B)
  3.    A  ->  B  :    A, {B, Nb}SK(A)
  Reconstruction to fit the original specification
  1.    A  ->  B  :    A, Na, B, Xa, {Ya}PK(B), {h(Na, B, Xa, {Ya}PK(B))}SK(A)
  2.    B  ->  A  :    B, Nb, A, Na, Xb, {Yb}PK(A), {h(B, Nb, A, Na, Xb, {Yb}PK(A))}SK(B)
  3.    A  ->  B  :    A, {B, Nb}SK(A)

  h is a one-way function.

  The protocol must ensure the confidentiality of Ya and Yb:
    if A and B follow the protocol, then an attacker should not be able to obtain Ya or Yb.

  The protocol must ensure the recipient B of the message 1 that the data Xa and Ya originate from A.

  The protocol must ensure the recipient A of the message 2 that the data Xb and Yb originate from B.

*/

theory CcittX509_3_BAN
begin

builtins: asymmetric-encryption, signing

functions: h/1

// ====================
// == General rules ===
// ====================

// Registering a public key
rule Register_pk:
    [ Fr(~ltk) ]
  --[ Register($X, ~ltk) ]->
    [ !Ltk($X, ~ltk), !Pk($X, pk(~ltk)) ]

rule Get_pk:
    [ !Pk($X, pubkey) ]
  -->
    [ Out(pubkey) ]

rule Reveal_ltk:
    [ !Ltk($U, ~ltk) ]
  --[ Reveal($U) ]->
    [ Out(~ltk) ]

// ====================
// == Protocol rules ==
// ====================

// 1.   A ->  B :   A, Na, B, Xa, {Ya}PK(B), {h(Na, B, Xa, {Ya}PK(B))}SK(A)
rule A_send_1:
  let c  = aenc(~Ya, pk(~ltkB))
      m  = <~na, $B, ~xa, c>
      ha = h(m)
  in
 [
      !Pk($B, pk(~ltkB))
    , !Ltk($A, ~ltkA)
    , Fr(~na)
    , Fr(~xa)
    , Fr(~Ya)
  ]
 --[ Running_A($A, $B, <'A','B',~xa, ~Ya>)
   , Secret($A, $B, ~Ya)
   ]->
 [
    Out(< $A, ~na, $B, ~xa, c, ha, sign(ha,~ltkA)>)
  , StateA($A, $B, ~na, ~xa, ~Ya, ~ltkA, ~ltkB)
  ]

// 1.   A ->  B :   A, Na, B, Xa, {Ya}PK(B), {h(Na, B, Xa, {Ya}PK(B))}SK(A)
// 2.   B ->  A :   B, Nb, A, Na, Xb, {Yb}PK(A), {h(B, Nb, A, Na, Xb, {Yb}PK(A))}SK(B)
rule B_receive_1:
  let c  = aenc(Ya,pk(~ltkB))
      m  = <na, $B, xa, c>
      ha = h(m)
      cb = aenc(~Yb,pk(~ltkA))
      mb = <$B, ~nb, x, na, ~xb, cb>
      hb = h(mb)
  in
  [
    In( < x, na, $B, xa, c, ha, sign(ha, ~ltkA)> )
    , !Pk(x, pk(~ltkA))
    , !Ltk($B, ~ltkB)
    , Fr(~nb)
    , Fr(~xb)
    , Fr(~Yb)
  ]
  --[ Commit_B(x, $B, <'A','B', xa, Ya>)
    , Secret(x, $B, Ya)
    , Running_B(x, $B, <'A','B', ~xb, ~Yb>)
    ]->
  [ Out(< $B, ~nb, x, na, ~xb, cb, hb, sign(hb,~ltkB)>)
  , StateB(x, $B, na, xa, Ya, ~ltkA, ~ltkB, ~nb, ~xb, ~Yb)
  ]

// 2.   B ->  A :   B, Nb, A, Na, Xb, {Yb}PK(A), {h(B, Nb, A, Na, Xb, {Yb}PK(A))}SK(B)
// 3.   A ->  B :   A, {B, Nb}SK(A)
rule A_send_2:
  let c  = aenc(Yb,pk(~ltkA))
      hb = h(<$B, nb, $A, ~na, xb, c>) in
 [
    !Pk($B, pk(~ltkB))
    , !Ltk($A, ~ltkA)
    , StateA($A, $B, ~na, ~xa, ~Ya, ~ltkA, ~ltkB)
    , In(< $B, nb, $A, ~na, xb, c, hb, sign(hb,~ltkB)>)
  ]
 --[
      Commit_A($A, $B, <'A','B',xb, Yb>)
    , Secret($A, $B, Yb)
    ]->
 [
    Out(< $A, $B, nb, sign(<$B, nb>,~ltkA)>)
  ]

// 3.   A ->  B :   A, {B, Nb}SK(A) Receive
rule B_receive_2:
  [
      In(< x, $B, ~nb, sign(<$B, ~nb>, ~ltkA)>)
    ,!Pk(x, pk(~ltkA))
    ,!Ltk($B, ~ltkB)
    , StateB(x, $B, na, xa, Ya, ~ltkA, ~ltkB, ~nb, ~xb, ~Yb)
  ]
  --[ End(x, $B) ]->
  []

// ====================
// ====== Lemmas ======
// ====================

// check the secrecy of a secret x protected by the long-term key of A and B
lemma Secrecy:
  "
    not(
      Ex A B m #i .
        Secret(A, B, m)@ #i
        & (Ex #r. K(m) @ #r)
        & not(Ex #r. Reveal(B) @ #r)
        & not(Ex #r. Reveal(A) @ #r)
    )
  "

// check the authenticity and freshness of the transaction from B's point of view
lemma injectiveagreement_B:
   "All A B t #i.
     Commit_B(A,B,t) @i
     ==> (Ex #j. Running_A(A,B,t) @j
         & j < i
         & not (Ex A2 B2 #i2. Commit_B(A2,B2,t) @i2
                            & not (#i2 = #i)))
               | (Ex #r. Reveal(A)@r)
               | (Ex #r. Reveal(B)@r)"

// check the authenticity of the transaction from B's point of view
lemma agreement_B:
  "All A B t #i.
    Commit_B(A,B,t) @i
    ==> (Ex #j. Running_A(A,B,t) @j  & j < i)
              | (Ex #r. Reveal(A)@r)
              | (Ex #r. Reveal(B)@r)"

// check the authenticity and freshness of the transaction from A's point of view
lemma injectiveagreement_A:
   "All A B t #i.
     Commit_A(A,B,t) @i
     ==> (Ex #j. Running_B(A,B,t) @j
         & j < i
         & not (Ex A2 B2 #i2. Commit_A(A2,B2,t) @i2
                            & not (#i2 = #i)))
               | (Ex #r. Reveal(A)@r)
               | (Ex #r. Reveal(B)@r)"

// check the authenticity of the transaction from A's point of view
lemma agreement_A:
  "All A B t #i.
    Commit_A(A,B,t) @i
    ==> (Ex #j. Running_B(A,B,t) @j  & j < i)
              | (Ex #r. Reveal(A)@r)
              | (Ex #r. Reveal(B)@r)"

// sanity check: check if honest execution is possible
lemma Session_key_honest_setup:
  exists-trace
  "(
    // To simplify the proof, consider only executions where all the events are unique
    (All A A2 B B2 t t2 #i #j.(
       Running_A(A, B, t) @ #i
     & Running_A(A2, B2, t2) @ #j
     ==> #i = #j))
    &
    (All A A2 B B2 t t2 #i #j.(
       Running_B(A, B, t) @ #i
     & Running_B(A2, B2, t2) @ #j
     ==> #i = #j))
    &
    (All A A2 B B2 t t2 #i #j.(
       Commit_A(A, B, t) @ #i
     & Commit_A(A2, B2, t2) @ #j
     ==> #i = #j))
    &
    (All A A2 B B2 t t2 #i #j.(
       Commit_B(A, B, t) @ #i
     & Commit_B(A2, B2, t2) @ #j
     ==> #i = #j))
    &
    // We want an execution with all for events, and no corruption
    (Ex A B t t2 #i #j #l #m.
        Running_A(A, B, t) @ #i
      & Commit_B(A, B, t)@ #j
      & Running_B(A, B, t2) @ #j
      & Commit_A(A, B, t2)@ #l
      & End(A, B)@ #m
      & not(Ex #r. Reveal(B) @ r)
      & not(Ex #s. Reveal(A) @ s)
  ))"

end
