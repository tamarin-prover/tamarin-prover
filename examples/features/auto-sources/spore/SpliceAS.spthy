/*
  Example for the Tamarin Prover
  ==============================

  Authors:       Jannik Dreier
  Date:             April 2020
  Time:                ?

  Description from SPORE:
  (http://www.lsv.fr/Software/spore/spliceas.html)

  SPLICE/AS

  S, C, AS :   	principal
  N1, N2, N3 :   	nonce
  T :   	timestamp
  L :   	lifetime
  pk, sk :   	principal -> key (keypair)

  1.   	C 	-> 	AS 	:   	C, S, N1
  2.   	AS 	-> 	C 	:   	AS, {AS, C, N1, pk(S)}sk(AS)
  3.   	C 	-> 	S 	 :   	C, S, {C, T, L, {N2}pk(S)}sk(C)
  4.   	S 	-> 	AS 	:   	S, C, N3
  5.   	AS 	-> 	S 	:   	AS, {AS, S, N3, pk(C)}sk(AS)
  6.   	S 	-> 	C 	 :   	S, C, {S, inc(N2)}pk(C)

  key is the type of public/private keys.
  The functions pk and sk associate to a principal's name its public key, resp. private key.

  We assume that initially, the client C and the server S only know their own public and private key,
  and that the authority AS known the function pk, i.e. he knows everyone's public key.

  {AS, C, N1, pk(S)}sk(AS) (in message 2) and {AS, S, N3, pk(C)}sk(AS) (in message 5)
  are certificates signed and distributed by the authority AS, for the respective public keys pk(S) and pk(C).

  After a successfull run of the protocol,
  the value of N2 can be used by C and S as a symmetric key for secure communications.

  The protocol must guaranty the secrecy of N2: in every session,
  the value of N2 must be known only by the participants playing the roles of C, S.

  The protocol must also ensure C that S has received N2 and S that the N2 he has received in message 3 originated from C.

  1.
  The intruder I can impersonate the client C and obtain N2 in a single session (i.e. without even running a parallel session).
  1.   	I 	-> 	AS 	:   	I, S, N1
  2.   	AS 	-> 	I 	:   	AS, {AS, I, N1, pk(S)}sk(AS)
  3.   	I(C) 	-> 	S 	:   	C, S, {C, T, L, {N2}pk(S)}sk(I)
  4.   	S 	-> 	I(AS) 	:   	S, C, N3
  4.   	I(S) 	-> 	AS 	:   	S, I, N3
  5.   	AS 	-> 	S 	:   	AS, {AS, S, N3, pk(I)}sk(AS)
  6.   	S 	-> 	I(C) 	:   	S, C, {S, inc(N2)}pk(I)
  In message 5, the server S accepts the certificate {AS, S, N3, pk(I)}sk(AS) from AS
  as a certificate of the public key of C
  (note that the certificates do not contain the name of the owner of public keyx in this protocol)
  and hence crypts the data in the last message 6 with the public key of I.

  2.
  In this second (symmetric) attack from [HC95], the intruder I can impersonate the server S and obtain N2.
  1.   	C 	-> 	I(AS) 	:   	C, S, N1
  1.   	I(C) 	-> 	AS 	:   	C, I, N1
  2.   	AS 	-> 	C 	:   	AS, {AS, C, N1, pk(I)}sk(AS)
  3.   	C 	-> 	I(S) 	:   	C, S, {C, T, L, {N2}pk(I)}sk(C)
  4.   	I 	-> 	AS 	:   	I, C, N3
  5.   	AS 	-> 	I 	:   	AS, {AS, S, N3, pk(C)}sk(AS)
  6.   	S 	-> 	C 	:   	S, C, {S, inc(N2)}pk(C)

  3.
  Lowe outlined that a malicious C can replay the message 3 (the first message concerning S) several times,
  with new values of T and L, to restart authentication with an old value of N2.

  We model a variant with tags, and assume a single authority AS.

*/

theory SpliceAS
begin

builtins: asymmetric-encryption, signing

functions: dec/1, inc/1

equations: dec(inc(x))=x

// ====================
// == General rules ===
// ====================

// Registering a public key
// We assume only one key per identity, as per SPORE spec
rule Register_pk:
    [ Fr(~ltk) ]
  --[ Register($U, ~ltk), OnlyOnce($U) ]->
    [ !Ltk($U, ~ltk), !Pk($U, pk(~ltk)) ]

rule Get_pk:
    [ !Pk($U, pubkey) ]
  -->
    [ Out(pubkey) ]

rule Reveal_ltk:
    [ !Ltk($U, ~ltk) ]
  --[ Reveal($U) ]->
    [ Out(~ltk) ]

// ====================
// == Protocol rules ==
// ====================

// 1.   	C 	-> 	AS :   	C, S, N1
rule C_to_AS:
  let AS = 'AS' in
  [
     !Ltk($C,~ltkC)
   , Fr(~n1)
  ]
 --[
   ]->
  [
    Out(<'Req', $C, $S, ~n1>)
  , StateC1($C, AS, $S, ~ltkC, ~n1)
  ]

// 2.   	AS -> 	C 	:   	AS, {AS, C, N1, pk(S)}sk(AS)
// and
// 5.   	AS -> 	S 	:   	AS, {AS, S, N3, pk(C)}sk(AS)
rule AS_send_key:
  let AS = 'AS'
      m = <'Key', AS, x, n, pk(~ltkY)> in
  [
    In(<'Req', x, y, n>)
  , !Ltk(AS, ~ltkAS)
  , !Pk(y, pk(~ltkY))
  ]
 --[
   ]->
  [
    Out(<AS, x, n, pk(~ltkY), sign(m,~ltkAS)>)
  ]

// 3.   	C 	-> 	S 	:   	C, S, {C, T, L, {N2}pk(S)}sk(C)
rule C_to_S:
  let AS = 'AS'
      m = <'Key', AS, $C, ~n1, pkS>
      key = aenc(<'4', ~n2>, pkS)
      msg = sign(<'3', $C, ~t, ~l, key>,~ltkC)
  in
  [
    In(<AS, $C, ~n1, pkS, sign(m,~ltkAS)>)
  , StateC1($C, AS, $S, ~ltkC, ~n1)
  , !Pk(AS, pk(~ltkAS))
  , !Ltk($C, ~ltkC)
  , Fr(~t)
  , Fr(~l)
  , Fr(~n2)
  ]
 --[
     Secret($C, $S, ~n2)
   , Running_A($C, $S, <'C', 'S', ~n2>)
   ]->
  [
    Out(<$C, $S, ~t, ~l, key, msg>)
  , StateC2($C, AS, $S, ~ltkC, ~n1, ~n2, ~t, ~l, pkS)
  ]

// 4.   	S 	-> 	AS :   	S, C, N3
rule S_to_AS:
  let AS = 'AS'
      key = aenc(<'4', n2>, pk(~ltkS))
      msg = sign(<'3', c, t, l, key>,ltkC)
  in
  [
    In(<c, $S, t, l, key, msg>)
  , !Ltk($S, ~ltkS)
  , Fr(~n3)
  ]
 --[
   ]->
  [
    Out(<'Req', $S, c, ~n3>)
  , StateS(c, AS, $S, ~ltkS, t, l, n2, ltkC, ~n3)
  ]

// 6.   	S 	-> 	C 	:   	S, C, {S, inc(N2)}pk(C)   Send
rule S_to_C:
  let m = <'Key', AS, $S, ~n3, pk(ltkC)>
  in
  [
    In(<AS, $S, ~n3, pk(ltkC), sign(m,~ltkAS)>)
  , StateS(c, AS, $S, ~ltkS, t, l, n2, ltkC, ~n3)
  , !Pk(AS, pk(~ltkAS))
  , !Ltk($S, ~ltkS)
  ]
 --[
     Secret(c, $S, n2)
   , Commit_B(c, $S, <'C', 'S', n2>)
   , Running_B(c, $S, <'C', 'S', n2>)
   ]->
  [
    Out(<$S, c, aenc(<'5', $S, inc(n2)>, pk(ltkC))>)
  ]

// 6.   	S 	-> 	C 	:   	S, C, {S, inc(N2)}pk(C)   Receive
rule C_from_S:
 [
    In(<$S, $C, aenc(<'5', $S, inc(~n2)>, pk(~ltkC))>)
  , StateC2($C, AS, $S, ~ltkC, ~n1, ~n2, ~t, ~l, pkS)
  , !Ltk($C, ~ltkC)
 ]
 --[
     Commit_A($C, $S, <'C', 'S', ~n2>)
   ]->
 []

 // prevent specific rules from being called on more than once
 // here to ensure a single key per user
 restriction OnlyOnce:
   "
     All A B #i #j.
       OnlyOnce(A)@#i & OnlyOnce(B)@#j
       & A=B
     ==>
       #i = #j
   "

// ====================
// ====== Lemmas ======
// ====================

// sanity check: check if honest execution is possible
lemma executability:
 exists-trace
 "// To simplify the proof, consider only executions where all the events are unique
 (All A A2 B B2 t t2 #i #j.(
    Running_A(A, B, t) @ #i
  & Running_A(A2, B2, t2) @ #j
  ==> #i = #j))
 &
 (All A A2 B B2 t t2 #i #j.(
    Running_B(A, B, t) @ #i
  & Running_B(A2, B2, t2) @ #j
  ==> #i = #j))
 &
 (All A A2 B B2 t t2 #i #j.(
    Commit_A(A, B, t) @ #i
  & Commit_A(A2, B2, t2) @ #j
  ==> #i = #j))
 &
 (All A A2 B B2 t t2 #i #j.(
    Commit_B(A, B, t) @ #i
  & Commit_B(A2, B2, t2) @ #j
  ==> #i = #j))
 &
 // We want an execution with all for events, and no corruption
 ( Ex A B t #i #j #k.
   Running_A(A,B,t)@#i
 & Running_B(A,B,t)@#j & #i<#j
 & Commit_B(A,B,t)@#j
 & Commit_A(A,B,t)@#k & #j<#k
 & not(Ex #r1. Reveal(A)@#r1)
 & not(Ex #r2. Reveal(B)@#r2)
 & not(Ex #r3. Reveal('AS')@#r3)
 & not(A = B)
 )"

// check the secrecy of a secret x protected by the long-term key of A and B
lemma Secrecy:
  "
    not(
      Ex A B m #i .
        Secret(A, B, m)@ #i
        & (Ex #r. K(m) @ #r)
        & not(Ex #r. Reveal(B) @ #r)
        & not(Ex #r. Reveal(A) @ #r)
        & not(Ex #r. Reveal('AS') @ #r)
    )
  "

// check the authenticity and freshness of the transaction from B's point of view
lemma injectiveagreement_B:
   "All A B t #i.
     Commit_B(A,B,t) @i
     ==> (Ex #j. Running_A(A,B,t) @j
         & j < i
         & not (Ex A2 B2 #i2. Commit_B(A2,B2,t) @i2
                            & not (#i2 = #i)))
               | (Ex #r. Reveal(A)@r)
               | (Ex #r. Reveal(B)@r)
               | (Ex #r. Reveal('AS')@r)
"

// check the authenticity of the transaction from B's point of view
lemma agreement_B:
  "All A B t #i.
    Commit_B(A,B,t) @i
    ==> (Ex #j. Running_A(A,B,t) @j  & j < i)
              | (Ex #r. Reveal(A)@r)
              | (Ex #r. Reveal(B)@r)
              | (Ex #r. Reveal('AS')@r)
"

// check the authenticity and freshness of the transaction from A's point of view
lemma injectiveagreement_A:
   "All A B t #i.
     Commit_A(A,B,t) @i
     ==> (Ex #j. Running_B(A,B,t) @j
         & j < i
         & not (Ex A2 B2 #i2. Commit_A(A2,B2,t) @i2
                            & not (#i2 = #i)))
               | (Ex #r. Reveal(A)@r)
               | (Ex #r. Reveal(B)@r)
               | (Ex #r. Reveal('AS')@r)
"

// check the authenticity of the transaction from A's point of view
lemma agreement_A:
  "All A B t #i.
    Commit_A(A,B,t) @i
    ==> (Ex #j. Running_B(A,B,t) @j  & j < i)
              | (Ex #r. Reveal(A)@r)
              | (Ex #r. Reveal(B)@r)
              | (Ex #r. Reveal('AS')@r)
"

end
