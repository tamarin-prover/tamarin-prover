/*
  Example for the Tamarin Prover
  ==============================

  Authors:       Jannik Dreier
  Date:             March 2020
  Time:

  Description from SPORE:
  (http://www.lsv.fr/Software/spore/nssk.html)

  Needham Schroeder Symmetric Key

  A, B, S :           principal
  Na, Nb :             nonce
  Kas, Kbs, Kab :     key
  dec :               nonce -> nonce

  1.    A  ->  S  :    A, B, Na
  2.    S  ->  A  :    {Na, B, Kab, {Kab, A}Kbs}Kas
  3.    A  ->  B  :    {Kab,A}Kbs
  4.    B  ->  A  :    {Nb}Kab
  5.    A  ->  B  :    {dec(Nb)}Kab

  This protocol establishes the fresh shared symmetric key Kab.

  Messages 1-3 perform the distribution of the fresh shared symmetric key Kab
  and messages 4-5 are for mutual authentification of A and B.

  The operator dec is decrementation.

  The protocol must guaranty the secrecy of Kab: in every session,
  the value of Kab must be known only by the participants playing the roles of A, B and S in that session.

  If the participant playing B accepts the last message 5,
  then Kab has been sent in message 3. by A (whose identity is included in the cipher of message 3).

  Authentication attack by Denning and Sacco.
  Assume that I has recorded the session i and that Kab is compromised.
  After the session ii, B is convinced that he shares the secret key Kab only with A.
  i.1.    A  ->  S    :      A, B, Na
  i.2.    S  ->  A    :      {Na, B, Kab, {Kab, A}Kbs }Kas
  i.3.    A  ->  I(B)  :      {Kab,A}Kbs
                 assume that Kab is compromised
  ii.3.    I(A)  ->  B  :    {Kab,A}Kbs
  ii.4.    B  ->  I(A)  :    {Nb}Kab
  ii.5.    I(A)  ->  B  :    {dec(Nb)}Kab

  We use tags and only one server.

*/

theory Nssk
begin

builtins: symmetric-encryption

functions: dec/1, inc/1

equations: inc(dec(x))=x

// ====================
// == General rules ===
// ====================

// A and B already share a long-term symmetric key with S

rule Init:
  [ Fr(~kxs)]
  --[ KeyGen($X) ]->
  [ !LongtermKey(~kxs,$X) ]

rule Reveal_Longterm_Key:
    [ !LongtermKey(~sk,$A)]
  --[ Reveal($A)]->
    [ Out(~sk) ]

// ====================
// == Protocol rules ==
// ====================

// 1.    A  ->  S  :    A, B, Na
rule A_to_S:
  [
    Fr(~na),
   !LongtermKey(~kas,$A)
  ]
  --[ ]->
  [
    Out(<'1', $A, $B, ~na>)
    , StateA1($A, $B, ~kas, ~na)
  ]

// 2.    S  ->  A  :    {Na, B, Kab, {Kab, A}Kbs}Kas
rule S_to_A:
  let msg = senc(<'2', na, y, ~kab, senc(<'3',~kab,x>,~kbs)>,~kas) in
  [
      In(<'1', x, y, na>)
    , !LongtermKey(~kas,x)
    , !LongtermKey(~kbs,y)
    , Fr(~kab)
  ]
  --[
        Secret(x, y, ~kab)
    ]->
  [
      Out(msg)
    , !ShorttermKey(~kab,x,y)
  ]

// 3.    A  ->  B  :    {Kab,A}Kbs
rule A_to_B_1:
  let msg = senc(<'2',~na, $B, kab, mb>,~kas) in
  [
      StateA1($A, $B, ~kas, ~na)
    , !LongtermKey(~kas,$A)
    , In(msg)
  ]
  --[
        Secret($A, $B, kab)
    ]->
  [
      Out(mb)
    , StateA2($A, $B, ~kas, ~na, kab, mb)
  ]

// 4.    B  ->  A  :    {Nb}Kab
rule B_from_A1:
  let msg1 = senc(<'3',kab,x>,~kbs)
      msg2 = senc(<'4',~nb>, kab)
  in
  [
      !LongtermKey(~kbs,$B)
    , In(msg1)
    , Fr(~nb)
  ]
  --[
        Running_B(x, $B, <'A', 'B', ~nb, kab>)
      , Secret(x, $B, kab)
    ]->
  [
      Out(msg2)
    , StateB1(x, $B, ~kbs, ~nb, kab)
  ]

// 5.    A  ->  B  :    {dec(Nb)}Kab  Send
rule A_to_B_2:
  [
      StateA2($A, $B, ~kas, ~na, kab, mb)
    , !LongtermKey(~kas,$A)
    , In(senc(<'4',nb>,kab))
  ]
  --[
        Commit_A($A, $B, <'A', 'B', nb, kab>)
      , Running_A($A, $B, <'A', 'B', dec(nb), kab>)
    ]->
  [
    Out(senc(<'5',dec(nb)>,kab))
  ]

// 5.    A  ->  B  :    {dec(Nb)}Kab  Receive
rule B_from_A2:
  [
      StateB1(x, $B, ~kbs, ~nb, kab)
    , !LongtermKey(~kbs,$B)
    , In(senc(<'5',dec(~nb)>,kab))
  ]
  --[
      Commit_B(x, $B, <'A', 'B', dec(~nb), kab>)
    ]->
  []

// ====================
// ====== Lemmas ======
// ====================

// sanity check: check if honest execution is possible
lemma executability:
 exists-trace
 " Ex A B nb kab #i #j #k.
   Commit_B(A,B,<'A', 'B', dec(nb),kab>)@#i
  & Commit_A(A,B,<'A', 'B', nb,kab>)@#j & #j<#i
  & Running_A(A,B,<'A', 'B', dec(nb),kab>)@#j
  & Running_B(A,B,<'A', 'B', nb,kab>)@#k & #k<#j
  & not(Ex #r1. Reveal(A)@#r1)
  & not(Ex #r2. Reveal(B)@#r2)
 "

// check the secrecy of a secret x protected by the long-term key of A and B
lemma Secrecy:
 "
   not(
     Ex A B m #i .
       Secret(A, B, m)@ #i
       & (Ex #r. K(m) @ #r)
       & not(Ex #r. Reveal(B) @ #r)
       & not(Ex #r. Reveal(A) @ #r)
   )
 "

// check the authenticity and freshness of the transaction from B's point of view
lemma injectiveagreement_B:
  "All A B t #i.
    Commit_B(A,B,t) @i
    ==> (Ex #j. Running_A(A,B,t) @j
        & j < i
        & not (Ex A2 B2 #i2. Commit_B(A2,B2,t) @i2
                           & not (#i2 = #i)))
              | (Ex #r. Reveal(A)@r)
              | (Ex #r. Reveal(B)@r)"

// check the authenticity of the transaction from B's point of view
lemma agreement_B:
 "All A B t #i.
   Commit_B(A,B,t) @i
   ==> (Ex #j. Running_A(A,B,t) @j  & j < i)
             | (Ex #r. Reveal(A)@r)
             | (Ex #r. Reveal(B)@r)"

// check the authenticity and freshness of the transaction from A's point of view
lemma injectiveagreement_A:
  "All A B t #i.
    Commit_A(A,B,t) @i
    ==> (Ex #j. Running_B(A,B,t) @j
        & j < i
        & not (Ex A2 B2 #i2. Commit_A(A2,B2,t) @i2
                           & not (#i2 = #i)))
              | (Ex #r. Reveal(A)@r)
              | (Ex #r. Reveal(B)@r)"

// check the authenticity of the transaction from A's point of view
lemma agreement_A:
 "All A B t #i.
   Commit_A(A,B,t) @i
   ==> (Ex #j. Running_B(A,B,t) @j  & j < i)
             | (Ex #r. Reveal(A)@r)
             | (Ex #r. Reveal(B)@r)"

end
