theory alethea_votingphase_malS_abstain
begin


/* 
============
INTRODUCTION
============
Protocol: Alethea's voting phase
Modeler: Lara Schmid
Described in:[1] Alethea: A Provably Secure Random Sample Voting Protocol, David Basin, Sasa Radomirovic, and Lara Schmid,CSF18.
Date: 30th April 2018


The file contains: 
- a short explanation of the modeled version, 
- the model in Alice & Bob notation, where we denote by ->, *->, ->*, and *->* insecure, authentic, confidential, and secure channels, respectively (see [1]),
- a list of the results (with references to the lemmas in [1]),
- the Tamarin protocol specification, the restrictions, and the lemmas.

========
Version:
========
This file models Alethea's voting phase with a malicious server where one voter votes and one voter abstains from voting.

- server S and platform P are malicious
- as S is malicious, all its secrets are sent to the adversary in beginning
- explicitly model auditors


==========================
Alice & Bob specification: 
==========================
0. S		: knows(skS,H,D,x,ind,BB)
0. H		: knows(D,S,BB,vote,y) 
0. D		: knows(S,BB,H,pkS,~x,ind)
0. BB		: knows(ySG)
0. A		: knows(S)    		//here we model that [ySG] is on BB and when the auditor reads everything on BB, it also reads [ySG] from BB. In [1], the auditor still knows [ySG] from the selection phase. This does not make a difference since things on BB do not change.

1. H *->* D	: vote
2. D *->* H	: H, <cp(<vote,h(x,ind)>,pk(S)),cp(<h(H,x),h(x)>,pk(skS))>,ind
		  / H, code, ind
3**. H -> P	: code, ind
4**. P -> S	: code, ind /
		  < cp(<vote,h(x,ind)>,pk(S)) , cp(<h(H,x),h(x)>,pk(skS))>,ind
5. S ->   BB 	: < cp(<vote,h(x,ind)>,pk(S)) , cp(<h(H,x),h(x)>,pk(skS))>'s,
			votes, pVs, pYs, yPrime, ProofV, ProofY

6. BB *->  A	: ySG, yPrime, codes, votes, pVs, pYs, proofV, proofY
7. BB *->  H	: codes

**these steps are left out for one voter who abstains from voting: this voter's vote is 'empty' and he never sends something to S over P


========================================
RESULTS: (aut) = automatically proven
this model was analyzed with the oracle 
"oracle_alethea_votingphase_abstain"
========================================

- lemma functional: 			 	verified (aut)
- INDIVIDUAL VERIFIABILITY  ([1] Lemma 7)
	- lemma indivVerif: 		 	verified (aut)
- UNIVERSAL VERIFIABILITY OF TALLY  ([1] Lemma 8)
	- lemma Universal_VerProofV_v1:      	verified (aut)
	- lemma Universal_VerProofV_v2:      	verified (aut)
	- lemma Universal_VerProofV_v3:      	verified (aut)
	- lemma Universal_VerProofV_v4:      	verified (aut)
	- lemma Universal_VerProofV_v5:      	verified (aut)
	- lemma Universal_VerProofV_v6:      	verified (aut)
	- lemma Universal_VerProofV_v7:      	verified (aut)
	- lemma Universal_VerProofV_v8:       	verified (aut)
- UNIVERSAL VERIFIABILITY OF VOTER CODES ([1] Lemma 9)
	- lemma Universal_VerProofY_v1:       	verified (aut)
	- lemma Universal_VerProofY_v2:      	verified (aut)
	- lemma Universal_VerProofY_v3:      	verified (aut)
	- lemma Universal_VerProofY_v4:      	verified (aut)
	- lemma Universal_VerProofY_v5:      	verified (aut)
	- lemma Universal_VerProofY_v6:      	verified (aut)
	- lemma Universal_VerProofY_v7:      	verified (aut)
	- lemma Universal_VerProofY_v8:      	verified (aut)




*/

/*============
SPECIFICATION:
============== */

/*=======
built-ins 
========= */
builtins: signing, asymmetric-encryption, hashing, symmetric-encryption, multiset
functions: cp/2,  PeqPVote/3, PeqPY/3, dcp/2

equations: 
dcp(cp(x,pk(sk)),sk)=x    //we abstract away the randomness r as we do not need it 

/* ==========
Channel rules
============= */

rule ChanOut_S: [Out_S($A,$B,x)]--[ChanOut_S($A,$B,x)]->[!Sec($A,$B,x)]
rule ChanIn_S: [!Sec($A,$B,x)]--[ChanIn_S($A,$B,x)]->[In_S($A,$B,x)]
/*
rule ChanOut_C:	[Out_C($A,$B,x)]--[ChanOut_C($A,$B,x)]->[!Conf($B,x)]
rule ChanIn_C:	[!Conf($B,x), In($A)]--[ChanIn_C($A,$B,x)]->[In_C($A,$B,x)]
rule ChanIn_CAdv: [In(<$A,$B,x>)]--[]->[In_C($A,$B,x)]
*/
rule ChanOut_A: [Out_A($A,x)]--[ChanOut_A($A,x)]->[!Auth($A,x), Out(<$A,x>)]
rule ChanIn_A:	[!Auth($A,x)]--[ChanIn_A($A,x)]->[In_A($A,x)]


rule publickeyinfrastructure:
  [ Fr(~skX) ]--[ LongtermKey($X,~skX) ]-> [ !Ltk($X,~skX), !Pk($X,pk(~skX)), Out(pk(~skX)) ]

/* =====
Protocol
======== */
rule Setup: 
  	[ !Ltk('S',~skS), Fr(~x1), Fr(~x2)  ] 
  	--[ 	Setup()
		, HV('1',h(<~x1,$ind1>)), HV('2',h(<~x2,$ind2>)), HY('1',h(~x1)), HY('2',h(~x2))
		, V('1','empty'), V('2',$v2)
		, X(~x1,~x2)
	]-> 
  	[ 
	  AgSt_H0('H1',< 'D1','S','BB','empty', h('H1',~x1)>)
	, AgSt_H0('H2',< 'D2','S','BB',$v2, h('H2',~x2)>)
	
	, AgSt_D0('D1',< 'S','BB','H1',pk(~skS),~x1,$ind1 >)
	, AgSt_D0('D2',< 'S','BB','H2',pk(~skS),~x2,$ind2 >)

	, AgSt_BB0('BB',< 'ySG',h('H1',~x1)+h('H2',~x2) >)
	, AgSt_Au('A',<'S'>) //auditor 
	
	, Out_A('BB',<'ySG',h('H1',~x1)+h('H2',~x2) >) //models that [ySG] is already on the BB from the selection phase.
	// knowledge of S sent to the adversary
	, Out(<< ~skS,'H1','H2','D1','D2',~x1,~x2, $ind1, $ind2,'BB' >>)

  	]

rule H_1:
	[ AgSt_H0($H,<$D,$S,$BB,vote,y >) ]
	--[	Vote($H,vote) 
	]->
	[ AgSt_H1($H,<$D,$S,$BB,vote,y>), Out_S($H,$D,vote) 
	]

rule D_1:
	[ AgSt_D0($D,<$S,$BB,$H,pkS,~x,$ind >), In_S($H,$D,vote) ]
	--[  ]->
	[ Out_S($D,$H, <$H,< cp(<vote,h(~x,$ind)>,pkS),
			     cp(<h($H,~x),h(~x)>,pkS)>,
		  	$ind
			>)
	]

rule H_2_abstain:
	[ AgSt_H1($H,<$D,$S,$BB,'empty',y>), In_S($D,$H,<$H,code,ind>) ]
	--[	MyCode($H,code)
   	]-> 
	[ AgSt_H2($H,<$D,$S,$BB,'empty',y,ind,code>) ]

rule H_2:
	[ AgSt_H1($H,<$D,$S,$BB,vote,y>), In_S($D,$H,<$H,code,ind>) ]
	--[	MyCode($H,code),
	   	Comm_H_V($H,$S,vote) ]->
	[ AgSt_H2($H,<$D,$S,$BB,vote,y,ind,code>), 
	 	Out(<code, ind>)
	]

rule BB: 
	[ AgSt_BB0($BB,ySG)
	// all that S writes on BB is coming from the insecure channel
	, In(<'votes',$vote1+$vote2>)
	, In(<'pVs',pV1+pV2>)
	, In(<'pYs',pY1+pY2 >)
	, In(<'yPrime', yPrime1+yPrime2>)
	, In(<'codes',code1+code2>)
	, In(<'proofV', proofV>)
        , In(<'proofY', proofY>)
	]
 	--[ // this is "truth" as written on BB
		BB_V('1',$BB,$vote1),
		BB_V('2',$BB,$vote2),
		BB_pV('1',$BB,pV1),
		BB_pV('2',$BB,pV2),
		BB_yPrime('1',$BB,yPrime1),
		BB_yPrime('2',$BB,yPrime2),
		BB_pY('1',$BB,pY1),
		BB_pY('2',$BB,pY2),
		BB_C('1',$BB,code1),
		BB_C('2',$BB,code2),
		BB_Cs($BB,<'codes',code1+code2>),
		BB_proofV($BB,proofV),
		BB_proofY($BB,proofY)
	]->  
	[ Out_A($BB,<'votes',$vote1+$vote2>)
	, Out_A($BB,<'pVs',pV1+pV2>)
	, Out_A($BB,<'pYs',pY1+pY2 >)
	, Out_A($BB,<'yPrime', yPrime1+yPrime2>)
	, Out_A($BB,<'codes',code1+code2>)
	, Out_A($BB,<'proofV', proofV>)
        , Out_A($BB,<'proofY', proofY>)
	]
	
rule auditor:
	[ AgSt_Au($A,<$S>)
	, In_A($BB,<'ySG',y1+y2>)
	, In_A($BB,<'yPrime',y1+y2>)    	//implicitly verify(A,[y'] subset [ySG])
	, In_A($BB,<'votes',v1+v2>)
	, In_A($BB,<'pVs',<v1,hV1>+<v2,hV2> >)	//implicitly verify(A;fst([pV])=[v])
	, In_A($BB,<'pYs',<y1,hY1>+<y2,hY2> >) 	//implicitly verify(A;fst([pY])=[y'])
	, In_A($BB,<'codes',<fstcode1,sndcode1>+<fstcode2,sndcode2> >) //implicitly take fst() / snd()
	, In_A($BB,<'proofV',proofV>) 
	, In_A($BB,<'proofY',proofY>) ]
	--[	Learn_A_Vs($S,$A,<'votes',v1+v2>)
		, Learn_A_YSGs($S,$A,<'ySG',y1+y2>)
		, Learn_A_Cs($S,$A,<'codes',<fstcode1,sndcode1>+<fstcode2,sndcode2> >)
		, VerProofV($A,$BB,proofV, <fstcode1,fstcode2>,<<v1,hV1>,<v2,hV2>> ) 
	    	, VerProofY($A,$BB,proofY, <sndcode1,sndcode2>,<<y1,hY1>,<y2,hY2>> )
	]->
	[]

rule H_3: 
	[ AgSt_H2($H,<$D,$S,$BB,vote,y,ind,code >)
	, In_A($BB,<'codes',mycodeBB+codeBBOther >) 
	]
	--[	 Learn_H_C($H,$S,mycodeBB)
	]->
	[ 	]


/* ====
RESTRICTIONS
====== */
// there is only one setup
restriction OneSetup: 
	"All #i #j. Setup() @i & Setup() @j ==> #i = #j "

// a voter who wants to abstain (the voter's vote is 'empty'), never sends his vote
restriction NotSendEmpty: 
	"All #i H S. Comm_H_V(H,S,'empty') @i ==> F "


/* ====
LEMMAS 
======= */
/* =================
functionality lemmas
==================== */

lemma functional: exists-trace
	" Ex #i1 #i2 #j1 #j2 H1 H2 S vote2 fstcode1 sndcode1 fstcode2 sndcode2 #s   
				hV1 hV2 hY1 hY2 
				x1 x2 #adv1 #adv2
				  #k  BB skS y1 y2
				A  #a #l #m  
		.
		not (H1 = H2) & not ('empty' =vote2)
		& Vote(H1,'empty') @i1
		& Vote(H2,vote2) @i2
		& MyCode(H1,<fstcode1,sndcode1>)@j1
		& MyCode(H2,<fstcode2,sndcode2>)@j2
		
		& HV('1',hV1) @s 
		& V('1','empty') @s
		& HV('2',hV2) @s 
		& V('2',vote2) @s
		& HY('1',hY1) @s 
		& HY('2',hY2) @s
		& X(x1,x2) @s & K(x1) @adv1 & K(x2) @adv2
				

		& BB_C('1',BB,<fstcode1,sndcode1>) @k
	 	& BB_C('2',BB,<fstcode2,sndcode2>) @k
		& BB_V('1',BB,'empty') @k	
		& BB_V('2',BB,vote2) @k
		& BB_pV('1',BB,<'empty',hV1>) @k
		& BB_pV('2',BB,<vote2,hV2>) @k
		& BB_proofV(BB,PeqPVote(<fstcode1,fstcode2>,<<'empty',hV1>,<vote2,hV2>>,skS) ) @k
		& BB_pY('1',BB,<y1,hY1>) @k
		& BB_pY('2',BB,<y2,hY2>) @k
		& BB_proofY(BB,PeqPY(<sndcode1,sndcode2>,<<y1,hY1>,<y2,hY2>>,skS) ) @k	
	    	
		& Learn_H_C(H1,S,<fstcode1,sndcode1>) @l
		& Learn_H_C(H2,S,<fstcode2,sndcode2>) @m
		& VerProofV(A,BB,PeqPVote(<fstcode1,fstcode2>,<<'empty',hV1>,<vote2,hV2>>,skS),
					  <fstcode1,fstcode2>,<<'empty',hV1>,<vote2,hV2>>) @a
	    	& VerProofY(A,BB,PeqPY(<sndcode1,sndcode2>,<<y1,hY1>,<y2,hY2>>,skS),
				       <sndcode1,sndcode2>,<<y1,hY1>,<y2,hY2>>) @a
		
		"

/* =====================
individual verifiability
======================== */

lemma indivVerif: //If voter finds his code on BB => his code (representing his vote) is on BB, that is vote is registered
	"All H S vote fstcode sndcode #i2 #i #j .
		Vote(H,vote) @i2 					// this is voter's vote
		//verify(H,<fstcode,sndcode> in [code], true)
		& MyCode(H,<fstcode,sndcode>) @i  			// this is voter's code, as learned by the device
		& Learn_H_C(H,S,<fstcode,sndcode>) @j			// voter reads his code in list [code] from BB
	==> Ex BB #k hV pkS codeOther . 
		BB_Cs(BB,<'codes', <fstcode,sndcode>+codeOther>) @k 	// code contained in list on BB
		& fstcode = cp(<vote,hV>,pkS) "      			// code correctly represents the vote of H


/* =============================
universal verifiability of tally
================================ */
//modeling VerProofV=true by explicitly testing each different permutation that yields true.
//justification: A-> C and B-> C (as done now, and show each of the conjunctions separately)
//equal to A or B -> C (which we want: either evaluation of VerProofV=true => must be decrypted correctly)


lemma Universal_VerProofV_v1:  
"All S A x1 x2 skS #a #i BB v1 v2 codes
.       Learn_A_Vs(S,A,<'votes',v1+v2>)@a						   //list [v] in A 
	& Learn_A_Cs(S,A,<'codes',codes>) @a  						   //list [code] in A 
	& VerProofV(A,BB,PeqPVote(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x1,x2>,skS) 		   //verif. of proof is true
	 		         ,<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x1,x2>) @i 
 	==> (Ex #b hV1 hV2 sndcode1 sndcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   //same [code] on BB
		& BB_V(n1,BB,v1)@b
		& BB_V(n2,BB,v2)@b						 	   //same [v] on BB
		& codes = <cp(<v1,hV1>,pk(skS)),sndcode1>+<cp(<v2,hV2>,pk(skS)),sndcode2>  //codes correspond to encryptions of votes
		)"		   	     			   


lemma Universal_VerProofV_v2:  
"All S A x1 x2 skS #a #i BB v1 v2 codes
.       Learn_A_Vs(S,A,<'votes',v1+v2>)@a						   
	& Learn_A_Cs(S,A,<'codes',codes>) @a  						   
	& VerProofV(A,BB,PeqPVote(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x1,x2>,skS)
	 		       ,<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x2,x1>) @i
	==> (Ex #b hV1 hV2 sndcode1 sndcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   
		& BB_V(n1,BB,v1)@b
		& BB_V(n2,BB,v2)@b						 	   
		& codes = <cp(<v1,hV1>,pk(skS)),sndcode1>+<cp(<v2,hV2>,pk(skS)),sndcode2>  
		)"	   	     			   

lemma Universal_VerProofV_v3:  
"All S A x1 x2 skS #a #i BB v1 v2 codes
.       Learn_A_Vs(S,A,<'votes',v1+v2>)@a						   
	& Learn_A_Cs(S,A,<'codes',codes>) @a  						   
	& VerProofV(A,BB,PeqPVote(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x1,x2>,skS)
	 		       ,<cp(x2,pk(skS)),cp(x1,pk(skS))>,<x1,x2>) @i
 	==> (Ex #b hV1 hV2 sndcode1 sndcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   
		& BB_V(n1,BB,v1)@b
		& BB_V(n2,BB,v2)@b						 	   
		& codes = <cp(<v1,hV1>,pk(skS)),sndcode1>+<cp(<v2,hV2>,pk(skS)),sndcode2>  
		)"		   	     			    

lemma Universal_VerProofV_v4:  
"All S A x1 x2 skS #a #i BB v1 v2 codes
.       Learn_A_Vs(S,A,<'votes',v1+v2>)@a						   
	& Learn_A_Cs(S,A,<'codes',codes>) @a  						   
	& VerProofV(A,BB,PeqPVote(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x1,x2>,skS) 
	 		       ,<cp(x2,pk(skS)),cp(x1,pk(skS))>,<x2,x1>) @i
 	==> (Ex #b hV1 hV2 sndcode1 sndcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   
		& BB_V(n1,BB,v1)@b
		& BB_V(n2,BB,v2)@b						 	   
		& codes = <cp(<v1,hV1>,pk(skS)),sndcode1>+<cp(<v2,hV2>,pk(skS)),sndcode2>  
		)"
		   	     			    
lemma Universal_VerProofV_v5:  
"All S A x1 x2 skS #a #i BB v1 v2 codes
.       Learn_A_Vs(S,A,<'votes',v1+v2>)@a						   
	& Learn_A_Cs(S,A,<'codes',codes>) @a  						   
	& VerProofV(A,BB,PeqPVote(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x2,x1>,skS)
	 		       ,<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x1,x2>) @i
 	==> (Ex #b hV1 hV2 sndcode1 sndcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   
		& BB_V(n1,BB,v1)@b
		& BB_V(n2,BB,v2)@b						 	   
		& codes = <cp(<v1,hV1>,pk(skS)),sndcode1>+<cp(<v2,hV2>,pk(skS)),sndcode2>  
		)"		   	     			   

lemma Universal_VerProofV_v6:  
"All S A x1 x2 skS #a #i BB v1 v2 codes
.       Learn_A_Vs(S,A,<'votes',v1+v2>)@a						   
	& Learn_A_Cs(S,A,<'codes',codes>) @a  						   
	& VerProofV(A,BB,PeqPVote(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x2,x1>,skS)
	 		       ,<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x2,x1>) @i
 	==> (Ex #b hV1 hV2 sndcode1 sndcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   
		& BB_V(n1,BB,v1)@b
		& BB_V(n2,BB,v2)@b						 	   
		& codes = <cp(<v1,hV1>,pk(skS)),sndcode1>+<cp(<v2,hV2>,pk(skS)),sndcode2>  
		)"		   	     			   

lemma Universal_VerProofV_v7:  
"All S A x1 x2 skS #a #i BB v1 v2 codes
.       Learn_A_Vs(S,A,<'votes',v1+v2>)@a						   
	& Learn_A_Cs(S,A,<'codes',codes>) @a  						   
	& VerProofV(A,BB,PeqPVote(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x2,x1>,skS)
	 		       ,<cp(x2,pk(skS)),cp(x1,pk(skS))>,<x1,x2>) @i
 	==> (Ex #b hV1 hV2 sndcode1 sndcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   
		& BB_V(n1,BB,v1)@b
		& BB_V(n2,BB,v2)@b						 	   
		& codes = <cp(<v1,hV1>,pk(skS)),sndcode1>+<cp(<v2,hV2>,pk(skS)),sndcode2>  
		)"		   	     			    

lemma Universal_VerProofV_v8:  
"All S A x1 x2 skS #a #i BB v1 v2 codes
.       Learn_A_Vs(S,A,<'votes',v1+v2>)@a						   
	& Learn_A_Cs(S,A,<'codes',codes>) @a  						   
	& VerProofV(A,BB,PeqPVote(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x2,x1>,skS)
	 		       ,<cp(x2,pk(skS)),cp(x1,pk(skS))>,<x2,x1>) @i
 	==> (Ex #b hV1 hV2 sndcode1 sndcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   
		& BB_V(n1,BB,v1)@b
		& BB_V(n2,BB,v2)@b						 	   
		& codes = <cp(<v1,hV1>,pk(skS)),sndcode1>+<cp(<v2,hV2>,pk(skS)),sndcode2>  
		)"		   	     			   

/* ===================================
unviersal verifiability of voter codes
====================================== */
lemma Universal_VerProofY_v1: 
"All A x1 x2 skS #i BB codes #a S y1 y2
.	Learn_A_YSGs(S,A,<'ySG',y1+y2>) @a						   //list [y'] in A
	& Learn_A_Cs(S,A,<'codes',codes>) @a  						   //list [code] in A			
	& VerProofY(A,BB,PeqPY(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x1,x2>,skS)	 	   //verif. of proof is true
			      ,<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x1,x2>) @i 
 	==> (Ex #b hY1 hY2 fstcode1 fstcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   //same [code] on BB	   
		& BB_yPrime(n1,BB,y1) @b 						   //same [y'] on BB
		& BB_yPrime(n2,BB,y2) @b					 	   
		& codes = <fstcode1,cp(<y1,hY1>,pk(skS))>+<fstcode2,cp(<y2,hY2>,pk(skS))>  //codes correspond to encryptions of voter codes
		)"

lemma Universal_VerProofY_v2:  
"All A x1 x2 skS #i BB codes #a S y1 y2
.	Learn_A_YSGs(S,A,<'ySG',y1+y2>) @a
	& Learn_A_Cs(S,A,<'codes',codes>) @a 
	& VerProofY(A,BB,PeqPY(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x1,x2>,skS)	 		 	           
			      ,<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x2,x1>) @i 
 	==> (Ex #b hY1 hY2 fstcode1 fstcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   
		& BB_yPrime(n1,BB,y1) @b
		& BB_yPrime(n2,BB,y2) @b					 	   
		& codes = <fstcode1,cp(<y1,hY1>,pk(skS))>+<fstcode2,cp(<y2,hY2>,pk(skS))>  
		)"

lemma Universal_VerProofY_v3:  
"All A x1 x2 skS #i BB codes #a S y1 y2
.	Learn_A_YSGs(S,A,<'ySG',y1+y2>) @a
	& Learn_A_Cs(S,A,<'codes',codes>) @a 
	& VerProofY(A,BB,PeqPY(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x1,x2>,skS)	 		 	           
			      ,<cp(x2,pk(skS)),cp(x1,pk(skS))>,<x1,x2>) @i 
 	==> (Ex #b hY1 hY2 fstcode1 fstcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   
		& BB_yPrime(n1,BB,y1) @b
		& BB_yPrime(n2,BB,y2) @b					 	   
		& codes = <fstcode1,cp(<y1,hY1>,pk(skS))>+<fstcode2,cp(<y2,hY2>,pk(skS))>  
		)"


lemma Universal_VerProofY_v4:  
"All A x1 x2 skS #i BB codes #a S y1 y2
.	Learn_A_YSGs(S,A,<'ySG',y1+y2>) @a
	& Learn_A_Cs(S,A,<'codes',codes>) @a 
	& VerProofY(A,BB,PeqPY(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x1,x2>,skS)	 		 	           
			      ,<cp(x2,pk(skS)),cp(x1,pk(skS))>,<x2,x1>) @i 
 	==> (Ex #b hY1 hY2 fstcode1 fstcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   
		& BB_yPrime(n1,BB,y1) @b
		& BB_yPrime(n2,BB,y2) @b					 	   
		& codes = <fstcode1,cp(<y1,hY1>,pk(skS))>+<fstcode2,cp(<y2,hY2>,pk(skS))>  
		)"


lemma Universal_VerProofY_v5:  
"All A x1 x2 skS #i BB codes #a S y1 y2
.	Learn_A_YSGs(S,A,<'ySG',y1+y2>) @a
	& Learn_A_Cs(S,A,<'codes',codes>) @a 
	& VerProofY(A,BB,PeqPY(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x2,x1>,skS)	 		 	           
			      ,<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x1,x2>) @i 
 	==> (Ex #b hY1 hY2 fstcode1 fstcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   
		& BB_yPrime(n1,BB,y1) @b
		& BB_yPrime(n2,BB,y2) @b					 	   
		& codes = <fstcode1,cp(<y1,hY1>,pk(skS))>+<fstcode2,cp(<y2,hY2>,pk(skS))>  
		)"

lemma Universal_VerProofY_v6:  
"All A x1 x2 skS #i BB codes #a S y1 y2
.	Learn_A_YSGs(S,A,<'ySG',y1+y2>) @a
	& Learn_A_Cs(S,A,<'codes',codes>) @a 
	& VerProofY(A,BB,PeqPY(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x2,x1>,skS)	 		 	           
			      ,<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x2,x1>) @i 
 	==> (Ex #b hY1 hY2 fstcode1 fstcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   
		& BB_yPrime(n1,BB,y1) @b
		& BB_yPrime(n2,BB,y2) @b					 	   
		& codes = <fstcode1,cp(<y1,hY1>,pk(skS))>+<fstcode2,cp(<y2,hY2>,pk(skS))>  
		)"

lemma Universal_VerProofY_v7:  
"All A x1 x2 skS #i BB codes #a S y1 y2
.	Learn_A_YSGs(S,A,<'ySG',y1+y2>) @a
	& Learn_A_Cs(S,A,<'codes',codes>) @a 
	& VerProofY(A,BB,PeqPY(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x2,x1>,skS)	 		 	           
			      ,<cp(x2,pk(skS)),cp(x1,pk(skS))>,<x1,x2>) @i 
 	==> (Ex #b hY1 hY2 fstcode1 fstcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   
		& BB_yPrime(n1,BB,y1) @b
		& BB_yPrime(n2,BB,y2) @b					 	   
		& codes = <fstcode1,cp(<y1,hY1>,pk(skS))>+<fstcode2,cp(<y2,hY2>,pk(skS))>  
		)"


lemma Universal_VerProofY_v8:  
"All A x1 x2 skS #i BB codes #a S y1 y2
.	Learn_A_YSGs(S,A,<'ySG',y1+y2>) @a
	& Learn_A_Cs(S,A,<'codes',codes>) @a 
	& VerProofY(A,BB,PeqPY(<cp(x1,pk(skS)),cp(x2,pk(skS))>,<x2,x1>,skS)	 		 	           
			      ,<cp(x2,pk(skS)),cp(x1,pk(skS))>,<x2,x1>) @i 
 	==> (Ex #b hY1 hY2 fstcode1 fstcode2 n1 n2.
		BB_Cs(BB,<'codes',codes >)@b  						   
		& BB_yPrime(n1,BB,y1) @b
		& BB_yPrime(n2,BB,y2) @b					 	   
		& codes = <fstcode1,cp(<y1,hY1>,pk(skS))>+<fstcode2,cp(<y2,hY2>,pk(skS))>  
		)"





end









