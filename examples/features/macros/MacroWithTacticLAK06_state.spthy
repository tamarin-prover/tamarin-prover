theory MacroWithTacticLAK06_state
begin

// Initial : This theory models LAK06 as taken from "Attacks on RFID protocols" v1.1
// from Aug 6, 2009, by Ton van Deursen and Sasa Radomirovic
//
// This model considers two pairs of Reader/Tag that can play
// an unbounded number of sessions and fully models
// the key chaining mechanism.
// Still, it shows that noninjective agreement
// for the Reader is indeed violated (valid attack found!). The proof for
// noninjective agreement for the Tag only holds in this very restricted model.
/*
* Initial Protocol:   csf18-xor/LAK06_state.spthy
* Modeler:            Thiebaux Valentin
* Date:               July 2023
*
* Status: 	working
* Used to test macros with tactic.
*/

builtins: xor, hashing
macros: commit(x, y, z) = <'R','T',<x,y,z>>

tactic: helpingUpdateKey
presort: s
prio:
    regex ".*ReaderK\(.*"
prio:
    regex ".*TagK\(.*"


tactic: helpingOutNotKey
presort: s
prio:
    regex ".*!Tag\(.*" | regex ".*!Reader\(.*" | regex ".*ReaderState1\(.*"
deprio:
    regex ".*TagK\(.*"

tactic: helpingSecrecy
presort: s
prio:
    regex ".*~~>.*"
prio:
    regex ".*!KU\( h\(~k.*"
prio:
    regex ".*!KU\( h\(k0\).*" | regex ".*!KU\( h\(h\(k0"
prio:
    regex ".*!K.\(.*r1\.1.*" | regex ".*!K.\(.*r1.*" | regex ".*!K.\(\(.*z1\.1.*"
    regex ".*!K.\(\(.*z1.*" | regex ".*!K.\(\(.*~r0\.1.*" | regex ".*!K.\(\(.*~r0.*"
    regex ".*!K.\( \(.*~r0\.1.*" |regex ".*!K.\( \(.*~r0.*" | regex ".*!K.\( ~r.*"
    regex ".*!K.\( \(z.1" | regex ".*!K.\( \(h\(k0.*h\(.*" | regex ".*!K.\(.*x.*h.*"          
prio:
    regex ".*!KU\(.*r1\.1.*" | regex ".*!KU\(.*r1.*"
prio:
    regex ".*!Tag\(.*" | regex ".*!Reader\(.*" | regex ".*ReaderState1\(.*" | regex ".*TagState1\(.*"
prio:
    regex ".*ReaderState1\(.*" | regex ".*TagState1\(.*"
prio:
    regex ".*!K.\( \(x.*h\(k0"
prio:
    regex ".*splitEqs\(2\.*"
prio:
    regex ".*splitEqs\(3\.*"

tactic: noninjectiveagreementTAG
presort: s
prio:
    regex ".*~~>.*"
prio:
    regex ".*Running\(.*" | regex ".*splitEqs\(7.*"  
prio:
    regex ".*!KU\( ~k.*" | regex ".*!KU\( ~k.*"
prio:
    regex ".*!KU\( h\(~k.*" | regex ".*!KU\( ~k.*"
prio:
    regex ".*!KU\( h\(k0\).*" | regex ".*!KU\( h\(h\(k0"
prio:
    regex ".*!K.\(.*r1\.1.*" | regex ".*!K.\(.*r1.*" | regex ".*!K.\(\(.*z1\.1.*"
    regex ".*!K.\(\(.*z1.*" | regex ".*!K.\(\(.*~r0\.1.*" | regex ".*!K.\(\(.*~r0.*"
    regex ".*!K.\( \(.*~r0\.1.*" |regex ".*!K.\( \(.*~r0.*" | regex ".*!K.\( ~r.*"
    regex ".*!K.\( \(z.1" | regex ".*!K.\( \(h\(k0.*h\(.*" | regex ".*!K.\(.*x.*h.*"          
prio:
    regex ".*!KU\(.*r1\.1.*" | regex ".*!KU\(.*r1.*"
prio:
    regex ".*!Tag\(.*" | regex ".*!Reader\(.*" | regex ".*ReaderState1\(.*" | regex ".*TagState1\(.*"
prio:
    regex ".*ReaderState1\(.*" | regex ".*TagState1\(.*"
prio:
    regex ".*!K.\( \(x.*h\(k0"
prio:
    regex ".*splitEqs\(2\.*"
prio:
    regex ".*splitEqs\(3\.*"
prio:
    regex ".*Running\(.*" | regex ".*splitEqs\(7.*"
    regex ".*!K.\(.*x\.1.*"

tactic: noninjectiveagreementREADER
presort: s   
deprio: 
    regex ".*Update\(.*"

  
tactic: executable
presort: s
deprio:
    regex ".*Update\(.*"

/*
  T: k
  R: k, k0
  R -> T: r0
  T -> R: r1, h(r0 XOR r1 XOR k)               (accept if a matches for k or k0)
  R -> T: h(h(r0 XOR r1 XOR k) XOR k XOR r0)
  T: k'  := h(k) 
 ---- if R finds k (and not k0) that matches then -----
  R: k0' := k
     kk' := h(k)

*/

rule setup: // one pair Tag-Reader, unbounded nb. of sessions
  let k0 = h(~k)
      k = h(k0)
  in
  [ Fr(~k), Fr(~id) ]
--[ OnlyOnce('2Users')
  , Update(k, 'T')
  , Update(k0, 'R1')
  , Update(k, 'R2')
  , Setup()
  ]->
  [ ! Reader(~id)
  , ! Tag(~id)
  , ReaderK(~id, k0, k)
  , TagK(~id, k)
  ]

rule initiatereader:
  [ !Reader(~id)
  , Fr(~r0)
  ]
--[ ]->
  [ ReaderState1(~id, ~r0)
  , Out(~r0) ]

rule tag1:
  [ !Tag(~id)
  , TagK(~id, k)
  , Fr(~r1)
  , In(r0) ]
--[ Running(commit(k, r0, ~r1))
  , Key(k, 'T')
  , OutH(r0 XOR ~r1 XOR k)	
  ]->
  [ TagState1(~id, k, ~r1, r0, h(r0 XOR ~r1 XOR k))
  , Out(<~r1, h(r0 XOR ~r1 XOR k)>)
  , TagK(~id, k)
  ]

rule acceptreaderNew:		// the key k matches
 let x =  h(~r0 XOR r1 XOR k) in
 [ ReaderState1(~id, ~r0)
  , In(<r1, x>)			// x = h(~r0 XOR r1 XOR k)
  , ReaderK(~id, k0, k)
  ]
--[ Commit(commit(k, ~r0, r1))
  , Running(<'T','R',<k,~r0,r1>>)
  // , Accept(<'R','T',<r1, h(~r0 XOR r1 XOR k)>>)
  , Key(k0, 'R1'), Key(k, 'R2')
  , Update(k, 'R1')
  , Update(h(k), 'R2')
  , OutH(h(h(~r0 XOR r1 XOR k) XOR k XOR ~r0))	//for Out != h(SomeKey)
  ]->
  [ Out(h(x XOR k XOR ~r0))
  , ReaderK(~id, k, h(k))	// k0 and k are updated in such a case
  ]

rule acceptreaderOld:		// the key k0 matches
  let x = h(~r0 XOR r1 XOR k0) in
  [ ReaderState1(~id, ~r0)
  , In(<r1, x>)			// x = h(~r0 XOR r1 XOR k0)
  , ReaderK(~id, k0, k)
  ]
--[ Commit(commit(k0, ~r0, r1))
  , Running(<'T','R',<k0,~r0,r1>>)
  , Key(k0, 'R1'), Key(k, 'R2')
  , OutH(h(h(~r0 XOR r1 XOR k0) XOR k0 XOR ~r0))	//for Out != h(SomeKey)
  ]->
  [ Out(h(x XOR k0 XOR ~r0))
  , ReaderK(~id, k0, k)		// k0 and k do not change in that case (last message from last session got lost)
  ]

rule accepttag:
 let x = h(m XOR k XOR r0) in
 [ TagState1(~id, k, ~r1, r0, m)
  , In(x)   // expected: h(h(r0 XOR ~r1 XOR k) XOR k XOR r0)
  , TagK(~id, k)
  ]
--[ Commit(<'T','R',<k,r0,~r1>>)
  , FinTag()
  , Key(k, 'T')
  , Update(h(k), 'T')
  ]->
  [ TagK(~id, h(k)) ]		// Tag always updates its key k (he knows Reader did the same)

restriction onylOnce:
  "All x #i1 #i2. OnlyOnce(x)@i1 & OnlyOnce(x)@i2 ==> #i1 = #i2"

// PROVEN, quick manual proof that could be automatized very easily.
// AUTOPROOF with associated oracle (LAK_state-oracle)
// --> only prioritize ReaderK() and TagK() goals and then full auto mode,
lemma helpingUpdateKey[heuristic={helpingUpdateKey}, use_induction, reuse]: // usage of a key ---> key has been updated or created before
  "All k r #i. 
     Key(k, r)@i ==>
       ( (Ex #j. Update(k, r)@j & #j < #i))"
        // | (Ex #j. Create(k, r)@j & #j < #i))"

// PROVEN, instant autoproof
lemma helpingStackHash[use_induction, reuse]: // no Out(h(key))
  "(All k r #i. ((Key(k, r)@i ==> Ex k0. k = h(k0))))
 & (All k r #i. ((Update(k, r)@i ==> Ex k0. k = h(k0))))"

// PROVEN, semi-manual proof: quite long but a lot of sub-cases can be proved auto. using the associated oracle
lemma helpingSecrecy[heuristic={helpingSecrecy}, use_induction, reuse]:
  "All k r #i. Key(k, r)@i ==> not(Ex #j. KU(k)@j)"

// PROVEN, manual proof (straightforward), see associated file
lemma executable[heuristic={executable}]:
  exists-trace
  " (Ex #i. FinTag()@i)
  & (All x #i1 #i2. OnlyOnce(x)@i1 & OnlyOnce(x)@i2 ==> #i1 = #i2)"

// PROVEN, semi-manual proof: quite long but a lot of sub-cases can be proved auto. using the associated oracle
lemma noninjectiveagreementTAG[heuristic={noninjectiveagreementTAG}, use_induction]:
  "All t #i. 
    Commit(<'T','R',t>) @i
    ==> (Ex #j. Running(<'T','R',t>) @j)"

// FALSIFIED, attack found automatically 
lemma noninjectiveagreementREADER[heuristic={noninjectiveagreementREADER}, use_induction]:
  "All t #i. 
    Commit(<'R','T',t>) @i
    ==> (Ex #j. Running(<'R','T',t>) @j)"

end
