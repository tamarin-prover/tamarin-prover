theory EncWrapDecUnwrap begin

// Function signature and definition of the equational theory E

functions: att/1, check_rep/2, fst/1, get_rep/1, key/1, pair/2,
           rep/2 [private], sdec/2, senc/2, snd/1
equations:
    att(<k, a>) = a,
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    key(<k, a>) = k,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) Init_:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_:
   [ State_( ) ] --> [ !Semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_:
   [ !Semistate_1( ) ] --> [ State_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_1:
   [ State_1( ) ] --> [ State_11( ), State_12( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_11:
   [ State_11( ) ] --> [ State_111( ), State_112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_111:
   [ State_111( ) ] --> [ State_1111( ), State_1112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_1111:
   [ State_1111( ) ] --> [ State_11111( ), State_11112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_11111:
   [ State_11111( ) ] --> [ State_111111( ), State_111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_111111:
   [ State_111111( ) ] --> [ State_1111111( ), State_1111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_create__1111111:
   [ State_1111111( ), In( 'create' ) ] --> [ State_11111111( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_L_h_11111111:
   [ State_11111111( ), Fr( L_h ) ] --> [ State_111111111( L_h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_L_h_111111111:
   [ State_111111111( L_h ), Fr( ~lock7 ) ]
  --[ Lock( ~lock7, L_h ) ]->
   [ State_1111111111( ~lock7, L_h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_k_1111111111:
   [ State_1111111111( ~lock7, L_h ), Fr( k ) ]
  -->
   [ State_11111111111( ~lock7, L_h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_NewKeyL_h_k_11111111111:
   [ State_11111111111( ~lock7, L_h, k ) ]
  --[ Event( ), NewKey( L_h, k ) ]->
   [ State_111111111111( ~lock7, L_h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_L_h_k_init__111111111111:
   [ State_111111111111( ~lock7, L_h, k ) ]
  --[ Insert( L_h, <k, 'init'> ) ]->
   [ State_1111111111111( ~lock7, L_h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_L_h_1111111111111:
   [ State_1111111111111( ~lock7, L_h, k ) ]
  -->
   [ State_11111111111111( ~lock7, L_h, k ), Out( L_h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_L_h_11111111111111:
   [ State_11111111111111( ~lock7, L_h, k ) ]
  --[ Unlock( ~lock7, L_h ) ]->
   [ State_111111111111111( ~lock7, L_h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111111111111111:
   [ State_111111111111111( ~lock7, L_h, k ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_set_wrap_L_h__1111112:
   [ State_1111112( ), In( <'set_wrap', L_h> ) ]
  -->
   [ State_11111121( L_h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_L_h_11111121:
   [ State_11111121( L_h ), Fr( ~lock8 ) ]
  --[ Lock( ~lock8, L_h ) ]->
   [ State_111111211( ~lock8, L_h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_L_h_as_v_0_111111211:
   [ State_111111211( ~lock8, L_h ) ]
  --[ IsIn( L_h, v ) ]->
   [ State_1111112111( ~lock8, L_h, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_L_h_as_v_1_111111211:
   [ State_111111211( ~lock8, L_h ) ]
  --[ IsNotSet( L_h ) ]->
   [ State_1111112112( ~lock8, L_h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqattv_init__0_1111112111:
   [ State_1111112111( ~lock8, L_h, v ) ]
  --[ Pred_eq( att(v), 'init' ) ]->
   [ State_11111121111( ~lock8, L_h, v ) ]

  /*
  rule (modulo AC) if_eqattv_init__0_1111112111:
     [ State_1111112111( ~lock8, L_h, v ) ]
    --[ Pred_eq( z, 'init' ) ]->
     [ State_11111121111( ~lock8, L_h, v ) ]
    variants (modulo AC)
    1. v     = v.6
       z     = att(v.6)
    
    2. v     = <x.8, z.7>
       z     = z.7
  */

rule (modulo E) if_eqattv_init__1_1111112111:
   [ State_1111112111( ~lock8, L_h, v ) ]
  --[ Pred_not_eq( att(v), 'init' ) ]->
   [ State_11111121112( ~lock8, L_h, v ) ]

  /*
  rule (modulo AC) if_eqattv_init__1_1111112111:
     [ State_1111112111( ~lock8, L_h, v ) ]
    --[ Pred_not_eq( z, 'init' ) ]->
     [ State_11111121112( ~lock8, L_h, v ) ]
    variants (modulo AC)
    1. v     = v.6
       z     = att(v.6)
    
    2. v     = <x.8, z.7>
       z     = z.7
  */

rule (modulo E) event_WrapKeyL_h_keyv_11111121111:
   [ State_11111121111( ~lock8, L_h, v ) ]
  --[ Event( ), WrapKey( L_h, key(v) ) ]->
   [ State_111111211111( ~lock8, L_h, v ) ]

  /*
  rule (modulo AC) event_WrapKeyL_h_keyv_11111121111:
     [ State_11111121111( ~lock8, L_h, v ) ]
    --[ Event( ), WrapKey( L_h, z ) ]->
     [ State_111111211111( ~lock8, L_h, v ) ]
    variants (modulo AC)
    1. v     = v.5
       z     = key(v.5)
    
    2. v     = <x.5, x.6>
       z     = x.5
  */

rule (modulo E) insert_L_h_keyv_wrap__111111211111:
   [ State_111111211111( ~lock8, L_h, v ) ]
  --[ Insert( L_h, <key(v), 'wrap'> ) ]->
   [ State_1111112111111( ~lock8, L_h, v ) ]

  /*
  rule (modulo AC) insert_L_h_keyv_wrap__111111211111:
     [ State_111111211111( ~lock8, L_h, v ) ]
    --[ Insert( L_h, <z, 'wrap'> ) ]->
     [ State_1111112111111( ~lock8, L_h, v ) ]
    variants (modulo AC)
    1. v     = v.6
       z     = key(v.6)
    
    2. v     = <z.7, x.9>
       z     = z.7
  */

rule (modulo E) event_WrapHandleL_h_1111112111111:
   [ State_1111112111111( ~lock8, L_h, v ) ]
  --[ Event( ), WrapHandle( L_h ) ]->
   [ State_11111121111111( ~lock8, L_h, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_L_h_11111121111111:
   [ State_11111121111111( ~lock8, L_h, v ) ]
  --[ Unlock( ~lock8, L_h ) ]->
   [ State_111111211111111( ~lock8, L_h, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111111211111111:
   [ State_111111211111111( ~lock8, L_h, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111121112:
   [ State_11111121112( ~lock8, L_h, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111112112:
   [ State_1111112112( ~lock8, L_h ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_set_dec_L_h__111112:
   [ State_111112( ), In( <'set_dec', L_h> ) ]
  -->
   [ State_1111121( L_h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_L_h_1111121:
   [ State_1111121( L_h ), Fr( ~lock7 ) ]
  --[ Lock( ~lock7, L_h ) ]->
   [ State_11111211( ~lock7, L_h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_L_h_as_v_0_11111211:
   [ State_11111211( ~lock7, L_h ) ]
  --[ IsIn( L_h, v ) ]->
   [ State_111112111( ~lock7, L_h, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_L_h_as_v_1_11111211:
   [ State_11111211( ~lock7, L_h ) ]
  --[ IsNotSet( L_h ) ]->
   [ State_111112112( ~lock7, L_h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqattv_init__0_111112111:
   [ State_111112111( ~lock7, L_h, v ) ]
  --[ Pred_eq( att(v), 'init' ) ]->
   [ State_1111121111( ~lock7, L_h, v ) ]

  /*
  rule (modulo AC) if_eqattv_init__0_111112111:
     [ State_111112111( ~lock7, L_h, v ) ]
    --[ Pred_eq( z, 'init' ) ]->
     [ State_1111121111( ~lock7, L_h, v ) ]
    variants (modulo AC)
    1. v     = v.6
       z     = att(v.6)
    
    2. v     = <x.8, z.7>
       z     = z.7
  */

rule (modulo E) if_eqattv_init__1_111112111:
   [ State_111112111( ~lock7, L_h, v ) ]
  --[ Pred_not_eq( att(v), 'init' ) ]->
   [ State_1111121112( ~lock7, L_h, v ) ]

  /*
  rule (modulo AC) if_eqattv_init__1_111112111:
     [ State_111112111( ~lock7, L_h, v ) ]
    --[ Pred_not_eq( z, 'init' ) ]->
     [ State_1111121112( ~lock7, L_h, v ) ]
    variants (modulo AC)
    1. v     = v.6
       z     = att(v.6)
    
    2. v     = <x.8, z.7>
       z     = z.7
  */

rule (modulo E) event_DecKeyL_h_keyv_1111121111:
   [ State_1111121111( ~lock7, L_h, v ) ]
  --[ Event( ), DecKey( L_h, key(v) ) ]->
   [ State_11111211111( ~lock7, L_h, v ) ]

  /*
  rule (modulo AC) event_DecKeyL_h_keyv_1111121111:
     [ State_1111121111( ~lock7, L_h, v ) ]
    --[ Event( ), DecKey( L_h, z ) ]->
     [ State_11111211111( ~lock7, L_h, v ) ]
    variants (modulo AC)
    1. v     = v.5
       z     = key(v.5)
    
    2. v     = <x.5, x.6>
       z     = x.5
  */

rule (modulo E) insert_L_h_keyv_dec__11111211111:
   [ State_11111211111( ~lock7, L_h, v ) ]
  --[ Insert( L_h, <key(v), 'dec'> ) ]->
   [ State_111112111111( ~lock7, L_h, v ) ]

  /*
  rule (modulo AC) insert_L_h_keyv_dec__11111211111:
     [ State_11111211111( ~lock7, L_h, v ) ]
    --[ Insert( L_h, <z, 'dec'> ) ]->
     [ State_111112111111( ~lock7, L_h, v ) ]
    variants (modulo AC)
    1. v     = v.6
       z     = key(v.6)
    
    2. v     = <z.7, x.9>
       z     = z.7
  */

rule (modulo E) unlock_L_h_111112111111:
   [ State_111112111111( ~lock7, L_h, v ) ]
  --[ Unlock( ~lock7, L_h ) ]->
   [ State_1111121111111( ~lock7, L_h, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111121111111:
   [ State_1111121111111( ~lock7, L_h, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111121112:
   [ State_1111121112( ~lock7, L_h, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111112112:
   [ State_111112112( ~lock7, L_h ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_L_h_c__11112:
   [ State_11112( ), In( <L_h, c> ) ] --> [ State_111121( L_h, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_L_h_111121:
   [ State_111121( L_h, c ), Fr( ~lock8 ) ]
  --[ Lock( ~lock8, L_h ) ]->
   [ State_1111211( ~lock8, L_h, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_L_h_as_v_0_1111211:
   [ State_1111211( ~lock8, L_h, c ) ]
  --[ IsIn( L_h, v ) ]->
   [ State_11112111( ~lock8, L_h, c, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_L_h_as_v_1_1111211:
   [ State_1111211( ~lock8, L_h, c ) ]
  --[ IsNotSet( L_h ) ]->
   [ State_11112112( ~lock8, L_h, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqattv_dec__0_11112111:
   [ State_11112111( ~lock8, L_h, c, v ) ]
  --[ Pred_eq( att(v), 'dec' ) ]->
   [ State_111121111( ~lock8, L_h, c, v ) ]

  /*
  rule (modulo AC) if_eqattv_dec__0_11112111:
     [ State_11112111( ~lock8, L_h, c, v ) ]
    --[ Pred_eq( z, 'dec' ) ]->
     [ State_111121111( ~lock8, L_h, c, v ) ]
    variants (modulo AC)
    1. v     = v.7
       z     = att(v.7)
    
    2. v     = <x.9, z.8>
       z     = z.8
  */

rule (modulo E) if_eqattv_dec__1_11112111:
   [ State_11112111( ~lock8, L_h, c, v ) ]
  --[ Pred_not_eq( att(v), 'dec' ) ]->
   [ State_111121112( ~lock8, L_h, c, v ) ]

  /*
  rule (modulo AC) if_eqattv_dec__1_11112111:
     [ State_11112111( ~lock8, L_h, c, v ) ]
    --[ Pred_not_eq( z, 'dec' ) ]->
     [ State_111121112( ~lock8, L_h, c, v ) ]
    variants (modulo AC)
    1. v     = v.7
       z     = att(v.7)
    
    2. v     = <x.9, z.8>
       z     = z.8
  */

rule (modulo E) if_sencSuccc_keyv_0_111121111:
   [ State_111121111( ~lock8, L_h, c, v ) ]
  --[ Pred_sencSucc( c, key(v) ) ]->
   [ State_1111211111( ~lock8, L_h, c, v ) ]

  /*
  rule (modulo AC) if_sencSuccc_keyv_0_111121111:
     [ State_111121111( ~lock8, L_h, c, v ) ]
    --[ Pred_sencSucc( c, z ) ]->
     [ State_1111211111( ~lock8, L_h, c, v ) ]
    variants (modulo AC)
    1. v     = v.6
       z     = key(v.6)
    
    2. v     = <x.6, x.7>
       z     = x.6
  */

rule (modulo E) if_sencSuccc_keyv_1_111121111:
   [ State_111121111( ~lock8, L_h, c, v ) ]
  --[ Pred_not_sencSucc( c, key(v) ) ]->
   [ State_1111211112( ~lock8, L_h, c, v ) ]

  /*
  rule (modulo AC) if_sencSuccc_keyv_1_111121111:
     [ State_111121111( ~lock8, L_h, c, v ) ]
    --[ Pred_not_sencSucc( c, z ) ]->
     [ State_1111211112( ~lock8, L_h, c, v ) ]
    variants (modulo AC)
    1. v     = v.6
       z     = key(v.6)
    
    2. v     = <x.6, x.7>
       z     = x.6
  */

rule (modulo E) event_DecUsingkeyv_sdecc_keyv_1111211111:
   [ State_1111211111( ~lock8, L_h, c, v ) ]
  --[ Event( ), DecUsing( key(v), sdec(c, key(v)) ) ]->
   [ State_11112111111( ~lock8, L_h, c, v ) ]

  /*
  rule (modulo AC) event_DecUsingkeyv_sdecc_keyv_1111211111:
     [ State_1111211111( ~lock8, L_h, c, v ) ]
    --[ Event( ), DecUsing( z, z.1 ) ]->
     [ State_11112111111( ~lock8, L_h, c, v ) ]
    variants (modulo AC)
    1. c     = c.7
       v     = v.7
       z     = key(v.7)
       z.1   = sdec(c.7, key(v.7))
    
    2. c     = c.9
       v     = <x.7, x.8>
       z     = x.7
       z.1   = sdec(c.9, x.7)
    
    3. c     = senc(x.8, x.7)
       v     = <x.7, x.9>
       z     = x.7
       z.1   = x.8
    
    4. c     = senc(x.8, key(x.7))
       v     = x.7
       z     = key(x.7)
       z.1   = x.8
  */

rule (modulo E) out_sdecc_keyv_11112111111:
   [ State_11112111111( ~lock8, L_h, c, v ) ]
  -->
   [ State_111121111111( ~lock8, L_h, c, v ), Out( sdec(c, key(v)) ) ]

  /*
  rule (modulo AC) out_sdecc_keyv_11112111111:
     [ State_11112111111( ~lock8, L_h, c, v ) ]
    -->
     [ State_111121111111( ~lock8, L_h, c, v ), Out( z ) ]
    variants (modulo AC)
    1. c     = c.6
       v     = v.6
       z     = sdec(c.6, key(v.6))
    
    2. c     = c.8
       v     = <x.6, x.7>
       z     = sdec(c.8, x.6)
    
    3. c     = senc(x.7, x.6)
       v     = <x.6, x.8>
       z     = x.7
    
    4. c     = senc(x.7, key(x.6))
       v     = x.6
       z     = x.7
  */

rule (modulo E) unlock_L_h_111121111111:
   [ State_111121111111( ~lock8, L_h, c, v ) ]
  --[ Unlock( ~lock8, L_h ) ]->
   [ State_1111211111111( ~lock8, L_h, c, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111211111111:
   [ State_1111211111111( ~lock8, L_h, c, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111211112:
   [ State_1111211112( ~lock8, L_h, c, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111121112:
   [ State_111121112( ~lock8, L_h, c, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11112112:
   [ State_11112112( ~lock8, L_h, c ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_L_h_m__1112:
   [ State_1112( ), In( <L_h, m> ) ] --> [ State_11121( L_h, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_L_h_11121:
   [ State_11121( L_h, m ), Fr( ~lock7 ) ]
  --[ Lock( ~lock7, L_h ) ]->
   [ State_111211( ~lock7, L_h, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_L_h_as_v_0_111211:
   [ State_111211( ~lock7, L_h, m ) ]
  --[ IsIn( L_h, v ) ]->
   [ State_1112111( ~lock7, L_h, m, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_L_h_as_v_1_111211:
   [ State_111211( ~lock7, L_h, m ) ]
  --[ IsNotSet( L_h ) ]->
   [ State_1112112( ~lock7, L_h, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqattv_dec__0_1112111:
   [ State_1112111( ~lock7, L_h, m, v ) ]
  --[ Pred_eq( att(v), 'dec' ) ]->
   [ State_11121111( ~lock7, L_h, m, v ) ]

  /*
  rule (modulo AC) if_eqattv_dec__0_1112111:
     [ State_1112111( ~lock7, L_h, m, v ) ]
    --[ Pred_eq( z, 'dec' ) ]->
     [ State_11121111( ~lock7, L_h, m, v ) ]
    variants (modulo AC)
    1. v     = v.7
       z     = att(v.7)
    
    2. v     = <x.9, z.8>
       z     = z.8
  */

rule (modulo E) if_eqattv_dec__1_1112111:
   [ State_1112111( ~lock7, L_h, m, v ) ]
  --[ Pred_not_eq( att(v), 'dec' ) ]->
   [ State_11121112( ~lock7, L_h, m, v ) ]

  /*
  rule (modulo AC) if_eqattv_dec__1_1112111:
     [ State_1112111( ~lock7, L_h, m, v ) ]
    --[ Pred_not_eq( z, 'dec' ) ]->
     [ State_11121112( ~lock7, L_h, m, v ) ]
    variants (modulo AC)
    1. v     = v.7
       z     = att(v.7)
    
    2. v     = <x.9, z.8>
       z     = z.8
  */

rule (modulo E) event_EncUsingkeyv_m_11121111:
   [ State_11121111( ~lock7, L_h, m, v ) ]
  --[ Event( ), EncUsing( key(v), m ) ]->
   [ State_111211111( ~lock7, L_h, m, v ) ]

  /*
  rule (modulo AC) event_EncUsingkeyv_m_11121111:
     [ State_11121111( ~lock7, L_h, m, v ) ]
    --[ Event( ), EncUsing( z, m ) ]->
     [ State_111211111( ~lock7, L_h, m, v ) ]
    variants (modulo AC)
    1. v     = v.6
       z     = key(v.6)
    
    2. v     = <x.6, x.7>
       z     = x.6
  */

rule (modulo E) out_sencm_keyv_111211111:
   [ State_111211111( ~lock7, L_h, m, v ) ]
  -->
   [ State_1112111111( ~lock7, L_h, m, v ), Out( senc(m, key(v)) ) ]

  /*
  rule (modulo AC) out_sencm_keyv_111211111:
     [ State_111211111( ~lock7, L_h, m, v ) ]
    -->
     [ State_1112111111( ~lock7, L_h, m, v ), Out( senc(m, z) ) ]
    variants (modulo AC)
    1. v     = v.6
       z     = key(v.6)
    
    2. v     = <x.6, x.7>
       z     = x.6
  */

rule (modulo E) unlock_L_h_1112111111:
   [ State_1112111111( ~lock7, L_h, m, v ) ]
  --[ Unlock( ~lock7, L_h ) ]->
   [ State_11121111111( ~lock7, L_h, m, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11121111111:
   [ State_11121111111( ~lock7, L_h, m, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11121112:
   [ State_11121112( ~lock7, L_h, m, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1112112:
   [ State_1112112( ~lock7, L_h, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_L_h1_L_h2__112:
   [ State_112( ), In( <L_h1, L_h2> ) ]
  -->
   [ State_1121( L_h1, L_h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_L_h1_1121:
   [ State_1121( L_h1, L_h2 ), Fr( ~lock9 ) ]
  --[ Lock( ~lock9, L_h1 ) ]->
   [ State_11211( ~lock9, L_h1, L_h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_L_h1_as_v1_0_11211:
   [ State_11211( ~lock9, L_h1, L_h2 ) ]
  --[ IsIn( L_h1, v1 ) ]->
   [ State_112111( ~lock9, L_h1, L_h2, v1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_L_h1_as_v1_1_11211:
   [ State_11211( ~lock9, L_h1, L_h2 ) ]
  --[ IsNotSet( L_h1 ) ]->
   [ State_112112( ~lock9, L_h1, L_h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqattv1_wrap__0_112111:
   [ State_112111( ~lock9, L_h1, L_h2, v1 ) ]
  --[ Pred_eq( att(v1), 'wrap' ) ]->
   [ State_1121111( ~lock9, L_h1, L_h2, v1 ) ]

  /*
  rule (modulo AC) if_eqattv1_wrap__0_112111:
     [ State_112111( ~lock9, L_h1, L_h2, v1 ) ]
    --[ Pred_eq( z, 'wrap' ) ]->
     [ State_1121111( ~lock9, L_h1, L_h2, v1 ) ]
    variants (modulo AC)
    1. v1    = v1.7
       z     = att(v1.7)
    
    2. v1    = <x.9, z.8>
       z     = z.8
  */

rule (modulo E) if_eqattv1_wrap__1_112111:
   [ State_112111( ~lock9, L_h1, L_h2, v1 ) ]
  --[ Pred_not_eq( att(v1), 'wrap' ) ]->
   [ State_1121112( ~lock9, L_h1, L_h2, v1 ) ]

  /*
  rule (modulo AC) if_eqattv1_wrap__1_112111:
     [ State_112111( ~lock9, L_h1, L_h2, v1 ) ]
    --[ Pred_not_eq( z, 'wrap' ) ]->
     [ State_1121112( ~lock9, L_h1, L_h2, v1 ) ]
    variants (modulo AC)
    1. v1    = v1.7
       z     = att(v1.7)
    
    2. v1    = <x.9, z.8>
       z     = z.8
  */

rule (modulo E) lookup_L_h2_as_v2_0_1121111:
   [ State_1121111( ~lock9, L_h1, L_h2, v1 ) ]
  --[ IsIn( L_h2, v2 ) ]->
   [ State_11211111( ~lock9, L_h1, L_h2, v1, v2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_L_h2_as_v2_1_1121111:
   [ State_1121111( ~lock9, L_h1, L_h2, v1 ) ]
  --[ IsNotSet( L_h2 ) ]->
   [ State_11211112( ~lock9, L_h1, L_h2, v1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqattv2_wrap__0_11211111:
   [ State_11211111( ~lock9, L_h1, L_h2, v1, v2 ) ]
  --[ Pred_eq( att(v2), 'wrap' ) ]->
   [ State_112111111( ~lock9, L_h1, L_h2, v1, v2 ) ]

  /*
  rule (modulo AC) if_eqattv2_wrap__0_11211111:
     [ State_11211111( ~lock9, L_h1, L_h2, v1, v2 ) ]
    --[ Pred_eq( z, 'wrap' ) ]->
     [ State_112111111( ~lock9, L_h1, L_h2, v1, v2 ) ]
    variants (modulo AC)
    1. v2    = v2.8
       z     = att(v2.8)
    
    2. v2    = <x.10, z.9>
       z     = z.9
  */

rule (modulo E) if_eqattv2_wrap__1_11211111:
   [ State_11211111( ~lock9, L_h1, L_h2, v1, v2 ) ]
  --[ Pred_not_eq( att(v2), 'wrap' ) ]->
   [ State_112111112( ~lock9, L_h1, L_h2, v1, v2 ) ]

  /*
  rule (modulo AC) if_eqattv2_wrap__1_11211111:
     [ State_11211111( ~lock9, L_h1, L_h2, v1, v2 ) ]
    --[ Pred_not_eq( z, 'wrap' ) ]->
     [ State_112111112( ~lock9, L_h1, L_h2, v1, v2 ) ]
    variants (modulo AC)
    1. v2    = v2.8
       z     = att(v2.8)
    
    2. v2    = <x.10, z.9>
       z     = z.9
  */

rule (modulo E) event_Wrapkeyv1_keyv2_112111111:
   [ State_112111111( ~lock9, L_h1, L_h2, v1, v2 ) ]
  --[ Event( ), Wrap( key(v1), key(v2) ) ]->
   [ State_1121111111( ~lock9, L_h1, L_h2, v1, v2 ) ]

  /*
  rule (modulo AC) event_Wrapkeyv1_keyv2_112111111:
     [ State_112111111( ~lock9, L_h1, L_h2, v1, v2 ) ]
    --[ Event( ), Wrap( z, z.1 ) ]->
     [ State_1121111111( ~lock9, L_h1, L_h2, v1, v2 ) ]
    variants (modulo AC)
    1. v1    = v1.8
       v2    = v2.8
       z     = key(v1.8)
       z.1   = key(v2.8)
    
    2. v1    = v1.10
       v2    = <x.8, x.9>
       z     = key(v1.10)
       z.1   = x.8
    
    3. v1    = <x.8, x.9>
       v2    = v2.10
       z     = x.8
       z.1   = key(v2.10)
    
    4. v1    = <x.8, x.10>
       v2    = <x.9, x.11>
       z     = x.8
       z.1   = x.9
  */

rule (modulo E) out_senckeyv2_keyv1_1121111111:
   [ State_1121111111( ~lock9, L_h1, L_h2, v1, v2 ) ]
  -->
   [
   State_11211111111( ~lock9, L_h1, L_h2, v1, v2 ),
   Out( senc(key(v2), key(v1)) )
   ]

  /*
  rule (modulo AC) out_senckeyv2_keyv1_1121111111:
     [ State_1121111111( ~lock9, L_h1, L_h2, v1, v2 ) ]
    -->
     [
     State_11211111111( ~lock9, L_h1, L_h2, v1, v2 ),
     Out( senc(z, z.1) )
     ]
    variants (modulo AC)
    1. v1    = v1.8
       v2    = v2.8
       z     = key(v2.8)
       z.1   = key(v1.8)
    
    2. v1    = v1.10
       v2    = <x.8, x.9>
       z     = x.8
       z.1   = key(v1.10)
    
    3. v1    = <x.8, x.9>
       v2    = v2.10
       z     = key(v2.10)
       z.1   = x.8
    
    4. v1    = <x.8, x.10>
       v2    = <x.9, x.11>
       z     = x.9
       z.1   = x.8
  */

rule (modulo E) unlock_L_h1_11211111111:
   [ State_11211111111( ~lock9, L_h1, L_h2, v1, v2 ) ]
  --[ Unlock( ~lock9, L_h1 ) ]->
   [ State_112111111111( ~lock9, L_h1, L_h2, v1, v2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_112111111111:
   [ State_112111111111( ~lock9, L_h1, L_h2, v1, v2 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_112111112:
   [ State_112111112( ~lock9, L_h1, L_h2, v1, v2 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11211112:
   [ State_11211112( ~lock9, L_h1, L_h2, v1 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1121112:
   [ State_1121112( ~lock9, L_h1, L_h2, v1 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_112112:
   [ State_112112( ~lock9, L_h1, L_h2 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_L_h_sencm_k__12:
   [ State_12( ), In( <L_h, senc(m, k)> ) ]
  -->
   [ State_121( L_h, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_L_h_121:
   [ State_121( L_h, k, m ), Fr( ~lock10 ) ]
  --[ Lock( ~lock10, L_h ) ]->
   [ State_1211( ~lock10, L_h, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_L_h_as_v_0_1211:
   [ State_1211( ~lock10, L_h, k, m ) ]
  --[ IsIn( L_h, v ) ]->
   [ State_12111( ~lock10, L_h, k, m, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_L_h_as_v_1_1211:
   [ State_1211( ~lock10, L_h, k, m ) ]
  --[ IsNotSet( L_h ) ]->
   [ State_12112( ~lock10, L_h, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqattv_wrap__0_12111:
   [ State_12111( ~lock10, L_h, k, m, v ) ]
  --[ Pred_eq( att(v), 'wrap' ) ]->
   [ State_121111( ~lock10, L_h, k, m, v ) ]

  /*
  rule (modulo AC) if_eqattv_wrap__0_12111:
     [ State_12111( ~lock10, L_h, k, m, v ) ]
    --[ Pred_eq( z, 'wrap' ) ]->
     [ State_121111( ~lock10, L_h, k, m, v ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = att(v.8)
    
    2. v     = <x.10, z.9>
       z     = z.9
  */

rule (modulo E) if_eqattv_wrap__1_12111:
   [ State_12111( ~lock10, L_h, k, m, v ) ]
  --[ Pred_not_eq( att(v), 'wrap' ) ]->
   [ State_121112( ~lock10, L_h, k, m, v ) ]

  /*
  rule (modulo AC) if_eqattv_wrap__1_12111:
     [ State_12111( ~lock10, L_h, k, m, v ) ]
    --[ Pred_not_eq( z, 'wrap' ) ]->
     [ State_121112( ~lock10, L_h, k, m, v ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = att(v.8)
    
    2. v     = <x.10, z.9>
       z     = z.9
  */

rule (modulo E) if_eqkeyv_k_0_121111:
   [ State_121111( ~lock10, L_h, k, m, v ) ]
  --[ Pred_eq( key(v), k ) ]->
   [ State_1211111( ~lock10, L_h, k, m, v ) ]

  /*
  rule (modulo AC) if_eqkeyv_k_0_121111:
     [ State_121111( ~lock10, L_h, k, m, v ) ]
    --[ Pred_eq( z, k ) ]->
     [ State_1211111( ~lock10, L_h, k, m, v ) ]
    variants (modulo AC)
    1. v     = v.7
       z     = key(v.7)
    
    2. v     = <x.7, x.8>
       z     = x.7
  */

rule (modulo E) if_eqkeyv_k_1_121111:
   [ State_121111( ~lock10, L_h, k, m, v ) ]
  --[ Pred_not_eq( key(v), k ) ]->
   [ State_1211112( ~lock10, L_h, k, m, v ) ]

  /*
  rule (modulo AC) if_eqkeyv_k_1_121111:
     [ State_121111( ~lock10, L_h, k, m, v ) ]
    --[ Pred_not_eq( z, k ) ]->
     [ State_1211112( ~lock10, L_h, k, m, v ) ]
    variants (modulo AC)
    1. v     = v.7
       z     = key(v.7)
    
    2. v     = <x.7, x.8>
       z     = x.7
  */

rule (modulo E) new_L_h2_1211111:
   [ State_1211111( ~lock10, L_h, k, m, v ), Fr( L_h2 ) ]
  -->
   [ State_12111111( ~lock10, L_h, L_h2, k, m, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_UnwrappedL_h2_m_12111111:
   [ State_12111111( ~lock10, L_h, L_h2, k, m, v ) ]
  --[ Event( ), Unwrapped( L_h2, m ) ]->
   [ State_121111111( ~lock10, L_h, L_h2, k, m, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_L_h2_m_wrap__121111111:
   [ State_121111111( ~lock10, L_h, L_h2, k, m, v ) ]
  --[ Insert( L_h2, <m, 'wrap'> ) ]->
   [ State_1211111111( ~lock10, L_h, L_h2, k, m, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_L_h2_1211111111:
   [ State_1211111111( ~lock10, L_h, L_h2, k, m, v ) ]
  -->
   [ State_12111111111( ~lock10, L_h, L_h2, k, m, v ), Out( L_h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_L_h_12111111111:
   [ State_12111111111( ~lock10, L_h, L_h2, k, m, v ) ]
  --[ Unlock( ~lock10, L_h ) ]->
   [ State_121111111111( ~lock10, L_h, L_h2, k, m, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_121111111111:
   [ State_121111111111( ~lock10, L_h, L_h2, k, m, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1211112:
   [ State_1211112( ~lock10, L_h, k, m, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_121112:
   [ State_121112( ~lock10, L_h, k, m, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_12112:
   [ State_12112( ~lock10, L_h, k, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      (((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
       (∀ #t1. (Delete( x ) @ #t1) ⇒ ((#t1 < #t2) ∨ (#t3 < #t1)))) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒
        (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒
    ((∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1)) ∨
     (∃ #t1.
       ((Delete( x ) @ #t1) ∧ (#t1 < #t3)) ∧
       (∀ #t2 y. ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ⇒ (#t2 < #t1))))"

restriction locking:
  "∀ l x lp #t1 #t3.
    ((Lock( l, x ) @ #t1) ∧ (Lock( lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock( l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0. (Unlock( l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ lp.1 #t0.
            (Lock( lp.1, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ lp.1 #t0.
           (Unlock( lp.1, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction predicate_eq:
  "∀ #i a b. (Pred_eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_not_eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction predicate1:
  "∀ #i c k.
    (Pred_not_sencSucc( c, k ) @ #i) ⇒ (¬(∃ m. senc(m, k) = c))"
  // safety formula

restriction predicate0:
  "∀ #i c k. (Pred_sencSucc( c, k ) @ #i) ⇒ (∃ m. senc(m, k) = c)"

lemma can_create_key:
  exists-trace "∃ #t h k. NewKey( h, k ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t h k. (NewKey( h, k ) @ #t)"
*/
simplify
solve( State_11111111111( ~lock7, h, k ) ▶₀ #t )
  case new_k_1111111111
  SOLVED // trace found
qed

lemma can_set_wrap:
  exists-trace "∃ #t h. WrapHandle( h ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t h. (WrapHandle( h ) @ #t)"
*/
simplify
solve( State_1111112111111( ~lock8, h, v ) ▶₀ #t )
  case insert_L_h_keyv_wrap__111111211111
  solve( Insert( h, <z, 'init'> ) @ #t2 )
    case insert_L_h_k_init__111111111111
    solve( State_111111111111( ~lock7, h, z ) ▶₀ #t2 )
      case event_NewKeyL_h_k_11111111111
      solve( ((#vr.4 < #vr.17) ∧
              (∃ #t2.
                (Unlock( ~lock8, ~n ) @ #t2)
               ∧
                (#vr.4 < #t2) ∧
                (#t2 < #vr.17) ∧
                (∀ #t0. (Unlock( ~lock8, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                (∀ lp #t0.
                  (Lock( lp, ~n ) @ #t0)
                 ⇒
                  ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                (∀ lp #t0.
                  (Unlock( lp, ~n ) @ #t0)
                 ⇒
                  ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
             (#vr.17 < #vr.4) )
        case case_2
        solve( Unlock( ~lock7, ~n ) @ #t2.1 )
          case unlock_L_h_11111111111111
          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.1 )
            case out_L_h_1111111111111
            solve( !KU( ~n ) @ #vk.2 )
              case out_L_h_1111111111111
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma can_unwrap:
  exists-trace "∃ #t h k. Unwrapped( h, k ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t h k. (Unwrapped( h, k ) @ #t)"
*/
simplify
solve( State_12111111( ~lock10, L_h, h, k, k.1, v ) ▶₀ #t )
  case new_L_h2_1211111
  solve( Insert( L_h, <k, 'wrap'> ) @ #t2 )
    case insert_L_h2_m_wrap__121111111
    solve( State_121111111( ~lock10.1, L_h.1, L_h, k.2, k, v ) ▶₀ #t2 )
      case event_UnwrappedL_h2_m_12111111
      solve( Insert( L_h, <k.2, 'wrap'> ) @ #t2.1 )
        case insert_L_h2_m_wrap__121111111
        solve( State_121111111( ~lock10.2, L_h.1, L_h, k.3, k.2, v
               ) ▶₀ #t2.1 )
          case event_UnwrappedL_h2_m_12111111
          by sorry
        qed
      next
        case insert_L_h_keyv_wrap__111111211111
        by sorry
      qed
    qed
  next
    case insert_L_h_keyv_wrap__111111211111
    solve( State_111111211111( ~lock8, L_h, v ) ▶₀ #t2 )
      case event_WrapKeyL_h_keyv_11111121111
      solve( Insert( L_h, <k, 'init'> ) @ #t2.1 )
        case insert_L_h_k_init__111111111111
        solve( State_111111111111( ~lock7, L_h, k ) ▶₀ #t2.1 )
          case event_NewKeyL_h_k_11111111111
          solve( !KU( senc(k, ~n.2) ) @ #vk.3 )
            case csenc
            by sorry
          next
            case out_sdecc_keyv_11112111111_case_1
            by sorry
          next
            case out_sdecc_keyv_11112111111_case_2
            by sorry
          next
            case out_sdecc_keyv_11112111111_case_3
            by sorry
          next
            case out_sdecc_keyv_11112111111_case_4
            by sorry
          next
            case out_senckeyv2_keyv1_1121111111_case_1
            solve( Insert( L_h2, <k, 'wrap'> ) @ #t2.2 )
              case insert_L_h2_m_wrap__121111111
              by sorry
            next
              case insert_L_h_keyv_wrap__111111211111
              solve( Insert( L_h1, <~n.2, 'wrap'> ) @ #t2.3 )
                case insert_L_h2_m_wrap__121111111
                by sorry
              next
                case insert_L_h_keyv_wrap__111111211111
                solve( State_111111211111( ~lock8.1, L_h2, v ) ▶₀ #t2.2 )
                  case event_WrapKeyL_h_keyv_11111121111
                  solve( State_111111211111( ~lock8.2, L_h1, <~n.2, x> ) ▶₀ #t2.3 )
                    case event_WrapKeyL_h_keyv_11111121111
                    solve( Insert( L_h2, <k, 'init'> ) @ #t2.4 )
                      case insert_L_h_k_init__111111111111
                      solve( Insert( L_h1, <~n.2, 'init'> ) @ #t2.5 )
                        case insert_L_h_k_init__111111111111
                        solve( State_111111111111( ~lock7.2, L_h1, ~n.2 ) ▶₀ #t2.5 )
                          case event_NewKeyL_h_k_11111111111
                          solve( State_111111111111( ~lock7.1, L_h2, k ) ▶₀ #t2.4 )
                            case event_NewKeyL_h_k_11111111111
                            solve( ((#vr.13 < #vr.24) ∧
                                    (∃ #t2.
                                      (Unlock( ~lock8, ~n ) @ #t2)
                                     ∧
                                      (#vr.13 < #t2) ∧
                                      (#t2 < #vr.24) ∧
                                      (∀ #t0. (Unlock( ~lock8, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                      (∀ lp #t0.
                                        (Lock( lp, ~n ) @ #t0)
                                       ⇒
                                        ((#t0 < #vr.13) ∨ (#t0 = #vr.13) ∨ (#t2 < #t0))) ∧
                                      (∀ lp #t0.
                                        (Unlock( lp, ~n ) @ #t0)
                                       ⇒
                                        ((#t0 < #vr.13) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                   (#vr.24 < #vr.13) )
                              case case_1
                              solve( ((#vr.40 < #vr.60) ∧
                                      (∃ #t2.
                                        (Unlock( ~lock9, ~n ) @ #t2)
                                       ∧
                                        (#vr.40 < #t2) ∧
                                        (#t2 < #vr.60) ∧
                                        (∀ #t0. (Unlock( ~lock9, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                        (∀ lp #t0.
                                          (Lock( lp, ~n ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.40) ∨ (#t0 = #vr.40) ∨ (#t2 < #t0))) ∧
                                        (∀ lp #t0.
                                          (Unlock( lp, ~n ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.40) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                     (#vr.60 < #vr.40) )
                                case case_1
                                solve( ((#vr.40 < #vr.24) ∧
                                        (∃ #t2.
                                          (Unlock( ~lock9, ~n ) @ #t2)
                                         ∧
                                          (#vr.40 < #t2) ∧
                                          (#t2 < #vr.24) ∧
                                          (∀ #t0. (Unlock( ~lock9, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                          (∀ lp #t0.
                                            (Lock( lp, ~n ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.40) ∨ (#t0 = #vr.40) ∨ (#t2 < #t0))) ∧
                                          (∀ lp #t0.
                                            (Unlock( lp, ~n ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.40) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                       (#vr.24 < #vr.40) )
                                  case case_1
                                  solve( ((#vr.60 < #vr.24) ∧
                                          (∃ #t2.
                                            (Unlock( ~lock8.2, ~n ) @ #t2)
                                           ∧
                                            (#vr.60 < #t2) ∧
                                            (#t2 < #vr.24) ∧
                                            (∀ #t0. (Unlock( ~lock8.2, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                            (∀ lp #t0.
                                              (Lock( lp, ~n ) @ #t0)
                                             ⇒
                                              ((#t0 < #vr.60) ∨ (#t0 = #vr.60) ∨ (#t2 < #t0))) ∧
                                            (∀ lp #t0.
                                              (Unlock( lp, ~n ) @ #t0)
                                             ⇒
                                              ((#t0 < #vr.60) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                         (#vr.24 < #vr.60) )
                                    case case_1
                                    solve( ((#vr.13 < #vr.60) ∧
                                            (∃ #t2.
                                              (Unlock( ~lock8, ~n ) @ #t2)
                                             ∧
                                              (#vr.13 < #t2) ∧
                                              (#t2 < #vr.60) ∧
                                              (∀ #t0. (Unlock( ~lock8, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                              (∀ lp #t0.
                                                (Lock( lp, ~n ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.13) ∨ (#t0 = #vr.13) ∨ (#t2 < #t0))) ∧
                                              (∀ lp #t0.
                                                (Unlock( lp, ~n ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.13) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                           (#vr.60 < #vr.13)  ∥ (#vr.13 = #vr.60) )
                                      case case_1
                                      solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* cyclic */
                                      next
                                        case case_3
                                        solve( ((#vr.13 < #vr.40) ∧
                                                (∃ #t2.
                                                  (Unlock( ~lock8, ~n ) @ #t2)
                                                 ∧
                                                  (#vr.13 < #t2) ∧
                                                  (#t2 < #vr.40) ∧
                                                  (∀ #t0.
                                                    (Unlock( ~lock8, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ lp #t0.
                                                    (Lock( lp, ~n ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.13) ∨
                                                     (#t0 = #vr.13) ∨
                                                     (#t2 < #t0))) ∧
                                                  (∀ lp #t0.
                                                    (Unlock( lp, ~n ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.13) ∨
                                                     (#t2 < #t0) ∨
                                                     (#t2 = #t0)))))  ∥
                                               (#vr.40 < #vr.13) )
                                          case case_1
                                          solve( ((#vr.48 < #vr.71) ∧
                                                  (∃ #t2.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                   ∧
                                                    (#vr.48 < #t2) ∧
                                                    (#t2 < #vr.71) ∧
                                                    (∀ #t0.
                                                      (Unlock( ~lock8.1, ~n.4 ) @ #t0)
                                                     ⇒
                                                      #t0 = #t2) ∧
                                                    (∀ lp #t0.
                                                      (Lock( lp, ~n.4 ) @ #t0)
                                                     ⇒
                                                      ((#t0 < #vr.48) ∨
                                                       (#t0 = #vr.48) ∨
                                                       (#t2 < #t0))) ∧
                                                    (∀ lp #t0.
                                                      (Unlock( lp, ~n.4 ) @ #t0)
                                                     ⇒
                                                      ((#t0 < #vr.48) ∨
                                                       (#t2 < #t0) ∨
                                                       (#t2 = #t0)))))  ∥
                                                 (#vr.71 < #vr.48) )
                                            case case_1
                                            solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_11111111111111
                                              solve( State_11111111111111( ~lock7, ~n, k
                                                     ) ▶₀ #t2.5 )
                                                case out_L_h_1111111111111
                                                solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                  case unlock_L_h1_11211111111
                                                  solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                         ) ▶₀ #t2.6 )
                                                    case out_senckeyv2_keyv1_1121111111
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case unlock_L_h_11111111111111
                                                  by solve( State_11111111111111( ~lock9, ~n, k
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_11111121111111
                                                  by solve( State_11111121111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111112111111
                                                  by solve( State_111112111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111121111111
                                                  by solve( State_111121111111( ~lock9, ~n, c, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_1112111111
                                                  by solve( State_1112111111( ~lock9, ~n, m, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_12111111111
                                                  by solve( State_12111111111( ~lock9, ~n, L_h2, k,
                                                                               m, v
                                                            ) ▶₀ #t2.6 )
                                                qed
                                              qed
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock7, ~n, c, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock7, ~n, m, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.5 )
                                            qed
                                          next
                                            case case_2
                                            solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_11111111111111
                                              solve( State_11111111111111( ~lock7, ~n, k
                                                     ) ▶₀ #t2.5 )
                                                case out_L_h_1111111111111
                                                solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                  case unlock_L_h1_11211111111
                                                  solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                         ) ▶₀ #t2.6 )
                                                    case out_senckeyv2_keyv1_1121111111
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case unlock_L_h_11111111111111
                                                  by solve( State_11111111111111( ~lock9, ~n, k
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_11111121111111
                                                  by solve( State_11111121111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111112111111
                                                  by solve( State_111112111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111121111111
                                                  by solve( State_111121111111( ~lock9, ~n, c, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_1112111111
                                                  by solve( State_1112111111( ~lock9, ~n, m, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_12111111111
                                                  by solve( State_12111111111( ~lock9, ~n, L_h2, k,
                                                                               m, v
                                                            ) ▶₀ #t2.6 )
                                                qed
                                              qed
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock7, ~n, c, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock7, ~n, m, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.5 )
                                            qed
                                          qed
                                        next
                                          case case_2
                                          solve( ((#vr.48 < #vr.71) ∧
                                                  (∃ #t2.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                   ∧
                                                    (#vr.48 < #t2) ∧
                                                    (#t2 < #vr.71) ∧
                                                    (∀ #t0.
                                                      (Unlock( ~lock8.1, ~n.4 ) @ #t0)
                                                     ⇒
                                                      #t0 = #t2) ∧
                                                    (∀ lp #t0.
                                                      (Lock( lp, ~n.4 ) @ #t0)
                                                     ⇒
                                                      ((#t0 < #vr.48) ∨
                                                       (#t0 = #vr.48) ∨
                                                       (#t2 < #t0))) ∧
                                                    (∀ lp #t0.
                                                      (Unlock( lp, ~n.4 ) @ #t0)
                                                     ⇒
                                                      ((#t0 < #vr.48) ∨
                                                       (#t2 < #t0) ∨
                                                       (#t2 = #t0)))))  ∥
                                                 (#vr.71 < #vr.48) )
                                            case case_1
                                            solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_11111111111111
                                              solve( State_11111111111111( ~lock7, ~n, k
                                                     ) ▶₀ #t2.5 )
                                                case out_L_h_1111111111111
                                                solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                  case unlock_L_h1_11211111111
                                                  solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                         ) ▶₀ #t2.6 )
                                                    case out_senckeyv2_keyv1_1121111111
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case unlock_L_h_11111111111111
                                                  by solve( State_11111111111111( ~lock9, ~n, k
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_11111121111111
                                                  by solve( State_11111121111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111112111111
                                                  by solve( State_111112111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111121111111
                                                  by solve( State_111121111111( ~lock9, ~n, c, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_1112111111
                                                  by solve( State_1112111111( ~lock9, ~n, m, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_12111111111
                                                  by solve( State_12111111111( ~lock9, ~n, L_h2, k,
                                                                               m, v
                                                            ) ▶₀ #t2.6 )
                                                qed
                                              qed
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock7, ~n, c, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock7, ~n, m, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.5 )
                                            qed
                                          next
                                            case case_2
                                            solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_11111111111111
                                              solve( State_11111111111111( ~lock7, ~n, k
                                                     ) ▶₀ #t2.5 )
                                                case out_L_h_1111111111111
                                                solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                  case unlock_L_h1_11211111111
                                                  solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                         ) ▶₀ #t2.6 )
                                                    case out_senckeyv2_keyv1_1121111111
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case unlock_L_h_11111111111111
                                                  by solve( State_11111111111111( ~lock9, ~n, k
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_11111121111111
                                                  by solve( State_11111121111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111112111111
                                                  by solve( State_111112111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111121111111
                                                  by solve( State_111121111111( ~lock9, ~n, c, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_1112111111
                                                  by solve( State_1112111111( ~lock9, ~n, m, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_12111111111
                                                  by solve( State_12111111111( ~lock9, ~n, L_h2, k,
                                                                               m, v
                                                            ) ▶₀ #t2.6 )
                                                qed
                                              qed
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock7, ~n, c, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock7, ~n, m, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.5 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_2
                                      solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* cyclic */
                                      next
                                        case case_3
                                        solve( ((#vr.48 < #vr.71) ∧
                                                (∃ #t2.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                 ∧
                                                  (#vr.48 < #t2) ∧
                                                  (#t2 < #vr.71) ∧
                                                  (∀ #t0.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ lp #t0.
                                                    (Lock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t0 = #vr.48) ∨
                                                     (#t2 < #t0))) ∧
                                                  (∀ lp #t0.
                                                    (Unlock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t2 < #t0) ∨
                                                     (#t2 = #t0)))))  ∥
                                               (#vr.71 < #vr.48) )
                                          case case_1
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        next
                                          case case_2
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_3
                                      solve( ((#vr.48 < #vr.59) ∧
                                              (∃ #t2.
                                                (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                               ∧
                                                (#vr.48 < #t2) ∧
                                                (#t2 < #vr.59) ∧
                                                (∀ #t0.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                (∀ lp #t0.
                                                  (Lock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t0 = #vr.48) ∨ (#t2 < #t0))) ∧
                                                (∀ lp #t0.
                                                  (Unlock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                             (#vr.59 < #vr.48) )
                                        case case_1
                                        solve( Unlock( ~lock7, ~n ) @ #t2.5 )
                                          case unlock_L_h1_11211111111
                                          by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                    ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.4 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.5 )
                                                case out_senckeyv2_keyv1_1121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case unlock_L_h_11111111111111
                                              by solve( State_11111111111111( ~lock9, ~n, k
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock9, ~n, c, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock9, ~n, m, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.5 )
                                            qed
                                          qed
                                        next
                                          case unlock_L_h_11111121111111
                                          by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_111112111111
                                          by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_111121111111
                                          by solve( State_111121111111( ~lock7, ~n, c, v
                                                    ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_1112111111
                                          by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_12111111111
                                          by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                    ) ▶₀ #t2.4 )
                                        qed
                                      next
                                        case case_2
                                        solve( Unlock( ~lock7, ~n ) @ #t2.5 )
                                          case unlock_L_h1_11211111111
                                          by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                    ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.4 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.5 )
                                                case out_senckeyv2_keyv1_1121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case unlock_L_h_11111111111111
                                              by solve( State_11111111111111( ~lock9, ~n, k
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock9, ~n, c, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock9, ~n, m, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.5 )
                                            qed
                                          qed
                                        next
                                          case unlock_L_h_11111121111111
                                          by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_111112111111
                                          by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_111121111111
                                          by solve( State_111121111111( ~lock7, ~n, c, v
                                                    ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_1112111111
                                          by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_12111111111
                                          by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                    ) ▶₀ #t2.4 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case case_2
                                    solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* cyclic */
                                    next
                                      case case_3
                                      solve( ((#vr.13 < #vr.40) ∧
                                              (∃ #t2.
                                                (Unlock( ~lock8, ~n ) @ #t2)
                                               ∧
                                                (#vr.13 < #t2) ∧
                                                (#t2 < #vr.40) ∧
                                                (∀ #t0. (Unlock( ~lock8, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                                (∀ lp #t0.
                                                  (Lock( lp, ~n ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.13) ∨ (#t0 = #vr.13) ∨ (#t2 < #t0))) ∧
                                                (∀ lp #t0.
                                                  (Unlock( lp, ~n ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.13) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                             (#vr.40 < #vr.13) )
                                        case case_1
                                        solve( ((#vr.48 < #vr.71) ∧
                                                (∃ #t2.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                 ∧
                                                  (#vr.48 < #t2) ∧
                                                  (#t2 < #vr.71) ∧
                                                  (∀ #t0.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ lp #t0.
                                                    (Lock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t0 = #vr.48) ∨
                                                     (#t2 < #t0))) ∧
                                                  (∀ lp #t0.
                                                    (Unlock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t2 < #t0) ∨
                                                     (#t2 = #t0)))))  ∥
                                               (#vr.71 < #vr.48) )
                                          case case_1
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        next
                                          case case_2
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      next
                                        case case_2
                                        solve( ((#vr.48 < #vr.71) ∧
                                                (∃ #t2.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                 ∧
                                                  (#vr.48 < #t2) ∧
                                                  (#t2 < #vr.71) ∧
                                                  (∀ #t0.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ lp #t0.
                                                    (Lock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t0 = #vr.48) ∨
                                                     (#t2 < #t0))) ∧
                                                  (∀ lp #t0.
                                                    (Unlock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t2 < #t0) ∨
                                                     (#t2 = #t0)))))  ∥
                                               (#vr.71 < #vr.48) )
                                          case case_1
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        next
                                          case case_2
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case case_2
                                  solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    by contradiction /* cyclic */
                                  next
                                    case case_3
                                    solve( ((#vr.48 < #vr.71) ∧
                                            (∃ #t2.
                                              (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                             ∧
                                              (#vr.48 < #t2) ∧
                                              (#t2 < #vr.71) ∧
                                              (∀ #t0.
                                                (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                              (∀ lp #t0.
                                                (Lock( lp, ~n.4 ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.48) ∨ (#t0 = #vr.48) ∨ (#t2 < #t0))) ∧
                                              (∀ lp #t0.
                                                (Unlock( lp, ~n.4 ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.48) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                           (#vr.71 < #vr.48) )
                                      case case_1
                                      solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                        case unlock_L_h1_11211111111
                                        by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                  ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_11111111111111
                                        solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                          case out_L_h_1111111111111
                                          solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                            case unlock_L_h1_11211111111
                                            solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                   ) ▶₀ #t2.6 )
                                              case out_senckeyv2_keyv1_1121111111
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case unlock_L_h_11111111111111
                                            by solve( State_11111111111111( ~lock9, ~n, k
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock9, ~n, v
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock9, ~n, v ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock9, ~n, c, v
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock9, ~n, m, v
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.6 )
                                          qed
                                        qed
                                      next
                                        case unlock_L_h_11111121111111
                                        by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_111112111111
                                        by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_111121111111
                                        by solve( State_111121111111( ~lock7, ~n, c, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_1112111111
                                        by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_12111111111
                                        by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                  ) ▶₀ #t2.5 )
                                      qed
                                    next
                                      case case_2
                                      solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                        case unlock_L_h1_11211111111
                                        by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                  ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_11111111111111
                                        solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                          case out_L_h_1111111111111
                                          solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                            case unlock_L_h1_11211111111
                                            solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                   ) ▶₀ #t2.6 )
                                              case out_senckeyv2_keyv1_1121111111
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case unlock_L_h_11111111111111
                                            by solve( State_11111111111111( ~lock9, ~n, k
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock9, ~n, v
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock9, ~n, v ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock9, ~n, c, v
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock9, ~n, m, v
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.6 )
                                          qed
                                        qed
                                      next
                                        case unlock_L_h_11111121111111
                                        by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_111112111111
                                        by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_111121111111
                                        by solve( State_111121111111( ~lock7, ~n, c, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_1112111111
                                        by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_12111111111
                                        by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                  ) ▶₀ #t2.5 )
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                solve( ((#vr.40 < #vr.24) ∧
                                        (∃ #t2.
                                          (Unlock( ~lock9, ~n ) @ #t2)
                                         ∧
                                          (#vr.40 < #t2) ∧
                                          (#t2 < #vr.24) ∧
                                          (∀ #t0. (Unlock( ~lock9, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                          (∀ lp #t0.
                                            (Lock( lp, ~n ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.40) ∨ (#t0 = #vr.40) ∨ (#t2 < #t0))) ∧
                                          (∀ lp #t0.
                                            (Unlock( lp, ~n ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.40) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                       (#vr.24 < #vr.40) )
                                  case case_1
                                  solve( ((#vr.13 < #vr.60) ∧
                                          (∃ #t2.
                                            (Unlock( ~lock8, ~n ) @ #t2)
                                           ∧
                                            (#vr.13 < #t2) ∧
                                            (#t2 < #vr.60) ∧
                                            (∀ #t0. (Unlock( ~lock8, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                            (∀ lp #t0.
                                              (Lock( lp, ~n ) @ #t0)
                                             ⇒
                                              ((#t0 < #vr.13) ∨ (#t0 = #vr.13) ∨ (#t2 < #t0))) ∧
                                            (∀ lp #t0.
                                              (Unlock( lp, ~n ) @ #t0)
                                             ⇒
                                              ((#t0 < #vr.13) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                         (#vr.60 < #vr.13)  ∥ (#vr.13 = #vr.60) )
                                    case case_1
                                    solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* cyclic */
                                    next
                                      case case_3
                                      solve( ((#vr.48 < #vr.71) ∧
                                              (∃ #t2.
                                                (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                               ∧
                                                (#vr.48 < #t2) ∧
                                                (#t2 < #vr.71) ∧
                                                (∀ #t0.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                (∀ lp #t0.
                                                  (Lock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t0 = #vr.48) ∨ (#t2 < #t0))) ∧
                                                (∀ lp #t0.
                                                  (Unlock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                             (#vr.71 < #vr.48) )
                                        case case_1
                                        solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                          case unlock_L_h1_11211111111
                                          by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.6 )
                                                case out_senckeyv2_keyv1_1121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case unlock_L_h_11111111111111
                                              by solve( State_11111111111111( ~lock9, ~n, k
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock9, ~n, c, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock9, ~n, m, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.6 )
                                            qed
                                          qed
                                        next
                                          case unlock_L_h_11111121111111
                                          by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111112111111
                                          by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111121111111
                                          by solve( State_111121111111( ~lock7, ~n, c, v
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_1112111111
                                          by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_12111111111
                                          by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                    ) ▶₀ #t2.5 )
                                        qed
                                      next
                                        case case_2
                                        solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                          case unlock_L_h1_11211111111
                                          by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.6 )
                                                case out_senckeyv2_keyv1_1121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case unlock_L_h_11111111111111
                                              by solve( State_11111111111111( ~lock9, ~n, k
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock9, ~n, c, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock9, ~n, m, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.6 )
                                            qed
                                          qed
                                        next
                                          case unlock_L_h_11111121111111
                                          by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111112111111
                                          by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111121111111
                                          by solve( State_111121111111( ~lock7, ~n, c, v
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_1112111111
                                          by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_12111111111
                                          by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                    ) ▶₀ #t2.5 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case case_2
                                    solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* cyclic */
                                    next
                                      case case_3
                                      solve( ((#vr.13 < #vr.40) ∧
                                              (∃ #t2.
                                                (Unlock( ~lock8, ~n ) @ #t2)
                                               ∧
                                                (#vr.13 < #t2) ∧
                                                (#t2 < #vr.40) ∧
                                                (∀ #t0. (Unlock( ~lock8, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                                (∀ lp #t0.
                                                  (Lock( lp, ~n ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.13) ∨ (#t0 = #vr.13) ∨ (#t2 < #t0))) ∧
                                                (∀ lp #t0.
                                                  (Unlock( lp, ~n ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.13) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                             (#vr.40 < #vr.13) )
                                        case case_1
                                        solve( ((#vr.48 < #vr.71) ∧
                                                (∃ #t2.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                 ∧
                                                  (#vr.48 < #t2) ∧
                                                  (#t2 < #vr.71) ∧
                                                  (∀ #t0.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ lp #t0.
                                                    (Lock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t0 = #vr.48) ∨
                                                     (#t2 < #t0))) ∧
                                                  (∀ lp #t0.
                                                    (Unlock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t2 < #t0) ∨
                                                     (#t2 = #t0)))))  ∥
                                               (#vr.71 < #vr.48) )
                                          case case_1
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        next
                                          case case_2
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      next
                                        case case_2
                                        solve( ((#vr.48 < #vr.71) ∧
                                                (∃ #t2.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                 ∧
                                                  (#vr.48 < #t2) ∧
                                                  (#t2 < #vr.71) ∧
                                                  (∀ #t0.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ lp #t0.
                                                    (Lock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t0 = #vr.48) ∨
                                                     (#t2 < #t0))) ∧
                                                  (∀ lp #t0.
                                                    (Unlock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t2 < #t0) ∨
                                                     (#t2 = #t0)))))  ∥
                                               (#vr.71 < #vr.48) )
                                          case case_1
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        next
                                          case case_2
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case case_3
                                    solve( ((#vr.48 < #vr.59) ∧
                                            (∃ #t2.
                                              (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                             ∧
                                              (#vr.48 < #t2) ∧
                                              (#t2 < #vr.59) ∧
                                              (∀ #t0.
                                                (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                              (∀ lp #t0.
                                                (Lock( lp, ~n.4 ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.48) ∨ (#t0 = #vr.48) ∨ (#t2 < #t0))) ∧
                                              (∀ lp #t0.
                                                (Unlock( lp, ~n.4 ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.48) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                           (#vr.59 < #vr.48) )
                                      case case_1
                                      solve( Unlock( ~lock7, ~n ) @ #t2.5 )
                                        case unlock_L_h1_11211111111
                                        by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                  ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_11111111111111
                                        solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.4 )
                                          case out_L_h_1111111111111
                                          solve( Unlock( ~lock9, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                   ) ▶₀ #t2.5 )
                                              case out_senckeyv2_keyv1_1121111111
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case unlock_L_h_11111111111111
                                            by solve( State_11111111111111( ~lock9, ~n, k
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock9, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock9, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock9, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock9, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      next
                                        case unlock_L_h_11111121111111
                                        by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_111112111111
                                        by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_111121111111
                                        by solve( State_111121111111( ~lock7, ~n, c, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_1112111111
                                        by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_12111111111
                                        by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                  ) ▶₀ #t2.4 )
                                      qed
                                    next
                                      case case_2
                                      solve( Unlock( ~lock7, ~n ) @ #t2.5 )
                                        case unlock_L_h1_11211111111
                                        by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                  ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_11111111111111
                                        solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.4 )
                                          case out_L_h_1111111111111
                                          solve( Unlock( ~lock9, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                   ) ▶₀ #t2.5 )
                                              case out_senckeyv2_keyv1_1121111111
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case unlock_L_h_11111111111111
                                            by solve( State_11111111111111( ~lock9, ~n, k
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock9, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock9, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock9, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock9, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      next
                                        case unlock_L_h_11111121111111
                                        by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_111112111111
                                        by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_111121111111
                                        by solve( State_111121111111( ~lock7, ~n, c, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_1112111111
                                        by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_12111111111
                                        by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                  ) ▶₀ #t2.4 )
                                      qed
                                    qed
                                  qed
                                next
                                  case case_2
                                  solve( ((#vr.60 < #vr.24) ∧
                                          (∃ #t2.
                                            (Unlock( ~lock8.2, ~n ) @ #t2)
                                           ∧
                                            (#vr.60 < #t2) ∧
                                            (#t2 < #vr.24) ∧
                                            (∀ #t0. (Unlock( ~lock8.2, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                            (∀ lp #t0.
                                              (Lock( lp, ~n ) @ #t0)
                                             ⇒
                                              ((#t0 < #vr.60) ∨ (#t0 = #vr.60) ∨ (#t2 < #t0))) ∧
                                            (∀ lp #t0.
                                              (Unlock( lp, ~n ) @ #t0)
                                             ⇒
                                              ((#t0 < #vr.60) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                         (#vr.24 < #vr.60) )
                                    case case_1
                                    solve( ((#vr.13 < #vr.60) ∧
                                            (∃ #t2.
                                              (Unlock( ~lock8, ~n ) @ #t2)
                                             ∧
                                              (#vr.13 < #t2) ∧
                                              (#t2 < #vr.60) ∧
                                              (∀ #t0. (Unlock( ~lock8, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                              (∀ lp #t0.
                                                (Lock( lp, ~n ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.13) ∨ (#t0 = #vr.13) ∨ (#t2 < #t0))) ∧
                                              (∀ lp #t0.
                                                (Unlock( lp, ~n ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.13) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                           (#vr.60 < #vr.13)  ∥ (#vr.13 = #vr.60) )
                                      case case_1
                                      solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* cyclic */
                                      next
                                        case case_3
                                        solve( ((#vr.48 < #vr.71) ∧
                                                (∃ #t2.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                 ∧
                                                  (#vr.48 < #t2) ∧
                                                  (#t2 < #vr.71) ∧
                                                  (∀ #t0.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ lp #t0.
                                                    (Lock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t0 = #vr.48) ∨
                                                     (#t2 < #t0))) ∧
                                                  (∀ lp #t0.
                                                    (Unlock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t2 < #t0) ∨
                                                     (#t2 = #t0)))))  ∥
                                               (#vr.71 < #vr.48) )
                                          case case_1
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  solve( (#t2.11 < #t2.1)  ∥ (#t2.11 = #t2.1)  ∥
                                                         (#vr.12 < #t2.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    solve( (#t2.10 < #t2.4)  ∥ (#t2.10 = #t2.4)  ∥
                                                           (#vr.47 < #t2.10) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      solve( (#t2.3 < #t2.11)  ∥ (#t2.3 = #t2.11) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( (#t2.2 < #t2.10)  ∥
                                                               (#t2.2 = #t2.10) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          solve( Unlock( ~lock8.2, ~n ) @ #t2.8 )
                                                            case unlock_L_h1_11211111111
                                                            by solve( State_11211111111( ~lock8.2,
                                                                                         ~n, L_h2,
                                                                                         v1, v2
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_11111111111111
                                                            by solve( State_11111111111111( ~lock8.2,
                                                                                            ~n, k
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_11111121111111
                                                            solve( State_11111121111111( ~lock8.2,
                                                                                         ~n, v
                                                                   ) ▶₀ #t2.7 )
                                                              case event_WrapHandleL_h_1111112111111
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case unlock_L_h_111112111111
                                                            by solve( State_111112111111( ~lock8.2,
                                                                                          ~n, v
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_111121111111
                                                            by solve( State_111121111111( ~lock8.2,
                                                                                          ~n, c, v
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_1112111111
                                                            by solve( State_1112111111( ~lock8.2,
                                                                                        ~n, m, v
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_12111111111
                                                            by solve( State_12111111111( ~lock8.2,
                                                                                         ~n, L_h2,
                                                                                         k, m, v
                                                                      ) ▶₀ #t2.7 )
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        next
                                          case case_2
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  solve( (#t2.11 < #t2.1)  ∥ (#t2.11 = #t2.1)  ∥
                                                         (#vr.12 < #t2.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    solve( (#t2.10 < #t2.4)  ∥ (#t2.10 = #t2.4)  ∥
                                                           (#vr.47 < #t2.10) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      solve( (#t2.3 < #t2.11)  ∥ (#t2.3 = #t2.11) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( (#t2.2 < #t2.10)  ∥
                                                               (#t2.2 = #t2.10) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          solve( Unlock( ~lock8.2, ~n ) @ #t2.8 )
                                                            case unlock_L_h1_11211111111
                                                            by solve( State_11211111111( ~lock8.2,
                                                                                         ~n, L_h2,
                                                                                         v1, v2
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_11111111111111
                                                            by solve( State_11111111111111( ~lock8.2,
                                                                                            ~n, k
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_11111121111111
                                                            solve( State_11111121111111( ~lock8.2,
                                                                                         ~n, v
                                                                   ) ▶₀ #t2.7 )
                                                              case event_WrapHandleL_h_1111112111111
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case unlock_L_h_111112111111
                                                            by solve( State_111112111111( ~lock8.2,
                                                                                          ~n, v
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_111121111111
                                                            by solve( State_111121111111( ~lock8.2,
                                                                                          ~n, c, v
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_1112111111
                                                            by solve( State_1112111111( ~lock8.2,
                                                                                        ~n, m, v
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_12111111111
                                                            by solve( State_12111111111( ~lock8.2,
                                                                                         ~n, L_h2,
                                                                                         k, m, v
                                                                      ) ▶₀ #t2.7 )
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_2
                                      solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* cyclic */
                                      next
                                        case case_3
                                        solve( ((#vr.48 < #vr.71) ∧
                                                (∃ #t2.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                 ∧
                                                  (#vr.48 < #t2) ∧
                                                  (#t2 < #vr.71) ∧
                                                  (∀ #t0.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ lp #t0.
                                                    (Lock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t0 = #vr.48) ∨
                                                     (#t2 < #t0))) ∧
                                                  (∀ lp #t0.
                                                    (Unlock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t2 < #t0) ∨
                                                     (#t2 = #t0)))))  ∥
                                               (#vr.71 < #vr.48) )
                                          case case_1
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  solve( (#t2.11 < #t2.1)  ∥ (#t2.11 = #t2.1)  ∥
                                                         (#vr.12 < #t2.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    solve( (#t2.10 < #t2.4)  ∥ (#t2.10 = #t2.4)  ∥
                                                           (#vr.47 < #t2.10) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      solve( (#t2.3 < #t2.11)  ∥ (#t2.3 = #t2.11) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( (#t2.2 < #t2.10)  ∥
                                                               (#t2.2 = #t2.10) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          solve( Unlock( ~lock8.2, ~n ) @ #t2.8 )
                                                            case unlock_L_h1_11211111111
                                                            by solve( State_11211111111( ~lock8.2,
                                                                                         ~n, L_h2,
                                                                                         v1, v2
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_11111111111111
                                                            by solve( State_11111111111111( ~lock8.2,
                                                                                            ~n, k
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_11111121111111
                                                            solve( State_11111121111111( ~lock8.2,
                                                                                         ~n, v
                                                                   ) ▶₀ #t2.7 )
                                                              case event_WrapHandleL_h_1111112111111
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case unlock_L_h_111112111111
                                                            by solve( State_111112111111( ~lock8.2,
                                                                                          ~n, v
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_111121111111
                                                            by solve( State_111121111111( ~lock8.2,
                                                                                          ~n, c, v
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_1112111111
                                                            by solve( State_1112111111( ~lock8.2,
                                                                                        ~n, m, v
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_12111111111
                                                            by solve( State_12111111111( ~lock8.2,
                                                                                         ~n, L_h2,
                                                                                         k, m, v
                                                                      ) ▶₀ #t2.7 )
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        next
                                          case case_2
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  solve( (#t2.11 < #t2.1)  ∥ (#t2.11 = #t2.1)  ∥
                                                         (#vr.12 < #t2.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    solve( (#t2.10 < #t2.4)  ∥ (#t2.10 = #t2.4)  ∥
                                                           (#vr.47 < #t2.10) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      solve( (#t2.3 < #t2.11)  ∥ (#t2.3 = #t2.11) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( (#t2.2 < #t2.10)  ∥
                                                               (#t2.2 = #t2.10) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          solve( Unlock( ~lock8.2, ~n ) @ #t2.8 )
                                                            case unlock_L_h1_11211111111
                                                            by solve( State_11211111111( ~lock8.2,
                                                                                         ~n, L_h2,
                                                                                         v1, v2
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_11111111111111
                                                            by solve( State_11111111111111( ~lock8.2,
                                                                                            ~n, k
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_11111121111111
                                                            solve( State_11111121111111( ~lock8.2,
                                                                                         ~n, v
                                                                   ) ▶₀ #t2.7 )
                                                              case event_WrapHandleL_h_1111112111111
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case unlock_L_h_111112111111
                                                            by solve( State_111112111111( ~lock8.2,
                                                                                          ~n, v
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_111121111111
                                                            by solve( State_111121111111( ~lock8.2,
                                                                                          ~n, c, v
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_1112111111
                                                            by solve( State_1112111111( ~lock8.2,
                                                                                        ~n, m, v
                                                                      ) ▶₀ #t2.7 )
                                                          next
                                                            case unlock_L_h_12111111111
                                                            by solve( State_12111111111( ~lock8.2,
                                                                                         ~n, L_h2,
                                                                                         k, m, v
                                                                      ) ▶₀ #t2.7 )
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_3
                                      solve( ((#vr.48 < #vr.59) ∧
                                              (∃ #t2.
                                                (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                               ∧
                                                (#vr.48 < #t2) ∧
                                                (#t2 < #vr.59) ∧
                                                (∀ #t0.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                (∀ lp #t0.
                                                  (Lock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t0 = #vr.48) ∨ (#t2 < #t0))) ∧
                                                (∀ lp #t0.
                                                  (Unlock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                             (#vr.59 < #vr.48) )
                                        case case_1
                                        solve( Unlock( ~lock7, ~n ) @ #t2.5 )
                                          case unlock_L_h1_11211111111
                                          by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                    ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.4 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.5 )
                                                case out_senckeyv2_keyv1_1121111111
                                                solve( (#t2.9 < #t2.1)  ∥ (#t2.9 = #t2.1)  ∥
                                                       (#vr.12 < #t2.9) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_3
                                                  solve( (#t2.9 < #t2)  ∥ (#t2.9 = #t2) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.3)  ∥ (#t2.8 = #t2.3)  ∥
                                                           (#vr.47 < #t2.8) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      solve( (#t2.2 < #t2.8)  ∥ (#t2.2 = #t2.8) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( Unlock( ~lock8, ~n ) @ #t2.6 )
                                                          case unlock_L_h1_11211111111
                                                          by solve( State_11211111111( ~lock8, ~n,
                                                                                       L_h2, v1, v2
                                                                    ) ▶₀ #t2.6 )
                                                        next
                                                          case unlock_L_h_11111111111111
                                                          by solve( State_11111111111111( ~lock8,
                                                                                          ~n, k
                                                                    ) ▶₀ #t2.6 )
                                                        next
                                                          case unlock_L_h_11111121111111
                                                          solve( State_11111121111111( ~lock8, ~n, v
                                                                 ) ▶₀ #t2.6 )
                                                            case event_WrapHandleL_h_1111112111111
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case unlock_L_h_111112111111
                                                          by solve( State_111112111111( ~lock8, ~n,
                                                                                        v
                                                                    ) ▶₀ #t2.6 )
                                                        next
                                                          case unlock_L_h_111121111111
                                                          by solve( State_111121111111( ~lock8, ~n,
                                                                                        c, v
                                                                    ) ▶₀ #t2.6 )
                                                        next
                                                          case unlock_L_h_1112111111
                                                          by solve( State_1112111111( ~lock8, ~n, m,
                                                                                      v
                                                                    ) ▶₀ #t2.6 )
                                                        next
                                                          case unlock_L_h_12111111111
                                                          by solve( State_12111111111( ~lock8, ~n,
                                                                                       L_h2, k, m, v
                                                                    ) ▶₀ #t2.6 )
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case unlock_L_h_11111111111111
                                              by solve( State_11111111111111( ~lock9, ~n, k
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock9, ~n, c, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock9, ~n, m, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.5 )
                                            qed
                                          qed
                                        next
                                          case unlock_L_h_11111121111111
                                          by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_111112111111
                                          by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_111121111111
                                          by solve( State_111121111111( ~lock7, ~n, c, v
                                                    ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_1112111111
                                          by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_12111111111
                                          by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                    ) ▶₀ #t2.4 )
                                        qed
                                      next
                                        case case_2
                                        solve( Unlock( ~lock7, ~n ) @ #t2.5 )
                                          case unlock_L_h1_11211111111
                                          by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                    ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.4 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.5 )
                                                case out_senckeyv2_keyv1_1121111111
                                                solve( (#t2.9 < #t2.1)  ∥ (#t2.9 = #t2.1)  ∥
                                                       (#vr.12 < #t2.9) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_3
                                                  solve( (#t2.9 < #t2)  ∥ (#t2.9 = #t2) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.3)  ∥ (#t2.8 = #t2.3)  ∥
                                                           (#vr.47 < #t2.8) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      solve( (#t2.2 < #t2.8)  ∥ (#t2.2 = #t2.8) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( Unlock( ~lock8, ~n ) @ #t2.6 )
                                                          case unlock_L_h1_11211111111
                                                          by solve( State_11211111111( ~lock8, ~n,
                                                                                       L_h2, v1, v2
                                                                    ) ▶₀ #t2.6 )
                                                        next
                                                          case unlock_L_h_11111111111111
                                                          by solve( State_11111111111111( ~lock8,
                                                                                          ~n, k
                                                                    ) ▶₀ #t2.6 )
                                                        next
                                                          case unlock_L_h_11111121111111
                                                          solve( State_11111121111111( ~lock8, ~n, v
                                                                 ) ▶₀ #t2.6 )
                                                            case event_WrapHandleL_h_1111112111111
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case unlock_L_h_111112111111
                                                          by solve( State_111112111111( ~lock8, ~n,
                                                                                        v
                                                                    ) ▶₀ #t2.6 )
                                                        next
                                                          case unlock_L_h_111121111111
                                                          by solve( State_111121111111( ~lock8, ~n,
                                                                                        c, v
                                                                    ) ▶₀ #t2.6 )
                                                        next
                                                          case unlock_L_h_1112111111
                                                          by solve( State_1112111111( ~lock8, ~n, m,
                                                                                      v
                                                                    ) ▶₀ #t2.6 )
                                                        next
                                                          case unlock_L_h_12111111111
                                                          by solve( State_12111111111( ~lock8, ~n,
                                                                                       L_h2, k, m, v
                                                                    ) ▶₀ #t2.6 )
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case unlock_L_h_11111111111111
                                              by solve( State_11111111111111( ~lock9, ~n, k
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock9, ~n, c, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock9, ~n, m, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.5 )
                                            qed
                                          qed
                                        next
                                          case unlock_L_h_11111121111111
                                          by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_111112111111
                                          by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_111121111111
                                          by solve( State_111121111111( ~lock7, ~n, c, v
                                                    ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_1112111111
                                          by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_12111111111
                                          by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                    ) ▶₀ #t2.4 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case case_2
                                    solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* cyclic */
                                    next
                                      case case_3
                                      solve( ((#vr.48 < #vr.71) ∧
                                              (∃ #t2.
                                                (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                               ∧
                                                (#vr.48 < #t2) ∧
                                                (#t2 < #vr.71) ∧
                                                (∀ #t0.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                (∀ lp #t0.
                                                  (Lock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t0 = #vr.48) ∨ (#t2 < #t0))) ∧
                                                (∀ lp #t0.
                                                  (Unlock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                             (#vr.71 < #vr.48) )
                                        case case_1
                                        solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                          case unlock_L_h1_11211111111
                                          by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.6 )
                                                case out_senckeyv2_keyv1_1121111111
                                                solve( (#t2.11 < #t2.1)  ∥ (#t2.11 = #t2.1)  ∥
                                                       (#vr.12 < #t2.11) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_3
                                                  solve( (#t2.10 < #t2.4)  ∥ (#t2.10 = #t2.4)  ∥
                                                         (#vr.47 < #t2.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    solve( (#t2.3 < #t2.11)  ∥ (#t2.3 = #t2.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( (#t2.2 < #t2.10)  ∥ (#t2.2 = #t2.10) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( Unlock( ~lock8.2, ~n ) @ #t2.8 )
                                                          case unlock_L_h1_11211111111
                                                          by solve( State_11211111111( ~lock8.2, ~n,
                                                                                       L_h2, v1, v2
                                                                    ) ▶₀ #t2.7 )
                                                        next
                                                          case unlock_L_h_11111111111111
                                                          by solve( State_11111111111111( ~lock8.2,
                                                                                          ~n, k
                                                                    ) ▶₀ #t2.7 )
                                                        next
                                                          case unlock_L_h_11111121111111
                                                          solve( State_11111121111111( ~lock8.2, ~n,
                                                                                       v
                                                                 ) ▶₀ #t2.7 )
                                                            case event_WrapHandleL_h_1111112111111
                                                            solve( (#t2.10 < #t2.1)  ∥
                                                                   (#t2.10 = #t2.1)  ∥
                                                                   (#vr.12 < #t2.10) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case case_2
                                                              solve( Unlock( ~lock8, ~n ) @ #t2.8 )
                                                                case unlock_L_h1_11211111111
                                                                by solve( State_11211111111( ~lock8,
                                                                                             ~n,
                                                                                             L_h2,
                                                                                             v1, v2
                                                                          ) ▶₀ #t2.8 )
                                                              next
                                                                case unlock_L_h_11111111111111
                                                                by solve( State_11111111111111( ~lock8,
                                                                                                ~n,
                                                                                                k
                                                                          ) ▶₀ #t2.8 )
                                                              next
                                                                case unlock_L_h_11111121111111
                                                                solve( State_11111121111111( ~lock8,
                                                                                             ~n, v
                                                                       ) ▶₀ #t2.8 )
                                                                  case event_WrapHandleL_h_1111112111111
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              next
                                                                case unlock_L_h_111112111111
                                                                by solve( State_111112111111( ~lock8,
                                                                                              ~n, v
                                                                          ) ▶₀ #t2.8 )
                                                              next
                                                                case unlock_L_h_111121111111
                                                                by solve( State_111121111111( ~lock8,
                                                                                              ~n, c,
                                                                                              v
                                                                          ) ▶₀ #t2.8 )
                                                              next
                                                                case unlock_L_h_1112111111
                                                                by solve( State_1112111111( ~lock8,
                                                                                            ~n, m, v
                                                                          ) ▶₀ #t2.8 )
                                                              next
                                                                case unlock_L_h_12111111111
                                                                by solve( State_12111111111( ~lock8,
                                                                                             ~n,
                                                                                             L_h2,
                                                                                             k, m, v
                                                                          ) ▶₀ #t2.8 )
                                                              qed
                                                            next
                                                              case case_3
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case unlock_L_h_111112111111
                                                          by solve( State_111112111111( ~lock8.2,
                                                                                        ~n, v
                                                                    ) ▶₀ #t2.7 )
                                                        next
                                                          case unlock_L_h_111121111111
                                                          by solve( State_111121111111( ~lock8.2,
                                                                                        ~n, c, v
                                                                    ) ▶₀ #t2.7 )
                                                        next
                                                          case unlock_L_h_1112111111
                                                          by solve( State_1112111111( ~lock8.2, ~n,
                                                                                      m, v
                                                                    ) ▶₀ #t2.7 )
                                                        next
                                                          case unlock_L_h_12111111111
                                                          by solve( State_12111111111( ~lock8.2, ~n,
                                                                                       L_h2, k, m, v
                                                                    ) ▶₀ #t2.7 )
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case unlock_L_h_11111111111111
                                              by solve( State_11111111111111( ~lock9, ~n, k
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock9, ~n, c, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock9, ~n, m, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.6 )
                                            qed
                                          qed
                                        next
                                          case unlock_L_h_11111121111111
                                          by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111112111111
                                          by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111121111111
                                          by solve( State_111121111111( ~lock7, ~n, c, v
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_1112111111
                                          by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_12111111111
                                          by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                    ) ▶₀ #t2.5 )
                                        qed
                                      next
                                        case case_2
                                        solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                          case unlock_L_h1_11211111111
                                          by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.6 )
                                                case out_senckeyv2_keyv1_1121111111
                                                solve( (#t2.11 < #t2.1)  ∥ (#t2.11 = #t2.1)  ∥
                                                       (#vr.12 < #t2.11) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_3
                                                  solve( (#t2.10 < #t2.4)  ∥ (#t2.10 = #t2.4)  ∥
                                                         (#vr.47 < #t2.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    solve( (#t2.3 < #t2.11)  ∥ (#t2.3 = #t2.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( (#t2.2 < #t2.10)  ∥ (#t2.2 = #t2.10) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( Unlock( ~lock8.2, ~n ) @ #t2.8 )
                                                          case unlock_L_h1_11211111111
                                                          by solve( State_11211111111( ~lock8.2, ~n,
                                                                                       L_h2, v1, v2
                                                                    ) ▶₀ #t2.7 )
                                                        next
                                                          case unlock_L_h_11111111111111
                                                          by solve( State_11111111111111( ~lock8.2,
                                                                                          ~n, k
                                                                    ) ▶₀ #t2.7 )
                                                        next
                                                          case unlock_L_h_11111121111111
                                                          solve( State_11111121111111( ~lock8.2, ~n,
                                                                                       v
                                                                 ) ▶₀ #t2.7 )
                                                            case event_WrapHandleL_h_1111112111111
                                                            solve( (#t2.10 < #t2.1)  ∥
                                                                   (#t2.10 = #t2.1)  ∥
                                                                   (#vr.12 < #t2.10) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case case_2
                                                              solve( Unlock( ~lock8, ~n ) @ #t2.8 )
                                                                case unlock_L_h1_11211111111
                                                                by solve( State_11211111111( ~lock8,
                                                                                             ~n,
                                                                                             L_h2,
                                                                                             v1, v2
                                                                          ) ▶₀ #t2.8 )
                                                              next
                                                                case unlock_L_h_11111111111111
                                                                by solve( State_11111111111111( ~lock8,
                                                                                                ~n,
                                                                                                k
                                                                          ) ▶₀ #t2.8 )
                                                              next
                                                                case unlock_L_h_11111121111111
                                                                solve( State_11111121111111( ~lock8,
                                                                                             ~n, v
                                                                       ) ▶₀ #t2.8 )
                                                                  case event_WrapHandleL_h_1111112111111
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              next
                                                                case unlock_L_h_111112111111
                                                                by solve( State_111112111111( ~lock8,
                                                                                              ~n, v
                                                                          ) ▶₀ #t2.8 )
                                                              next
                                                                case unlock_L_h_111121111111
                                                                by solve( State_111121111111( ~lock8,
                                                                                              ~n, c,
                                                                                              v
                                                                          ) ▶₀ #t2.8 )
                                                              next
                                                                case unlock_L_h_1112111111
                                                                by solve( State_1112111111( ~lock8,
                                                                                            ~n, m, v
                                                                          ) ▶₀ #t2.8 )
                                                              next
                                                                case unlock_L_h_12111111111
                                                                by solve( State_12111111111( ~lock8,
                                                                                             ~n,
                                                                                             L_h2,
                                                                                             k, m, v
                                                                          ) ▶₀ #t2.8 )
                                                              qed
                                                            next
                                                              case case_3
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case unlock_L_h_111112111111
                                                          by solve( State_111112111111( ~lock8.2,
                                                                                        ~n, v
                                                                    ) ▶₀ #t2.7 )
                                                        next
                                                          case unlock_L_h_111121111111
                                                          by solve( State_111121111111( ~lock8.2,
                                                                                        ~n, c, v
                                                                    ) ▶₀ #t2.7 )
                                                        next
                                                          case unlock_L_h_1112111111
                                                          by solve( State_1112111111( ~lock8.2, ~n,
                                                                                      m, v
                                                                    ) ▶₀ #t2.7 )
                                                        next
                                                          case unlock_L_h_12111111111
                                                          by solve( State_12111111111( ~lock8.2, ~n,
                                                                                       L_h2, k, m, v
                                                                    ) ▶₀ #t2.7 )
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case unlock_L_h_11111111111111
                                              by solve( State_11111111111111( ~lock9, ~n, k
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock9, ~n, c, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock9, ~n, m, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.6 )
                                            qed
                                          qed
                                        next
                                          case unlock_L_h_11111121111111
                                          by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111112111111
                                          by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111121111111
                                          by solve( State_111121111111( ~lock7, ~n, c, v
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_1112111111
                                          by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_12111111111
                                          by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                    ) ▶₀ #t2.5 )
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case case_2
                              solve( ((#vr.40 < #vr.60) ∧
                                      (∃ #t2.
                                        (Unlock( ~lock9, ~n ) @ #t2)
                                       ∧
                                        (#vr.40 < #t2) ∧
                                        (#t2 < #vr.60) ∧
                                        (∀ #t0. (Unlock( ~lock9, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                        (∀ lp #t0.
                                          (Lock( lp, ~n ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.40) ∨ (#t0 = #vr.40) ∨ (#t2 < #t0))) ∧
                                        (∀ lp #t0.
                                          (Unlock( lp, ~n ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.40) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                     (#vr.60 < #vr.40) )
                                case case_1
                                solve( ((#vr.40 < #vr.24) ∧
                                        (∃ #t2.
                                          (Unlock( ~lock9, ~n ) @ #t2)
                                         ∧
                                          (#vr.40 < #t2) ∧
                                          (#t2 < #vr.24) ∧
                                          (∀ #t0. (Unlock( ~lock9, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                          (∀ lp #t0.
                                            (Lock( lp, ~n ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.40) ∨ (#t0 = #vr.40) ∨ (#t2 < #t0))) ∧
                                          (∀ lp #t0.
                                            (Unlock( lp, ~n ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.40) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                       (#vr.24 < #vr.40) )
                                  case case_1
                                  solve( ((#vr.60 < #vr.24) ∧
                                          (∃ #t2.
                                            (Unlock( ~lock8.2, ~n ) @ #t2)
                                           ∧
                                            (#vr.60 < #t2) ∧
                                            (#t2 < #vr.24) ∧
                                            (∀ #t0. (Unlock( ~lock8.2, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                            (∀ lp #t0.
                                              (Lock( lp, ~n ) @ #t0)
                                             ⇒
                                              ((#t0 < #vr.60) ∨ (#t0 = #vr.60) ∨ (#t2 < #t0))) ∧
                                            (∀ lp #t0.
                                              (Unlock( lp, ~n ) @ #t0)
                                             ⇒
                                              ((#t0 < #vr.60) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                         (#vr.24 < #vr.60) )
                                    case case_1
                                    solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* cyclic */
                                    next
                                      case case_3
                                      solve( ((#vr.48 < #vr.71) ∧
                                              (∃ #t2.
                                                (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                               ∧
                                                (#vr.48 < #t2) ∧
                                                (#t2 < #vr.71) ∧
                                                (∀ #t0.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                (∀ lp #t0.
                                                  (Lock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t0 = #vr.48) ∨ (#t2 < #t0))) ∧
                                                (∀ lp #t0.
                                                  (Unlock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                             (#vr.71 < #vr.48) )
                                        case case_1
                                        solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                          case unlock_L_h1_11211111111
                                          by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.6 )
                                                case out_senckeyv2_keyv1_1121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case unlock_L_h_11111111111111
                                              by solve( State_11111111111111( ~lock9, ~n, k
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock9, ~n, c, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock9, ~n, m, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.6 )
                                            qed
                                          qed
                                        next
                                          case unlock_L_h_11111121111111
                                          by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111112111111
                                          by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111121111111
                                          by solve( State_111121111111( ~lock7, ~n, c, v
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_1112111111
                                          by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_12111111111
                                          by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                    ) ▶₀ #t2.5 )
                                        qed
                                      next
                                        case case_2
                                        solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                          case unlock_L_h1_11211111111
                                          by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.6 )
                                                case out_senckeyv2_keyv1_1121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case unlock_L_h_11111111111111
                                              by solve( State_11111111111111( ~lock9, ~n, k
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock9, ~n, c, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock9, ~n, m, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.6 )
                                            qed
                                          qed
                                        next
                                          case unlock_L_h_11111121111111
                                          by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111112111111
                                          by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111121111111
                                          by solve( State_111121111111( ~lock7, ~n, c, v
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_1112111111
                                          by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_12111111111
                                          by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                    ) ▶₀ #t2.5 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case case_2
                                    solve( ((#vr.13 < #vr.60) ∧
                                            (∃ #t2.
                                              (Unlock( ~lock8, ~n ) @ #t2)
                                             ∧
                                              (#vr.13 < #t2) ∧
                                              (#t2 < #vr.60) ∧
                                              (∀ #t0. (Unlock( ~lock8, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                              (∀ lp #t0.
                                                (Lock( lp, ~n ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.13) ∨ (#t0 = #vr.13) ∨ (#t2 < #t0))) ∧
                                              (∀ lp #t0.
                                                (Unlock( lp, ~n ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.13) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                           (#vr.60 < #vr.13)  ∥ (#vr.13 = #vr.60) )
                                      case case_1
                                      solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* cyclic */
                                      next
                                        case case_3
                                        solve( ((#vr.48 < #vr.71) ∧
                                                (∃ #t2.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                 ∧
                                                  (#vr.48 < #t2) ∧
                                                  (#t2 < #vr.71) ∧
                                                  (∀ #t0.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ lp #t0.
                                                    (Lock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t0 = #vr.48) ∨
                                                     (#t2 < #t0))) ∧
                                                  (∀ lp #t0.
                                                    (Unlock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t2 < #t0) ∨
                                                     (#t2 = #t0)))))  ∥
                                               (#vr.71 < #vr.48) )
                                          case case_1
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        next
                                          case case_2
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_2
                                      solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* cyclic */
                                      next
                                        case case_3
                                        solve( ((#vr.48 < #vr.71) ∧
                                                (∃ #t2.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                 ∧
                                                  (#vr.48 < #t2) ∧
                                                  (#t2 < #vr.71) ∧
                                                  (∀ #t0.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ lp #t0.
                                                    (Lock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t0 = #vr.48) ∨
                                                     (#t2 < #t0))) ∧
                                                  (∀ lp #t0.
                                                    (Unlock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t2 < #t0) ∨
                                                     (#t2 = #t0)))))  ∥
                                               (#vr.71 < #vr.48) )
                                          case case_1
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        next
                                          case case_2
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_3
                                      solve( ((#vr.48 < #vr.59) ∧
                                              (∃ #t2.
                                                (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                               ∧
                                                (#vr.48 < #t2) ∧
                                                (#t2 < #vr.59) ∧
                                                (∀ #t0.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                (∀ lp #t0.
                                                  (Lock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t0 = #vr.48) ∨ (#t2 < #t0))) ∧
                                                (∀ lp #t0.
                                                  (Unlock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                             (#vr.59 < #vr.48) )
                                        case case_1
                                        solve( Unlock( ~lock7, ~n ) @ #t2.5 )
                                          case unlock_L_h1_11211111111
                                          by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                    ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.4 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.5 )
                                                case out_senckeyv2_keyv1_1121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case unlock_L_h_11111111111111
                                              by solve( State_11111111111111( ~lock9, ~n, k
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock9, ~n, c, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock9, ~n, m, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.5 )
                                            qed
                                          qed
                                        next
                                          case unlock_L_h_11111121111111
                                          by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_111112111111
                                          by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_111121111111
                                          by solve( State_111121111111( ~lock7, ~n, c, v
                                                    ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_1112111111
                                          by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_12111111111
                                          by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                    ) ▶₀ #t2.4 )
                                        qed
                                      next
                                        case case_2
                                        solve( Unlock( ~lock7, ~n ) @ #t2.5 )
                                          case unlock_L_h1_11211111111
                                          by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                    ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.4 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.5 )
                                                case out_senckeyv2_keyv1_1121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case unlock_L_h_11111111111111
                                              by solve( State_11111111111111( ~lock9, ~n, k
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock9, ~n, c, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock9, ~n, m, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.5 )
                                            qed
                                          qed
                                        next
                                          case unlock_L_h_11111121111111
                                          by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_111112111111
                                          by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_111121111111
                                          by solve( State_111121111111( ~lock7, ~n, c, v
                                                    ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_1112111111
                                          by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.4 )
                                        next
                                          case unlock_L_h_12111111111
                                          by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                    ) ▶₀ #t2.4 )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case case_2
                                  solve( ((#vr.13 < #vr.60) ∧
                                          (∃ #t2.
                                            (Unlock( ~lock8, ~n ) @ #t2)
                                           ∧
                                            (#vr.13 < #t2) ∧
                                            (#t2 < #vr.60) ∧
                                            (∀ #t0. (Unlock( ~lock8, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                            (∀ lp #t0.
                                              (Lock( lp, ~n ) @ #t0)
                                             ⇒
                                              ((#t0 < #vr.13) ∨ (#t0 = #vr.13) ∨ (#t2 < #t0))) ∧
                                            (∀ lp #t0.
                                              (Unlock( lp, ~n ) @ #t0)
                                             ⇒
                                              ((#t0 < #vr.13) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                         (#vr.60 < #vr.13)  ∥ (#vr.13 = #vr.60) )
                                    case case_1
                                    solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* cyclic */
                                    next
                                      case case_3
                                      solve( ((#vr.13 < #vr.40) ∧
                                              (∃ #t2.
                                                (Unlock( ~lock8, ~n ) @ #t2)
                                               ∧
                                                (#vr.13 < #t2) ∧
                                                (#t2 < #vr.40) ∧
                                                (∀ #t0. (Unlock( ~lock8, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                                (∀ lp #t0.
                                                  (Lock( lp, ~n ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.13) ∨ (#t0 = #vr.13) ∨ (#t2 < #t0))) ∧
                                                (∀ lp #t0.
                                                  (Unlock( lp, ~n ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.13) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                             (#vr.40 < #vr.13) )
                                        case case_1
                                        solve( ((#vr.48 < #vr.71) ∧
                                                (∃ #t2.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                 ∧
                                                  (#vr.48 < #t2) ∧
                                                  (#t2 < #vr.71) ∧
                                                  (∀ #t0.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ lp #t0.
                                                    (Lock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t0 = #vr.48) ∨
                                                     (#t2 < #t0))) ∧
                                                  (∀ lp #t0.
                                                    (Unlock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t2 < #t0) ∨
                                                     (#t2 = #t0)))))  ∥
                                               (#vr.71 < #vr.48) )
                                          case case_1
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        next
                                          case case_2
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      next
                                        case case_2
                                        solve( ((#vr.48 < #vr.71) ∧
                                                (∃ #t2.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                 ∧
                                                  (#vr.48 < #t2) ∧
                                                  (#t2 < #vr.71) ∧
                                                  (∀ #t0.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ lp #t0.
                                                    (Lock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t0 = #vr.48) ∨
                                                     (#t2 < #t0))) ∧
                                                  (∀ lp #t0.
                                                    (Unlock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t2 < #t0) ∨
                                                     (#t2 = #t0)))))  ∥
                                               (#vr.71 < #vr.48) )
                                          case case_1
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        next
                                          case case_2
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case case_2
                                    solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* cyclic */
                                    next
                                      case case_3
                                      solve( ((#vr.48 < #vr.71) ∧
                                              (∃ #t2.
                                                (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                               ∧
                                                (#vr.48 < #t2) ∧
                                                (#t2 < #vr.71) ∧
                                                (∀ #t0.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                (∀ lp #t0.
                                                  (Lock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t0 = #vr.48) ∨ (#t2 < #t0))) ∧
                                                (∀ lp #t0.
                                                  (Unlock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                             (#vr.71 < #vr.48) )
                                        case case_1
                                        solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                          case unlock_L_h1_11211111111
                                          by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.6 )
                                                case out_senckeyv2_keyv1_1121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case unlock_L_h_11111111111111
                                              by solve( State_11111111111111( ~lock9, ~n, k
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock9, ~n, c, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock9, ~n, m, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.6 )
                                            qed
                                          qed
                                        next
                                          case unlock_L_h_11111121111111
                                          by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111112111111
                                          by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111121111111
                                          by solve( State_111121111111( ~lock7, ~n, c, v
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_1112111111
                                          by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_12111111111
                                          by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                    ) ▶₀ #t2.5 )
                                        qed
                                      next
                                        case case_2
                                        solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                          case unlock_L_h1_11211111111
                                          by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.6 )
                                                case out_senckeyv2_keyv1_1121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case unlock_L_h_11111111111111
                                              by solve( State_11111111111111( ~lock9, ~n, k
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock9, ~n, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock9, ~n, c, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock9, ~n, m, v
                                                        ) ▶₀ #t2.6 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.6 )
                                            qed
                                          qed
                                        next
                                          case unlock_L_h_11111121111111
                                          by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111112111111
                                          by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_111121111111
                                          by solve( State_111121111111( ~lock7, ~n, c, v
                                                    ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_1112111111
                                          by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.5 )
                                        next
                                          case unlock_L_h_12111111111
                                          by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                    ) ▶₀ #t2.5 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case case_3
                                    solve( ((#vr.48 < #vr.59) ∧
                                            (∃ #t2.
                                              (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                             ∧
                                              (#vr.48 < #t2) ∧
                                              (#t2 < #vr.59) ∧
                                              (∀ #t0.
                                                (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                              (∀ lp #t0.
                                                (Lock( lp, ~n.4 ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.48) ∨ (#t0 = #vr.48) ∨ (#t2 < #t0))) ∧
                                              (∀ lp #t0.
                                                (Unlock( lp, ~n.4 ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.48) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                           (#vr.59 < #vr.48) )
                                      case case_1
                                      solve( Unlock( ~lock7, ~n ) @ #t2.5 )
                                        case unlock_L_h1_11211111111
                                        by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                  ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_11111111111111
                                        solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.4 )
                                          case out_L_h_1111111111111
                                          solve( Unlock( ~lock9, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                   ) ▶₀ #t2.5 )
                                              case out_senckeyv2_keyv1_1121111111
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case unlock_L_h_11111111111111
                                            by solve( State_11111111111111( ~lock9, ~n, k
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock9, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock9, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock9, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock9, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      next
                                        case unlock_L_h_11111121111111
                                        by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_111112111111
                                        by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_111121111111
                                        by solve( State_111121111111( ~lock7, ~n, c, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_1112111111
                                        by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_12111111111
                                        by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                  ) ▶₀ #t2.4 )
                                      qed
                                    next
                                      case case_2
                                      solve( Unlock( ~lock7, ~n ) @ #t2.5 )
                                        case unlock_L_h1_11211111111
                                        by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                  ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_11111111111111
                                        solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.4 )
                                          case out_L_h_1111111111111
                                          solve( Unlock( ~lock9, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                   ) ▶₀ #t2.5 )
                                              case out_senckeyv2_keyv1_1121111111
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case unlock_L_h_11111111111111
                                            by solve( State_11111111111111( ~lock9, ~n, k
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock9, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock9, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock9, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock9, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      next
                                        case unlock_L_h_11111121111111
                                        by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_111112111111
                                        by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_111121111111
                                        by solve( State_111121111111( ~lock7, ~n, c, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_1112111111
                                        by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.4 )
                                      next
                                        case unlock_L_h_12111111111
                                        by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                  ) ▶₀ #t2.4 )
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                solve( ((#vr.40 < #vr.24) ∧
                                        (∃ #t2.
                                          (Unlock( ~lock9, ~n ) @ #t2)
                                         ∧
                                          (#vr.40 < #t2) ∧
                                          (#t2 < #vr.24) ∧
                                          (∀ #t0. (Unlock( ~lock9, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                          (∀ lp #t0.
                                            (Lock( lp, ~n ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.40) ∨ (#t0 = #vr.40) ∨ (#t2 < #t0))) ∧
                                          (∀ lp #t0.
                                            (Unlock( lp, ~n ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.40) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                       (#vr.24 < #vr.40) )
                                  case case_1
                                  solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    by contradiction /* cyclic */
                                  next
                                    case case_3
                                    solve( ((#vr.48 < #vr.71) ∧
                                            (∃ #t2.
                                              (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                             ∧
                                              (#vr.48 < #t2) ∧
                                              (#t2 < #vr.71) ∧
                                              (∀ #t0.
                                                (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                              (∀ lp #t0.
                                                (Lock( lp, ~n.4 ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.48) ∨ (#t0 = #vr.48) ∨ (#t2 < #t0))) ∧
                                              (∀ lp #t0.
                                                (Unlock( lp, ~n.4 ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.48) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                           (#vr.71 < #vr.48) )
                                      case case_1
                                      solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                        case unlock_L_h1_11211111111
                                        by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                  ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_11111111111111
                                        solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                          case out_L_h_1111111111111
                                          solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                            case unlock_L_h1_11211111111
                                            solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                   ) ▶₀ #t2.6 )
                                              case out_senckeyv2_keyv1_1121111111
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case unlock_L_h_11111111111111
                                            by solve( State_11111111111111( ~lock9, ~n, k
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock9, ~n, v
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock9, ~n, v ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock9, ~n, c, v
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock9, ~n, m, v
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.6 )
                                          qed
                                        qed
                                      next
                                        case unlock_L_h_11111121111111
                                        by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_111112111111
                                        by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_111121111111
                                        by solve( State_111121111111( ~lock7, ~n, c, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_1112111111
                                        by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_12111111111
                                        by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                  ) ▶₀ #t2.5 )
                                      qed
                                    next
                                      case case_2
                                      solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                        case unlock_L_h1_11211111111
                                        by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                  ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_11111111111111
                                        solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                          case out_L_h_1111111111111
                                          solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                            case unlock_L_h1_11211111111
                                            solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                   ) ▶₀ #t2.6 )
                                              case out_senckeyv2_keyv1_1121111111
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case unlock_L_h_11111111111111
                                            by solve( State_11111111111111( ~lock9, ~n, k
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock9, ~n, v
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock9, ~n, v ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock9, ~n, c, v
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock9, ~n, m, v
                                                      ) ▶₀ #t2.6 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock9, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.6 )
                                          qed
                                        qed
                                      next
                                        case unlock_L_h_11111121111111
                                        by solve( State_11111121111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_111112111111
                                        by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_111121111111
                                        by solve( State_111121111111( ~lock7, ~n, c, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_1112111111
                                        by solve( State_1112111111( ~lock7, ~n, m, v ) ▶₀ #t2.5 )
                                      next
                                        case unlock_L_h_12111111111
                                        by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                  ) ▶₀ #t2.5 )
                                      qed
                                    qed
                                  qed
                                next
                                  case case_2
                                  solve( ((#vr.60 < #vr.24) ∧
                                          (∃ #t2.
                                            (Unlock( ~lock8.2, ~n ) @ #t2)
                                           ∧
                                            (#vr.60 < #t2) ∧
                                            (#t2 < #vr.24) ∧
                                            (∀ #t0. (Unlock( ~lock8.2, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                            (∀ lp #t0.
                                              (Lock( lp, ~n ) @ #t0)
                                             ⇒
                                              ((#t0 < #vr.60) ∨ (#t0 = #vr.60) ∨ (#t2 < #t0))) ∧
                                            (∀ lp #t0.
                                              (Unlock( lp, ~n ) @ #t0)
                                             ⇒
                                              ((#t0 < #vr.60) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                         (#vr.24 < #vr.60) )
                                    case case_1
                                    by sorry /* removed */
                                  next
                                    case case_2
                                    solve( ((#vr.13 < #vr.60) ∧
                                            (∃ #t2.
                                              (Unlock( ~lock8, ~n ) @ #t2)
                                             ∧
                                              (#vr.13 < #t2) ∧
                                              (#t2 < #vr.60) ∧
                                              (∀ #t0. (Unlock( ~lock8, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                              (∀ lp #t0.
                                                (Lock( lp, ~n ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.13) ∨ (#t0 = #vr.13) ∨ (#t2 < #t0))) ∧
                                              (∀ lp #t0.
                                                (Unlock( lp, ~n ) @ #t0)
                                               ⇒
                                                ((#t0 < #vr.13) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                           (#vr.60 < #vr.13)  ∥ (#vr.13 = #vr.60) )
                                      case case_1
                                      solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* cyclic */
                                      next
                                        case case_3
                                        solve( ((#vr.48 < #vr.71) ∧
                                                (∃ #t2.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                 ∧
                                                  (#vr.48 < #t2) ∧
                                                  (#t2 < #vr.71) ∧
                                                  (∀ #t0.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ lp #t0.
                                                    (Lock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t0 = #vr.48) ∨
                                                     (#t2 < #t0))) ∧
                                                  (∀ lp #t0.
                                                    (Unlock( lp, ~n.4 ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.48) ∨
                                                     (#t2 < #t0) ∨
                                                     (#t2 = #t0)))))  ∥
                                               (#vr.71 < #vr.48) )
                                          case case_1
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  solve( (#t2.11 < #t2.1)  ∥ (#t2.11 = #t2.1)  ∥
                                                         (#vr.12 < #t2.11) )
                                                    case case_1
                                                    by sorry /* bound 12 hit */
                                                  next
                                                    case case_2
                                                    by sorry /* bound 12 hit */
                                                  next
                                                    case case_3
                                                    by sorry /* bound 12 hit */
                                                  qed
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        next
                                          case case_2
                                          solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                            case unlock_L_h1_11211111111
                                            by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_11111111111111
                                            solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.5 )
                                              case out_L_h_1111111111111
                                              solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                case unlock_L_h1_11211111111
                                                solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                       ) ▶₀ #t2.6 )
                                                  case out_senckeyv2_keyv1_1121111111
                                                  solve( (#t2.11 < #t2.1)  ∥ (#t2.11 = #t2.1)  ∥
                                                         (#vr.12 < #t2.11) )
                                                    case case_1
                                                    by sorry /* bound 12 hit */
                                                  next
                                                    case case_2
                                                    by sorry /* bound 12 hit */
                                                  next
                                                    case case_3
                                                    by sorry /* bound 12 hit */
                                                  qed
                                                qed
                                              next
                                                case unlock_L_h_11111111111111
                                                by solve( State_11111111111111( ~lock9, ~n, k
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_11111121111111
                                                by solve( State_11111121111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111112111111
                                                by solve( State_111112111111( ~lock9, ~n, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_111121111111
                                                by solve( State_111121111111( ~lock9, ~n, c, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_1112111111
                                                by solve( State_1112111111( ~lock9, ~n, m, v
                                                          ) ▶₀ #t2.6 )
                                              next
                                                case unlock_L_h_12111111111
                                                by solve( State_12111111111( ~lock9, ~n, L_h2, k, m,
                                                                             v
                                                          ) ▶₀ #t2.6 )
                                              qed
                                            qed
                                          next
                                            case unlock_L_h_11111121111111
                                            by solve( State_11111121111111( ~lock7, ~n, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111112111111
                                            by solve( State_111112111111( ~lock7, ~n, v ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_111121111111
                                            by solve( State_111121111111( ~lock7, ~n, c, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_1112111111
                                            by solve( State_1112111111( ~lock7, ~n, m, v
                                                      ) ▶₀ #t2.5 )
                                          next
                                            case unlock_L_h_12111111111
                                            by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                      ) ▶₀ #t2.5 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_2
                                      solve( (#t2 < #t2.3)  ∥ (#t2 = #t2.3)  ∥ (#vr.39 < #t2) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* cyclic */
                                      next
                                        case case_3
                                        solve( ((#vr.13 < #vr.40) ∧
                                                (∃ #t2.
                                                  (Unlock( ~lock8, ~n ) @ #t2)
                                                 ∧
                                                  (#vr.13 < #t2) ∧
                                                  (#t2 < #vr.40) ∧
                                                  (∀ #t0.
                                                    (Unlock( ~lock8, ~n ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ lp #t0.
                                                    (Lock( lp, ~n ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.13) ∨
                                                     (#t0 = #vr.13) ∨
                                                     (#t2 < #t0))) ∧
                                                  (∀ lp #t0.
                                                    (Unlock( lp, ~n ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.13) ∨
                                                     (#t2 < #t0) ∨
                                                     (#t2 = #t0)))))  ∥
                                               (#vr.40 < #vr.13) )
                                          case case_1
                                          solve( ((#vr.48 < #vr.71) ∧
                                                  (∃ #t2.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                   ∧
                                                    (#vr.48 < #t2) ∧
                                                    (#t2 < #vr.71) ∧
                                                    (∀ #t0.
                                                      (Unlock( ~lock8.1, ~n.4 ) @ #t0)
                                                     ⇒
                                                      #t0 = #t2) ∧
                                                    (∀ lp #t0.
                                                      (Lock( lp, ~n.4 ) @ #t0)
                                                     ⇒
                                                      ((#t0 < #vr.48) ∨
                                                       (#t0 = #vr.48) ∨
                                                       (#t2 < #t0))) ∧
                                                    (∀ lp #t0.
                                                      (Unlock( lp, ~n.4 ) @ #t0)
                                                     ⇒
                                                      ((#t0 < #vr.48) ∨
                                                       (#t2 < #t0) ∨
                                                       (#t2 = #t0)))))  ∥
                                                 (#vr.71 < #vr.48) )
                                            case case_1
                                            solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_11111111111111
                                              solve( State_11111111111111( ~lock7, ~n, k
                                                     ) ▶₀ #t2.5 )
                                                case out_L_h_1111111111111
                                                solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                  case unlock_L_h1_11211111111
                                                  solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                         ) ▶₀ #t2.6 )
                                                    case out_senckeyv2_keyv1_1121111111
                                                    by sorry /* bound 12 hit */
                                                  qed
                                                next
                                                  case unlock_L_h_11111111111111
                                                  by solve( State_11111111111111( ~lock9, ~n, k
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_11111121111111
                                                  by solve( State_11111121111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111112111111
                                                  by solve( State_111112111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111121111111
                                                  by solve( State_111121111111( ~lock9, ~n, c, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_1112111111
                                                  by solve( State_1112111111( ~lock9, ~n, m, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_12111111111
                                                  by solve( State_12111111111( ~lock9, ~n, L_h2, k,
                                                                               m, v
                                                            ) ▶₀ #t2.6 )
                                                qed
                                              qed
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock7, ~n, c, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock7, ~n, m, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.5 )
                                            qed
                                          next
                                            case case_2
                                            solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_11111111111111
                                              solve( State_11111111111111( ~lock7, ~n, k
                                                     ) ▶₀ #t2.5 )
                                                case out_L_h_1111111111111
                                                solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                  case unlock_L_h1_11211111111
                                                  solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                         ) ▶₀ #t2.6 )
                                                    case out_senckeyv2_keyv1_1121111111
                                                    by sorry /* bound 12 hit */
                                                  qed
                                                next
                                                  case unlock_L_h_11111111111111
                                                  by solve( State_11111111111111( ~lock9, ~n, k
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_11111121111111
                                                  by solve( State_11111121111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111112111111
                                                  by solve( State_111112111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111121111111
                                                  by solve( State_111121111111( ~lock9, ~n, c, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_1112111111
                                                  by solve( State_1112111111( ~lock9, ~n, m, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_12111111111
                                                  by solve( State_12111111111( ~lock9, ~n, L_h2, k,
                                                                               m, v
                                                            ) ▶₀ #t2.6 )
                                                qed
                                              qed
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock7, ~n, c, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock7, ~n, m, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.5 )
                                            qed
                                          qed
                                        next
                                          case case_2
                                          solve( ((#vr.48 < #vr.71) ∧
                                                  (∃ #t2.
                                                    (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                                   ∧
                                                    (#vr.48 < #t2) ∧
                                                    (#t2 < #vr.71) ∧
                                                    (∀ #t0.
                                                      (Unlock( ~lock8.1, ~n.4 ) @ #t0)
                                                     ⇒
                                                      #t0 = #t2) ∧
                                                    (∀ lp #t0.
                                                      (Lock( lp, ~n.4 ) @ #t0)
                                                     ⇒
                                                      ((#t0 < #vr.48) ∨
                                                       (#t0 = #vr.48) ∨
                                                       (#t2 < #t0))) ∧
                                                    (∀ lp #t0.
                                                      (Unlock( lp, ~n.4 ) @ #t0)
                                                     ⇒
                                                      ((#t0 < #vr.48) ∨
                                                       (#t2 < #t0) ∨
                                                       (#t2 = #t0)))))  ∥
                                                 (#vr.71 < #vr.48) )
                                            case case_1
                                            solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_11111111111111
                                              solve( State_11111111111111( ~lock7, ~n, k
                                                     ) ▶₀ #t2.5 )
                                                case out_L_h_1111111111111
                                                solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                  case unlock_L_h1_11211111111
                                                  solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                         ) ▶₀ #t2.6 )
                                                    case out_senckeyv2_keyv1_1121111111
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case unlock_L_h_11111111111111
                                                  by solve( State_11111111111111( ~lock9, ~n, k
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_11111121111111
                                                  by solve( State_11111121111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111112111111
                                                  by solve( State_111112111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111121111111
                                                  by solve( State_111121111111( ~lock9, ~n, c, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_1112111111
                                                  by solve( State_1112111111( ~lock9, ~n, m, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_12111111111
                                                  by solve( State_12111111111( ~lock9, ~n, L_h2, k,
                                                                               m, v
                                                            ) ▶₀ #t2.6 )
                                                qed
                                              qed
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock7, ~n, c, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock7, ~n, m, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.5 )
                                            qed
                                          next
                                            case case_2
                                            solve( Unlock( ~lock7, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              by solve( State_11211111111( ~lock7, ~n, L_h2, v1, v2
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_11111111111111
                                              solve( State_11111111111111( ~lock7, ~n, k
                                                     ) ▶₀ #t2.5 )
                                                case out_L_h_1111111111111
                                                solve( Unlock( ~lock9, ~n ) @ #t2.7 )
                                                  case unlock_L_h1_11211111111
                                                  solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                         ) ▶₀ #t2.6 )
                                                    case out_senckeyv2_keyv1_1121111111
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case unlock_L_h_11111111111111
                                                  by solve( State_11111111111111( ~lock9, ~n, k
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_11111121111111
                                                  by solve( State_11111121111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111112111111
                                                  by solve( State_111112111111( ~lock9, ~n, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_111121111111
                                                  by solve( State_111121111111( ~lock9, ~n, c, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_1112111111
                                                  by solve( State_1112111111( ~lock9, ~n, m, v
                                                            ) ▶₀ #t2.6 )
                                                next
                                                  case unlock_L_h_12111111111
                                                  by solve( State_12111111111( ~lock9, ~n, L_h2, k,
                                                                               m, v
                                                            ) ▶₀ #t2.6 )
                                                qed
                                              qed
                                            next
                                              case unlock_L_h_11111121111111
                                              by solve( State_11111121111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111112111111
                                              by solve( State_111112111111( ~lock7, ~n, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_111121111111
                                              by solve( State_111121111111( ~lock7, ~n, c, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_1112111111
                                              by solve( State_1112111111( ~lock7, ~n, m, v
                                                        ) ▶₀ #t2.5 )
                                            next
                                              case unlock_L_h_12111111111
                                              by solve( State_12111111111( ~lock7, ~n, L_h2, k, m, v
                                                        ) ▶₀ #t2.5 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_3
                                      solve( ((#vr.48 < #vr.59) ∧
                                              (∃ #t2.
                                                (Unlock( ~lock8.1, ~n.4 ) @ #t2)
                                               ∧
                                                (#vr.48 < #t2) ∧
                                                (#t2 < #vr.59) ∧
                                                (∀ #t0.
                                                  (Unlock( ~lock8.1, ~n.4 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                (∀ lp #t0.
                                                  (Lock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t0 = #vr.48) ∨ (#t2 < #t0))) ∧
                                                (∀ lp #t0.
                                                  (Unlock( lp, ~n.4 ) @ #t0)
                                                 ⇒
                                                  ((#t0 < #vr.48) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                             (#vr.59 < #vr.48) )
                                        case case_2
                                        solve( Unlock( ~lock7, ~n ) @ #t2.5 )
                                          case unlock_L_h_11111111111111
                                          solve( State_11111111111111( ~lock7, ~n, k ) ▶₀ #t2.4 )
                                            case out_L_h_1111111111111
                                            solve( Unlock( ~lock9, ~n ) @ #t2.6 )
                                              case unlock_L_h1_11211111111
                                              solve( State_11211111111( ~lock9, ~n, L_h2, v1, v2
                                                     ) ▶₀ #t2.5 )
                                                case out_senckeyv2_keyv1_1121111111
                                                solve( (#t2.9 < #t2.1)  ∥ (#t2.9 = #t2.1)  ∥
                                                       (#vr.12 < #t2.9) )
                                                  case case_3
                                                  solve( (#t2.9 < #t2)  ∥ (#t2.9 = #t2) )
                                                    case case_2
                                                    solve( (#t2.8 < #t2.3)  ∥ (#t2.8 = #t2.3)  ∥
                                                           (#vr.47 < #t2.8) )
                                                      case case_3
                                                      solve( (#t2.2 < #t2.8)  ∥ (#t2.2 = #t2.8) )
                                                        case case_2
                                                        solve( Unlock( ~lock8, ~n ) @ #t2.6 )
                                                          case unlock_L_h_11111121111111
                                                          solve( State_11111121111111( ~lock8, ~n, v
                                                                 ) ▶₀ #t2.6 )
                                                            case event_WrapHandleL_h_1111112111111
                                                            solve( (#t2.1 < #t2.8)  ∥
                                                                   (#t2.1 = #t2.8) )
                                                              case case_2
                                                              solve( Unlock( ~lock7.1, ~n.4
                                                                     ) @ #t2.7 )
                                                                case unlock_L_h_11111111111111
                                                                solve( State_11111111111111( ~lock7.1,
                                                                                             ~n.4, k
                                                                       ) ▶₀ #t2.7 )
                                                                  case out_L_h_1111111111111
                                                                  solve( !KU( ~n ) @ #vk.2 )
                                                                    case out_L_h_1111111111111
                                                                    solve( !KU( ~n.4 ) @ #vk.8 )
                                                                      case out_L_h_1111111111111
                                                                      SOLVED // trace found
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case out_senckeyv2_keyv1_1121111111_case_2
            by sorry
          next
            case out_sencm_keyv_111211111
            by sorry
          qed
        qed
      qed
    qed
  qed
qed

lemma dec_limits [sources]:
  all-traces
  "∀ k m #t1.
    (DecUsing( k, m ) @ #t1) ⇒
    (((((∃ h2 k2 #t2 #t3.
          (((NewKey( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)) ∧ (#t2 < #t1)) ∧
          (#t3 < #t1)) ∨
        (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (#t2 < #t1))) ∨
       (∃ h2 k2 #t2 #t3.
         (((Unwrapped( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)) ∧ (#t2 < #t1)) ∧
         (#t3 < #t1))) ∨
      (∃ #t2 #t3 h1 h2 k2.
        (((WrapKey( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)) ∧
         (#t2 < #t1)) ∧
        (#t3 < #t1))) ∨
     (∃ #t2 #t3 h1 h2 k2.
       (((Unwrapped( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)) ∧
        (#t2 < #t1)) ∧
       (#t3 < #t1)))"
/*
guarded formula characterizing all counter-examples:
"∃ k m #t1.
  (DecUsing( k, m ) @ #t1)
 ∧
  (∀ h2 k2 #t2 #t3.
    (NewKey( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
   ⇒
    ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)))) ∧
  (∀ #t2. (EncUsing( k, m ) @ #t2) ⇒ ¬(#t2 < #t1)) ∧
  (∀ h2 k2 #t2 #t3.
    (Unwrapped( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
   ⇒
    ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)))) ∧
  (∀ #t2 #t3 h1 h2 k2.
    (WrapKey( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
   ⇒
    ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)))) ∧
  (∀ #t2 #t3 h1 h2 k2.
    (Unwrapped( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
   ⇒
    ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1))))"
*/
by sorry

lemma wrap_key_origins [use_induction, reuse]:
  all-traces
  "∀ h2 k #t2.
    (Unwrapped( h2, k ) @ #t2) ⇒
    (((((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ (#t1 < #t2)) ∧
        (∃ hp #t0.
          ((WrapKey( hp, k ) @ #t0) ∧ ((#t0 = #t2) ∨ (#t0 < #t2))) ∧
          (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ (#t0 < #t1)))) ∨
       (∃ h k2 #t1 #t0.
         (((NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)) ∧ (#t1 < #t2)) ∧
         (#t0 < #t2))) ∨
      (∃ #t0 #t1 h1 h2.1 k.1.
        (((WrapKey( h2.1, k.1 ) @ #t0) ∧ (DecKey( h1, k.1 ) @ #t1)) ∧
         (#t0 < #t2)) ∧
        (#t1 < #t2))) ∨
     (∃ #t0 #t1 h1 h2.1 k.1.
       (((Unwrapped( h2.1, k.1 ) @ #t0) ∧ (DecKey( h1, k.1 ) @ #t1)) ∧
        (#t0 < #t2)) ∧
       (#t1 < #t2)))"
/*
guarded formula characterizing all counter-examples:
"∃ h2 k #t2.
  (Unwrapped( h2, k ) @ #t2)
 ∧
  (((∀ h1 #t1. (NewKey( h1, k ) @ #t1) ⇒ ¬(#t1 < #t2)) ∨
    (∀ hp #t0.
      (WrapKey( hp, k ) @ #t0)
     ⇒
      (((¬(#t0 = #t2)) ∧ (¬(#t0 < #t2))) ∨
       (∃ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ∧ ¬(#t0 < #t1)))))) ∧
  (∀ h k2 #t1 #t0.
    (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
   ⇒
    ((¬(#t1 < #t2)) ∨ (¬(#t0 < #t2)))) ∧
  (∀ #t0 #t1 h1 h2.1 k.1.
    (WrapKey( h2.1, k.1 ) @ #t0) ∧ (DecKey( h1, k.1 ) @ #t1)
   ⇒
    ((¬(#t0 < #t2)) ∨ (¬(#t1 < #t2)))) ∧
  (∀ #t0 #t1 h1 h2.1 k.1.
    (Unwrapped( h2.1, k.1 ) @ #t0) ∧ (DecKey( h1, k.1 ) @ #t1)
   ⇒
    ((¬(#t0 < #t2)) ∨ (¬(#t1 < #t2))))"
*/
by sorry

lemma no_key_is_wrap_and_dec_ind [use_induction, reuse]:
  all-traces
  "∀ #t2 #t3 h1 h2 k.
    ((DecKey( h1, k ) @ #t2) ∧ (WrapKey( h2, k ) @ #t3)) ⇒
    (∃ h k2 #t1 #t0.
      ((NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)) ∧
      (((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))"
/*
guarded formula characterizing all counter-examples:
"∃ #t2 #t3 h1 h2 k.
  (DecKey( h1, k ) @ #t2) ∧ (WrapKey( h2, k ) @ #t3)
 ∧
  ∀ h k2 #t1 #t0.
   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
  ⇒
   (((¬(#t1 < #t3)) ∨ (¬(#t0 < #t3)))) ∧
   (((¬(#t1 < #t2)) ∨ (¬(#t0 < #t2))))"
*/
by sorry

lemma no_key_is_wrap_and_dec_ind2 [use_induction, reuse]:
  all-traces
  "∀ #t2 #t3 h1 h2 k.
    ((DecKey( h1, k ) @ #t2) ∧ (Unwrapped( h2, k ) @ #t3)) ⇒
    (∃ h k2 #t1 #t0.
      ((NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)) ∧
      (((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))"
/*
guarded formula characterizing all counter-examples:
"∃ #t2 #t3 h1 h2 k.
  (DecKey( h1, k ) @ #t2) ∧ (Unwrapped( h2, k ) @ #t3)
 ∧
  ∀ h k2 #t1 #t0.
   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
  ⇒
   (((¬(#t1 < #t3)) ∨ (¬(#t0 < #t3)))) ∧
   (((¬(#t1 < #t2)) ∨ (¬(#t0 < #t2))))"
*/
by sorry

lemma cannot_obtain_key_ind [reuse, use_induction]:
  all-traces
  "¬(∃ #i #j h k. (NewKey( h, k ) @ #i) ∧ (!KU( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j h k. (NewKey( h, k ) @ #i) ∧ (!KU( k ) @ #j)"
*/
by sorry

lemma cannot_obtain_key:
  all-traces "¬(∃ #i #j h k. (NewKey( h, k ) @ #i) ∧ (K( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j h k. (NewKey( h, k ) @ #i) ∧ (K( k ) @ #j)"
*/
by sorry

/*
WARNING: the following wellformedness checks failed!

unbound:
  rule `lookup_L_h_as_v_0_111111211' has unbound variables: 
    v
  
  rule `lookup_L_h_as_v_0_11111211' has unbound variables: 
    v
  
  rule `lookup_L_h_as_v_0_1111211' has unbound variables: 
    v
  
  rule `lookup_L_h_as_v_0_111211' has unbound variables: 
    v
  
  rule `lookup_L_h1_as_v1_0_11211' has unbound variables: 
    v1
  
  rule `lookup_L_h2_as_v2_0_1121111' has unbound variables: 
    v2
  
  rule `lookup_L_h_as_v_0_1211' has unbound variables: 
    v
*/

end