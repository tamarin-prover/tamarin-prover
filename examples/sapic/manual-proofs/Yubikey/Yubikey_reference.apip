theory Yubikey
begin

section{* The Yubikey-Protocol *}

/*
 * Protocol:    Yubikey Protocol
 * Date:        May 2014
 */

builtins: symmetric-encryption, multiset

let Yubikey=
 new k; new pid; new secretid;
 insert <'Server',pid>, <secretid,k,'zero'>;
 insert <'Yubikey',pid>,('zero'+'one');
 event ExtendedInit(pid,secretid,k);
 out(pid);
 !(( //Plug
	lock <'Yubikey',pid>;
	  lookup <'Yubikey',pid> as sc in
		in(sc); //just a trick to enforce adv learning sc
		insert <'Yubikey',pid>, sc+'one';
	unlock <'Yubikey',pid>
  )||( //ButtonPress
	lock <'Yubikey',pid>;
	  lookup <'Yubikey',pid> as tc in
		in(tc); //just a trick to enforce adv learning tc
		insert <'Yubikey',pid>, tc + 'one';
		new nonce;
		new npr;
		event YubiPress(pid,secretid,k,tc);
		out(<pid,nonce,senc(<secretid,tc,npr>,k)>);
	unlock <'Yubikey',pid>
  )
 )

let Server=
 !(
	 in(<pid,nonce,senc(<secretid,tc,npr>,k)>);
	 lock <'Server',pid>;
	 lookup <'Server',pid> as tuple in
		if fst(tuple)=secretid then
			if fst(snd(tuple))=k then
				in(otc);
				if snd(snd(tuple))=otc then
					event Smaller(otc,tc);
					event InitStuff(pid,secretid,k,tuple,otc,tc);
					event Login(pid,k,tc);
	 	insert <'Server',pid>, <secretid,k,tc>;
	 unlock <'Server',pid>
 )

/*
Note that in Server we write

in(otc);
if snd(snd(tuple))=otc then
  event Smaller(otc,tc);

instead of just

event Smaller(snd(snd(tuple)),tc);

to force the adversary to learn the (public) counter value. This
simplifies the proof.
*/



(Server || !Yubikey)

//we model the larger relation using the smaller action and excluding all traces where it is not correct
restriction smaller:
	"All #i a b. Smaller(a,b)@i ==> Ex z. a+z=b"

// For sanity: Ensure that a successful login is reachable.
lemma Login_reachable:
  exists-trace
  "Ex #i pid k x . Login(pid,k,x)@i"

// source lemmas:
// There exists a Initialisation for every Login on the Server
lemma init_server[sources]:
		"All pid sid k tuple otc tc #i . InitStuff(pid,sid,k,tuple,otc,tc)@i 
		==> 
		 tuple=<sid,k,otc>
		&
		 Ex #j.  ExtendedInit(pid, sid, k)@j & #j<#i
"

lemma init_yubikey[sources]:
		"All pid sid k tc #i . YubiPress(pid,sid,k,tc)@i ==> Ex #j.
		ExtendedInit(pid, sid, k)@j & #j<#i"

// If a succesful Login happens before a second sucesfull Login, the
// counter value of the first is smaller than the counter value of the
// second
lemma slightly_weaker_invariant[reuse, use_induction]:
        "(All pid k tc1 tc2 #t1 #t2 .
             Login(pid,k,tc1)@#t1 & Login(pid,k,tc2)@#t2
        ==> ( #t1<#t2 & ( Ex z . tc1+z=tc2))
            | #t2<#t1 | #t1=#t2)
        "

/* Notes: can do prove until here, but could be improved: */
/*  - instantiating unlock come behind instantiating insert, can we move it */
/*    up, perhabs by renaming */
/*  - there was something else.. */ 


/* // It is not possible to have to distinct logins with the same counter */
/* // value */
lemma no_replay[reuse]:
        "not (Ex #i #j pid k x .
         Login(pid,k,x)@i &  Login(pid,k,x)@j 
         & not(#i=#j))"

/* // Each succesful login with counter value x was preceeded by a PressButton */
/* // event with the same counter value */
/* cannot be proven automaticaly, ATM, but helps showing
 * one_count_foreach_login 
*/
lemma one_count_foreach_login[reuse,use_induction]:
        "All pid k x #t2 . Login(pid,k,x)@t2 ==>
         ( Ex #t1 sid . YubiPress(pid,sid,k,x)@#t1 & #t1<#t2 
		)"


lemma injective_correspondance[reuse, use_induction]:
    "All pid k x #t2 . Login(pid,k,x)@t2 ==>
         ( Ex #t1 sid . YubiPress(pid,sid,k,x)@#t1 & #t1<#t2 )
        & All #t3 . Login(pid,k,x)@t3 ==> #t3=#t2
        "

lemma Login_invalidates_smaller_counters:
        "All pid k tc1 tc2 #t1 #t2 #t3 .
             Login(pid,k,tc1)@#t1 & Login(pid,k,tc2)@#t2
			 & Smaller(tc1,tc2)@t3
         	==>  #t1<#t2 "
end

/* vim: set filetype=apip */
