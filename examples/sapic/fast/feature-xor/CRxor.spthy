theory  CRXOR

begin

/* 

  Adapted from tamarin file to SAPIC.

A&B:
A->B: na
B->A: <h(na ⊕ k ⊕ nb), nb>
should find attack:
- after watching one run and storing data
- uses nb'=na+nb+na'
 ((( na'+k+nb'= na'+k + na +nb+na' = k + na + nb )))

*/

builtins: xor, hashing

let Initiator =
  new ~na;
  event Challenge(~na);
  out(~na);
  in(<m,nb>);
  if h(~na ⊕ ~k ⊕ nb) = m then
     event Alive(~na, ~k)


let Responder =
    in(na);
    new ~nb;
    if na = zero then 0
    else
       (
       event NeqForExec(na,zero);
       event Response(~k);
       out(<h(na ⊕ ~k ⊕ ~nb), ~nb>)
       )

new ~k; ! (Initiator || Responder)


// FINDS PROOF AUTOMATICALLY
lemma alive:
  "All x y #i. Alive(x,y) @i ==> Ex #j. Response(y)@j"

// FINDS ATTACK AUTOMATICALLY
// due to restriction on inequality of nonce with zero, we get a nicer looking attack
lemma recentalive_tag:
  exists-trace "not (∀ x y #i. (Alive( x, y ) @ #i) ⇒ (∃ #j #k. Challenge(x) @k & Response( y ) @ #j & k < j & j < i))"

// SHOWS CORRECT EXECUTION
lemma executable:
  exists-trace
  "Ex x y #i #j. Alive(x,y)@i & Response(y)@j
       // further restriction to automatically get the desired execution
       ∧ (not Ex #k. Response(y) @ k & (not (#j=#k)))
       // remove the execution where the received nonce is zero
       ∧ (not Ex #l. NeqForExec(x,x)@l) "


end





