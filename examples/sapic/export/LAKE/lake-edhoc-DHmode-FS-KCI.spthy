/*
 * Protocol:   LAKE
   https://datatracker.ietf.org/doc/html/draft-ietf-lake-edhoc-02

   A lightweight DD based key exchange.

   It comes with two possible modes, either a signature is used for
   authentication, or a long term dh key.
   This file proposes the two modes, with I1 or I2.

   We also  provide a model of dynamic compromission.


   Proverif : 16 seconds

   Tamarin : 2 minutes with 10 cores
*/

theory edhoc

begin

builtins: dest-pairing, diffie-hellman,dest-signing, dest-symmetric-encryption

functions: hash/1,hkdfextract/2, hkdfexpand(bitstring,bitstring):skey

let I2(~skI:skey) =         // Initiator using signatures
    new ~x2;
    event Share(~x2);
    let gX = 'g'^~x2 in
    out(<'m2',gX, 'C_I','AD'>);
    in(<'C_I',gY,rC_R,cypher_2>);
    let TH_2 = hash(<'m2',gX,'C_I','AD','C_I',gY,rC_R>) in
    let PRK_2e = hkdfextract('null', gY^~x2) in
    let K_2e:skey = hkdfexpand(PRK_2e, <TH_2,'TagK_2e'>) in
    let PRK_3e2m = PRK_2e in
    let K_2m:skey = hkdfexpand(PRK_3e2m, <TH_2,'TagK_2m'>) in
    // decypher using K_2e
    let plaintext_2 = sdec(cypher_2,K_2e) in
    let <pkR,signed,rAD_2> = plaintext_2 in
    let MAC_2 = senc(<TH_2,pkR,rAD_2>,K_2m) in
    if verify(signed,< pkR,TH_2,rAD_2,MAC_2>,pkR) = true then
        let TH_3 = hash(<TH_2,cypher_2,rC_R>) in
	let PRK_4x3m = PRK_3e2m in
        event AcceptI(pk(~skI),pkR,PRK_3e2m,PRK_4x3m);
        let K_3m:skey = hkdfexpand(PRK_4x3m, <TH_3,'TagK_3m'>) in
        let MAC_3 = senc(<TH_3,pk(~skI),'AD_3'>,K_3m) in
        let Signed3 = sign(<pk(~skI),TH_3,'AD_3',MAC_3> ,~skI) in
        let K_3ae:skey = hkdfexpand(PRK_3e2m, <TH_3,'TagK_3ae'>) in
        out(<rC_R,senc(< pk(~skI), Signed3, 'AD_3'>, K_3ae ),'AD_3'>)

let I1(~kI) =         // Initiator using DH long term key
    new ~x1;
    event Share(~x1);
    let gX = 'g'^~x1 in
    let gI = 'g'^~kI in
    out(<'m1',gX, 'C_I','AD'>);
    in(<'C_I',gY,rC_R,cypher_2>);
    let TH_2 = hash(<'m1',gX,'C_I','AD','C_I',gY,rC_R>) in
    let PRK_2e = hkdfextract('null', gY^~x1) in
    let K_2e:skey = hkdfexpand(PRK_2e, <TH_2,'TagK_2e'>) in
    let plaintext_2 = sdec(cypher_2,K_2e) in
    let <gR,mac,rAD_2> = plaintext_2 in

    let PRK_3e2m = hkdfextract(PRK_2e, gR^~x1) in

    let K_2m:skey = hkdfexpand(PRK_3e2m, <TH_2,'TagK_2m'>) in
    let MAC2 = senc(<TH_2,gR,rAD_2>,K_2m) in
    if MAC2 = mac then
        let TH_3 = hash(<TH_2,cypher_2,rC_R>) in
	let PRK_4x3m =  hkdfextract(PRK_3e2m, gY^~kI) in
        event AcceptI(gI,gR,PRK_3e2m,PRK_4x3m);

        let K_3m:skey = hkdfexpand(PRK_4x3m, <TH_3,'TagK_3m'>) in
        let MAC_3 = senc(<TH_3,gI,'AD_3'>,K_3m) in
        let K_3ae:skey = hkdfexpand(PRK_3e2m, <TH_3,'TagK_3ae'>) in
        out(<rC_R,senc(< gI, MAC_3, 'AD_3'>, K_3ae ),'AD_3'>)


let R(~skR:skey,~kR) =
    in(<mcorr,gX,rC_I,rAD>);
    new ~y;
    event Share(~y);
    let gY = 'g'^~y in
    let TH_2 = hash(<mcorr,gX,rC_I,rAD,rC_I,gY,'C_R'>) in
    let PRK_2e = hkdfextract('null', gX^~y) in
    let K_2e:skey = hkdfexpand(PRK_2e, <TH_2,'TagK_2e'>) in
    if mcorr = 'm1' then   // we merge mcorr = 1 and mcorr =3
       // static DH authentication used
       (
       let gR = 'g'^~kR in

       let PRK_3e2m = hkdfextract(PRK_2e, gX^~kR) in

       let K_2m:skey = hkdfexpand(PRK_3e2m, <TH_2,'TagK_2m'>) in
       let MAC_2 = senc(<TH_2,gR,'AD_2'>,K_2m) in
       let cypher_2 = senc( <gR,MAC_2,'AD_2' >  ,K_2e) in
       event DerivedR(gR,PRK_3e2m);
       out(<rC_I,gY,'C_R',cypher_2>);
       in(<'C_R', cypher_3,rAD_3>);
       let TH_3 = hash(<TH_2,cypher_2,'C_R'>) in
       // to update
       let K_3ae:skey = hkdfexpand(PRK_3e2m, <TH_3,'TagK_3ae'>) in
       let plaintext_3 = sdec(cypher_3,K_3ae) in
       let <gI,mac3,=rAD_3> = plaintext_3 in

       let PRK_4x3m = hkdfextract(PRK_3e2m, gI^~y) in


       let K_3m:skey = hkdfexpand(PRK_4x3m, <TH_3,'TagK_3m'>) in
       let MAC_3 = senc(<TH_3,gI,rAD_3>,K_3m) in
       if MAC_3 = mac3 then
          event AcceptR(gI,gR,PRK_4x3m);
          event AcceptR1(gI,gR,PRK_4x3m)
       )
    else
       // signature auth used
       let PRK_3e2m = PRK_2e in
       let K_2m:skey = hkdfexpand(PRK_3e2m, <TH_2,'TagK_2m'>) in
       let MAC_2 = senc(<TH_2,pk(~skR),'AD_2'>,K_2m) in
       let Signed2 = sign(<pk(~skR),TH_2,'AD_2',MAC_2> ,~skR) in
       let cypher_2 = senc( <pk(~skR),Signed2,'AD_2' >  ,K_2e) in
       event DerivedR(pk(~skR),PRK_3e2m);
       out(<rC_I,gY,'C_R',cypher_2>);
       in(<'C_R', cypher_3,rAD_3>);
       let TH_3 = hash(<TH_2,cypher_2,'C_R'>) in
       let PRK_4x3m = PRK_3e2m in
       let K_3ae:skey = hkdfexpand(PRK_3e2m, <TH_3,'TagK_3ae'>) in
       let plaintext_3 = sdec(cypher_3,K_3ae) in
       let <pkI,Signed3,=rAD_3> = plaintext_3 in

       let K_3m:skey = hkdfexpand(PRK_4x3m, <TH_3,'TagK_3m'>) in
       let MAC_3 = senc(<TH_3,pkI,rAD_3>,K_3m) in
       if verify(Signed3, <pkI,TH_3,rAD_3,MAC_3 > , pkI) = true then
          event AcceptR(pkI,pk(~skR),PRK_4x3m);
          event AcceptR2(pkI,pk(~skR),PRK_4x3m)


let compromise(sk:skey) =
    in('Comp'); event Compromise(pk(sk), 'Comp'); out(sk)


let compromiseDH(k) =
    in('Comp'); event Compromise('g'^k, 'Comp'); event Leak(k); out(k)

process:
!(new ~skR:skey; new ~skI:skey; new ~kI; new ~kR; out(<pk(~skR),pk(~skI),'g'^~kI,'g'^~kR>);
    event Share(~kI);
        event Share(~kR);
  event Honnest(pk(~skR), 'Resp');
  event Honnest(pk(~skI), 'Init');
  event HonnestDH('g'^~kR, 'Resp');
  event HonnestDH('g'^~kI, 'Init');
       !(I2(~skI) | I1(~kI) | R(~skR,~kR) | compromise(~skR) | compromiseDH(~kR) | compromise(~skI) | compromiseDH(~kI))
)


lemma executableR1: // sanity check
  exists-trace
  "Ex pkI pkR k3 #i. AcceptR1(pkI,pkR,k3)@i"

lemma executableR2: // sanity check
  exists-trace
  "Ex pkI pkR k3 #i. AcceptR2(pkI,pkR,k3)@i"

lemma executableI: // sanity check
  exists-trace
  "Ex pkI pkR k3 k4 #i. AcceptI(pkI,pkR,k3,k4)@i"


lemma secretR[reuse]: // secrecy of the key (holds even if pkR was compromised)
   "All pkI pkR k4 #i #j #l. (AcceptR(pkI,pkR,k4)@i & KU(k4)@j & Honnest(pkI, 'Init')@l )
       ==> Ex #t. Compromise(pkI, 'Comp')@t & t<i"


lemma secretI[reuse]: // secrecy of the key (holds even if pkI was leaked!)
   "All pkI pkR k3 k4 #i #j #l. (AcceptI(pkI,pkR,k3,k4)@i & KU(k4)@j & Honnest(pkR, 'Resp')@l )
    ==> Ex #t. Compromise(pkR, 'Comp')@t & t<i
"

lemma honnestauthRI:  // should be true  (holds even if pkR was leaked!)
 "All pkI pkR k4 #i #l. AcceptR(pkI,pkR,k4)@i & Honnest(pkI, 'Init')@l ==>
    (Ex #j k3. (j<i & AcceptI(pkI,pkR,k3,k4)@j))
 |  (Ex #t.  Compromise(pkI, 'Comp')@t & t<i)"

lemma honnestauthIR:  // should be true  (holds even if pkI was leaked!)
 "All pkI pkR k3 k4 #i #l. AcceptI(pkI,pkR,k3,k4)@i & Honnest(pkR, 'Resp')@l ==>
    (Ex #j.( j<i & DerivedR(pkR,k3)@j))
     |  (Ex #t. Compromise(pkR, 'Comp')@t & t<i)"





end
