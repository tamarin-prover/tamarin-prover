theory AttestedComputation

/*

 This example works with both Proverif (GSVerif) and Tamarin.

*/

begin

builtins: dest-pairing, locations-report

functions: prog/3,list/2
heuristic: S

options: translation-state-optimisation

predicates:
Report(x,y) <=> not  (y= 'loc')

let r =                                        // The remote server who runs the code
	(lock state; lookup state as lio in
	event Read(lio);
	in(i); new r;

	       // A
		let o = prog(r,i,lio) in	// computation of the new output
		let x = report (<o,i,lio>) in  // report call of the IEE
		event Remote(<o,i,lio>,'loc');
		out(<o,x>);

	insert state,list(o,list(i,lio));
	unlock state
	)@'loc'


let v =                                        // The verifier
        in(<i,o,r>);
	lock state2; lookup state2 as lio in
	event Read(lio);
	if <o,i,lio>= check_rep(r,'loc') then // verification of the validity of the report
		(event Local(<o,i,lio>,'loc');
		insert state2,list(o,list(i,lio));
		unlock state2)
	else (insert state2,lio; unlock state2)

process:
 ( !(new state;  insert state,'init'; !r) || !(new state2;  insert state2,'init'; !v)  )


lemma can_run_v: //for sanity
 	exists-trace
	"Ex #i m . Local(m,'loc')@i"

lemma simp[reuse]:
	"All #i m . KU(rep(m,'loc'))@i ==> (Ex #j . Remote(m,'loc')@j)"


// Attested computation theorem
lemma attested_comput:
	"All #i m . Local(m,'loc')@i ==> (Ex #j . Remote(m,'loc')@j)"

end
