theory AKE

// Works with both Tamarin and Proverif

begin

builtins: dest-pairing,dest-asymmetric-encryption,locations-report

functions: first/1

equations: first(<x,y>)=x

predicates: Report(x,y) <=> not(first(y) = 'loc')


let r=                            // IEE sides
        in(pkV);
        !(                        // For every pk received, an instance is launched at the corresponding trusted location
        new k;
	event SessionP(pkV,k);
        let signed = report(aenc(k,pkV)) in
        event Poutput(aenc(k,pkV),signed);
	    out(<aenc(k,pkV),signed>)
        )@<'loc',pkV>



let v =                                   // Initiator of the Key Exchange
    new skV:skey;
    event HonestP(pk(skV), 'pubkey');
    out(pk(skV));                         // publish its public keys
    in(<cypher,signed>);  // receives the shared key and checks the report
    let k = adec(cypher,skV) in
       event Test();
    if  cypher = check_rep(signed,<'loc',pk(skV)>) then
       (event Voutput(aenc(k,pk(skV)),signed);
	   event SessionV(pk(skV),k)

        )



process:
( (!r) || (!v))

/* First some auxilliary lemmas, for sanity or to help in other proofs */


lemma can_run_p: //for sanity
 	exists-trace
	"Ex #t h1 h2 .Poutput(h1,h2)@t"


lemma can_run_v: //for sanity
 	exists-trace
	"Ex #t h1 h2 .Voutput(h1,h2)@t"

 lemma sanity1: //make sure that a valid protocol run exists
 exists-trace
     "Ex pka  k #t1 . SessionP(pka,k)@t1"

 lemma sanity2:
 exists-trace
      "Ex pka  k #t1 . SessionV(pka,k)@t1"


 lemma sanity3[reuse]:
      "All pka k #t1 . SessionV(pka,k)@t1 ==> Ex #t2. SessionP(pka,k)@t2 & t2<t1"

lemma secrecy[reuse]:
        "not (
                Ex pka k #t1 #t2 .
                 SessionV(pka,k)@t1
                & KU(k)@t2

        )"



end
