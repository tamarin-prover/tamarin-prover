/*
 * Protocol: SSH, with generic agent forwarding, but the agent refuses to sign over some depth.

   Proverif : everything in a few minutes, depending on the depth of nesting.
     Depth 1 - 7 secs
     Depth 2 - 20 secs
     Depth 3 - 1 minute
     Depth 4 - 2 minutes 24
     Depth 5 - 6 minutes 10
   Tamarin : Not working, over  a thousand partial deconstruction.


*/

theory SSH

begin

builtins: dest-pairing, diffie-hellman, dest-symmetric-encryption, dest-signing

functions: hash/1, kdfPtoS/1, kdfStoP/1, nest/1, ishash/1 [destructor], issign/2 [destructor], isnest/1 [destructor]


equations: ishash(hash(x))=true, issign(sign(m,sk),pk(sk))=true, isnest(nest(x))=true

let P(pkS,~skP,pkP) =
    new ~a;
    event Share(~a);
    let A='g'^~a in
    event Honnest(A);
    out(A);
    in(<sig,opks,B>);
    if pkS=opks then
        (
	let h=hash(<pkS,A,B>) in
	let k=B^~a in
	if verify(sig,<'server_sign',h>,pkS)=true then
	   (
	   event AcceptP(A,B,pkS,pkP,'source');
	   event KeyP(k);
	   let kPS=kdfPtoS(<k,h>) in
	   let kSP=kdfStoP(<k,h>) in
	   out(senc(<'user_auth',pkP>,kPS));
	   in(userauth_answer);
	   if sdec(userauth_answer,kSP)='userauth_pk_ok' then
	        (
		let payload = <'source',h> in
		let sig2 = sign(payload,~skP) in
	   	event AcceptP2(A,B,pkS,pkP, 'source');
		out(senc(<'user_answer', 'source', sig2 >,kPS)) ;


                !(
		in(signreq);
		let <lvl,ms,'sign_req'> = sdec(signreq,kSP) in
		if lvl = nest('source') then
                  out(senc(<sign(<lvl,ms>,~skP),lvl,'sign_ans'>,kPS))
		else if lvl = nest(nest('source')) then
                  out(senc(<sign(<lvl,ms>,~skP),lvl,'sign_ans'>,kPS))
		else if lvl = nest(nest(nest('source'))) then
                  out(senc(<sign(<lvl,ms>,~skP),lvl,'sign_ans'>,kPS))
		else if lvl = nest(nest(nest(nest('source')))) then
                  out(senc(<sign(<lvl,ms>,~skP),lvl,'sign_ans'>,kPS))
		else if lvl = nest(nest(nest(nest(nest('source'))))) then
                  out(senc(<sign(<lvl,ms>,~skP),lvl,'sign_ans'>,kPS))


                // To what depth can we go ?

	           )
		    )
	    )
	 )


let remoteP(pkS,~remote:channel) =
    in(~remote,<pkP,~b2,A2>);
    let nestlvl = nest('source') in
    new ~aR;
    event Share(~aR);
    let A='g'^~aR in
    event Honnest(A);
    out(A);
    in(<sig,opks,B>);
    if pkS=opks then
        (
	let h=hash(<pkS,A,B>) in
	let k=B^~aR in
	if verify(sig,<'server_sign',h>,pkS)=true then
	   (
	   event AcceptP(A,B,pkS,pkP,nestlvl);
	   event KeyP(k);
	   let kPS=kdfPtoS(<k,h>) in
	   let kSP=kdfStoP(<k,h>) in
	   out(senc(<'user_auth',pkP>,kPS));
	   in(userauth_answer);
	   if sdec(userauth_answer,kSP)='userauth_pk_ok' then
	        (


		let B2='g'^~b2 in
                let h2=hash(<pkS,A2,B2>) in
                let k2=A2^~b2 in
                let kPS2=kdfPtoS(<k2,h2>) in
                let kSP2=kdfStoP(<k2,h2>) in

                out(senc(<nestlvl,h,'sign_req'>,kSP2));

                in(signans);
		let <sig2,lvlf,'sign_ans'> = sdec(signans,kPS2) in
     	        if verify(sig2,<lvlf,h>,pkP)=true then
		event AcceptP2(A,B,pkS,pkP,lvlf);

		out(senc(<'user_answer', lvlf, sig2>,kPS));

                !(
		in(signreq);
		let <lvl,ms,'sign_req'> = sdec(signreq,kSP) in
                out(senc(<nest(lvl),ms,'sign_req'>,kSP2));
		in(signans2);
		let <sig3,lvl,'sign_ans'> = sdec(signans2,kPS2) in
                // let <lvlf3,dump3>= getMess(sig3) in
//     	        if issign(sig3,pkP)=true then
//		if isnest(lvl) = true then
		event Test(sig3);
		out(senc( <sig3,lvl,'sign_ans'>,kPS))

		)
		)
	    )
	 )


let S(~skS,pkS,pkP,~remote:channel) =
    in(A);
    new ~b;
    event Share(~b);
    let B='g'^~b in
    let h=hash(<pkS,A,B>) in
    let k=A^~b in
    event AcceptS(A,B,pkS,pkP);
    let sig=sign(<'server_sign',h>,~skS) in
    out(<sig,pkS,B>);
    let kPS=kdfPtoS(<k,h>) in
    let kSP=kdfStoP(<k,h>) in
    in(userauth);
    let <messa,messpk>=sdec(userauth,kPS) in
    if messa='user_auth' then
       (
       if messpk=pkP then
       	  (

	  out(senc('userauth_pk_ok',kSP));
	  in(signans);

/*			out(senc(<'user_answer',<<'source',h>,sign(<'source',h>,~skP)>>,kPS)) ; */
	  let <'user_answer',nestlvl,sig2>=sdec(signans,kPS) in
	  event AcceptS2TT(A,B,pkS,pkP,sig2,h);

	  if verify(sig2,<nestlvl,h>,pkP)=true then
	      (
	      event AcceptS2(A,B,pkS,pkP,nestlvl);
	      event KeyS2(k);

	          out(~remote,<pkP,~b,A>)
	      )

	  )
    )

process:
new ~remote:channel;
  !(new ~skS;
                 out(pk(~skS));
                 !(new ~skP;
                  out(pk(~skP));
                  !( P(pk(~skS),~skP,pk(~skP)) ||
		     S(~skS,pk(~skS),pk(~skP),~remote) ||
		     remoteP(pk(~skS),~remote)
                     ))
		     )


// lemma unique_AcceptP[reuse]: // unicity of event
//  "All t a b skS skP #i #j. AcceptP(a,b,skS,skP,t)@i & AcceptP(a,b,skS,skP,t)@j ==> #i =#j"

// lemma unique_AcceptS2[reuse]: //unicity of event
//  "All a b skS skP t #i #j. AcceptS2(a,b,skS,skP,t)@i & AcceptS2(a,b,skS,skP,t)@j ==> #i =#j"

// lemma unique_AcceptP2[reuse]: //unicity of event
//  "All a b skS skP t #i #j. AcceptP2(a,b,skS,skP,t)@i & AcceptP2(a,b,skS,skP,t)@j ==> #i =#j"


// Proved in 2m38 up to this point

lemma secretShares[reuse]: //secrecy of the shares
  "(not (Ex k #i #j. ( Share(k)@i & KU(k)@j ) ))"


lemma injPS[reuse]: // if P accepts, some S also accepted in the first step (but no authentication of P at this stage)
 "All a b skS skP t #i. AcceptP(a,b,skS,skP,t)@i ==>
    (Ex skP2 #j. #j<#i & AcceptS(a,b,skS,skP2)@j)"


lemma injSP[reuse,use_induction]: // injectivity of final acceptance
 "All a b skS skP t #i. AcceptS2(a,b,skS,skP,t)@i ==>
    (Ex #j. j<i & (AcceptP2(a,b,skS,skP,t)@j))
"
lemma secretS[reuse]: //secrecy of the key
  "(not (Ex k #i #j. (KeyS2(k)@i & KU(k)@j)))"



// lemma reach:
//   exists-trace
//   "Ex  a b skS skP #i #j. AcceptS2(a,b,skS,skP,'source')@i & Honnest(a)@j "

// lemma reach2:
//   "Ex a b skS skP #i #j. AcceptS2(a,b,skS,skP,nest('source'))@i & Honnest(a)@j"

// lemma reach3:
//   exists-trace
//   "Ex  a b skS skP #i #j. AcceptS2(a,b,skS,skP,nest(nest('source')))@i & Honnest(a)@j"


end
