/*
 * Protocol: SSH, with generic agent forwarding


   WIP

   Proverif : everything in ?

   Tamarin : everything in ?
*/

theory temp

begin

builtins: diffie-hellman, symmetric-encryption, signing

functions: hash/1, kdfPtoS(bitstring):skey, kdfStoP(bitstring):skey, nest/1, ishash/1 [destructor], getMess/1 [destructor]

equations: ishash(hash(x))=true, getMess(sign(m,sk))=m


let P =
    in(~secretchannelP,<pkS,~skP:skey,pkP>);
    new ~a;
    let A='g'^~a in
    event Honnest(A);
    out(A);
    in(<sig,opks,B>);
    if pkS=opks then
        (
	let h=hash(<pkS,A,B>) in
	let k=B^~a in
	if verify(sig,<'server_sign',h>,pkS)=true then
	   (
	   event AcceptP(A,B,pkS,pkP,'source');
	   event KeyP(k);
	   let kPS:skey=kdfPtoS(<k,h>) in
	   let kSP:skey=kdfStoP(<k,h>) in
	   out(senc(<'user_auth',pkP>,kPS));
	   in(userauth_answer);
	   if sdec(userauth_answer,kSP)='userauth_pk_ok' then
	        (
		let sig2 = sign(h,~skP) in
	   	event AcceptP2(A,B,pkS,pkP);
		out(senc(<'user_answer', sig2 >,kPS)) ;


                !(
		in(signreq);
		let <ms,'sign_req'> = sdec(signreq,kSP) in
//		if ishash(ms)=true then
                   out(senc(<sign(ms,~skP),'sign_ans'>,kPS))

	           )
		    )
	    )
	 )


let remoteP =
    in(~secretchannelremoteP,<pkS,pkP,~b2,A2>);
    let nestlvl = nest('source') in
    new ~aR;
    let A='g'^~aR in
    event Honnest(A);
    out(A);
    in(<sig,opks,B>);
    if pkS=opks then
        (
	let h=hash(<pkS,A,B>) in
	let k=B^~aR in
	if verify(sig,<'server_sign',h>,pkS)=true then
	   (
	   event AcceptP(A,B,pkS,pkP,nestlvl);
	   event KeyP(k);
	   let kPS:skey=kdfPtoS(<k,h>) in
	   let kSP:skey=kdfStoP(<k,h>) in
	   out(senc(<'user_auth',pkP>,kPS));
	   in(userauth_answer);
	   if sdec(userauth_answer,kSP)='userauth_pk_ok' then
	        (


		let B2='g'^~b2 in
                let h2=hash(<pkS,A2,B2>) in
                let k2=A2^~b2 in
                let kPS2:skey=kdfPtoS(<k2,h2>) in
                let kSP2:skey=kdfStoP(<k2,h2>) in

                out(senc(<h,'sign_req'>,kSP2));

                in(signans);
		let <sig2,'sign_ans'> = sdec(signans,kPS2) in
	   	event AcceptP2(A,B,pkS,pkP);

		out(senc(<'user_answer', sig2>,kPS));

                !(
		in(signreq);
		let <ms,'sign_req'> = sdec(signreq,kSP) in
                out(senc(<ms,'sign_req'>,kSP2));
		in(signans2);
		let <sig3,'sign_ans'> = sdec(signans,kPS2) in
		event Test(sig3);
		out(senc( <sig3,'sign_ans'>,kPS))

		)
		)
	    )
	 )


let S =
    in(~secretchannelS,<~skS:skey,pkS,pkP>);
    in(A);
    new ~b;
    let B='g'^~b in
    let h=hash(<pkS,A,B>) in
    let k=A^~b in
    event AcceptS(A,B,pkS,pkP);
    let sig=sign(<'server_sign',h>,~skS) in
    out(<sig,pkS,B>);
    let kPS:skey=kdfPtoS(<k,h>) in
    let kSP:skey=kdfStoP(<k,h>) in
    in(userauth);
    let <messa,messpk>=sdec(userauth,kPS) in
    if messa='user_auth' then
       (
       if messpk=pkP then
       	  (

	  out(senc('userauth_pk_ok',kSP));
	  in(signans);

/*			out(senc(<'user_answer',<<'source',h>,sign(<'source',h>,~skP)>>,kPS)) ; */
	  let <'user_answer',sig2>=sdec(signans,kPS) in
	  event AcceptS2TT(A,B,pkS,pkP,sig2,h);

	  if verify(sig2,h,pkP)=true then
	      (
	      event AcceptS2(A,B,pkS,pkP);
	      event KeyS2(k);

	          out(~secretchannelremoteP,<pkS,pkP,~b,A>)
	      )

	  )
    )

process:
new ~secretchannelP:channel; new ~secretchannelS:channel; new ~secretchannelremoteP:channel;
 !(remoteP) ||
!(P) || !(S) || !(new ~skS:skey;
                 out(pk(~skS));
                 !(new ~skP:skey;
                  out(pk(~skP));
                  !( out(~secretchannelP,<pk(~skS),~skP,pk(~skP)>) ||
		     out(~secretchannelS,<~skS,pk(~skS),pk(~skP)>)
                     ))
		     )

/*
export queries:
"
nounif x_2:skey, A2,b2:bitstring; attacker(hash((pk( *x_2),(A2,exp(g,*b2))))).



nounif sk,x_2:skey,lvlf,dump,sign_ans,aR_8,b2_1:bitstring; attacker(senc((sign(( *lvlf,*dump),*sk),sign_ans),kdfPtoS((exp(exp(g,aR_8),*b2_1),hash((pk( *x_2),(exp(g,aR_8),exp(g,*b2_1)))))))).
nounif sk,x_2:skey,lvlf,dump,sign_ans,aR_8,b:bitstring; attacker(senc((sign(( *lvlf,*dump),*sk),sign_ans),kdfPtoS((exp(exp(g,*b),aR_8),hash((pk( *x_2),(exp(g,aR_8),exp(g,*b)))))))).
nounif sk,x_2:skey,lvlf,dump,sign_ans,A2,a,b:bitstring; attacker(senc((sign(( *lvlf,*dump),*sk),sign_ans),kdfPtoS((exp(exp(g,*b),a),hash((pk( *x_2),(exp(g,a),exp(g,*b)))))))).
nounif sk,x_2:skey,lvlf,dump,sign_ans,A2,b2:bitstring; attacker(senc((sign(( lvlf,*dump),*sk),sign_ans),kdfPtoS((exp(A2,*b2),hash((pk( *x_2),(A2,exp(g,*b2)))))))).
nounif sk,x_2:skey,lvlf,dump,sign_ans,A2,b2:bitstring; attacker(senc((sign(( *lvlf,*dump),*sk),sign_ans),kdfPtoS((exp(A2,*b2),hash((pk( *x_2),(A2,exp(g,*b2)))))))).
"
*/
/*

nounif attacker(hash((pk(skP_68),(exp(g,a),exp(g,*b))))).
nounif attacker(hash((pk(skS_67),(exp(g,a),exp(g,*b))))).
nounif attacker(senc((sign(( lvlf,*dump),*sk),sign_ans),kdfPtoS((exp(exp(g,b),aR_8),hash((pk( *x_2),(exp(g,aR_8),exp(g,b)))))))).


"
*/





lemma reach[reuse]: //secrecy of the key
  "(not (Ex  a b skS skP #i #j. AcceptS2(a,b,skS,skP)@i & Honnest(a)@j  ))"





lemma secretP[reuse]: //secrecy of the key
  "(not (Ex k #i #j. ( KeyP(k)@i & KU(k)@j ) ))"
/*
lemma injPS[reuse]: // if P accepts, some S also accepted in the first step (but no authentication of P at this stage)
 "All a b skS skP t #i. AcceptP(a,b,skS,skP,t)@i ==>
    (Ex skP2 #j. #j<#i & AcceptS(a,b,skS,skP2)@j)"

lemma unique_AcceptP[reuse]: // unicity of event
 "All t a b skS skP #i #j. AcceptP(a,b,skS,skP,t)@i & AcceptP(a,b,skS,skP,t)@j ==> #i =#j"

lemma unique_AcceptS2[reuse]: //unicity of event
 "All a b skS skP t #i #j. AcceptS2(a,b,skS,skP,t)@i & AcceptS2(a,b,skS,skP,t)@j ==> #i =#j"

lemma unique_AcceptP2[reuse]: //unicity of event
 "All a b skS skP t #i #j. AcceptP2(a,b,skS,skP,t)@i & AcceptP2(a,b,skS,skP,t)@j ==> #i =#j"

lemma injSP[reuse,use_induction]: // injectivity of final acceptance
 "All a b skS skP t #i. AcceptS2(a,b,skS,skP,t)@i ==>
    (Ex #j. j<i & (AcceptP2(a,b,skS,skP,t)@j))
"
lemma secretS[reuse]: //secrecy of the key
  "(not (Ex k #i #j. (KeyS2(k)@i & KU(k)@j)))"
*/
end
