/*
 * Protocol:    Centralised monitor protocol - Simple
 * Modeler:   Robert KÃ¼nnemann, Ilkan Esiyok
 * Date:  
 * Source:  
 * Status:  
 * Note:  execute with --heuristic=p 
 * */

theory CentralisedMonitor_Simple
begin

/* builtins: signing */
functions: 
    pk/1,sk/1[private],
    /* aenc/2, adec/2, */
    sign/2, verify/3,
    true/0,
    NormalAct/0, UnusualAct/0

equations: 
    verify(sign(m, sk(i)),m, pk(sk(i))) = true

let A = in(a);
     if a = NormalAct() then
        out(<<'Do',a>,sign(<'Do',a>,sk('A'))>)
let C = 
    let m1 = <'Do',a>
    in
  ( in(<m1,m1sign>); 
     if verify(m1sign, m1, pk(sk('A'))) = true() then
       event Control('0','1'); event LogA(a); event Execute(a)
       )
// The trusted party can only run once during each run of the protocol
let Proto = out(pk(sk('A'))); ! A || C

// general form for accountabilty processes
Proto
|| !( in('c',<'corrupt',$x>); 
      event Corrupted($x);
      out('c',sk($x))
      /* (  !(in('r',<$x,sid,m>);0) ) */
    )

lemma sanity_logA_not_misbehaving:
    exists-trace
    "Ex a #i #j. (a = NormalAct()) & LogA(a)@i & Execute(a)@j"

verdictfunction v1:
    "Ex a #i #j. Execute(a)@i & LogA(a)@j &  not(a=NormalAct())" -> <'A'>,
    otherwise -> empty 

lemma acc:
    v1 accounts [coarse] 
    for "All a #i.  Execute(a)@i ==>  a=NormalAct()" 
    for parties <'A'>

end
