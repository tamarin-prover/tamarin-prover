/*
 * Protocol:    Accountable Algorithms protocol
 * Modeler: 	Robert KÃ¼nnemann, Hizbullah Abdul Aziz Jabbar
 * Date: 	Nov 2017
 * Source:	Kroll's Ph.D. thesis, modified according to "Accountability in protocols"
 * Status: 	abandoned
 * Notes: Modelling that uses secret channels for explicit communication with
 * a party that is both the public ledger and the judge. Pre-computation is
 * pretty slow, and the model a bit awkward, so it was abandoned in favour of
 * AccountableAlgorithmsStore.sapic.
 */
theory AccountableAlgorithmsSecret
begin

builtins: signing

functions: 
  extract/1, sk/1[private],
  ZK/7, verZK/1, Pub/1, f/2,
  commit/2, open/2,
  eq/2

equations: 
  Pub(ZK(<commit(x,rx),commit(y,ry),commit(f(x,y),rz)>,x,y,f(x,y),rx,ry,rz)) = <commit(x,rx),commit(y,ry),commit(f(x,y),rz)>,
  verZK(ZK(<commit(x,rx),commit(y,ry),commit(f(x,y),rz)>,x,y,f(x,y),rx,ry,rz)) = true,
  open(commit(m,r),r)=m,
  extract(sign(x,y)) = x,
  eq(x,x)=true

predicates:
  and3(x,y,z) <=> (x=true() & y=true() & z=true())

let S =
(
  let res = <z,rz,rx> 
  in 
  in (c_SL,<'J','S','Initialize',Cy>); 
  new x; 
  out (c_AS,<'S','A','Val',x,sign(x,sk('S'))>);
  in (c_AS,<'A','S','Res',<z,rz,rx>,sig_res>); 
  in (c_SL,<'J','S','Log',sig_x,<Cx,Cz,zkp>>);
  if verify(sig_res,res,pk(sk('A'))) = true() then
    if Cx = commit(x,rx) then
      if Cz = commit(z,rz) then
        if <Cx,Cy,Cz> = Pub(zkp) then 
          //out (<'S','J','Accept',x,z,sig_res>);
          event Accept(<x,z,sig_res>)
)

let A =
(
  let z   = f(x,y) in
  let Cx  = commit(x,rx) in
  let Cy  = commit(y,ry) in
  let Cz  = commit(z,rz) in
  let zkp   = ZK(<Cx,Cy,Cz>,x,y,z,rx,ry,rz) in
  let log = <Cx,Cz,zkp> in
  let res = <z,rz,rx> in
  let sig_res = sign(res,sk('A')) in

  new y; new ry; 

  out (c_AL,<'A','J','Initialize',Cy>); 
  event Initialize(Cy);

  in (c_AS,<'S','A','Val', x, sig_x>);
  if verify(sig_x,x,pk(sk('S'))) = true() then
    (
      new rx; new rz;
      out (c_AS,<'A','S','Res',res, sig_res>);  // send result to S
      out (c_AL,<'A','J','Res',<zkp, rz, rx>, sig_res>);  // send result to J
      out (c_AL,<'A','J','Log',sig_x,log>);    // send log to J
      event Final()             
    )
)

let J =
(
  in (c_AL,<'A','J','Initialize',Cy>);
  out (c_SL,<'J','S','Initialize',Cy>);
  in (c_AL,<'A','J','Res',<zkp,rz,rx>,sig_res>);
  in (c_AL,<'A','J','Log',sig_x,<Cx,Cz,zkp>>);
  out (c_SL,<'J','S','Log',sig_x,<Cx,Cz,zkp>>);

  if and3(verZK(zkp),eq(<Cx,Cy,Cz>,Pub(zkp)),verify(sig_x,open(Cx,rx),pk(sk('S')))) then 
      event HonestA();
      ( if verify(sig_res,<open(Cz,rz),rz,rx>,pk(sk('A')))=true() 
       then event HonestS()
       else event NotHonestS())
  else
      event NotHonestA();
      ( if verify(sig_res,<open(Cz,rz),rz,rx>,pk(sk('A')))=true() 
       then event HonestS()
       else event NotHonestS())
)


new c_AL; new c_SL; new c_AS;
( 
A 
|| S 
|| J 
|| !(in ('c',<'corrupt',$x>); event Corrupted($x); out ('c',sk($x))))

lemma sanity_exists_accepted:
  exists-trace
    "Ex #i a. Accept(a)@i"

lemma sanity_exists_final:
  exists-trace
    "Ex #j. Final()@j"


lemma sanity:
  exists-trace
  "
    ( Ex x z r #i #j #k y ry. Accept(<x,z,r>)@#i 
      & Initialize(commit(y,ry))@#j & Final()@#k 
      & z = f(x,y)
    )
  "

verdictfunction v: 
  "Ex #i #j. NotHonestS()@#i & NotHonestA()@#j"
  -> <'A','S'>,

  "Ex #i #j. NotHonestA()@#i & HonestS()@#j"
  -> <'A'>,

  "Ex #i #j . HonestA()@#i & NotHonestS()@#j "
  -> <'S'>,

  otherwise -> <>

lemma acc: 
  v accounts  [cases]
  for "
    ( All x z r #i. Accept(<x,z,r>)@#i
      ==>
      ( Ex #j #k y ry. Initialize(commit(y,ry))@#j & Final()@#k 
        & #j < #i & #i < #k
        & z = f(x,y)
      )
    )
      "
  for parties <'A','S'> 

end
