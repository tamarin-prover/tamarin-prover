/*
 * Protocol:    Certificate Transparency
 * Modeler:   Robert KÃ¼nnemann
 * Date:  Jun 2018
 * Source:  Based on Alessandro Bruni, Rosario Giustolisi(B), and Carsten
 * Schuermann: Automated Analysis of Accountability 
 * Status:  working
 * Note:  execute with --heuristic=p 
 *        extended: 
 *              corrruption mechanism modelled properly: corrupted LA can chose who to provide which inconsistent view.
 * */

theory CertificateTransparencyExt
begin

/* builtins: signing */
functions: 
    pk/1,
    skca/1[private], 
    /* aenc/2, adec/2, */
    sign/2, verify/3,
    read/1,
    true/0

equations: 
    /* adec(aenc(m,pk(i)),sk(i))=m, */
    // only accept signatures from corresponding public keys
    verify(sign(sk,m ),m, pk(sk)) = true,
    read(sign(sk,m))=m

let CA = /* CA */
    let sk =  skca(id) in
    out(pk(sk));
    !( 
        in(<S,id>); //Request to register S at CA
        new sk_S;
        event HonestRegister(S,id,pk(sk_S));
        insert <'proofOfID',S,pk(sk_S)>,'yes'; // Dishonest CAs cannot register proofs, because they don't have them.
        out(pk(sk_S));
        out(sign(sk,<pk(sk_S),S>))
    )

let LogCert = 
    in(sign(skca('CA'),<pk,S>));
    !(
        lock 'log';
        event HonestLog(pk);
        insert <'log','LA',S,pk,'c1'>,'yes';
        insert <'log','LA',S,pk,'s1'>,'yes';
        insert <'log','LA',S,pk,'i'>,'yes';
        unlock 'log'
    )
        

let TestCA = 
    lock 'testCA';
    in(sign(skca('CA'),<pk,S>));
    lookup <'proofOfID',S,pk> as ignored in 
            event HonestCA();
            event TestCA(S,pk);
            unlock 'testCA'
    else
        event DishonestCA();
        event TestCA(S,pk);
        unlock 'testCA'


let TestLA =
    let u1='c1' in
    let u2='s1' in /* This is the test that the AIFom file compiles to, modulo symmetry */
    lock 'log';
    in(<u1,u2,S,pk>);
    lookup <'log','LA',S,pk,u1> as x1 in
    (
        lookup <'log','LA',S,pk,u2> as x2 in
            event HonestLA();
            event TestLA(S,pk);
            unlock 'log'
        else
            event DishonestLA();
            event TestLA(S,pk);
            unlock 'log'
    )
    else (
        lookup <'log','LA',S,pk,u2> as x2 in
            event DishonestLA();
            event TestLA(S,pk);
            unlock 'log'
        else
            0 // No statement if S pk is in no view.
    )

let Terminate = lock 'testCA'; lock 'log'; event Terminate()

// The trusted party can only run once during each run of the protocol
let Proto = 
    ( let id = 'CA' in CA)
    /* || TODO try out */
    /* (! new id; CA) */
    || LogCert || TestCA || TestLA || Terminate

// general form for accountabilty processes
Proto
|| !( in('c',<'CAcorrupt',$id>); // corrupt CAs
      event Corrupted($id);
      out('c',skca($id))
    )
    ||
    !(
        in('c',<'LAcorrupt',$id>); // corrupt LA
        event Corrupted('LA');
        !( // can now selectively insert
        in('c',<S,pk,entity>);
        lock 'log';
        insert <'log','LA',S,pk,entity>, 'yes';
        unlock 'log'
        )
    )

/* lemma sanity_logA_not_misbehaving: */
/*     exists-trace */
/*     "Ex a #i #j. (a = NormalAct()) & LogA(a)@i & Execute(a)@j" */


restriction terminate:
    "Ex #t. Terminate()@t"

verdictfunction v1:
    "Ex #i . DishonestCA()@i" -> let verdict1 = <'CA'>,
    otherwise -> empty 

verdictfunction v2:
    "Ex #i . DishonestLA()@i" -> let verdict1 = <'LA'>,
    otherwise -> empty 

verdictfunction v3:
    "(Ex #i . DishonestCA()@i) & not (Ex #i . DishonestLA()@i)" -> let verdict1 = <'CA'>,
    "not(Ex #i . DishonestCA()@i) & (Ex #i . DishonestLA()@i)" -> let verdict2 = <'LA'>,
    "(Ex #i . DishonestCA()@i) & (Ex #i . DishonestLA()@i)" -> <verdict1> | <verdict2>,
    otherwise -> empty 


/* lemma acc_ca: */
/*     v1 accounts [coarse] */ 
/*     for "All S pk #i.  TestCA(S,pk)@i ==> */ 
/*                 Ex #j. HonestRegister(S,'CA',pk)@j */
/*                 " */ 
/*     for parties <'CA','LA'> */

/* lemma acc_la: */
/*     v2 accounts [coarse] */ 
/*     for "All S pk #i.  TestLA(S,pk)@i ==> */ 
/*                 /1* Ex #j. HonestLog(pk)@j *1/ */ 
/*                 (Ex #j. Insert(<'log', 'LA', S, pk, 'c1'>, 'yes')@j & j<i) */
/*                 & */
/*                 (Ex #j. Insert(<'log', 'LA', S, pk, 's1'>, 'yes')@j & j<i) */
/*                 // need this condition, otherwise, non-empty verdict does */
/*                 // not imply violation if honest log entry can be produced */
/*                 // afterwards */
/*                 " */ 
/*     for parties <'CA','LA'> */

// composed statement
//
lemma acc:
    v3 accounts [coarse] //also works for cases.
    for "(All S pk #i.  TestLA(S,pk)@i ==> 
                /* Ex #j. HonestLog(pk)@j */ 
                (Ex #j. Insert(<'log', 'LA', S, pk, 'c1'>, 'yes')@j & j<i)
                &
                (Ex #j. Insert(<'log', 'LA', S, pk, 's1'>, 'yes')@j & j<i)
                )
         &
         ( All S pk #i.  TestCA(S,pk)@i ==> 
                Ex #j. HonestRegister(S,'CA',pk)@j
                )
                " 
    for parties <'CA','LA'>



end
