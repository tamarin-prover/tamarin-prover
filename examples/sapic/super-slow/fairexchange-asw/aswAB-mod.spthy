theory ASWmod
begin

section{* The ASW contract signing protocol *}

/*
 * Protocol:    ASW
 * Date:        Jan 2016
 * Status:      working
 * 
 * ASW protocol with the following modifications:
 *      - The third and fourth message are modified according to [1], in particular:
 *      m3 = sign {<na,h(nb)>}sk($A) 
 *      m4 = sign {<nb,h(na)>}sk($B) 
 *      - The response from the TTP to a resolving responder, in case the initiator
 *        has already requested abortion contains h(nb) within the signature,
 *        so as to uniquely identify the responder's current session, i.e.
 *      	 sign{<'Aborted', a1, h(nb)>}sk(TTPID).
 *        Note that the Abort-Protocol remains otherwise unmodified, in
 *        particular the messages to the initiator.
 *
 * [1] V. Shmatikov, J.C. Mitchell. Analysis of a Fair Exchange Protocol. NDSS 2000. 
 *      
 */

builtins:  hashing

functions:
    pk/1,sk/1[private],
    sign/2, verify/2,extrmsg/1,
    true/0

equations:
    verify(sign(m, sk(i)), pk(i)) = true,
    extrmsg(sign(m,x))=m

builtins: reliable-channel
options: translation-progress

/* Role of Alice */

let A = in ('c',t);
      	new na;
	let m1 = sign {<$A, $B, TTPID, t, h(na)>}sk($A) in 
	let pat_m2 = sign {<h(m1),h(nb)>}sk($B) in
	let m3 = sign {<na,h(nb)>}sk($A) in
	let pat_m4 = sign {<nb,h(na)>}sk($B) in
	let a1 = sign {<'Abort', m1>}sk($A) in
	event StartA($A, m1, na);
      	out('c', m1);
        (
	(
	in('c', pat_m2);
	out('c', m3);
            (
            (
             in('c', pat_m4);
             event ContractA($A,$B,m1,pat_m2,na,nb)
            )
            +
            (
             /* Resolve */
             out('r', <'originator',$A,TTPID,<m1,pat_m2>>);
                     /* simplification: original protocol specification
                      * contained case where originator receives abort token at
                      * this point. 
                      */
                     /* ( */
                     /* in('r',<'originator',sign{<'Aborted', a1>}sk(TTPID)>); */
                     /* event AbortA($A, $TEXT, na) */
                     /* ) */
                     /* + */
                     /*
                      * BUT: as lock is on first message, which is fresh
                      * because of the nonce na, this message should never
                      * arrive. Since if the TTP sends this message after
                      * A sent resolve, A must have had sent an abort, but m1
                      * is fresh. 
                      */
                     (
                     in ('r',<'originator',$A,TTPID,sign{<m1, pat_m2>}sk(TTPID)>);
                     event ContractA($A,$B,m1,pat_m2,na,nb)
                     )
            )
            )
        )
        +
	(
	/* Abort */
	out('r', <'originator',$A,TTPID,a1>);
                 (
		 (
		 in('r',<'originator',$A,TTPID,sign{<'Aborted', a1>}sk(TTPID)>);
		 event AbortA($A,m1,na)
		 )
		 +
		 (
		 in ('r',<'originator',$A,TTPID,sign{<m1, pat_m2>}sk(TTPID)>);
		 event ContractA($A,$B,m1,pat_m2,na,nb)
		 )
                 )
	)
        )

/* Role of Bob */

let B = (
	let pat_m1 = sign {<$A, $B, TTPID, t, h(na)>}sk($A) in 
	let m2 = sign {<h(pat_m1),h(nb)>}sk($B) in
	let pat_m3 = sign {<na,h(nb)>}sk($A) in
	let m4 = sign {<nb,h(na)>}sk($B) in
	let a1 = sign {<'Abort', pat_m1>}sk($A) in
        in ('c', pat_m1 );
      	new nb;
        event StartB($A,$B,pat_m1,m2,na,nb);
        out ('c', m2);
        (
        (
        in ('c', pat_m3);
        event ContractB($A,$B,pat_m1,m2,na,nb); 
        out ('c',m4)
	)
        +
        (
	 /* Resolve */
	 out('r', <'responder',$B,TTPID,<pat_m1,m2>>);
	 	 (
		 in('r',<'responder',$B,TTPID,sign{<'Aborted', a1, h(nb)>}sk(TTPID)>);
                 /* modified -- aborted message contains h(nb) to link 
                  * response to right responder session */
		 event AbortB($A,$B, pat_m1, m2, na, nb)
		 )
		 +
		 (
		 in ('r',<'responder',$B,TTPID,sign{<pat_m1, m2>}sk(TTPID)>);
                 event ContractB($A,$B,pat_m1,m2,na,nb)
		 )
	)
        )
)

let TTP =
  let m1 = sign {<$A, $B, TTPID, xt, h(xna)>}sk($A) in 
  let m2 = sign {<h(m1),h(xnb)>}sk($B) in
  let a1 = sign{<'Abort', m1>}sk($A) in
  ( /*Abort */
  in('r', <'originator',$A,TTPID,a1>);
  lock m1;
  lookup <'F_Resolved',TTPID,m1> as y in
   	out ('r', <'originator',$A,TTPID,sign{<m1, y>}sk(TTPID)>);
        unlock m1
  else  insert <'Aborted',TTPID,m1>, 'Aborted';
  	out('r', <'originator',$A,TTPID,sign{<'Aborted', a1>}sk(TTPID)>);
        unlock m1
  )
  ||
  ( /* Resolve A */
  in('r',<'originator',$A,<m1,m2>>);  
  lock m1;
  lookup <'Aborted',TTPID,m1> as x in
         out('r',<'originator',$A,TTPID,sign{<'Aborted', a1>}sk(TTPID)>);
         /* Could also output nothing in this case, as an honest originator
          * should never send out a resolve after she *herself* requested an abort.
          */
         unlock m1
  else	 insert <'F_Resolved',TTPID,m1>, m2;
	 out ('r',<'originator',$A,TTPID,sign{<m1, m2>}sk(TTPID)>);
         unlock m1
  )
  ||
  ( /* Resolve B */
  in('r',<'responder',$B,TTPID,<m1,m2>>);  
  lock m1;
  lookup <'Aborted',TTPID,m1> as x in
         out('r',<'responder',$B,TTPID,sign{<'Aborted', a1, h(xnb)>}sk(TTPID)>);
         unlock m1
  else	 insert <'F_Resolved',TTPID,m1>, m2;
	 out ('r',<'responder',$B,TTPID,sign{<m1, m2>}sk(TTPID)>);
         unlock m1
  )


let Judge = 
  let m1 = sign {<$A, $B, TTPID, t, h(na)>}sk($A) in 
  let m2 = sign {<h(m1),h(nb)>}sk($B) in
  let pat_m3 = sign {<na,h(nb)>}sk($A) in
  let m4 = sign {<nb,h(na)>}sk($B) in
             (in('c',<m1,m2,pat_m3,m4>); event ContractJudge($A,$B,m1,m2,na,nb))
         ||  (in('c', sign{<m1,m2>}sk(TTPID)); event ContractJudge($A,$B,m1,m2,na,nb))

let TTPID=<'TTP',$TTP> in
!(
in('c',<$A,$B,TTPID>);
 (A || B || TTP || Judge)
)
|| !( in('c',<'corrupt',$x>); 
        event Corrupt($x);
        out('c',sk($x));
        (!(in('r',<'responder',$x,m>);0) || !(in('r',<'originator',$x,m>);0))
   )

/* auto */
lemma sanity_optimistic_AB:
exists-trace
 "Ex #i #j a b m1 m2 na nb. 
    ContractA(a,b,m1,m2,na,nb)@i 
  & ContractB(a,b,m1,m2,na,nb)@j
  & not (Ex #k. Corrupt(a)@k)
  & not (Ex #k. Corrupt(b)@k)
 "

/* /1* manual *1/ */
/* lemma sanity_abort_a_b: */
/*  exists-trace */
/*  "Ex #i #j a b m1 m2 na nb . */
/*  AbortA(a,m1,na)@i & AbortB(a,b,m1,m2,na,nb)@j */
/*  & not (Ex #k. Corrupt(a)@k) */
/*  & not (Ex #k. Corrupt(b)@k) */
/*  " */

/* auto */
lemma timelinessA:
    "All #i a m1 na. StartA(a, m1, na)@i
    	    ==>  ( Ex #j b m2 nb .  ContractA(a, b, m1, m2, na, nb)@j)
             | ( Ex #j .  AbortA(a, m1, na)@j )
             | ( Ex #j. Corrupt(a)@j)
             "

/* auto */
lemma timelinessB:
    "All #i a b m1 m2 na nb. StartB(a, b, m1,m2, na, nb)@i
    	    ==>  ( Ex #j .  ContractB(a, b, m1, m2, na, nb)@j)
             | ( Ex #j .  AbortB(a, b, m1, m2, na, nb)@j )
             | ( Ex #j. Corrupt(b)@j)
             "

/* auto */
lemma partialfairnessA:
    "All #i a m1 na.  AbortA(a, m1, na)@i ==> 
       ((Ex #j. K(na)@j ) ==> (Ex #k. Corrupt(a)@k))
       "

/* auto */
lemma partialfairnessB:
    "All #i a b m1 m2 na nb.  AbortB(a, b, m1, m2, na, nb)@i ==> 
       ((Ex #j. K(nb)@j ) ==> (Ex #k. Corrupt(b)@k))
       "

/* auto */
lemma fullfairnessAattack:
    exists-trace
    "not (All #i #l  a b m1 m2 na nb . ContractJudge(a,b,m1,m2,na,nb)@i & Corrupt(b)@l
        ==> (Ex #j. ContractA(a,b,m1,m2,na,nb)@j) | (Ex #k. Corrupt(a)@k) 
        )
"

/* analyzed: examples/sapic/fairexchange-asw/aswAB-mod.spthy */

/*   sanity_optimistic_AB (exists-trace): verified (198 steps) */
/*   timelinessA (all-traces): verified (293 steps) */
/*   timelinessB (all-traces): verified (9392 steps) */
/*   partialfairnessA (all-traces): verified (339 steps) */
/*   partialfairnessB (all-traces): verified (662 steps) */
/*   fullfairnessAattack (exists-trace): verified (214 steps) */


end
