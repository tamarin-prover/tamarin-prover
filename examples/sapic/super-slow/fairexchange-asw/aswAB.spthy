theory ASW
begin

section{* The ASW contract signing protocol *}

/*
 * Protocol:    ASW
 * Date:        Dec 2015
 * Status:      working
 * 
 * Unmodified variant of the ASW protocol with strict interpretation
 * of the meaning of a contract (see Definition of Judge).
 */

builtins: hashing, reliable-channel
options: translation-progress

functions:
    pk/1,sk/1[private], sign/2, verify/2,extrmsg/1, true/0

equations:
    verify(sign(m, sk(i)), pk(i)) = true,
    extrmsg(sign(m,x))=m

/* Role of Alice */

let A = in ('c',t);
      	new na;
	let m1 = sign {<$A, $B, TTPID, t, h(na)>}sk($A) in 
	let pat_m2 = sign {<h(m1),h(nb)>}sk($B) in
	let a1 = sign {<'Abort', m1>}sk($A) in
        (
	event StartA($A, m1, na);
      	out('c', m1);
	(
	/* Abort */
	out('r', <'originator',$A,TTPID,a1>);
		 (
		 in('r',<'originator',$A,TTPID,sign{<'Aborted', a1>}sk(TTPID)>);
		 event AbortA($A,m1,na)
		 )
		 +
		 (
		 in ('r',<'originator',$A,TTPID,sign{<m1, pat_m2>}sk(TTPID)>);
		 event ContractA($A,$B,m1,pat_m2,na,nb)
		 )
	)
	+
	(
	in('c', pat_m2);
	out('c', na);
	(
	 /* Resolve */
	 out('r', <'originator',$A,TTPID,<m1,pat_m2>>);
                     /* simplification: original protocol specification
                      * contained case where originator receives abort token at
                      * this point. 
                      */
                     /* ( */
                     /* in('r',<'originator',sign{<'Aborted', a1>}sk(TTPID)>); */
                     /* event AbortA($A, $TEXT, na) */
                     /* ) */
                     /* + */
                     /*
                      * BUT: as lock is on first message, which is fresh
                      * because of the nonce na, this message should never
                      * arrive. Since if the TTP sends this message after
                      * A sent resolve, A must have had sent an abort, but m1
                      * is fresh. 
                      */
		 (
		 in ('r',<'originator',$A,TTPID,sign{<m1, pat_m2>}sk(TTPID)>);
		 event ContractA($A,$B,m1,pat_m2,na,nb)
		 )
	)
	+
	(
	 in('c', nb);
         event ContractA($A,$B,m1,pat_m2,na,nb)
	)))

/* Role of Bob */

let B = (
	let pat_m1 = sign {<$A, $B, TTPID, t, h(na)>} sk($A) in 
	let m2 = sign {<h(pat_m1),h(nb)>}sk($B) in
	let a1 = sign {<'Abort', pat_m1>}sk($A) in
        in ('c', pat_m1 );
      	new nb;
        event StartB($A,$B,pat_m1,m2,na,nb);
        out ('c', m2);
        (
        (
	 /* Resolve */
	 out('r', <'responder',$B,TTPID,<pat_m1,m2>>);
	 	 (
		 in('r',<'responder',$B,TTPID,sign{<'Aborted', a1>}sk(TTPID)>);
		 event AbortB($A,$B, pat_m1, m2, na, nb)
		 )
		 +
		 (
		 in ('r',<'responder',$B,TTPID,sign{<pat_m1, m2>}sk(TTPID)>);
                 event ContractB($A,$B,pat_m1,m2,na,nb)
		 )
	)
        +
        (
        in ('c', na);
        event ContractB($A,$B,pat_m1,m2,na,nb); 
        out ('c',nb)
	)
        )
)

let TTP =
  let m1 = sign {<$A, $B, TTPID, xt, h(xna)>}sk($A) in 
  let m2 = sign {<h(m1),h(xnb)>}sk($B) in
  let a1 = sign{<'Abort', m1>}sk($A) in
  ( /*Abort */
  in('r', <'originator',$A,TTPID,a1>);
  lock m1;
  lookup <'F_Resolved',TTPID,m1> as y in
   	out ('r', <'originator',$A,TTPID,sign{<m1, y>}sk(TTPID)>);
        unlock m1
  else  insert <'Aborted',TTPID,m1>, 'Aborted';
  	out('r', <'originator',$A,TTPID,sign{<'Aborted', a1>}sk(TTPID)>);
        unlock m1
  )
  ||
  ( /* Resolve A */
  in('r',<'originator',$A,<m1,m2>>);  
  lock m1;
  lookup <'Aborted',TTPID,m1> as x in
  	 /* if x = 'Aborted' then */ 
         out('r',<'originator',$A,TTPID,sign{<'Aborted', a1>}sk(TTPID)>);
         /* Could also output nothing in this case, as an honest originator
          * should never send out a resolve after she *herself* requested an abort.
          */
         unlock m1
  else	 insert <'F_Resolved',TTPID,m1>, m2;
	 out ('r',<'originator',$A,TTPID,sign{<m1, m2>}sk(TTPID)>);
         unlock m1
  )
  ||
  ( /* Resolve B */
  in('r',<'responder',$B,TTPID,<m1,m2>>);  
  lock m1;
  lookup <'Aborted',TTPID,m1> as x in
  	 /* if x = 'Aborted' then */ 
         out('r',<'responder',$B,TTPID,sign{<'Aborted', a1>}sk(TTPID)>);
         unlock m1
  else	 insert <'F_Resolved',TTPID,m1>, m2;
	 out ('r',<'responder',$B,TTPID,sign{<m1, m2>}sk(TTPID)>);
         unlock m1
  )


let Judge = 
  let m1 = sign {<$A, $B, TTPID, t, h(na)>}sk($A) in 
  let m2 = sign {<h(m1),h(nb)>}sk($B) in
             (in('c',<m1,m2,na,nb>); event ContractJudge($A,$B,m1,m2,na,nb))
         || (in ('c', sign{<m1,m2>}sk(TTPID)); event ContractJudge($A,$B,m1,m2,na,nb))

let TTPID=<'TTP',$TTP> in
!(
in('c',<$A,$B,TTPID>);
 (A || B || TTP || Judge)
)
|| !( in('c',<'corrupt',$x>); 
        event Corrupt($x);
        out('c',sk($x));
        (!(in('r',<'responder',$x,m>);0) || !(in('r',<'originator',$x,m>);0))
   )


lemma sanity_optimistic_A:
exists-trace
 "Ex #i a b m1 m2 na nb. ContractA(a,b,m1,m2,na,nb)@i 
  & not (Ex #j. Corrupt(a)@j)"

lemma sanity_optimistic_B:
exists-trace
 "Ex #i a b m1 m2 na nb. ContractB(a,b,m1,m2,na,nb)@i 
  & not (Ex #j. Corrupt(b)@j)"

/* /1* could derive by hand *1/ */
/* lemma sanity_abort_a_b: */
/*  exists-trace */
/*  "Ex #i #j a b m1 m2 na nb . */
/*  AbortA(a,m1,na)@i & AbortB(a,b,m1,m2,na,nb)@j */
/*  & not (Ex #k. Corrupt(a)@k) */
/*  & not (Ex #k. Corrupt(b)@k) */
/*  " */

/* lemma sanity_resolve_a: */
/*  exists-trace */
/*  "Ex #i xt xna xnb. ResolveA(xt, xna, xnb)@i" */

/* lemma sanity_resolve_b: */
/*  exists-trace */
/*  "Ex #i xt xna xnb. ResolveB(xt, xna, xnb)@i" */

/* auto */
lemma timelinessA:
    "All #i a m1 na. StartA(a, m1, na)@i
    	    ==>  ( Ex #j b m2 nb .  ContractA(a, b, m1, m2, na, nb)@j)
             | ( Ex #j .  AbortA(a, m1, na)@j )
             | ( Ex #j. Corrupt(a)@j)
             "

/* Cannot be shown automatically, as response from TTP does not identify the
 * instance of responder session that receives it.
 * That's why we modify the protocol accordingly. */
/* lemma timelinessB: */
/*     "All #i a b m1 m2 na nb. StartB(a, b, m1,m2, na, nb)@i */
/*     	    ==>  ( Ex #j .  ContractB(a, b, m1, m2, na, nb)@j) */
/*              | ( Ex #j .  AbortB(a, b, m1, m2, na, nb)@j ) */
/*              | ( Ex #j. CorruptResponderChannel()@j) */
/*              " */

/* auto */
lemma partialfairnessA:
    "All #i a m1 na.  AbortA(a, m1, na)@i ==> 
       ((Ex #j. K(na)@j ) ==> (Ex #k. Corrupt(a)@k))
       "

/* auto */
/* warning: takes a very long time, see below */
lemma partialfairnessB:
    "All #i a b m1 m2 na nb.  AbortB(a, b, m1, m2, na, nb)@i ==> 
       ((Ex #j. K(nb)@j ) ==> (Ex #k. Corrupt(b)@k))
       "

/* auto */
lemma honestBfairnessA:
    exists-trace
    " Ex #i a b m1 m2 na nb . 
       ContractB(a,b,m1,m2,na,nb)@i
       & not (Ex #j. ContractA(a,b,m1,m2,na,nb)@j) 
       & not (Ex #k. Corrupt(a)@k) 
       & not (Ex #k. Corrupt(b)@k) 
    "

/* auto */
lemma fullfairnessAattack:
    exists-trace
    "not (All #i #l  a b m1 m2 na nb . ContractJudge(a,b,m1,m2,na,nb)@i & Corrupt(b)@l
        ==> (Ex #j. ContractA(a,b,m1,m2,na,nb)@j) | (Ex #k. Corrupt(a)@k) 
        )"

   /* solved goal nr. 1806 (precomputed): State_( ~prog_ ) ▶₀ #t2.16 */
   /* solved goal nr. 1808 (precomputed): State_( ~prog_ ) ▶₀ #t2.16 */
 /* 5941.70user 4106.05system 19:08.82elapsed 874%CPU (0avgtext+0avgdata 1949508maxresident)k */
 /* 96inputs+12376outputs (0major+533660minor)pagefaults 0swaps */
 /* ==> aswAB.spthy.log <== */
   /* sanity_optimistic_A (exists-trace): verified (90 steps) */
/*   sanity_optimistic_B (exists-trace): verified (65 steps) */
   /* timelinessA (all-traces): verified (494 steps) */
   /* partialfairnessA (all-traces): verified (561 steps) */
   /* partialfairnessB (all-traces): verified (2651 steps) */
   /* honestBfairnessA (exists-trace): verified (200 steps) */
   /* fullfairnessAattack (exists-trace): verified (149 steps) */

end
