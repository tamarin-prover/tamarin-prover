theory BluetoothMeshProvisioning
begin

builtins: diffie-hellman, symmetric-encryption

functions:
    aes_cmac/2,
    null/0, // Constant representing the null bytestring
    smk2/0, smk3/0, smk4/0, nb_one/0, nb_two/0, nb_three/0, id6/0,
    id7/0, // This is called id64 in the specification, but there is a bug in Tamarin with symbols of arity 0 ending with two or more digits.
    // Notation x00 is not understood as a function symbol and Tamarin fails to parse the file. However, x00() is properly understood.
    // However, when extracting a subfile through macro selections, Tamarin removes the parenthesis and again fails to parse the subfile
    s1/1, // Used as a hash function
    k1/3,
    k2/2,
    k3/1,
    k4/1,
    aes_ccm_enc/3, aes_ccm_dec/3, aes_ccm_verify/4, // Encryption, decryption and verification
    net_key/0 [private], // Network Key, unknown of the attacker
    app_key/0 [private], // Application Key, unknown of the attacker
    true_val/0,
    prov_invite/0, prov_capabilities/0, prov_start/0, // Represent setup messages with constants
    prov_complete/0, // Encpty message, which indicates completion of the protocol
    static_oob/0 [private],
    e/3,
    extract_e/1

equations:
    s1(m) = aes_cmac(null, m),
    k1(n, salt, p) = aes_cmac(aes_cmac(salt, n), p),
    k2(n, p) = <aes_cmac(aes_cmac(s1(smk2()), n), <p, nb_one>), aes_cmac(aes_cmac(s1(smk2()), n), <aes_cmac(aes_cmac(s1(smk2()), n), <p, nb_one>), p, nb_two>), aes_cmac(aes_cmac(s1(smk2()), n), <aes_cmac(aes_cmac(s1(smk2()), n), <aes_cmac(aes_cmac(s1(smk2()), n), <p, nb_one>), p, nb_two>), p, nb_three>)>,
    k3(n) = aes_cmac(aes_cmac(s1(smk3()), n), id7),
    k4(n) = aes_cmac(aes_cmac(s1(smk4()), n), id6),
    aes_ccm_dec(k, n, aes_ccm_enc(k, n, m)) = m,
    aes_ccm_enc(k, n, aes_ccm_dec(k, n, m)) = m,
    aes_ccm_verify(aes_ccm_enc(k, n, m), k, n, m) = true_val,
    extract_e(e(t,s,n)) = n // Representation of a public key, allows the extraction of the public component

#ifdef NoMalleableCMAC
#else
functions:
    get_b1/3, // Get the first block of the cmac
    get_b2/3 // Get the second block of the cmac

equations:
    get_b1(aes_cmac(k, <b1, b2>), k, b2) = b1,
    get_b2(aes_cmac(k, <b1, b2>), k, b1) = b2,
    get_b1(cnf, k, get_b2(cnf,dh,b1)) = b1,
    get_b2(cnf, k, get_b1(cnf,dh,b2)) = b2,
    aes_cmac(k, <get_b1(c, k, b2), b2>) = c,
    aes_cmac(k, <b1, get_b2(c, k, b1)>) = c
#endif

#ifdef DevEoOOBno
rule DeviceDoEoOOBno:
    []
    --[
        DeviceWillDoEoOOBno(),
        DeviceOnlyOnceProv()
    ]->
    [
    DeviceOOBKeyExchange(),
    DeviceNoOOBAuth(),
    DeviceStartProvisioning()
    ]
#endif

#ifdef DevEoOOBi
rule DeviceDoEoOOBi:
    []
    --[
        DeviceWillDoEoOOBi(),
        DeviceOnlyOnceProv()
    ]->
    [
    DeviceOOBKeyExchange(),
    DeviceInputOOBAuth(),
    DeviceStartProvisioning()
    ]
#endif

#ifdef DevEoOOBo
rule DeviceDoEoOOBo:
    []
    --[
        DeviceWillDoEoOOBo(),
        DeviceOnlyOnceProv()
    ]->
    [
    DeviceOOBKeyExchange(),
    DeviceOutputOOBAuth(),
    DeviceStartProvisioning()
    ]
#endif

#ifdef DevEoOOBs
rule DeviceDoEoOOBs:
    []
    --[
        DeviceWillDoEoOOBo(),
        DeviceOnlyOnceProv()
    ]->
    [
    DeviceOOBKeyExchange(),
    DeviceStaticOOBAuth(),
    DeviceStartProvisioning()
    ]
#endif

#ifdef DevEiOOBno
rule DeviceDoEiOOBno:
    []
    --[
        DeviceWillDoEiOOBno(),
        DeviceOnlyOnceProv()
    ]->
    [
    DeviceInbandKeyExchange(),
    DeviceNoOOBAuth(),
    DeviceStartProvisioning()
    ]
#endif

#ifdef DevEiOOBi
rule DeviceDoEiOOBi:
    []
    --[
        DeviceWillDoEiOOBi(),
        DeviceOnlyOnceProv()
    ]->
    [
    DeviceInbandKeyExchange(),
    DeviceInputOOBAuth(),
    DeviceStartProvisioning()
    ]
#endif

#ifdef DevEiOOBo
rule DeviceDoEiOOBo:
    []
    --[
        DeviceWillDoEiOOBo(),
        DeviceOnlyOnceProv()
    ]->
    [
    DeviceInbandKeyExchange(),
    DeviceOutputOOBAuth(),
    DeviceStartProvisioning()
    ]
#endif

#ifdef DevEiOOBs
rule DeviceDoEiOOBs:
    []
    --[
        DeviceWillDoEiOOBo(),
        DeviceOnlyOnceProv()
    ]->
    [
    DeviceInbandKeyExchange(),
    DeviceStaticOOBAuth(),
    DeviceStartProvisioning()
    ]
#endif

#ifdef ProvEoOOBno
rule ProvisionerDoEoOOBno:
    []
    --[
        ProvisionerWillDoEoOOBno(),
        ProvisionerOnlyOnceProv()
    ]->
    [
    ProvisionerOOBKeyExchange(),
    ProvisionerNoOOBAuth(),
    ProvisionerStartProvisioning()
    ]
#endif

#ifdef ProvEoOOBi
rule ProvisionerDoEoOOBi:
    []
    --[
        ProvisionerWillDoEoOOBi(),
        ProvisionerOnlyOnceProv()
    ]->
    [
    ProvisionerOOBKeyExchange(),
    ProvisionerInputOOBAuth(),
    ProvisionerStartProvisioning()
    ]
#endif

#ifdef ProvEoOOBo
rule ProvisionerDoEoOOBo:
    []
    --[
        ProvisionerWillDoEoOOBo(),
        ProvisionerOnlyOnceProv()
    ]->
    [
    ProvisionerOOBKeyExchange(),
    ProvisionerOutputOOBAuth(),
    ProvisionerStartProvisioning()
    ]
#endif

#ifdef ProvEoOOBs
rule ProvisionerDoEoOOBs:
    []
    --[
        ProvisionerWillDoEoOOBo(),
        ProvisionerOnlyOnceProv()
    ]->
    [
    ProvisionerOOBKeyExchange(),
    ProvisionerStaticOOBAuth(),
    ProvisionerStartProvisioning()
    ]
#endif

#ifdef ProvEiOOBno
rule ProvisionerDoEiOOBno:
    []
    --[
        ProvisionerWillDoEiOOBno(),
        ProvisionerOnlyOnceProv()
    ]->
    [
    ProvisionerInbandKeyExchange(),
    ProvisionerNoOOBAuth(),
    ProvisionerStartProvisioning()
    ]
#endif

#ifdef ProvEiOOBi
rule ProvisionerDoEiOOBi:
    []
    --[
        ProvisionerWillDoEiOOBi(),
        ProvisionerOnlyOnceProv()
    ]->
    [
    ProvisionerInbandKeyExchange(),
    ProvisionerInputOOBAuth(),
    ProvisionerStartProvisioning()
    ]
#endif

#ifdef ProvEiOOBo
rule ProvisionerDoEiOOBo:
    []
    --[
        ProvisionerWillDoEiOOBo(),
        ProvisionerOnlyOnceProv()
    ]->
    [
    ProvisionerInbandKeyExchange(),
    ProvisionerOutputOOBAuth(),
    ProvisionerStartProvisioning()
    ]
#endif

#ifdef ProvEiOOBs
rule ProvisionerDoEiOOBs:
    []
    --[
        ProvisionerWillDoEiOOBo(),
        ProvisionerOnlyOnceProv()
    ]->
    [
    ProvisionerInbandKeyExchange(),
    ProvisionerStaticOOBAuth(),
    ProvisionerStartProvisioning()
    ]
#endif

/* Setup of the Provisioning protocol
The exchange of messages is the following:
P -> D: ProvisioningInvite
D -> P: ProvisioningCapabilities
P -> D: ProvisioningStart

In Mesh implementations, those messages are used to choose which flavor of the Provisioning
protocol is used, based on type of authentication supported and type of key exchange supported.

Here, those messages are represented as constants.
Because the model is ran on all combinations of key exchanges/authentication, all possible pairs
are already captured.
Hence, the content of those messages cannot lead to a case which is not already studied by
explicitely running the verification of lemmas on all possible pair of interactions, which is
why it's acceptable to represent them as constants.

One element is not perfectly represented in the model; this is the size of the authentication parameter:
Bluetooth Mesh allows to choose authdata being 1..16 bytes long.

The model currently models authdata as a fresh nonce of 16 bytes, hence it is not able to capture potential
brute force of this value if it had low entropy.
*/

rule ProvisionerSendProvInvite:
    [
    ProvisionerStartProvisioning()
    ]
    --[]->
    [
    ProvisionerReadyToStart(),
    Out(prov_invite)
    ]

rule DeviceSendProvCapabilities:
    [
    DeviceStartProvisioning(),
    In(prov_invite)
    ]
    --[]->
    [
    DeviceReadyToStart(),
    Out(prov_capabilities)
    ]

rule ProvisionerSendStart:
    [
    ProvisionerReadyToStart(),
    In(prov_capabilities)
    ]
    --[]->
    [
    ProvisionerReadyECDH(),
    Out(prov_start)
    ]

rule DeviceRecvStart:
    [
    DeviceReadyToStart(),
    In(prov_start)
    ]
    --[]->
    [
    DeviceReadyECDH()
    ]

#ifdef ProvEi
rule ProvisionerInBandKE:
    let pkP = <e('C', DH_neutral, 'g'^~ps),e('C', DH_neutral, 'g'^~ps)>  in
    [
    ProvisionerReadyECDH(),
    ProvisionerInbandKeyExchange(),
    Fr(~ps)
    ]
    --[
        ProvisionerSentPublicKey(~ps, pkP)
    ]->
    [
    ProvisionerSentPublicKey(~ps, pkP),
    Out(pkP)
    ]

rule ProvisionerRecvPubKeyInBandKE:
    [
    ProvisionerSentPublicKey(~ps, pkP),
    In(pkD)
    ]
    --[
        ProvisionerComputeECDH(pkP, pkD, ~ps)
    ]->
    [
    ProvisionerComputeECDH(pkP, pkD, ~ps)
    ]
#endif

#ifdef ProvECDH
rule ProvisionerDeriveNormalDHKey:
   let
       pkDx = e('C', DH_neutral, n)
       pkD = <pkDx, pkDy>
       dhkey = e('C', r, n^~ps) // In Bluetooth, only X is taken
   in
    [
        ProvisionerComputeECDH(pkP, pkD, ~ps),
        In(r)
    ]
    --[
        ValidPt(pkDx, pkDy), Raised('C', DH_neutral, r, ~ps),
        ProvisionerFinishedKeyExchange(pkP, pkD, dhkey)
    ]->
    [
        ProvisionerFinishedKeyExchange(pkP, pkD, dhkey)
    ]
#endif

#ifdef ProvECDHUnpatched
rule ProvisionerDeriveInvalidDHKey:
   let
       pkD = <pkDx, pkDy>
       pkDx = e(otx,osx,orx)
       pkDy = e(oty,osy,ory)
       dhkey = e(tx, rx, nx^~ps) // In Bluetooth, only X is taken
   in
    [
        ProvisionerComputeECDH(pkP, <pkDx, pkDy>, ~ps),
        In(<tx,rx,nx,ty,ry,ny>)
    ]
    --[
        InvalidPt(pkDx, pkDy), Raised(<tx,ty>, <osx,osy>, <rx,ry>, ~ps),
        ProvisionerFinishedKeyExchange(pkP, pkD, dhkey)
    ]->
    [
        ProvisionerFinishedKeyExchange(pkP, pkD, dhkey)
    ]
#endif

#ifdef DevEi
rule DeviceInBandKE:
    let pkD = <e('C', DH_neutral, 'g'^~ds),e('C', DH_neutral, 'g'^~ds)>  in
    [
    DeviceReadyECDH(),
    DeviceInbandKeyExchange(),
    Fr(~ds),
    In(pkP)
    ]
    --[
        DeviceComputeECDH(pkD, pkP, ~ds)
    ]->
    [
    DeviceComputeECDH(pkD, pkP, ~ds),
    Out(pkD)
    ]
#endif

#ifdef DevECDH
rule DeviceDeriveNormalDHKey:
   let
       pkPx = e('C', DH_neutral, n)
       pkP = <pkPx, pkPy>
       dhkey = e('C', r, n^~ds) // In Bluetooth, only X is taken
   in
    [
        DeviceComputeECDH(pkD, pkP, ~ds),
        In(r)
    ]
    --[
        ValidPt(pkPx, pkPy), Raised('C', DH_neutral, r, ~ds),
        DeviceFinishedKeyExchange(pkD, pkP, dhkey)
    ]->
    [
        DeviceFinishedKeyExchange(pkD, pkP, dhkey)
    ]
#endif

#ifdef DevECDHUnpatched
rule DeviceDeriveInvalidDHKey:
   let
       pkP = <pkPx, pkPy>
       pkPx = e(otx,osx,orx)
       pkPy = e(oty,osy,ory)
       dhkey = e(tx, rx, nx^~ss) // In Bluetooth, only X is taken
   in
    [
        ProvisionerComputeECDH(pkD, <pkPx, pkPy>, ~ds),
        In(<tx,rx,nx,ty,ry,ny>)
    ]
    --[
        InvalidPt(pkPx, pkPy), Raised(<tx,ty>, <osx,osy>, <rx,ry>, ~ss),
        ProvisionerFinishedKeyExchange(pkD, pkP, dhkey)
    ]->
    [
        ProvisionerFinishedKeyExchange(pkD, pkP, dhkey)
    ]
#endif

#ifdef ProvEo
rule ProvisionerOOBKeyExchange:
    let pkP = <e('C', DH_neutral, 'g'^~ps),e('C', DH_neutral, 'g'^~ps)>  in
    [
    ProvisionerReadyECDH(),
    ProvisionerOOBKeyExchange(),
    Fr(~ps)
    ]
    --[
        ProvisionerTransmitOOBPublicKey(~ps, pkP)
    ]->
    [
    ProvisionerTransmitOOBPublicKey(~ps, pkP),
    KeyExchangeOOBChannel(pkP)
    ]

rule ProvisionerEndOOBKeyExchange:
    [
    ProvisionerTransmitOOBPublicKey(~ps, pkP),
    In(pkD)
    ]
    --[
        ProvisionerComputeECDH(pkP, pkD, ~ps)
    ]->
    [
    ProvisionerComputeECDH(pkP, pkD, ~ps)
    ]
#endif

#ifdef DevEo
rule DeviceOOBKeyExchange:
    let pkD = <e('C', DH_neutral, 'g'^~ds),e('C', DH_neutral, 'g'^~ds)>  in
    [
    DeviceReadyECDH(),
    DeviceOOBKeyExchange(),
    KeyExchangeOOBChannel(pkP),
    Fr(~ds)
    ]
    --[
        DeviceComputeECDH(pkD, pkP, ~ds)
    ]->
    [
    DeviceComputeECDH(pkD, pkP, ~ds),
    Out(pkD)
    ]
#endif

#ifdef ProvOOBno
rule ProvisionerChooseNoAuth:
    [
    ProvisionerFinishedKeyExchange(pkP, pkD, dh),
    ProvisionerNoOOBAuth()
    ]
    --[]->
    [
    ProvisionerCanStartAuth(pkP, pkD, dh, '0')
    ]
#endif

#ifdef ProvOOBi
rule ProvisionerChooseInputAuth:
    [
    ProvisionerFinishedKeyExchange(pkP, pkD, dh),
    ProvisionerInputOOBAuth(),
    Fr(~auth)
    ]
    --[]->
    [
    ProvisionerOutputAuthData(~auth), // If Input OOB is used, the Provisioner outputs a value, the user inputs it in the device
    ProvisionerWaitingUserInteraction(pkP, pkD, dh),
    LowEntropyAuthValue(~auth)
    ]
#endif

#ifdef ProvOOBo
rule ProvisionerChooseOutputAuth:
    [
    ProvisionerFinishedKeyExchange(pkP, pkD, dh),
    ProvisionerOutputOOBAuth()
    ]
    --[]->
    [
    ProvisionerInputAuthData(), // If Output OOB is used, the Device outputs a value, the user inputs it in the provisioner
    ProvisionerWaitingUserInteraction(pkP, pkD, dh)
    ]
#endif

#ifdef ProvOOBs
rule ProvisionerChooseStaticAuth:
    [
    ProvisionerFinishedKeyExchange(pkP, pkD, dh),
    ProvisionerStaticOOBAuth()
    ]
    --[]->
    [
    ProvisionerStaticAuthData(), // If Static OOB is used, AuthData is exchanged using unspecified means
    ProvisionerWaitingUserInteraction(pkP, pkD, dh)
    ]
#endif

#ifdef DevOOBno
rule DeviceChooseNoAuth:
    [
    DeviceFinishedKeyExchange(pkD, pkP, dh),
    DeviceNoOOBAuth()
    ]
    --[]->
    [
    DeviceCanStartAuth(pkD, pkP, dh, '0')
    ]
#endif

#ifdef DevOOBi
rule DeviceChooseInputAuth:
    [
    DeviceFinishedKeyExchange(pkD, pkP, dh),
    DeviceInputOOBAuth()
    ]
    --[]->
    [
    DeviceInputAuthData(), // If Input OOB is used, the Provisioner outputs a value, the user inputs it in the device
    DeviceWaitingUserInteraction(pkD, pkP, dh)
    ]
#endif

#ifdef DevOOBo
rule DeviceChooseOutputAuth:
    [
    DeviceFinishedKeyExchange(pkD, pkP, dh),
    DeviceOutputOOBAuth(),
    Fr(~auth)
    ]
    --[]->
    [
    DeviceOutputAuthData(~auth), // If Output OOB is used, the Device outputs a value, the user inputs it in the provisioner
    DeviceWaitingUserInteraction(pkD, pkP, dh),
    LowEntropyAuthValue(~auth)
    ]
#endif

#ifdef DevOOBs
rule DeviceChooseStaticAuth:
    [
    DeviceFinishedKeyExchange(pkD, pkP, dh),
    DeviceStaticOOBAuth()
    ]
    --[]->
    [
    DeviceStaticAuthData(), // If Static OOB is used, AuthData is exchanged using unspecified means
    DeviceWaitingUserInteraction(pkD, pkP, dh)
    ]
#endif

rule ProvisionerWaitingUser:
    [
    ProvisionerWaitingUserInteraction(pkP, pkD, dh),
    ProvisionerAuthProceed(auth)
    ]
    --[ ]->
    [
    ProvisionerCanStartAuth(pkP, pkD, dh, auth)
    ]

rule DeviceWaitingUser:
    [
    DeviceWaitingUserInteraction(pkD, pkP, dh),
    DeviceAuthProceed(auth)
    ]
    --[ ]->
    [
    DeviceCanStartAuth(pkD, pkP, dh, auth)
    ]

rule ProvisionerSendConfirm:
    let 
        confirmation_salt = s1(<prov_invite, prov_capabilities, prov_start, pkP, pkD>)
        ck = k1(dh, confirmation_salt, 'prck')
        Cp = aes_cmac(ck, <~Np, auth>)
    in
    [
    ProvisionerCanStartAuth(pkP, pkD, dh, auth),
    Fr(~Np)
    ]
    --[
        ProvisionerSendConfirm(pkP, pkD, dh, ck, ~Np, auth)
    ]->
    [
    ProvisionerSendConfirm(pkP, pkD, dh, ck, ~Np, auth),
    Out(Cp)
    ]

#ifdef PatchProvisioning2
rule DeviceSendConfirm:
    let 
        confirmation_salt = s1(<prov_invite, prov_capabilities, prov_start, pkP, pkD>)
        ck = k1(dh, confirmation_salt, 'prck')
        Cd = aes_cmac(ck, <auth, ~Nd>)
    in
    [
    DeviceCanStartAuth(pkD, pkP, dh, auth),
    Fr(~Nd),
    In(Cp)
    ]
    --[
        DeviceSendConfirm(pkD, pkP, dh, ck, ~Nd, Cp, auth)
    ]->
    [
    DeviceSendConfirm(pkD, pkP, dh, ck, ~Nd, Cp, auth),
    Out(Cd)
    ]

#else
rule DeviceSendConfirm:
    let 
        confirmation_salt = s1(<prov_invite, prov_capabilities, prov_start, pkP, pkD>)
        ck = k1(dh, confirmation_salt, 'prck')
        Cd = aes_cmac(ck, <~Nd, auth>)
    in
    [
    DeviceCanStartAuth(pkD, pkP, dh, auth),
    Fr(~Nd),
    In(Cp)
    ]
    --[
        DeviceSendConfirm(pkD, pkP, dh, ck, ~Nd, Cp, auth)
    ]->
    [
    DeviceSendConfirm(pkD, pkP, dh, ck, ~Nd, Cp, auth),
    Out(Cd)
    ]
#endif

#ifdef PatchProvisioning1
rule ProvisionerSendRandom:
    [
    ProvisionerSendConfirm(pkP, pkD, dh, ck, ~Np, auth),
    In(Cd)
    ]
    --[
        NotEq(aes_cmac(ck, <~Np, auth>), Cd),
        ProvisionerSendRandom(pkP, pkD, dh, ck, ~Np, Cd, auth)
    ]->
    [
    ProvisionerSendRandom(pkP, pkD, dh, ck, ~Np, Cd, auth),
    Out(~Np)
    ]

#else

rule ProvisionerSendRandom:
    [
    ProvisionerSendConfirm(pkP, pkD, dh, ck, ~Np, auth),
    In(Cd)
    ]
    --[
        ProvisionerSendRandom(pkP, pkD, dh, ck, ~Np, Cd, auth)
    ]->
    [
    ProvisionerSendRandom(pkP, pkD, dh, ck, ~Np, Cd, auth),
    Out(~Np)
    ]
#endif
   
rule DeviceSendRandom:
    let computed_Cp = aes_cmac(ck, <Np, auth>) in
    [
    DeviceSendConfirm(pkD, pkP, dh, ck, ~Nd, computed_Cp, auth),
    In(Np)
    ]
    --[
        DeviceSendRandom(pkD, pkP, dh, ck, ~Nd, Np, auth)
    ]->
    [
    DeviceSendRandom(pkD, pkP, dh, ck, ~Nd, Np, auth),
    Out(~Nd)
    ]

#ifdef PatchProvisioning2
rule ProvisionerRecvRandom:
    let
        computed_Cd = aes_cmac(ck, <auth, Nd>)
    in
    [
    ProvisionerSendRandom(pkP, pkD, dh, ck, ~Np, computed_Cd, auth),
    In(Nd)
    ]
    --[
        ProvisionerRecvRandom(pkP, pkD, dh, ck, ~Np, Nd, auth)
    ]->
    [
    ProvisionerRecvRandom(pkP, pkD, dh, ck, ~Np, Nd, auth)
    ]

#else
rule ProvisionerRecvRandom:
    let
        computed_Cd = aes_cmac(ck, <Nd, auth>)
    in
    [
    ProvisionerSendRandom(pkP, pkD, dh, ck, ~Np, computed_Cd, auth),
    In(Nd)
    ]
    --[
        ProvisionerRecvRandom(pkP, pkD, dh, ck, ~Np, Nd, auth)
    ]->
    [
    ProvisionerRecvRandom(pkP, pkD, dh, ck, ~Np, Nd, auth)
    ]
#endif

rule ProvisionerSendNetKey:
    let 
        confirmation_salt = s1(<prov_invite, prov_capabilities, prov_start, pkP, pkD>)
        provisioning_salt = s1(<confirmation_salt, ~Np, Nd>)
        sk = k1(dh, provisioning_salt, 'prsk')
        sn = k1(dh, provisioning_salt, 'prsn')
        dev_key = k1(dh, provisioning_salt, 'prdk')
    in
    [
    ProvisionerRecvRandom(pkP, pkD, dh, ck, ~Np, Nd, auth)
    ]
    --[
        ProvisionerSendNetKey(pkP, pkD, dh, ck, ~Np, Nd, sk, net_key, dev_key)
    ]->
    [
    ProvisionerSendNetKey(pkP, pkD, dh, ck, ~Np, Nd, sk, net_key, dev_key),
    Out(aes_ccm_enc(sk, sn, net_key)) // Represents the ProvisioningData message which contains NetKey
    ]

rule DeviceRecvNetKey:
    let 
        confirmation_salt = s1(<prov_invite, prov_capabilities, prov_start, pkP, pkD>)
        provisioning_salt = s1(<confirmation_salt, Np, ~Nd>)
        sk = k1(dh, provisioning_salt, 'prsk')
        sn = k1(dh, provisioning_salt, 'prsn')
        dev_key = k1(dh, provisioning_salt, 'prdk')
        dec_net_key = aes_ccm_dec(sk, sn, prov_data) // Explicit decryption, to verify the correctness of the model
    in
    [
    DeviceSendRandom(pkD, pkP, dh, ck, ~Nd, Np, auth),
    In(prov_data)
    ]
    --[
        IsTrue(aes_ccm_verify(prov_data, sk, sn, dec_net_key)),
        DeviceRecvNetKey(pkD, pkP, dh, ck, ~Nd, Np, sk, dec_net_key, dev_key),
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, ~Nd, Np, sk, dec_net_key, dev_key)
    ]->
    [
    DeviceRecvNetKey(pkD, pkP, dh, ck, ~Nd, Np, sk, dec_net_key, dev_key),
    DeviceFinishedProvisioning(pkD, pkP, dh, ck, ~Nd, Np, sk, dec_net_key, dev_key),
    Out(prov_complete)
    ]

rule ProvisionerEndProvisioning:
    [
    ProvisionerSendNetKey(pkP, pkD, dh, ck, ~Np, Nd, sk, nk, dev_key),
    In(prov_complete)
    ]
    --[
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, ~Np, Nd, sk, nk, dev_key, app_key)
    ]->
    [
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, ~Np, Nd, sk, nk, dev_key, app_key),
    Out(aes_ccm_enc(dev_key, '0', app_key))
    //Out(senc(app_key, dev_key))
    ]

rule DeviceEndKeyDistribution:
    let dec_app_key = aes_ccm_dec(dev_key, '0', c) in
    //let dec_app_key = sdec(c, dev_key) in
    [
    DeviceRecvNetKey(pkD, pkP, dh, ck, ~Nd, Np, sk, nk, dev_key),
    In(c)
    ]
    --[
        IsTrue(aes_ccm_verify(c, dev_key, '0', dec_app_key)),
        DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, ~Nd, Np, sk, nk, dev_key, dec_app_key)
    ]->
    [
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, ~Nd, Np, sk, nk, dev_key, dec_app_key)
    ]

/* User interaction module */

rule InputOOBAuth:
    [
    ProvisionerOutputAuthData(auth),
    DeviceInputAuthData()
    ]
    --[ ]->
    [
    ProvisionerAuthProceed(auth),
    DeviceAuthProceed(auth)
    ]

rule OutputOOBAuth:
    [
    ProvisionerInputAuthData(),
    DeviceOutputAuthData(auth)
    ]
    --[ ]->
    [
    ProvisionerAuthProceed(auth),
    DeviceAuthProceed(auth)
    ]

rule ProvStaticOOBAuth:
    [
    ProvisionerStaticAuthData()
    ]
    --[ ]->
    [
    ProvisionerAuthProceed(static_oob)
    ]

rule DevStaticOOBAuth:
    [
    DeviceStaticAuthData()
    ]
    --[ ]->
    [
    DeviceAuthProceed(static_oob)
    ]

/* End of user interaction module */

/* Oracle for retrieving short AuthValue */
#ifdef NoLowEntropyAuthValue
#else
rule OracleAuthValue:
    [
    LowEntropyAuthValue(auth),
    In(aes_cmac(ck, <N, auth>)),
    In(N),
    In(ck)
    ]
    --[ AttackerRetrieveAuthValue(ck,N,auth) ]->
    [
    Out(auth)
    ]
#endif

/* End of Oracle */

restriction DeviceOnlyOnceProv:
"All #i #j. DeviceOnlyOnceProv() @i & DeviceOnlyOnceProv() @j ==> #i = #j"


restriction ProvisionerOnlyOnceProv:
"All #i #j. ProvisionerOnlyOnceProv() @i & ProvisionerOnlyOnceProv() @j ==> #i = #j"

restriction IsTrue:
"All t #i. IsTrue(t) @i ==> t = true_val"

restriction NotEq:
"All c #i. (NotEq(c, c) @i) ==> F"

// For ECDH model
restriction DHConsistency:
	"All  t s r1 r2 y #i #j .
	Raised(t,s,r1,y) @ i & Raised(t,s,r2,y) @j
	==> r1 = r2"

restriction DHIdentity:
	"All  t r y #i .
	Raised(t,DH_neutral,r,y) @ i ==> r = DH_neutral"

restriction ValidPt:
  "∀ x y #i.
    (ValidPt(x,y) @ #i) ⇒ (x = y)"

restriction InvalidPt:
  "∀ x #i.
    (InvalidPt(x,x) @ #i) ⇒ F"

/*****************************************/
/* Lemmas about EiOOBno-EiOOBno exchange */
/*****************************************/

#ifdef EiOOBnoEiOOBno
lemma EiOOBno_EiOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBno_EiOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBno_EiOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBno_EiOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EiOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EiOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EiOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EiOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EiOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EiOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*********************************************/
/* End lemmas about EiOOBno-EiOOBno exchange */
/*********************************************/

/****************************************/
/* Lemmas about EiOOBno-EiOOBi exchange */
/****************************************/

#ifdef EiOOBnoEiOOBi
lemma EiOOBno_EiOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBno_EiOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBno_EiOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBno_EiOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EiOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EiOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EiOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EiOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EiOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EiOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EiOOBno-EiOOBi exchange */
/********************************************/

/****************************************/
/* Lemmas about EiOOBno-EiOOBo exchange */
/****************************************/

#ifdef EiOOBnoEiOOBo
lemma EiOOBno_EiOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBno_EiOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBno_EiOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBno_EiOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EiOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EiOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EiOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EiOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EiOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EiOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EiOOBno-EiOOBo exchange */
/********************************************/

/****************************************/
/* Lemmas about EiOOBno-EiOOBs exchange */
/****************************************/

#ifdef EiOOBnoEiOOBs
lemma EiOOBno_EiOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBno_EiOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBno_EiOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBno_EiOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EiOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EiOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EiOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EiOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EiOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EiOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EiOOBno-EiOOBs exchange */
/********************************************/

/****************************************/
/* Lemmas about EiOOBi-EiOOBno exchange */
/****************************************/

#ifdef EiOOBiEiOOBno
lemma EiOOBi_EiOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBi_EiOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBi_EiOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBi_EiOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EiOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EiOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EiOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EiOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EiOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EiOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EiOOBi-EiOOBno exchange */
/********************************************/

/***************************************/
/* Lemmas about EiOOBi-EiOOBi exchange */
/***************************************/

#ifdef EiOOBiEiOOBi
lemma EiOOBi_EiOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBi_EiOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBi_EiOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBi_EiOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EiOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EiOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EiOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EiOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EiOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EiOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBi-EiOOBi exchange */
/*******************************************/

/***************************************/
/* Lemmas about EiOOBi-EiOOBo exchange */
/***************************************/

#ifdef EiOOBiEiOOBo
lemma EiOOBi_EiOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBi_EiOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBi_EiOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBi_EiOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EiOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EiOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EiOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EiOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EiOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EiOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBi-EiOOBo exchange */
/*******************************************/

/***************************************/
/* Lemmas about EiOOBi-EiOOBs exchange */
/***************************************/

#ifdef EiOOBiEiOOBs
lemma EiOOBi_EiOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBi_EiOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBi_EiOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBi_EiOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EiOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EiOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EiOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EiOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EiOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EiOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBi-EiOOBs exchange */
/*******************************************/

/****************************************/
/* Lemmas about EiOOBo-EiOOBno exchange */
/****************************************/

#ifdef EiOOBoEiOOBno
lemma EiOOBo_EiOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBo_EiOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBo_EiOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBo_EiOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EiOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EiOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EiOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EiOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EiOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EiOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EiOOBo-EiOOBno exchange */
/********************************************/

/***************************************/
/* Lemmas about EiOOBo-EiOOBi exchange */
/***************************************/

#ifdef EiOOBoEiOOBi
lemma EiOOBo_EiOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBo_EiOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBo_EiOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBo_EiOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EiOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EiOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EiOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EiOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EiOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EiOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBo-EiOOBi exchange */
/*******************************************/

/***************************************/
/* Lemmas about EiOOBo-EiOOBo exchange */
/***************************************/

#ifdef EiOOBoEiOOBo
lemma EiOOBo_EiOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBo_EiOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBo_EiOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBo_EiOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EiOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EiOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EiOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EiOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EiOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EiOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBo-EiOOBo exchange */
/*******************************************/

/***************************************/
/* Lemmas about EiOOBo-EiOOBs exchange */
/***************************************/

#ifdef EiOOBoEiOOBs
lemma EiOOBo_EiOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBo_EiOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBo_EiOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBo_EiOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EiOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EiOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EiOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EiOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EiOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EiOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBo-EiOOBs exchange */
/*******************************************/

/****************************************/
/* Lemmas about EiOOBs-EiOOBno exchange */
/****************************************/

#ifdef EiOOBsEiOOBno
lemma EiOOBs_EiOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBs_EiOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBs_EiOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBs_EiOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EiOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EiOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EiOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EiOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EiOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EiOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EiOOBs-EiOOBno exchange */
/********************************************/

/***************************************/
/* Lemmas about EiOOBs-EiOOBi exchange */
/***************************************/

#ifdef EiOOBsEiOOBi
lemma EiOOBs_EiOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBs_EiOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBs_EiOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBs_EiOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EiOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EiOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EiOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EiOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EiOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EiOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBs-EiOOBi exchange */
/*******************************************/

/***************************************/
/* Lemmas about EiOOBs-EiOOBo exchange */
/***************************************/

#ifdef EiOOBsEiOOBo
lemma EiOOBs_EiOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBs_EiOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBs_EiOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBs_EiOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EiOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EiOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EiOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EiOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EiOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EiOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBs-EiOOBo exchange */
/*******************************************/

/***************************************/
/* Lemmas about EiOOBs-EiOOBs exchange */
/***************************************/

#ifdef EiOOBsEiOOBs
lemma EiOOBs_EiOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBs_EiOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBs_EiOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBs_EiOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EiOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EiOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EiOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EiOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EiOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EiOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBs-EiOOBs exchange */
/*******************************************/

/*****************************************/
/* Lemmas about EiOOBno-EoOOBno exchange */
/*****************************************/

#ifdef EiOOBnoEoOOBno
lemma EiOOBno_EoOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBno_EoOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBno_EoOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBno_EoOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EoOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EoOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EoOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EoOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EoOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EoOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*********************************************/
/* End lemmas about EiOOBno-EoOOBno exchange */
/*********************************************/

/****************************************/
/* Lemmas about EiOOBno-EoOOBi exchange */
/****************************************/

#ifdef EiOOBnoEoOOBi
lemma EiOOBno_EoOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBno_EoOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBno_EoOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBno_EoOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EoOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EoOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EoOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EoOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EoOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EoOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EiOOBno-EoOOBi exchange */
/********************************************/

/****************************************/
/* Lemmas about EiOOBno-EoOOBo exchange */
/****************************************/

#ifdef EiOOBnoEoOOBo
lemma EiOOBno_EoOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBno_EoOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBno_EoOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBno_EoOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EoOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EoOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EoOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EoOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EoOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EoOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EiOOBno-EoOOBo exchange */
/********************************************/

/****************************************/
/* Lemmas about EiOOBno-EoOOBs exchange */
/****************************************/

#ifdef EiOOBnoEoOOBs
lemma EiOOBno_EoOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBno_EoOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBno_EoOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBno_EoOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EoOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EoOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EoOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBno_EoOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBno_EoOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBno_EoOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EiOOBno-EoOOBs exchange */
/********************************************/

/****************************************/
/* Lemmas about EiOOBi-EoOOBno exchange */
/****************************************/

#ifdef EiOOBiEoOOBno
lemma EiOOBi_EoOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBi_EoOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBi_EoOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBi_EoOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EoOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EoOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EoOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EoOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EoOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EoOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EiOOBi-EoOOBno exchange */
/********************************************/

/***************************************/
/* Lemmas about EiOOBi-EoOOBi exchange */
/***************************************/

#ifdef EiOOBiEoOOBi
lemma EiOOBi_EoOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBi_EoOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBi_EoOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBi_EoOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EoOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EoOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EoOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EoOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EoOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EoOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBi-EoOOBi exchange */
/*******************************************/

/***************************************/
/* Lemmas about EiOOBi-EoOOBo exchange */
/***************************************/

#ifdef EiOOBiEoOOBo
lemma EiOOBi_EoOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBi_EoOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBi_EoOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBi_EoOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EoOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EoOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EoOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EoOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EoOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EoOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBi-EoOOBo exchange */
/*******************************************/

/***************************************/
/* Lemmas about EiOOBi-EoOOBs exchange */
/***************************************/

#ifdef EiOOBiEoOOBs
lemma EiOOBi_EoOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBi_EoOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBi_EoOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBi_EoOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EoOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EoOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EoOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBi_EoOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBi_EoOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBi_EoOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBi-EoOOBs exchange */
/*******************************************/

/****************************************/
/* Lemmas about EiOOBo-EoOOBno exchange */
/****************************************/

#ifdef EiOOBoEoOOBno
lemma EiOOBo_EoOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBo_EoOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBo_EoOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBo_EoOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EoOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EoOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EoOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EoOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EoOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EoOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EiOOBo-EoOOBno exchange */
/********************************************/

/***************************************/
/* Lemmas about EiOOBo-EoOOBi exchange */
/***************************************/

#ifdef EiOOBoEoOOBi
lemma EiOOBo_EoOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBo_EoOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBo_EoOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBo_EoOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EoOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EoOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EoOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EoOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EoOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EoOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBo-EoOOBi exchange */
/*******************************************/

/***************************************/
/* Lemmas about EiOOBo-EoOOBo exchange */
/***************************************/

#ifdef EiOOBoEoOOBo
lemma EiOOBo_EoOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBo_EoOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBo_EoOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBo_EoOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EoOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EoOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EoOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EoOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EoOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EoOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBo-EoOOBo exchange */
/*******************************************/

/***************************************/
/* Lemmas about EiOOBo-EoOOBs exchange */
/***************************************/

#ifdef EiOOBoEoOOBs
lemma EiOOBo_EoOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBo_EoOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBo_EoOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBo_EoOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EoOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EoOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EoOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBo_EoOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBo_EoOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBo_EoOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBo-EoOOBs exchange */
/*******************************************/

/****************************************/
/* Lemmas about EiOOBs-EoOOBno exchange */
/****************************************/

#ifdef EiOOBsEoOOBno
lemma EiOOBs_EoOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBs_EoOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBs_EoOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBs_EoOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EoOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EoOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EoOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EoOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EoOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EoOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EiOOBs-EoOOBno exchange */
/********************************************/

/***************************************/
/* Lemmas about EiOOBs-EoOOBi exchange */
/***************************************/

#ifdef EiOOBsEoOOBi
lemma EiOOBs_EoOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBs_EoOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBs_EoOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBs_EoOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EoOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EoOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EoOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EoOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EoOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EoOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBs-EoOOBi exchange */
/*******************************************/

/***************************************/
/* Lemmas about EiOOBs-EoOOBo exchange */
/***************************************/

#ifdef EiOOBsEoOOBo
lemma EiOOBs_EoOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBs_EoOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBs_EoOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBs_EoOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EoOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EoOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EoOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EoOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EoOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EoOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBs-EoOOBo exchange */
/*******************************************/

/***************************************/
/* Lemmas about EiOOBs-EoOOBs exchange */
/***************************************/

#ifdef EiOOBsEoOOBs
lemma EiOOBs_EoOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EiOOBs_EoOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EiOOBs_EoOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EiOOBs_EoOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EoOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EoOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EoOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EiOOBs_EoOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EiOOBs_EoOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EiOOBs_EoOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EiOOBs-EoOOBs exchange */
/*******************************************/

/*****************************************/
/* Lemmas about EoOOBno-EiOOBno exchange */
/*****************************************/

#ifdef EoOOBnoEiOOBno
lemma EoOOBno_EiOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBno_EiOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBno_EiOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBno_EiOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EiOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EiOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EiOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EiOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EiOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EiOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*********************************************/
/* End lemmas about EoOOBno-EiOOBno exchange */
/*********************************************/

/****************************************/
/* Lemmas about EoOOBno-EiOOBi exchange */
/****************************************/

#ifdef EoOOBnoEiOOBi
lemma EoOOBno_EiOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBno_EiOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBno_EiOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBno_EiOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EiOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EiOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EiOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EiOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EiOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EiOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EoOOBno-EiOOBi exchange */
/********************************************/

/****************************************/
/* Lemmas about EoOOBno-EiOOBo exchange */
/****************************************/

#ifdef EoOOBnoEiOOBo
lemma EoOOBno_EiOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBno_EiOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBno_EiOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBno_EiOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EiOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EiOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EiOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EiOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EiOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EiOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EoOOBno-EiOOBo exchange */
/********************************************/

/****************************************/
/* Lemmas about EoOOBno-EiOOBs exchange */
/****************************************/

#ifdef EoOOBnoEiOOBs
lemma EoOOBno_EiOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBno_EiOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBno_EiOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBno_EiOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EiOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EiOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EiOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EiOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EiOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EiOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EoOOBno-EiOOBs exchange */
/********************************************/

/****************************************/
/* Lemmas about EoOOBi-EiOOBno exchange */
/****************************************/

#ifdef EoOOBiEiOOBno
lemma EoOOBi_EiOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBi_EiOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBi_EiOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBi_EiOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EiOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EiOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EiOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EiOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EiOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EiOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EoOOBi-EiOOBno exchange */
/********************************************/

/***************************************/
/* Lemmas about EoOOBi-EiOOBi exchange */
/***************************************/

#ifdef EoOOBiEiOOBi
lemma EoOOBi_EiOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBi_EiOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBi_EiOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBi_EiOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EiOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EiOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EiOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EiOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EiOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EiOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBi-EiOOBi exchange */
/*******************************************/

/***************************************/
/* Lemmas about EoOOBi-EiOOBo exchange */
/***************************************/

#ifdef EoOOBiEiOOBo
lemma EoOOBi_EiOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBi_EiOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBi_EiOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBi_EiOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EiOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EiOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EiOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EiOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EiOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EiOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBi-EiOOBo exchange */
/*******************************************/

/***************************************/
/* Lemmas about EoOOBi-EiOOBs exchange */
/***************************************/

#ifdef EoOOBiEiOOBs
lemma EoOOBi_EiOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBi_EiOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBi_EiOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBi_EiOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EiOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EiOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EiOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EiOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EiOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EiOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBi-EiOOBs exchange */
/*******************************************/

/****************************************/
/* Lemmas about EoOOBo-EiOOBno exchange */
/****************************************/

#ifdef EoOOBoEiOOBno
lemma EoOOBo_EiOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBo_EiOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBo_EiOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBo_EiOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EiOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EiOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EiOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EiOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EiOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EiOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EoOOBo-EiOOBno exchange */
/********************************************/

/***************************************/
/* Lemmas about EoOOBo-EiOOBi exchange */
/***************************************/

#ifdef EoOOBoEiOOBi
lemma EoOOBo_EiOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBo_EiOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBo_EiOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBo_EiOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EiOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EiOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EiOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EiOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EiOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EiOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBo-EiOOBi exchange */
/*******************************************/

/***************************************/
/* Lemmas about EoOOBo-EiOOBo exchange */
/***************************************/

#ifdef EoOOBoEiOOBo
lemma EoOOBo_EiOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBo_EiOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBo_EiOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBo_EiOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EiOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EiOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EiOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EiOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EiOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EiOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBo-EiOOBo exchange */
/*******************************************/

/***************************************/
/* Lemmas about EoOOBo-EiOOBs exchange */
/***************************************/

#ifdef EoOOBoEiOOBs
lemma EoOOBo_EiOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBo_EiOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBo_EiOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBo_EiOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EiOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EiOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EiOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EiOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EiOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EiOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBo-EiOOBs exchange */
/*******************************************/

/****************************************/
/* Lemmas about EoOOBs-EiOOBno exchange */
/****************************************/

#ifdef EoOOBsEiOOBno
lemma EoOOBs_EiOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBs_EiOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBs_EiOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBs_EiOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EiOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EiOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EiOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EiOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EiOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EiOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EoOOBs-EiOOBno exchange */
/********************************************/

/***************************************/
/* Lemmas about EoOOBs-EiOOBi exchange */
/***************************************/

#ifdef EoOOBsEiOOBi
lemma EoOOBs_EiOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBs_EiOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBs_EiOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBs_EiOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EiOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EiOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EiOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EiOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EiOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EiOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBs-EiOOBi exchange */
/*******************************************/

/***************************************/
/* Lemmas about EoOOBs-EiOOBo exchange */
/***************************************/

#ifdef EoOOBsEiOOBo
lemma EoOOBs_EiOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBs_EiOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBs_EiOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBs_EiOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EiOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EiOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EiOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EiOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EiOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EiOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBs-EiOOBo exchange */
/*******************************************/

/***************************************/
/* Lemmas about EoOOBs-EiOOBs exchange */
/***************************************/

#ifdef EoOOBsEiOOBs
lemma EoOOBs_EiOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBs_EiOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBs_EiOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBs_EiOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EiOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EiOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EiOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EiOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EiOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EiOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBs-EiOOBs exchange */
/*******************************************/

/*****************************************/
/* Lemmas about EoOOBno-EoOOBno exchange */
/*****************************************/

#ifdef EoOOBnoEoOOBno
lemma EoOOBno_EoOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBno_EoOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBno_EoOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBno_EoOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EoOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EoOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EoOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EoOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EoOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EoOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*********************************************/
/* End lemmas about EoOOBno-EoOOBno exchange */
/*********************************************/

/****************************************/
/* Lemmas about EoOOBno-EoOOBi exchange */
/****************************************/

#ifdef EoOOBnoEoOOBi
lemma EoOOBno_EoOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBno_EoOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBno_EoOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBno_EoOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EoOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EoOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EoOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EoOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EoOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EoOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EoOOBno-EoOOBi exchange */
/********************************************/

/****************************************/
/* Lemmas about EoOOBno-EoOOBo exchange */
/****************************************/

#ifdef EoOOBnoEoOOBo
lemma EoOOBno_EoOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBno_EoOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBno_EoOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBno_EoOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EoOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EoOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EoOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EoOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EoOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EoOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EoOOBno-EoOOBo exchange */
/********************************************/

/****************************************/
/* Lemmas about EoOOBno-EoOOBs exchange */
/****************************************/

#ifdef EoOOBnoEoOOBs
lemma EoOOBno_EoOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBno_EoOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBno_EoOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBno_EoOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EoOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EoOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EoOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBno_EoOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBno_EoOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBno_EoOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EoOOBno-EoOOBs exchange */
/********************************************/

/****************************************/
/* Lemmas about EoOOBi-EoOOBno exchange */
/****************************************/

#ifdef EoOOBiEoOOBno
lemma EoOOBi_EoOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBi_EoOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBi_EoOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBi_EoOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EoOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EoOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EoOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EoOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EoOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EoOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EoOOBi-EoOOBno exchange */
/********************************************/

/***************************************/
/* Lemmas about EoOOBi-EoOOBi exchange */
/***************************************/

#ifdef EoOOBiEoOOBi
lemma EoOOBi_EoOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBi_EoOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBi_EoOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBi_EoOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EoOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EoOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EoOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EoOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EoOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EoOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBi-EoOOBi exchange */
/*******************************************/

/***************************************/
/* Lemmas about EoOOBi-EoOOBo exchange */
/***************************************/

#ifdef EoOOBiEoOOBo
lemma EoOOBi_EoOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBi_EoOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBi_EoOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBi_EoOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EoOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EoOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EoOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EoOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EoOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EoOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBi-EoOOBo exchange */
/*******************************************/

/***************************************/
/* Lemmas about EoOOBi-EoOOBs exchange */
/***************************************/

#ifdef EoOOBiEoOOBs
lemma EoOOBi_EoOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBi_EoOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBi_EoOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBi_EoOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EoOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EoOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EoOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBi_EoOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBi_EoOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBi_EoOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBi-EoOOBs exchange */
/*******************************************/

/****************************************/
/* Lemmas about EoOOBo-EoOOBno exchange */
/****************************************/

#ifdef EoOOBoEoOOBno
lemma EoOOBo_EoOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBo_EoOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBo_EoOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBo_EoOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EoOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EoOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EoOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EoOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EoOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EoOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EoOOBo-EoOOBno exchange */
/********************************************/

/***************************************/
/* Lemmas about EoOOBo-EoOOBi exchange */
/***************************************/

#ifdef EoOOBoEoOOBi
lemma EoOOBo_EoOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBo_EoOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBo_EoOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBo_EoOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EoOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EoOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EoOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EoOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EoOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EoOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBo-EoOOBi exchange */
/*******************************************/

/***************************************/
/* Lemmas about EoOOBo-EoOOBo exchange */
/***************************************/

#ifdef EoOOBoEoOOBo
lemma EoOOBo_EoOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBo_EoOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBo_EoOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBo_EoOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EoOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EoOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EoOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EoOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EoOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EoOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBo-EoOOBo exchange */
/*******************************************/

/***************************************/
/* Lemmas about EoOOBo-EoOOBs exchange */
/***************************************/

#ifdef EoOOBoEoOOBs
lemma EoOOBo_EoOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBo_EoOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBo_EoOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBo_EoOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EoOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EoOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EoOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBo_EoOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBo_EoOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBo_EoOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBo-EoOOBs exchange */
/*******************************************/

/****************************************/
/* Lemmas about EoOOBs-EoOOBno exchange */
/****************************************/

#ifdef EoOOBsEoOOBno
lemma EoOOBs_EoOOBno_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBs_EoOOBno_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBs_EoOOBno_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBs_EoOOBno_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EoOOBno_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EoOOBno_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EoOOBno_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EoOOBno_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EoOOBno_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EoOOBno_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/********************************************/
/* End lemmas about EoOOBs-EoOOBno exchange */
/********************************************/

/***************************************/
/* Lemmas about EoOOBs-EoOOBi exchange */
/***************************************/

#ifdef EoOOBsEoOOBi
lemma EoOOBs_EoOOBi_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBs_EoOOBi_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBs_EoOOBi_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBs_EoOOBi_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EoOOBi_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EoOOBi_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EoOOBi_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EoOOBi_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EoOOBi_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EoOOBi_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBs-EoOOBi exchange */
/*******************************************/

/***************************************/
/* Lemmas about EoOOBs-EoOOBo exchange */
/***************************************/

#ifdef EoOOBsEoOOBo
lemma EoOOBs_EoOOBo_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBs_EoOOBo_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBs_EoOOBo_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBs_EoOOBo_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EoOOBo_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EoOOBo_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EoOOBo_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EoOOBo_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EoOOBo_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EoOOBo_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBs-EoOOBo exchange */
/*******************************************/

/***************************************/
/* Lemmas about EoOOBs-EoOOBs exchange */
/***************************************/

#ifdef EoOOBsEoOOBs
lemma EoOOBs_EoOOBs_functional: exists-trace
"
Ex pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j
"

lemma EoOOBs_EoOOBs_auth_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        DeviceFinishedProvisioning(pkD, pkP, dh, ck, nd, np, sk, nk, dk) @j
    )
"

lemma EoOOBs_EoOOBs_auth_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    (
    Ex #j.
        ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @j
    )
"

lemma EoOOBs_EoOOBs_weaksecret_nk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EoOOBs_weaksecret_dk_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EoOOBs_weaksecret_ak_prov:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    ProvisionerFinishedProvisioning(pkP, pkD, dh, ck, np, nd, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EoOOBs_weaksecret_nk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(nk) @j)
"

lemma EoOOBs_EoOOBs_weaksecret_dk_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(dk) @j)
"

lemma EoOOBs_EoOOBs_weaksecret_ak_dev:
"
All pkP pkD dh ck np nd sk nk dk ak #i.
    DeviceFinishedKeyDistribution(pkD, pkP, dh, ck, nd, np, sk, nk, dk, ak) @i ==>
    not (Ex #j. K(ak) @j)
"

lemma EoOOBs_EoOOBs_double_impersonation:
"
All pkP1 pkD1 pkP2 pkD2 dh1 dh2 ck1 ck2 np1 np2 nd1 nd2 sk1 sk2 nk1 nk2 dk1 dk2 ak1 ak2 #i #j.
    DeviceFinishedKeyDistribution(pkD1, pkP1, dh1, ck1, nd1, np1, sk1, nk1, dk1, ak1) @i &
    ProvisionerFinishedProvisioning(pkP2, pkD2, dh2, ck2, np2, nd2, sk2, nk2, dk2, ak2) @j ==>
    not (Ex #k1 #k2 #k3 #k4 .
        K(nk1) @k1 & K(dk1) @k2 & K(nk2) @k3 & K(dk2) @k4
    )
"

#endif

/*******************************************/
/* End lemmas about EoOOBs-EoOOBs exchange */
/*******************************************/

/*
* Command-line to generate a Tamarin file with the entire model without all preprocessor macros:
* tamarin-prover mesh.spthy -DEiOOBoEiOOBno -DProvEiOOBo -DEoOOBoEoOOBs -DEiOOBiEiOOBo -DEiOOBnoEiOOBi -DDevOOBi -DDevECDH -DProvEiOOBi -DEiOOBnoEiOOBo -DEoOOBsEiOOBno -DEoOOBsEiOOBo -DEoOOBnoEiOOBi -DEoOOBoEoOOBno -DEiOOBnoEoOOBno -DEoOOBiEiOOBo -DEiOOBnoEiOOBno -DEiOOBoEiOOBs -DEiOOBnoEoOOBs -DEoOOBsEiOOBs -DEiOOBoEoOOBi -DEoOOBnoEoOOBi -DEoOOBoEiOOBno -DDevEiOOBno -DEiOOBiEoOOBo -DEiOOBoEoOOBs -DEoOOBiEoOOBno -DEiOOBsEoOOBno -DEoOOBnoEoOOBs -DProvOOBi -DProvEoOOBs -DEoOOBnoEoOOBno -DEoOOBoEiOOBi -DDevEo -DEoOOBnoEiOOBs -DEoOOBiEoOOBo -DEoOOBnoEoOOBo -DEoOOBiEiOOBs -DProvEoOOBno -DDevEoOOBi -DDevEoOOBs -DProvEiOOBs -DProvEiOOBno -DEoOOBoEoOOBo -DDevOOBo -DEiOOBiEiOOBi -DEiOOBoEiOOBi -DEiOOBiEoOOBno -DProvEo -DEoOOBiEiOOBno -DDevEi -DEiOOBoEoOOBo -DDevOOBno -DEoOOBoEiOOBs -DEiOOBiEiOOBs -DEiOOBiEiOOBno -DProvEoOOBi -DEoOOBiEoOOBi -DEiOOBsEiOOBno -DEoOOBsEoOOBo -DEiOOBnoEiOOBs -DDevEiOOBs -DProvOOBo -DEoOOBnoEiOOBo -DEiOOBnoEoOOBo -DEiOOBsEiOOBi -DProvEoOOBo -DEiOOBsEiOOBo -DEoOOBnoEiOOBno -DEoOOBsEoOOBi -DEiOOBsEoOOBo -DEoOOBiEoOOBs -DEoOOBsEoOOBs -DEiOOBoEoOOBno -DDevEiOOBi -DEiOOBiEoOOBi -DProvECDH -DEoOOBoEiOOBo -DEoOOBiEiOOBi -DProvOOBno -DDevEoOOBo -DEiOOBsEoOOBi -DProvEi -DEiOOBoEiOOBo -DProvOOBs -DEiOOBiEoOOBs -DDevOOBs -DEoOOBsEiOOBi -DDevEiOOBo -DEoOOBoEoOOBi -DEiOOBnoEoOOBi -DDevEoOOBno -DEiOOBsEoOOBs -DEoOOBsEoOOBno -DEiOOBsEiOOBs
*/

/* Command lines to prove individual cases:
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBno -DProvOOBno -DDevEi -DDevEiOOBno -DDevOOBno -DProvECDH -DDevECDH -DEiOOBnoEiOOBno --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBno -DProvOOBno -DDevEi -DDevEiOOBi -DDevOOBi -DProvECDH -DDevECDH -DEiOOBnoEiOOBi --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBno -DProvOOBno -DDevEi -DDevEiOOBo -DDevOOBo -DProvECDH -DDevECDH -DEiOOBnoEiOOBo --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBno -DProvOOBno -DDevEi -DDevEiOOBs -DDevOOBs -DProvECDH -DDevECDH -DEiOOBnoEiOOBs --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBi -DProvOOBi -DDevEi -DDevEiOOBno -DDevOOBno -DProvECDH -DDevECDH -DEiOOBiEiOOBno --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBi -DProvOOBi -DDevEi -DDevEiOOBi -DDevOOBi -DProvECDH -DDevECDH -DEiOOBiEiOOBi --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBi -DProvOOBi -DDevEi -DDevEiOOBo -DDevOOBo -DProvECDH -DDevECDH -DEiOOBiEiOOBo --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBi -DProvOOBi -DDevEi -DDevEiOOBs -DDevOOBs -DProvECDH -DDevECDH -DEiOOBiEiOOBs --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBo -DProvOOBo -DDevEi -DDevEiOOBno -DDevOOBno -DProvECDH -DDevECDH -DEiOOBoEiOOBno --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBo -DProvOOBo -DDevEi -DDevEiOOBi -DDevOOBi -DProvECDH -DDevECDH -DEiOOBoEiOOBi --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBo -DProvOOBo -DDevEi -DDevEiOOBo -DDevOOBo -DProvECDH -DDevECDH -DEiOOBoEiOOBo --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBo -DProvOOBo -DDevEi -DDevEiOOBs -DDevOOBs -DProvECDH -DDevECDH -DEiOOBoEiOOBs --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBs -DProvOOBs -DDevEi -DDevEiOOBno -DDevOOBno -DProvECDH -DDevECDH -DEiOOBsEiOOBno --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBs -DProvOOBs -DDevEi -DDevEiOOBi -DDevOOBi -DProvECDH -DDevECDH -DEiOOBsEiOOBi --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBs -DProvOOBs -DDevEi -DDevEiOOBo -DDevOOBo -DProvECDH -DDevECDH -DEiOOBsEiOOBo --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBs -DProvOOBs -DDevEi -DDevEiOOBs -DDevOOBs -DProvECDH -DDevECDH -DEiOOBsEiOOBs --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBno -DProvOOBno -DDevEo -DDevEoOOBno -DDevOOBno -DProvECDH -DDevECDH -DEiOOBnoEoOOBno --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBno -DProvOOBno -DDevEo -DDevEoOOBi -DDevOOBi -DProvECDH -DDevECDH -DEiOOBnoEoOOBi --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBno -DProvOOBno -DDevEo -DDevEoOOBo -DDevOOBo -DProvECDH -DDevECDH -DEiOOBnoEoOOBo --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBno -DProvOOBno -DDevEo -DDevEoOOBs -DDevOOBs -DProvECDH -DDevECDH -DEiOOBnoEoOOBs --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBi -DProvOOBi -DDevEo -DDevEoOOBno -DDevOOBno -DProvECDH -DDevECDH -DEiOOBiEoOOBno --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBi -DProvOOBi -DDevEo -DDevEoOOBi -DDevOOBi -DProvECDH -DDevECDH -DEiOOBiEoOOBi --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBi -DProvOOBi -DDevEo -DDevEoOOBo -DDevOOBo -DProvECDH -DDevECDH -DEiOOBiEoOOBo --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBi -DProvOOBi -DDevEo -DDevEoOOBs -DDevOOBs -DProvECDH -DDevECDH -DEiOOBiEoOOBs --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBo -DProvOOBo -DDevEo -DDevEoOOBno -DDevOOBno -DProvECDH -DDevECDH -DEiOOBoEoOOBno --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBo -DProvOOBo -DDevEo -DDevEoOOBi -DDevOOBi -DProvECDH -DDevECDH -DEiOOBoEoOOBi --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBo -DProvOOBo -DDevEo -DDevEoOOBo -DDevOOBo -DProvECDH -DDevECDH -DEiOOBoEoOOBo --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBo -DProvOOBo -DDevEo -DDevEoOOBs -DDevOOBs -DProvECDH -DDevECDH -DEiOOBoEoOOBs --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBs -DProvOOBs -DDevEo -DDevEoOOBno -DDevOOBno -DProvECDH -DDevECDH -DEiOOBsEoOOBno --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBs -DProvOOBs -DDevEo -DDevEoOOBi -DDevOOBi -DProvECDH -DDevECDH -DEiOOBsEoOOBi --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBs -DProvOOBs -DDevEo -DDevEoOOBo -DDevOOBo -DProvECDH -DDevECDH -DEiOOBsEoOOBo --prove
tamarin-prover mesh.spthy -DProvEi -DProvEiOOBs -DProvOOBs -DDevEo -DDevEoOOBs -DDevOOBs -DProvECDH -DDevECDH -DEiOOBsEoOOBs --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBno -DProvOOBno -DDevEi -DDevEiOOBno -DDevOOBno -DProvECDH -DDevECDH -DEoOOBnoEiOOBno --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBno -DProvOOBno -DDevEi -DDevEiOOBi -DDevOOBi -DProvECDH -DDevECDH -DEoOOBnoEiOOBi --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBno -DProvOOBno -DDevEi -DDevEiOOBo -DDevOOBo -DProvECDH -DDevECDH -DEoOOBnoEiOOBo --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBno -DProvOOBno -DDevEi -DDevEiOOBs -DDevOOBs -DProvECDH -DDevECDH -DEoOOBnoEiOOBs --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBi -DProvOOBi -DDevEi -DDevEiOOBno -DDevOOBno -DProvECDH -DDevECDH -DEoOOBiEiOOBno --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBi -DProvOOBi -DDevEi -DDevEiOOBi -DDevOOBi -DProvECDH -DDevECDH -DEoOOBiEiOOBi --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBi -DProvOOBi -DDevEi -DDevEiOOBo -DDevOOBo -DProvECDH -DDevECDH -DEoOOBiEiOOBo --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBi -DProvOOBi -DDevEi -DDevEiOOBs -DDevOOBs -DProvECDH -DDevECDH -DEoOOBiEiOOBs --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBo -DProvOOBo -DDevEi -DDevEiOOBno -DDevOOBno -DProvECDH -DDevECDH -DEoOOBoEiOOBno --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBo -DProvOOBo -DDevEi -DDevEiOOBi -DDevOOBi -DProvECDH -DDevECDH -DEoOOBoEiOOBi --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBo -DProvOOBo -DDevEi -DDevEiOOBo -DDevOOBo -DProvECDH -DDevECDH -DEoOOBoEiOOBo --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBo -DProvOOBo -DDevEi -DDevEiOOBs -DDevOOBs -DProvECDH -DDevECDH -DEoOOBoEiOOBs --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBs -DProvOOBs -DDevEi -DDevEiOOBno -DDevOOBno -DProvECDH -DDevECDH -DEoOOBsEiOOBno --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBs -DProvOOBs -DDevEi -DDevEiOOBi -DDevOOBi -DProvECDH -DDevECDH -DEoOOBsEiOOBi --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBs -DProvOOBs -DDevEi -DDevEiOOBo -DDevOOBo -DProvECDH -DDevECDH -DEoOOBsEiOOBo --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBs -DProvOOBs -DDevEi -DDevEiOOBs -DDevOOBs -DProvECDH -DDevECDH -DEoOOBsEiOOBs --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBno -DProvOOBno -DDevEo -DDevEoOOBno -DDevOOBno -DProvECDH -DDevECDH -DEoOOBnoEoOOBno --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBno -DProvOOBno -DDevEo -DDevEoOOBi -DDevOOBi -DProvECDH -DDevECDH -DEoOOBnoEoOOBi --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBno -DProvOOBno -DDevEo -DDevEoOOBo -DDevOOBo -DProvECDH -DDevECDH -DEoOOBnoEoOOBo --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBno -DProvOOBno -DDevEo -DDevEoOOBs -DDevOOBs -DProvECDH -DDevECDH -DEoOOBnoEoOOBs --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBi -DProvOOBi -DDevEo -DDevEoOOBno -DDevOOBno -DProvECDH -DDevECDH -DEoOOBiEoOOBno --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBi -DProvOOBi -DDevEo -DDevEoOOBi -DDevOOBi -DProvECDH -DDevECDH -DEoOOBiEoOOBi --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBi -DProvOOBi -DDevEo -DDevEoOOBo -DDevOOBo -DProvECDH -DDevECDH -DEoOOBiEoOOBo --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBi -DProvOOBi -DDevEo -DDevEoOOBs -DDevOOBs -DProvECDH -DDevECDH -DEoOOBiEoOOBs --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBo -DProvOOBo -DDevEo -DDevEoOOBno -DDevOOBno -DProvECDH -DDevECDH -DEoOOBoEoOOBno --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBo -DProvOOBo -DDevEo -DDevEoOOBi -DDevOOBi -DProvECDH -DDevECDH -DEoOOBoEoOOBi --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBo -DProvOOBo -DDevEo -DDevEoOOBo -DDevOOBo -DProvECDH -DDevECDH -DEoOOBoEoOOBo --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBo -DProvOOBo -DDevEo -DDevEoOOBs -DDevOOBs -DProvECDH -DDevECDH -DEoOOBoEoOOBs --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBs -DProvOOBs -DDevEo -DDevEoOOBno -DDevOOBno -DProvECDH -DDevECDH -DEoOOBsEoOOBno --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBs -DProvOOBs -DDevEo -DDevEoOOBi -DDevOOBi -DProvECDH -DDevECDH -DEoOOBsEoOOBi --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBs -DProvOOBs -DDevEo -DDevEoOOBo -DDevOOBo -DProvECDH -DDevECDH -DEoOOBsEoOOBo --prove
tamarin-prover mesh.spthy -DProvEo -DProvEoOOBs -DProvOOBs -DDevEo -DDevEoOOBs -DDevOOBs -DProvECDH -DDevECDH -DEoOOBsEoOOBs --prove


JSON configuration file:
{
"EiOOBnoEiOOBno": ["ProvEi","ProvEiOOBno","ProvOOBno","DevEi","DevEiOOBno","DevOOBno","ProvECDH","DevECDH","EiOOBnoEiOOBno"],
"EiOOBnoEiOOBi": ["ProvEi","ProvEiOOBno","ProvOOBno","DevEi","DevEiOOBi","DevOOBi","ProvECDH","DevECDH","EiOOBnoEiOOBi"],
"EiOOBnoEiOOBo": ["ProvEi","ProvEiOOBno","ProvOOBno","DevEi","DevEiOOBo","DevOOBo","ProvECDH","DevECDH","EiOOBnoEiOOBo"],
"EiOOBnoEiOOBs": ["ProvEi","ProvEiOOBno","ProvOOBno","DevEi","DevEiOOBs","DevOOBs","ProvECDH","DevECDH","EiOOBnoEiOOBs"],
"EiOOBiEiOOBno": ["ProvEi","ProvEiOOBi","ProvOOBi","DevEi","DevEiOOBno","DevOOBno","ProvECDH","DevECDH","EiOOBiEiOOBno"],
"EiOOBiEiOOBi": ["ProvEi","ProvEiOOBi","ProvOOBi","DevEi","DevEiOOBi","DevOOBi","ProvECDH","DevECDH","EiOOBiEiOOBi"],
"EiOOBiEiOOBo": ["ProvEi","ProvEiOOBi","ProvOOBi","DevEi","DevEiOOBo","DevOOBo","ProvECDH","DevECDH","EiOOBiEiOOBo"],
"EiOOBiEiOOBs": ["ProvEi","ProvEiOOBi","ProvOOBi","DevEi","DevEiOOBs","DevOOBs","ProvECDH","DevECDH","EiOOBiEiOOBs"],
"EiOOBoEiOOBno": ["ProvEi","ProvEiOOBo","ProvOOBo","DevEi","DevEiOOBno","DevOOBno","ProvECDH","DevECDH","EiOOBoEiOOBno"],
"EiOOBoEiOOBi": ["ProvEi","ProvEiOOBo","ProvOOBo","DevEi","DevEiOOBi","DevOOBi","ProvECDH","DevECDH","EiOOBoEiOOBi"],
"EiOOBoEiOOBo": ["ProvEi","ProvEiOOBo","ProvOOBo","DevEi","DevEiOOBo","DevOOBo","ProvECDH","DevECDH","EiOOBoEiOOBo"],
"EiOOBoEiOOBs": ["ProvEi","ProvEiOOBo","ProvOOBo","DevEi","DevEiOOBs","DevOOBs","ProvECDH","DevECDH","EiOOBoEiOOBs"],
"EiOOBsEiOOBno": ["ProvEi","ProvEiOOBs","ProvOOBs","DevEi","DevEiOOBno","DevOOBno","ProvECDH","DevECDH","EiOOBsEiOOBno"],
"EiOOBsEiOOBi": ["ProvEi","ProvEiOOBs","ProvOOBs","DevEi","DevEiOOBi","DevOOBi","ProvECDH","DevECDH","EiOOBsEiOOBi"],
"EiOOBsEiOOBo": ["ProvEi","ProvEiOOBs","ProvOOBs","DevEi","DevEiOOBo","DevOOBo","ProvECDH","DevECDH","EiOOBsEiOOBo"],
"EiOOBsEiOOBs": ["ProvEi","ProvEiOOBs","ProvOOBs","DevEi","DevEiOOBs","DevOOBs","ProvECDH","DevECDH","EiOOBsEiOOBs"],
"EiOOBnoEoOOBno": ["ProvEi","ProvEiOOBno","ProvOOBno","DevEo","DevEoOOBno","DevOOBno","ProvECDH","DevECDH","EiOOBnoEoOOBno"],
"EiOOBnoEoOOBi": ["ProvEi","ProvEiOOBno","ProvOOBno","DevEo","DevEoOOBi","DevOOBi","ProvECDH","DevECDH","EiOOBnoEoOOBi"],
"EiOOBnoEoOOBo": ["ProvEi","ProvEiOOBno","ProvOOBno","DevEo","DevEoOOBo","DevOOBo","ProvECDH","DevECDH","EiOOBnoEoOOBo"],
"EiOOBnoEoOOBs": ["ProvEi","ProvEiOOBno","ProvOOBno","DevEo","DevEoOOBs","DevOOBs","ProvECDH","DevECDH","EiOOBnoEoOOBs"],
"EiOOBiEoOOBno": ["ProvEi","ProvEiOOBi","ProvOOBi","DevEo","DevEoOOBno","DevOOBno","ProvECDH","DevECDH","EiOOBiEoOOBno"],
"EiOOBiEoOOBi": ["ProvEi","ProvEiOOBi","ProvOOBi","DevEo","DevEoOOBi","DevOOBi","ProvECDH","DevECDH","EiOOBiEoOOBi"],
"EiOOBiEoOOBo": ["ProvEi","ProvEiOOBi","ProvOOBi","DevEo","DevEoOOBo","DevOOBo","ProvECDH","DevECDH","EiOOBiEoOOBo"],
"EiOOBiEoOOBs": ["ProvEi","ProvEiOOBi","ProvOOBi","DevEo","DevEoOOBs","DevOOBs","ProvECDH","DevECDH","EiOOBiEoOOBs"],
"EiOOBoEoOOBno": ["ProvEi","ProvEiOOBo","ProvOOBo","DevEo","DevEoOOBno","DevOOBno","ProvECDH","DevECDH","EiOOBoEoOOBno"],
"EiOOBoEoOOBi": ["ProvEi","ProvEiOOBo","ProvOOBo","DevEo","DevEoOOBi","DevOOBi","ProvECDH","DevECDH","EiOOBoEoOOBi"],
"EiOOBoEoOOBo": ["ProvEi","ProvEiOOBo","ProvOOBo","DevEo","DevEoOOBo","DevOOBo","ProvECDH","DevECDH","EiOOBoEoOOBo"],
"EiOOBoEoOOBs": ["ProvEi","ProvEiOOBo","ProvOOBo","DevEo","DevEoOOBs","DevOOBs","ProvECDH","DevECDH","EiOOBoEoOOBs"],
"EiOOBsEoOOBno": ["ProvEi","ProvEiOOBs","ProvOOBs","DevEo","DevEoOOBno","DevOOBno","ProvECDH","DevECDH","EiOOBsEoOOBno"],
"EiOOBsEoOOBi": ["ProvEi","ProvEiOOBs","ProvOOBs","DevEo","DevEoOOBi","DevOOBi","ProvECDH","DevECDH","EiOOBsEoOOBi"],
"EiOOBsEoOOBo": ["ProvEi","ProvEiOOBs","ProvOOBs","DevEo","DevEoOOBo","DevOOBo","ProvECDH","DevECDH","EiOOBsEoOOBo"],
"EiOOBsEoOOBs": ["ProvEi","ProvEiOOBs","ProvOOBs","DevEo","DevEoOOBs","DevOOBs","ProvECDH","DevECDH","EiOOBsEoOOBs"],
"EoOOBnoEiOOBno": ["ProvEo","ProvEoOOBno","ProvOOBno","DevEi","DevEiOOBno","DevOOBno","ProvECDH","DevECDH","EoOOBnoEiOOBno"],
"EoOOBnoEiOOBi": ["ProvEo","ProvEoOOBno","ProvOOBno","DevEi","DevEiOOBi","DevOOBi","ProvECDH","DevECDH","EoOOBnoEiOOBi"],
"EoOOBnoEiOOBo": ["ProvEo","ProvEoOOBno","ProvOOBno","DevEi","DevEiOOBo","DevOOBo","ProvECDH","DevECDH","EoOOBnoEiOOBo"],
"EoOOBnoEiOOBs": ["ProvEo","ProvEoOOBno","ProvOOBno","DevEi","DevEiOOBs","DevOOBs","ProvECDH","DevECDH","EoOOBnoEiOOBs"],
"EoOOBiEiOOBno": ["ProvEo","ProvEoOOBi","ProvOOBi","DevEi","DevEiOOBno","DevOOBno","ProvECDH","DevECDH","EoOOBiEiOOBno"],
"EoOOBiEiOOBi": ["ProvEo","ProvEoOOBi","ProvOOBi","DevEi","DevEiOOBi","DevOOBi","ProvECDH","DevECDH","EoOOBiEiOOBi"],
"EoOOBiEiOOBo": ["ProvEo","ProvEoOOBi","ProvOOBi","DevEi","DevEiOOBo","DevOOBo","ProvECDH","DevECDH","EoOOBiEiOOBo"],
"EoOOBiEiOOBs": ["ProvEo","ProvEoOOBi","ProvOOBi","DevEi","DevEiOOBs","DevOOBs","ProvECDH","DevECDH","EoOOBiEiOOBs"],
"EoOOBoEiOOBno": ["ProvEo","ProvEoOOBo","ProvOOBo","DevEi","DevEiOOBno","DevOOBno","ProvECDH","DevECDH","EoOOBoEiOOBno"],
"EoOOBoEiOOBi": ["ProvEo","ProvEoOOBo","ProvOOBo","DevEi","DevEiOOBi","DevOOBi","ProvECDH","DevECDH","EoOOBoEiOOBi"],
"EoOOBoEiOOBo": ["ProvEo","ProvEoOOBo","ProvOOBo","DevEi","DevEiOOBo","DevOOBo","ProvECDH","DevECDH","EoOOBoEiOOBo"],
"EoOOBoEiOOBs": ["ProvEo","ProvEoOOBo","ProvOOBo","DevEi","DevEiOOBs","DevOOBs","ProvECDH","DevECDH","EoOOBoEiOOBs"],
"EoOOBsEiOOBno": ["ProvEo","ProvEoOOBs","ProvOOBs","DevEi","DevEiOOBno","DevOOBno","ProvECDH","DevECDH","EoOOBsEiOOBno"],
"EoOOBsEiOOBi": ["ProvEo","ProvEoOOBs","ProvOOBs","DevEi","DevEiOOBi","DevOOBi","ProvECDH","DevECDH","EoOOBsEiOOBi"],
"EoOOBsEiOOBo": ["ProvEo","ProvEoOOBs","ProvOOBs","DevEi","DevEiOOBo","DevOOBo","ProvECDH","DevECDH","EoOOBsEiOOBo"],
"EoOOBsEiOOBs": ["ProvEo","ProvEoOOBs","ProvOOBs","DevEi","DevEiOOBs","DevOOBs","ProvECDH","DevECDH","EoOOBsEiOOBs"],
"EoOOBnoEoOOBno": ["ProvEo","ProvEoOOBno","ProvOOBno","DevEo","DevEoOOBno","DevOOBno","ProvECDH","DevECDH","EoOOBnoEoOOBno"],
"EoOOBnoEoOOBi": ["ProvEo","ProvEoOOBno","ProvOOBno","DevEo","DevEoOOBi","DevOOBi","ProvECDH","DevECDH","EoOOBnoEoOOBi"],
"EoOOBnoEoOOBo": ["ProvEo","ProvEoOOBno","ProvOOBno","DevEo","DevEoOOBo","DevOOBo","ProvECDH","DevECDH","EoOOBnoEoOOBo"],
"EoOOBnoEoOOBs": ["ProvEo","ProvEoOOBno","ProvOOBno","DevEo","DevEoOOBs","DevOOBs","ProvECDH","DevECDH","EoOOBnoEoOOBs"],
"EoOOBiEoOOBno": ["ProvEo","ProvEoOOBi","ProvOOBi","DevEo","DevEoOOBno","DevOOBno","ProvECDH","DevECDH","EoOOBiEoOOBno"],
"EoOOBiEoOOBi": ["ProvEo","ProvEoOOBi","ProvOOBi","DevEo","DevEoOOBi","DevOOBi","ProvECDH","DevECDH","EoOOBiEoOOBi"],
"EoOOBiEoOOBo": ["ProvEo","ProvEoOOBi","ProvOOBi","DevEo","DevEoOOBo","DevOOBo","ProvECDH","DevECDH","EoOOBiEoOOBo"],
"EoOOBiEoOOBs": ["ProvEo","ProvEoOOBi","ProvOOBi","DevEo","DevEoOOBs","DevOOBs","ProvECDH","DevECDH","EoOOBiEoOOBs"],
"EoOOBoEoOOBno": ["ProvEo","ProvEoOOBo","ProvOOBo","DevEo","DevEoOOBno","DevOOBno","ProvECDH","DevECDH","EoOOBoEoOOBno"],
"EoOOBoEoOOBi": ["ProvEo","ProvEoOOBo","ProvOOBo","DevEo","DevEoOOBi","DevOOBi","ProvECDH","DevECDH","EoOOBoEoOOBi"],
"EoOOBoEoOOBo": ["ProvEo","ProvEoOOBo","ProvOOBo","DevEo","DevEoOOBo","DevOOBo","ProvECDH","DevECDH","EoOOBoEoOOBo"],
"EoOOBoEoOOBs": ["ProvEo","ProvEoOOBo","ProvOOBo","DevEo","DevEoOOBs","DevOOBs","ProvECDH","DevECDH","EoOOBoEoOOBs"],
"EoOOBsEoOOBno": ["ProvEo","ProvEoOOBs","ProvOOBs","DevEo","DevEoOOBno","DevOOBno","ProvECDH","DevECDH","EoOOBsEoOOBno"],
"EoOOBsEoOOBi": ["ProvEo","ProvEoOOBs","ProvOOBs","DevEo","DevEoOOBi","DevOOBi","ProvECDH","DevECDH","EoOOBsEoOOBi"],
"EoOOBsEoOOBo": ["ProvEo","ProvEoOOBs","ProvOOBs","DevEo","DevEoOOBo","DevOOBo","ProvECDH","DevECDH","EoOOBsEoOOBo"],
"EoOOBsEoOOBs": ["ProvEo","ProvEoOOBs","ProvOOBs","DevEo","DevEoOOBs","DevOOBs","ProvECDH","DevECDH","EoOOBsEoOOBs"],
}
*/

end
