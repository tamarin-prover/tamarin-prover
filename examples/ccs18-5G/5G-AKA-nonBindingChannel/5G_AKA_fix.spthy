theory 5G_aka_fix

/*

   Protocol:    5G AKA
   Modeler:     David Basin, Jannik Dreier, Lucca Hirschi, Sasa Radomirovic, Ralf Sasse, Vincent Stettler
   Date:        -
   Version:     Model of 5G AKA v15.0.0, with SUCI, sequence number, XOR, synchronization failure mechanism.
		This model contains a proposed fix, where SNID is included in MAC.

   Based on:	Security Architecture and Procedures for 5G System:
                  3GPP TS 33.501 V15.0.0

   Comments:	This theory models 5G AKA including:
		 - the sequence number
		 - the resynchronization mechanism
		 - the XOR
		 - SUPI concealement (SUCI)
		Not included:
		 - AMF (authentication management field)

   Resources:	[5G] Security Architecture and Procedures for 5G System:
                    3GPP TS 33.501 V15.0.0 (2018-03)

                [5G-sys] System Architecture for the 5G System:
                    3GPP TS 23.501 V1.3.0 (2017-09)

 		[4G] System Architecture Evolution (SAE): Security architecture
		    3GPP TS 33.401 V15.0.0 (2017-06)

                [3G] 3G Security: Security architecture
		    3GPP TS 33.102 V14.1.0 (2017-03)

   Notes:	5G AKA is one of the methods used in 5G primary authentication.
		It is an enhancement of EPS-AKA (TS 33.401 Section 6.1),
		which is based on UMTS AKA (TS 33.102 Section 6.3).


   Notations:	supi 	-> 	Subscription Permanent Identifier (IMSI).
		suci 	-> 	Subscription Concealed Identifier.
		sqn     ->      Sequence Number

		UE 	-> 	User Equipment.
		SEAF 	-> 	Security Anchor Function.
		AUSF 	-> 	Authentication Server Function.
		ARPF 	-> 	Authentication Repository and Processing Function.
		HSS 	-> 	Home Subscription Server (AUSF + ARPF)

		SNID	->	Visited Public Land Mobile Network ID (VPLMN-Id)
				of the serving network, appended to string '5G'.
		HN 	->	Home network including AUSF and ARPF.
		SN	->	Serving network.
		
   Channels:	UE <-> SEAF .<->. HSS  [.<->. is authenticated, confidential, replay protected but not order-preserving]

   Terms:	
		Assumptions:
		 SNid -> ~idSN, output when created (public fresh constant)
		 supi -> ~supi (fresh value)
		 sqn ->  sqn ~sqn_root + '1' + ... + '1'
                         where ~sqn_root is the freshly generated part of Sqn.
			 We model an attacker who is in the vicinity of the targeted UE for a limited time only.
			 As a consequence, the attacker does not initially know sqn.

		TS 33.102 6.3 (3G):
		 ~RAND is freshly generated and unique.
		 MAC = f1(k, <Sqn, RAND, AMF, SNID>)
		 XRES = f2(k, RAND)
		 CK = f3(k, RAND)
		 IK = f4(k, RAND)
		 AK = f5(k, RAND)
		 AUTN = <XOR(Sqn, AK), AMF, MAC>

		 MAC-S = f1*(k, <Sqn, RAND, AMF>)
		 AKS = f5*(k, RAND) // we defined this name here
		 AUTS = < XOR(Sqn, AKS), MAC-S>

		TS 33.501 6.1, 6.2, A, X (5G):
		 SNID = <'5G', VPLMNID>  ([5G] 6.1.1.4.1)
		 K_ausf = KDF(<CK, IK>, <SNID, XOR(Sqn, AK)>) ([5G] A.2)
		 K_seaf = KDF(K_ausf, SNID) ([5G] A.6)
		 XRES* = KDF(<CK, IK>, <SNID, XRES, RAND>) ([5G] A.4)
		 HXRES* = SHA256(<XRES*, RAND>) ([5G] A.5)

		TS 33.501 C (5G):
		  pk_HSS, sk_HSS (asymmetric key pair of HSS)
		  id_pk_HSS (identifier for pk_HSS)
		  ~R (freshly generated randomness)
		  SUCI = < aenc(<SUPI, ~R>, pk_HSS), HN, id_pk_HSS >
		 
   Functions:	
		TS 33.102 6.3:
		 f1 is a message authentication function.
		 f2 is a (possibly truncated) message authentication function.
		 f3 and f4 are key generating functions.
		 f5 is a key generating function or f5 = 0.

		 f1* is a MAC function.
		 f5* is a key generation function.

		TS 33.501 A:
		 KDF as used in 5G is defined in TS 33.220.
		 It is used for K_ausf, K_seaf, and RES*.
		
   Pre-shared
   secrets:	Symmetric subscription key:		(UE, HSS, ~k)
		Sequence number:			(UE, HSS, ~sqn_root+'1')
		
   Protocol:	1. UE   -> SEAF:	suci
		2. SEAF -> AUSF:	suci, SNID
		3. AUSF -> ARPF:	suci, SNID
		4. ARPF -> AUSF:	RAND, XRES*, K_ausf, AUTN, supi
		5. AUSF -> SEAF:	RAND, HXRES*, K_seaf, AUTN
		6. SEAF -> UE  :	RAND, AUTN
		7. UE   -> SEAF:	RES*
		8. SEAF -> AUSF:	RES*, suci, SNID
		9. AUSF -> SEAF:	'confirm', supi

   Protocol	1. UE   -> SEAF:	suci
   Model:	2. SEAF -> HSS:		suci, SNID
		3. HSS -> SEAF:		RAND, HXRES*, K_seaf, AUTN
		4. SEAF -> UE  :	RAND, AUTN
		5. UE   -> SEAF:	RES*
	  	6. SEAF -> HSS:		RES*, suci, SNID
		7. HSS -> SEAF:		'confirm', supi
*/

begin

builtins:
	asymmetric-encryption, multiset, xor

functions:
	// AKA functions (TS 33.102)
	f1/2, 	   // MAC-function --> MAC
	f2/2, 	   // MAC-function --> RES
	f3/2, 	   // KDF 	   --> CK
	f4/2, 	   // KDF          --> IK
	f5/2, 	   // KDF          --> AK (Hide Sqn)
	f1_star/2, // MAC-function --> MAC-S
	f5_star/2, // KGF	   --> AKS (Hide Sqn)

	// 3GPP KDFs (TS 33.501)
	KDF/2,	 // KDF		 --> K_ausf, K_seaf, XRES*
	SHA256/2 // KDF		 --> HXRES*


tactic: sqn_many
presort: C
prio:
    regex ".*St_1_UE\("
    regex ".*St_1_HSS\("
prio:
    regex ".*Sqn_UE\("
    regex ".*Sqn_HSS\("


tactic: sqn_ue_nodecrease  
presort: C
prio:
    regex ".*\(last\(#j"
prio:
    regex ".*Sqn_UE_Change\("
prio:
    regex ".*\(#vr < #i\)"
prio:
    regex ".*Sqn_UE\(.*count.1"


tactic: injective_or_not_agreement_ue_hss_kseaf_noKeyRev
presort: C
prio:
    regex ".*!KU\( ~k"
prio:
    regex ".*!KU\( ~sk"
prio:
    regex ".*Sqn_HSS\(.*~sqn_root, ~sqn_root"
prio:
    regex ".*Sqn_HSS\(.*,.*,.*,.*,.* ~"
prio:
    regex ".*!HSS\("
prio:
    regex ".*St_2_SEAF\("
    regex ".*St_3_SEAF\("
    regex ".*St_4_SEAF\("
    regex ".*St_1_UE\("
    regex ".*St_2_UE\("
prio:
    regex ".*!KU\( f1\("
prio:
    regex ".*!KU\( f2\("
    regex ".*!KU\( f3\("
    regex ".*!KU\( f4\("
    regex ".*!KU\( f5\("
prio:
    regex ".*Commit\("
prio:
    regex ".*CommitConf\("
prio:
    regex ".*RcvS\(.*<'aia'"


tactic: executability_honest
presort: C
prio:
    regex ".*!KU\( ~k"
prio:
    regex ".*St_2_SEAF\("
    regex ".*St_3_SEAF\("
prio:
    regex ".*RcvS\("
prio:
    regex ".*Sqn_HSS\("
    regex ".*Sqn_UE\("
prio:
    regex ".*!KU\( f5_star\("
prio:
    regex ".*!KU\( f1\("
prio:
    regex ".*!KU\( f3\("
prio:
    regex ".*!KU\( f5\(~k"
prio:
    regex ".*!KU\( ~sqn_root"
prio:
    regex ".*!KU\( KDF\("
prio:
    regex ".*!KU\( \(f5\("
    regex ".*!KD\( \(f5\("


tactic: executability_sync
presort: C
prio:
    regex ".*!KU\( ~k"
prio:
    regex ".*!HSS\("
prio:
    regex ".*=.*="
prio:
    regex ".*<.*="
prio:
    regex ".*HSS_Resync_End\("
prio:
    regex ".*!KU\( f5\(.*" | regex ".*!KU\( f5_star\("
    regex ".*!KU\( ~sqn_root"
prio:
    regex ".*St_1_UE\("
    regex ".*St_1_HSS\("
    regex ".*St_2_SEAF\("
    regex ".*St_3_SEAF\("
prio:
    regex ".*Sqn_UE\("
    regex ".*Sqn_HSS\("
prio:
    regex ".*~~>"
prio:
    regex ".*!Ltk_Sym\("
prio:
    regex ".*RcvS\("
prio:
    regex ".*!KU\( KDF\("
prio:
    regex ".*!KU\( f3\("
prio:
    regex ".*!KU\( f1_star\("
prio:
    regex ".*!KU\( f1\("
prio:
    regex ".*!KU\( \(f5\("
    regex ".*!KD\( \(f5\("
    regex ".*!KU\( \(f5_star\("
    regex ".*!KD\( \(f5_star\("


/************************************/
/*    Channel: SEAF .<->. HSS       */
/************************************/
// This is a standard, secure channel abstraction, as previously used in work 
// by Basin, Radomirovic and Schmid: Modeling Human Errors in Security Protocols
// (CSF 2016)
// This version does provide replay protection but is not order-preserving.
rule send_secure:
	[SndS(A,B,m)]
	-->
	[Sec(A,B,m)]

rule receive_secure:
	[Sec(A,B,m)]
	-->
	[RcvS(A,B,m)]

rule secureChannel_compromised_in:
	[In(<A,B,x>)]
	--[
		Rev(A,'secureChannel'),
		Injected(x)
	]->
	[Sec(A,B,x)]

rule secureChannel_compromised_out:
	[Sec(A,B,m)]
	--[Rev(B,'secureChannel')]->
	[Out(m)]

/************************************/
/*     Initialization Rules         */
/************************************/

// Initialize a serving network
rule init_servNet:
	let 
		SNID = <'5G', ~idSN>
	in
	[ Fr(~idSN) ] // idSN denotes VPLMNID
	--[ ServNet(~idSN) ]->
	[!SEAF(~idSN, SNID)
	, Out(SNID)]

// Initialize a home network
rule init_homeNet:
	[Fr(~sk_HN),
	  Fr(~idHN)]
	--[ HomeNet(~idHN) ]->
	[!HSS(~idHN, ~sk_HN),
	 !Pk(~idHN, pk(~sk_HN)),
	 Out(<~idHN, pk(~sk_HN)>)]

// Initialize the subscription
rule add_subscription:
	[Fr(~supi),
	 Fr(~k),
	 Fr(~sqn_root),
	 !HSS(~idHN, ~sk_HN)]
	--[
		// Restriction
		Subscribe(~supi, ~idHN),

		// Helper lemmas
		Sqn_Create(~supi, ~idHN, ~sqn_root)
	]->
	[!Ltk_Sym(~supi, ~idHN, ~k, ~sqn_root),
	 Sqn_UE(~supi, ~idHN, ~sqn_root+'1', ~sqn_root, '1'),
	 Sqn_HSS(~supi, ~idHN, ~sqn_root+'1', ~sqn_root, '1')]


/************************************/
/*         Key Leakage              */
/************************************/

// NOTE: Rules for compromised channel between SEAF and HSS are defined above.

// Compromised subscriptions (symmetric key k)
rule reveal_Ltk_Sym:
	[!Ltk_Sym(~supi, ~idHN, ~k, ~sqn_root)]
	--[
		// Security properties
		Rev(~supi, <'k', ~k>),
		Rev(~idHN, <'k', ~k>)
	]->
	[Out(~k)]

// Compromised subscriptions ("initial" counter sqn_root)
rule reveal_Ltk_Sqn:
	[!Ltk_Sym(~supi, ~idHN, ~k, ~sqn_root)]
	--[
		// Security properties
		Rev(~supi, <'sqn', ~sqn_root>),
		Rev(~idHN, <'sqn', ~sqn_root>)
	]->
	[Out(~sqn_root)]

// Compromised subscriptions (identifier supi)
rule reveal_Ltk_supi:
	[!Ltk_Sym(~supi, ~idHN, ~k, ~sqn_root)]
	--[
		// Security properties
		Rev(~supi, <'supi', ~supi>),
		Rev(~idHN, <'supi', ~supi>)
	]->
	[Out(~supi)]

// Compromised home network (private asymmetric key sqn_HN)
rule reveal_sk_HN:
	[!HSS(~idHN, ~sk_HN)]
	--[
		// Security properties
		Rev(~idHN, <'skHN', ~sk_HN>)
	]->
	[Out(~sk_HN)]


/************************************/
/*       Sync. Failure              */
/************************************/
// We only allow the Sqn to increase, as a decrease would
// trivially violate injectivity
rule ue_sqn_increase:
	[Sqn_UE(~supi, ~idHN, Sqn, ~sqn_root, count),
	 In(m)]
	--[
		// Open chains
		Sqn_UE_Invariance(~supi, ~idHN, Sqn+m, ~sqn_root, count+m),

		// Helper lemmas
		Sqn_UE_Change(~supi, ~idHN, Sqn+m),

		// Executability
		Sqn_UE_Desync()
	]->
	[Sqn_UE(~supi, ~idHN, Sqn+m, ~sqn_root, count+m)]


/************************************/
/*       Protocol Rules             */
/************************************/

// Attach Request
rule ue_send_attachReq:
	let
		suci = < aenc{<~supi, ~R>}pk_HN, ~idHN>
		msg = suci
	in
	[!Ltk_Sym(~supi, ~idHN, ~k, ~sqn_root),
	 !Pk(~idHN, pk_HN),
	 Fr(~R),
	 Fr(~tid)]
	--[
		// Executability
		Start_UE_Session(~supi)
	]->
	[St_1_UE(~tid, ~supi, ~idHN, ~k, ~sqn_root),
	 Out(msg)]

// Attach Request + Authentication Initiation Request (AIR)
// NOTE: The AIR message is in fact the initial authentication request of the service "Nausf_UEAuthentication_Authenticate" (see TS 33.501 9.6.2).
rule seaf_receive_attachReq_send_air:
	let
		suci = <conc_supi,  idHN>
		msg = <suci, SNID >

	in
	[!SEAF(~idSN, SNID),
	 Fr(~tid),
	 In(suci)]
	--[
		// Executability
		Start_SEAF_Session(~idSN)
	]->
	[St_1_SEAF(~tid, ~idSN, SNID, conc_supi, idHN),
	 SndS(~idSN, idHN, <'air', msg>)]

// Authentication Initiation Request (AIR) + 5G Authentication Initiation Answer (5G-AIA)
// For key derivarion, see [5G] clause 6.1.3.2 and annex A6
// NOTE: The AIR message is in fact the initial authentication request to the service "Nausf_UEAuthentication_Authenticate" (see TS 33.501 9.6.2).
// NOTE: The 5G-AIA is the corresponding Nausf_UEAuthentication_Authenticate Response.
rule hss_receive_air_send_aia:
	let
	        // 1. Receive
		conc_supi = aenc{<~supi, ~R>}pk(~sk_HN)
		suci = <conc_supi, ~idHN>
		SNID = <'5G', idSN> // HSS checks that the received SNID matches the authenticated channel with idSN
		msgIn = <suci, SNID >
		SqnNext = SqnHSS + '1'
		
		// 2. Send
                //     a. ARPF part
		MAC = f1(~k, <SqnNext, ~RAND, SNID>)
	 	XRES = f2(~k, ~RAND)
		CK = f3(~k, ~RAND)
		IK = f4(~k, ~RAND)
		AK = f5(~k, ~RAND)
		AUTN = <SqnNext XOR AK, MAC>
		K_seaf = KDF(KDF(<CK, IK>, <SNID, SqnNext XOR AK>), SNID)
		XRES_star = KDF(<CK, IK>, <SNID, XRES, ~RAND>)

		//     b. AUSF part
                HXRES_star = SHA256(XRES_star, ~RAND)
		5G_AV = < ~RAND, HXRES_star, K_seaf, AUTN >

		msgOut = 5G_AV
        in
	[!HSS(~idHN, ~sk_HN),
	 RcvS(idSN, ~idHN, <'air', msgIn>),
	 !Ltk_Sym(~supi, ~idHN, ~k, ~sqn_root),
	 Sqn_HSS(~supi, ~idHN, SqnHSS, ~sqn_root, count),
	 Fr(~RAND),
	 Fr(~tid),
	 In(count)]
	--[
		// Open chains
		Sqn_HSS_Invariance(~idHN, ~supi, SqnNext, ~sqn_root, count+'1'),
		Src(~RAND, AUTN),

		// Executability
		Start_HSS_Session(~idHN),
		HSS_Send_Aia(),

		// Security properties
		Running(~idHN, idSN,<'SEAF','HSS',<'K_seaf', K_seaf>>),
		Running(~idHN, idSN,<'SEAF','HSS',<'supi', ~supi>>),
		Running(~idHN, idSN,<'SEAF','HSS',<'RES_star', XRES_star>>),
		Running(~idHN, ~supi,<'UE','HSS', <'K_seaf', K_seaf>>),
		Running(~idHN, ~supi,<'UE','HSS', <'snname', idSN>>),
		Running(~idHN, ~supi,<'UE','HSS',<'supi', ~supi>>),
		Running(~idHN, ~supi,<'UE','HSS',<'AUTN', AUTN>>),
		Honest(~supi),
		Honest(~idHN),
		Honest(idSN)
	]->
	[St_1_HSS(~tid, ~idHN, ~supi, suci, idSN, SNID, ~k, SqnNext, XRES_star, ~RAND, ~sqn_root, ~sk_HN),
         Sqn_HSS(~supi, ~idHN, SqnNext, ~sqn_root, count+'1'),
         SndS(~idHN, idSN, <'aia', msgOut>)]


// 5G Authentication Initiation Answer (5G-AIA) + Authentication Request (Auth-Req)
rule seaf_receive_aia_send_authReq:
	let
		5G_AV = < RAND, HXRES_star, K_seaf, AUTN >
		msgIn = 5G_AV
                msgOut = < RAND, AUTN, SNID >
        in
	[St_1_SEAF(~tid, ~idSN, SNID, conc_supi, idHN),
	 RcvS(idHN, ~idSN, <'aia', msgIn>)]
	--[
		// Open chains
		Out_Src(RAND, AUTN),

                // Security properties
		Running(~idSN, idHN, <'HSS','SEAF', <'K_seaf', K_seaf>>)
	]->
	[St_2_SEAF(~tid, ~idSN, SNID, conc_supi, idHN, RAND, HXRES_star, K_seaf)
	, Out(msgOut)]


// Authentication Request (Auth-Req) + Authentication Response (Auth-Resp)
// The UE accepts a Sqn iff it is greater than SqnMax (delta = infinity).
// The UE stores the greatest Sqn accepted.
rule ue_receive_authReq_freshness_success_send_authResp:
	let
		// Input, checks
		SqnHSS = SqnUE + dif // check freshness
		AK = f5(~k, RAND)
		SNID = <'5G', idSN>	
		MAC = f1(~k, <SqnHSS, RAND, SNID>) // check on the MAC
                AUTN = <SqnHSS XOR AK, MAC>
		msgIn = < RAND, AUTN, SNID >
		// Output
		RES = f2(~k, RAND)
		IK = f4(~k, RAND)
		CK = f3(~k, RAND)
		RES_star = KDF(<CK, IK>, <SNID, RES, RAND>)
		K_seaf = KDF(KDF(<CK, IK>, <SNID, SqnHSS XOR AK>), SNID)
		msgOut = RES_star
	in
	[St_1_UE(~tid, ~supi, ~idHN, ~k, ~sqn_root),
	 Sqn_UE(~supi, ~idHN, SqnUE, ~sqn_root, count),
	 In(msgIn)]
	--[
		// Open chains
		Sqn_UE_Invariance(~supi, ~idHN, SqnHSS, ~sqn_root, count+dif),

		// Helper lemmas
		Sqn_UE_Change(~supi, ~idHN, SqnHSS),
		Sqn_UE_Use(~supi, ~idHN, SqnHSS),

		// Security properties
		Running(~supi, idSN,<'SEAF','UE',<'RES_star', RES_star>>),
		Running(~supi, idSN,<'SEAF','UE',<'K_seaf', K_seaf>>),
		Running(~supi, idSN,<'SEAF','UE',<'supi', ~supi>>),
		Running(~supi, ~idHN, <'HSS','UE', <'K_seaf', K_seaf>>),
		Running(~supi, ~idHN, <'HSS','UE', <'snname', idSN>>),
		Running(~supi, ~idHN, <'HSS','UE', <'supi', ~supi>>),
		Running(~supi, ~idHN, <'HSS','UE', <'RAND', RAND>>),
		Secret(<'UE', ~supi>, 'key', K_seaf),
		Secret(<'UE', ~supi>, 'supi', ~supi),
		Secret(<'UE', ~supi>, 'k', ~k),
		Commit(~supi, ~idHN, <'UE','HSS',<'AUTN', AUTN>>),
		Commit(~supi, ~idHN, <'UE','HSS',<'supi', ~supi>>),
		Commit(~supi, ~idHN, <'UE','HSS', <'snname', idSN>>),
		Commit(~supi, ~idHN, <'UE','HSS', <'K_seaf', K_seaf>>),
		Commit(~supi, idSN, <'UE','SEAF',<'K_seaf', K_seaf>>),
		Commit(~supi, idSN, <'UE','SEAF',<'RAND', RAND>>),
		Honest(~supi),
		Honest(~idHN),
		Honest(idSN)		
	]->
	[St_2_UE(~tid, ~supi, ~idHN, ~k, ~sqn_root, idSN, K_seaf),
	 Out(msgOut),
	 Sqn_UE(~supi, ~idHN, SqnHSS, ~sqn_root, count+dif)]


// Authentication Request (Auth-Req) and Sync Failure
// [3G] Clauses C.2.1, C.2.2
// The UE reports sync failure if:
// 	- Received Sqn is bigger but too big (e.g., jumpsize can be at most delta),
//	- or Received Sqn is not bigger.
// [3G] Clauses 6.3.3, 6.3.5
rule ue_receive_authReq_fail_freshness_send_sync_failure:
	let
		// Input, checks
		AK = f5(~k, RAND)
		SNID = <'5G', idSN>
		MAC = f1(~k, <SqnHSS, RAND, SNID>) // check on the MAC
                AUTN = <SqnHSS XOR AK, MAC>
		msgIn = < RAND, AUTN, SNID >
		// Output
		AKS = f5_star(~k, RAND)
		MACS = f1_star(~k, <SqnUE, RAND>)
		AUTS = <SqnUE XOR AKS, MACS >
		out_msg = AUTS
	in
	[St_1_UE(~tid, ~supi, ~idHN, ~k, ~sqn_root),
	 Sqn_UE(~supi, ~idHN, SqnUE, ~sqn_root, count),
	 In(msgIn),
	 In(count)]		// necessary to avoid open chains
	--[
		// Restriction
		Greater_Or_Equal_Than(SqnUE, SqnHSS), // Check freshness (FAIL)

		// Open chains
                Sqn_UE_Invariance(~supi, ~idHN, SqnUE, ~sqn_root, count),

	        // Helper lemmas
		Sqn_UE_Nochange(~supi, ~idHN, SqnUE)
	]->
	[Out(out_msg),
	 Sqn_UE(~supi, ~idHN, SqnUE, ~sqn_root, count)]

// Authentication Response (Auth-Resp) + 5G Authentication Confirmation (5G-AC)
// NOTE: The 5G-AC is a subsequent authentication requests to the service "Nausf_UEAuthentication_Authenticate" (see TS 33.501 9.6.2).
rule seaf_receive_authResp_send_ac:
	let
		HXRES_star = SHA256(RES_star, RAND)
		suci = <conc_supi,  idHN>
		msgOut = < RES_star, suci, SNID >
	in
	[St_2_SEAF(~tid, ~idSN, SNID, conc_supi, idHN, RAND, HXRES_star, K_seaf),
	 In(RES_star)]
	--[
		// Security properties
		Running(~idSN, idHN, <'HSS','SEAF', <'RES_star', RES_star>>)
	]->
	[St_3_SEAF(~tid, ~idSN, SNID, conc_supi, idHN, RAND, RES_star, K_seaf),
	SndS(~idSN, idHN, <'ac', msgOut>)]


// Synchronization Failure and 5G Authentication Synchronization message
// [5G] Clause 6.1.3.2.1
// [3G] Clauses 6.3.3 and 6.3.5
// Note that in this model, the SEAF aborts the procedure, and does not wait
// for the resynced AVs. After resync, the HSS also does not directly send
// the AVs, but needs to be asked again.
rule seaf_receive_syncFailure_send_authSync:
	let
		AUTS = < SqnUEXorAKS, MACS >
		out_msg = < RAND, AUTS >
	in
	[St_2_SEAF(~tid, ~idSN, SNID, conc_supi, idHN, RAND, HXRES_star, K_seaf),
	 In(AUTS)]
	-->
	[SndS(~idSN, idHN, <'resync', out_msg>)]

// 5G Authentication Confirmation (5G-AC) + Authentication Confirmation Answer (5G-ACA)
// NOTE: 5G-AC is a subsequent authentication requests to the service "Nausf_UEAuthentication_Authenticate" (see TS 33.501 9.6.2).
// NOTE: 5G-ACA is the corresponding response by the service.
rule hss_receive_ac_send_aca:
	let
		SNID = <'5G', idSN>
		CK = f3(~k, ~RAND)
		IK = f4(~k, ~RAND)
		AK = f5(~k, ~RAND)
		K_seaf = KDF(KDF(<CK, IK>, <SNID, Sqn XOR AK>), SNID)
		msgIn = < XRES_star, suci, SNID >

		msgOut = <'confirm', ~supi>
	in
	[St_1_HSS(~tid, ~idHN, ~supi, suci, idSN, SNID, ~k, Sqn, XRES_star, ~RAND, ~sqn_root, ~sk_HN),
	 RcvS(idSN, ~idHN, <'ac',msgIn>)]
	--[
		// Executability
		HSS_End(),

		// Security properties
		Secret(<'HSS', ~idHN>, 'key', K_seaf),
		Secret(<'HSS', ~idHN>, 'supi', ~supi),
		Secret(<'HSS', ~idHN>, 'k', ~k),
		Commit(~idHN, idSN, <'HSS','SEAF', <'K_seaf', K_seaf>>),
		Commit(~idHN, idSN, <'HSS','SEAF', <'supi', ~supi>>),
		Commit(~idHN, idSN, <'HSS','SEAF', <'RES_star', XRES_star>>),
		Commit(~idHN, ~supi, <'HSS','UE', <'K_seaf', K_seaf>>),
		Commit(~idHN, ~supi, <'HSS','UE', <'snname', idSN>>),
		Commit(~idHN, ~supi, <'HSS','UE', <'supi', ~supi>>),
		Commit(~idHN, ~supi, <'HSS','UE', <'RAND', ~RAND>>),
		Honest(~idHN),
		Honest(~supi),
		Honest(idSN)
	]->
	[SndS(~idHN, idSN, <'aca', msgOut>)]

// Authentication Confirmation Answer (5G-ACA)
rule seaf_receive_aca:
        let
		SNID = <'5G', ~idSN>
		msgIn = <'confirm', supi>
	in
        [St_3_SEAF(~tid, ~idSN, SNID, conc_supi, idHN, ~RAND, RES_star, K_seaf),
	 RcvS(idHN, ~idSN, <'aca', msgIn>)]
	--[
		// Executability
		SEAF_End(),

		// Security properties
		Running(~idSN, supi,<'UE','SEAF',<'K_seaf', K_seaf>>),
		Running(~idSN, idHN,<'HSS','SEAF',<'supi', supi>>),
		Secret(<'SEAF', ~idSN>, 'key', K_seaf),
		Secret(<'SEAF', ~idSN>, 'supi', supi),
		Commit(~idSN, idHN, <'SEAF','HSS', <'K_seaf', K_seaf>>),
		Commit(~idSN, idHN, <'SEAF','HSS', <'supi', supi>>),
		Commit(~idSN, idHN, <'SEAF','HSS', <'RES_star', RES_star>>),
		Commit(~idSN, supi, <'SEAF','UE', <'K_seaf', K_seaf>>),
		Commit(~idSN, supi, <'SEAF','UE', <'supi', supi>>),
		Commit(~idSN, supi, <'SEAF','UE', <'RES_star', RES_star>>),
		Honest(supi),
		Honest(idHN),
		Honest(~idSN)
	]->
	[St_4_SEAF(~tid, ~idSN, SNID, conc_supi, idHN, ~RAND, RES_star, K_seaf,supi),
	 Out(f1(K_seaf, 'SEAF'))] // Key confimration message with UE

// 5G Authentication Synchronization message
// In this model, the HSS aborts after resync, and does NOT
// directly send the new AVs. Need to rerun the protocol.
// Sqn is only updated if needed. (recal that delta = infinity in this model)
rule hss_receive_authSync:
	let
		SqnUE = dif + SqnHSS // check that SqnUE > SqnHSS
		AKS = f5_star(~k, ~RAND)
		MACS = f1_star(~k, <SqnUE, ~RAND>)
		AUTS = <SqnUE XOR AKS, MACS >
		msg = < ~RAND, AUTS >

	in
	[St_1_HSS(~tid, ~idHN, ~supi, suci, idSN, SNID, ~k, SqnHSS, XRES_star, ~RAND, ~sqn_root, ~sk_HN),
	 Sqn_HSS(~supi, ~idHN, SqnHSS, ~sqn_root, count),
	 RcvS(idSN, ~idHN, <'resync', msg>),
	 In(count+dif)]
	--[
		// Open chains
		Sqn_HSS_Invariance(~idHN, ~supi, SqnUE, ~sqn_root, count+dif),

		// Executability
		HSS_Resync_End(count+dif)
	]->
	[Sqn_HSS(~supi, ~idHN, SqnUE, ~sqn_root, count+dif)]

// Key confirmation between SEAF and UE (in order to model 'implicit authentication')
rule ue_key_confirmation:
        [St_2_UE(~tid, ~supi, ~idHN, ~k, ~sqn_root, idSN, K_seaf),
	 In(f1(K_seaf, 'SEAF'))]
        --[
		// Security properties (after key confirmation)
	        CommitConf(~supi, ~idHN, <'UE','HSS', <'K_seaf', K_seaf>>),
	        CommitConf(~supi, ~idHN, <'UE','HSS', <'snname', idSN>>),
	        CommitConf(~supi, ~idHN, <'UE','HSS', <'supi', ~supi>>),
		CommitConf(~supi, idSN, <'UE','SEAF',<'K_seaf', K_seaf>>),
		SecretConf(<'UE', ~supi>, 'supi', ~supi),
		Honest(~supi),
		Honest(~idHN),
		Honest(idSN)		
	]->
	[Out(f1(K_seaf, 'UE'))]

rule seaf_key_confirmation_check:
       	[St_4_SEAF(~tid, ~idSN, SNID, conc_supi, idHN, ~RAND, RES_star, K_seaf,supi),
	 In(f1(K_seaf, 'UE'))]
        --[
		// Security properties
		CommitConf(~idSN, idHN, <'SEAF','HSS', <'K_seaf', K_seaf>>),
		CommitConf(~idSN, idHN, <'SEAF','HSS', <'supi', supi>>),
		CommitConf(~idSN, supi, <'SEAF','UE', <'K_seaf', K_seaf>>),
		CommitConf(~idSN, supi, <'SEAF','UE', <'supi', supi>>),
		Honest(supi),
		Honest(idHN),
		Honest(~idSN),
		SEAF_EndConf()
	]->
	[]


/************************************/
/*     Restrictions / Axioms        */
/************************************/

restriction subscribe_once:
	" All HN1 HN2 supi #i #j. Subscribe(supi, HN1)@i & Subscribe(supi, HN2)@j ==> (#i = #j & HN1 = HN2)"

restriction greater_or_equal_than:
  	" All x y #i. Greater_Or_Equal_Than(x,y)@i ==> not (Ex z. x + z = y) "

// Dummy lemma for timing info only.
lemma dummy: "not(F)"

/************************************/
/*         Sources lemmas           */
/************************************/

// proof (automatic) (~1 sec)
lemma rand_autn_src [sources]:
  	" All RAND AUTN #i. Out_Src(RAND, AUTN)@i
		==> (Ex #j. Src(RAND, AUTN)@j & j < i)
		    | (Ex #j x1 x2. Injected(<'aia', <RAND, x1, x2, AUTN>>)@j & j < i) "


// proof (automatic) (~1 sec)
lemma sqn_ue_invariance [heuristic={sqn_many}, use_induction, sources]:
	" All supi HN Sqn sqn_root count #i.
		Sqn_UE_Invariance(supi, HN, Sqn, sqn_root, count)@i
			==> sqn_root + count = Sqn"

// proof (automatic) (~1 sec)
lemma sqn_hss_invariance [heuristic={sqn_many}, use_induction, sources]:
	" All HN supi Sqn sqn_root count #i.
		Sqn_HSS_Invariance(HN, supi, Sqn, sqn_root, count)@i
			==> sqn_root + count = Sqn "

/************************************/
/*          Helper lemmas           */
/************************************/

// proof (automatic) (~1 sec)
lemma sqn_ue_src [heuristic={sqn_many}, use_induction, reuse]:
	" All supi HN Sqn sqn_root count #i.
		Sqn_UE_Invariance(supi, HN, Sqn, sqn_root, count)@i
			==> (Ex #j. Sqn_Create(supi, HN, sqn_root)@j & j < i) "

// proof (automatic) (~1 sec)
lemma sqn_hss_src [heuristic={sqn_many}, reuse]:
	" All HN supi Sqn sqn_root count #i.
		Sqn_HSS_Invariance(HN, supi, Sqn, sqn_root, count)@i
			==> (Ex #j. Sqn_Create(supi, HN, sqn_root)@j & j < i) "

// proof (automatic) (~2 min)
lemma sqn_ue_nodecrease [heuristic={sqn_ue_nodecrease}, use_induction, reuse]:
	" (All supi HN Sqni Sqnj #i #j.
		(Sqn_UE_Change(supi, HN, Sqnj)@j &
		 Sqn_UE_Change(supi, HN, Sqni)@i &
		 i < j)	==> (Ex dif. Sqnj = Sqni + dif)) &
	  (All supi HN Sqni Sqnj #i #j.
		(Sqn_UE_Change(supi, HN, Sqnj)@j &
		 Sqn_UE_Nochange(supi, HN, Sqni)@i &
		 i < j)	==> (Ex dif. Sqnj = Sqni + dif)) &
	  (All supi HN Sqni Sqnj #i #j.
		(Sqn_UE_Nochange(supi, HN, Sqnj)@j &
		 Sqn_UE_Change(supi, HN, Sqni)@i &
		 i < j)	==> ((Sqnj = Sqni) | (Ex dif. Sqnj = Sqni + dif))) &
	  (All supi HN Sqni Sqnj #i #j.
		(Sqn_UE_Nochange(supi, HN, Sqnj)@j &
		 Sqn_UE_Nochange(supi, HN, Sqni)@i &
		 i < j)	==> ((Sqnj = Sqni) | (Ex dif. Sqnj = Sqni + dif))) "

// proof (automatic) (~1 sec)
lemma sqn_ue_unique [reuse, hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src]:
	" All supi HN Sqn #i #j.
		Sqn_UE_Use(supi, HN, Sqn)@i & Sqn_UE_Use(supi, HN, Sqn)@j
			==> #i = #j "


/************************************/
/*     Executability lemmas         */
/************************************/

// This lemma shows a normal execution without resync.
// proof (automatic) (~20 sec)
lemma executability_honest [heuristic={executability_honest}]:
	exists-trace
	" Ex #i. SEAF_End()@i
		& not (Ex X data #r. Rev(X,data)@r)
		& (All supi HN sqn_root #i. Sqn_Create(supi, HN, sqn_root)@i
				==> not (Ex #j. K(sqn_root)@j))
		& (All HN1 HN2 #j #k. HomeNet(HN1)@j &
				      HomeNet(HN2)@k ==> #j = #k)
		& (All S1 S2 HN1 HN2 #j #k. Subscribe(S1, HN1)@j &
					    Subscribe(S2, HN2)@k ==> #j = #k)
		& (All SNID1 SNID2 #j #k. Start_SEAF_Session(SNID1)@j &
				          Start_SEAF_Session(SNID2)@k ==> #j = #k) 
		& (All UE1 UE2 #j #k. Start_UE_Session(UE1)@j &
				          Start_UE_Session(UE2)@k ==> #j = #k) 
		& (All HN1 HN2 #j #k. Start_HSS_Session(HN1)@j &
				      Start_HSS_Session(HN2)@k ==> #j = #k)"


// This lemma shows a normal execution without resync. but with key confirmation
// proof (automatic) (~2 min)
lemma executability_keyConf_honest:
	exists-trace
	" Ex #i. SEAF_EndConf()@i
		& not (Ex X data #r. Rev(X,data)@r)
		& (All supi HN sqn_root #i. Sqn_Create(supi, HN, sqn_root)@i
				==> not (Ex #j. K(sqn_root)@j))
		& (All HN1 HN2 #j #k. HomeNet(HN1)@j &
				      HomeNet(HN2)@k ==> #j = #k)
		& (All S1 S2 HN1 HN2 #j #k. Subscribe(S1, HN1)@j &
					    Subscribe(S2, HN2)@k ==> #j = #k)
		& (All SNID1 SNID2 #j #k. Start_SEAF_Session(SNID1)@j &
				          Start_SEAF_Session(SNID2)@k ==> #j = #k) 
		& (All UE1 UE2 #j #k. Start_UE_Session(UE1)@j &
				          Start_UE_Session(UE2)@k ==> #j = #k) 
		& (All HN1 HN2 #j #k. Start_HSS_Session(HN1)@j &
				      Start_HSS_Session(HN2)@k ==> #j = #k)"

// proof (automatic) (~2 min)
lemma executability_desync[heuristic={executability_sync}]:
	exists-trace
	" Ex dif #i.
                  HSS_Resync_End(dif)@i
		& not (Ex X data #r. Rev(X,data)@r)
		& (All supi HN sqn_root #i. Sqn_Create(supi, HN, sqn_root)@i
				==> not (Ex #j. K(sqn_root)@j))
		& (All HN1 HN2 #j #k. HomeNet(HN1)@j &
				      HomeNet(HN2)@k ==> #j = #k)
		& (All S1 S2 HN1 HN2 #j #k. Subscribe(S1, HN1)@j &
					    Subscribe(S2, HN2)@k ==> #j = #k)
		& (All SNID1 SNID2 #j #k. Start_SEAF_Session(SNID1)@j &
				          Start_SEAF_Session(SNID2)@k ==> #j = #k) 
		& (All UE1 UE2 #j #k. Start_UE_Session(UE1)@j &
				          Start_UE_Session(UE2)@k ==> #j = #k) 
		& (All #j #k. Sqn_UE_Desync()@j & Sqn_UE_Desync()@k ==> #j = #k)
		& (All HN1 HN2 #j #k. Start_HSS_Session(HN1)@j &
				      Start_HSS_Session(HN2)@k ==> #j = #k)"

// proof (automatic) (~5 min)
lemma executability_resync[heuristic={executability_sync}]:
	exists-trace
	" Ex #i1 #i2 #i3 #i4 X.
		  Start_HSS_Session(X)@i1
		& HSS_Resync_End('1'+'1'+'1'+'1')@i2
		& Start_HSS_Session(X)@i3
		& HSS_End()@i4
		& #i1 < #i2
		& #i2 < #i3
		& #i3 < #i4
		& not (Ex X data #r. Rev(X,data)@r)
		& (All #j #k. Sqn_UE_Desync()@j & Sqn_UE_Desync()@k ==> #j = #k)
		& (All a b #j #k. HSS_Resync_End(a)@j & HSS_Resync_End(b)@k ==> #j = #k)
		& (All #j #k #l. HSS_Send_Aia()@j &
				 HSS_Send_Aia()@k &
				 HSS_Send_Aia()@l &
				 not #j = #k ==> (#j = #l | #k = #l))
		& (All #j #k. HSS_End()@j & HSS_End()@k ==> #j = #k)
		& (All supi HN sqn_root #i. Sqn_Create(supi, HN, sqn_root)@i
				==> not (Ex #j. KU(sqn_root)@j))
		& (All HN1 HN2 #j #k. HomeNet(HN1)@j &
				      HomeNet(HN2)@k ==> #j = #k)
		& (All SN1 SN2 #j #k. ServNet(SN1)@j &
				      ServNet(SN2)@k ==> #j = #k)
		& (All S1 S2 H1 H2 sqn_root1 sqn_root2 #k #j.
				Sqn_Create(S1, H1, sqn_root1)@j &
				Sqn_Create(S2, H2, sqn_root2)@k ==> #j = #k)
		& (All UE1 UE2 UE3 #j #k #l. Start_UE_Session(UE1)@j &
			         Start_UE_Session(UE2)@k &
			         Start_UE_Session(UE3)@l &
				 not #j = #k ==> (#j = #l | #k = #l)) 
		& (All HN1 HN2 HN3 #j #k #l. Start_HSS_Session(HN1)@j &
			         Start_HSS_Session(HN2)@k &
			         Start_HSS_Session(HN3)@l &
				 not #j = #k ==> (#j = #l | #k = #l)) 
		& (All SNID1 SNID2 SNID3 #j #k #l. Start_SEAF_Session(SNID1)@j &
			         Start_SEAF_Session(SNID2)@k &
			         Start_SEAF_Session(SNID3)@l &
				 not #j = #k ==> (#j = #l | #k = #l))"

/********************************************/
/*     Agreement UE -> HSS (before KC)      */
/********************************************/

// proof (automatic) (~12 min)
lemma injectiveagreement_ue_hss_kseaf_noKeyRev [heuristic={injective_or_not_agreement_ue_hss_kseaf_noKeyRev}, hide_lemma=sqn_ue_src, hide_lemma=sqn_ue_nodecrease]:
	" All a b t #i. Commit(a,b,<'UE','HSS',<'K_seaf', t>>)@i
    		==> (Ex #j. Running(b,a,<'UE','HSS',<'K_seaf', t>>)@j 
        	     & j < i
        	     & not (Ex a2 b2 #i2. Commit(a2,b2,<'UE','HSS',<'K_seaf', t>>)@i2
                           	& not (#i2 = #i)))
             	| (Ex X key #r. Rev(X, <'k',key>)@r & Honest(X)@i) "

// proof (automatic) (~30 sec)
lemma noninjectiveagreement_ue_hss_snname_noKeyRev [heuristic={injective_or_not_agreement_ue_hss_kseaf_noKeyRev}, hide_lemma=sqn_ue_src, hide_lemma=sqn_ue_nodecrease]:
	" All a b t #i. Commit(a,b,<'UE','HSS',<'snname', t>>)@i
    		==> (Ex #j. Running(b,a,<'UE','HSS',<'snname', t>>)@j)
             	| (Ex X key #r. Rev(X, <'k',key>)@r & Honest(X)@i) "

end


