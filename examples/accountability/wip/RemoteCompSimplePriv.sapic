theory RemoteCompSimplePriv
begin

builtins:
  signing, asymmetric-encryption

functions: 
  ZK/7, verZK/1, Pub/1, f/2,
  commit/2, open/2,

  // sign/2, verify/3, pk/1, and true/0 are from builtins
  // equations: verify(sign(m,sk),m,pk(sk)) = true
  //            adec(aenc(m, pk(sk)), sk) = m
  extract/1, sk/1[private]  

equations: 
  Pub(ZK(<commit(x,rx),commit(y,ry),commit(f(x,y),rz)>,x,y,f(x,y),rx,ry,rz)) = <commit(x,rx),commit(y,ry),commit(f(x,y),rz)>,
  verZK(ZK(<commit(x,rx),commit(y,ry),commit(f(x,y),rz)>,x,y,f(x,y),rx,ry,rz)) = true,
  extract(sign(x,y)) = x


// Every msg sent will be in encrypt-then-authenticate form
// thus sig[Var] means it is a signature of the ciphertext of Var
let A  = 
(
  let Cy  = commit(y,ry) in
  let cInitS  = aenc(Cy,pk(sk('S'))) in
  let cInitJ  = aenc(Cy,pk(sk('J'))) in

  let x   = adec(cXA,sk('A')) in
  let z   = f(x,y) in
  let Cx  = commit(x,rx) in
  let Cz  = commit(z,rz) in
  let res   = <z,rz,rx> in
  let cResS = aenc(res,pk(sk('S'))) in
  let cResJ = aenc(res,pk(sk('J'))) in

  let Z     = ZK(<Cx,Cy,Cz>,x,y,z,rx,ry,rz) in
  let log   = <sigX,Cx,Cz,Z> in
  let cLogJ = aenc(log,pk(sk('J'))) in



  new y; new ry;
  
  // initialize
  out (<'A','S','Initalize',cInitS,sign(cInitS,sk('A'))>);
  out (<'A','J','Initalize',cInitJ,sign(cInitJ,sk('A'))>);

  // gets x from S
  in (<'S','A','XVal',cXA,sigX>);
  if verify(sigX,cXA,pk(sk('S'))) = true()
    then
    (
      new rz; new rx;

      // sends the result of the computation
      out (<'A','S','Res',cResS,sign(cResS,sk('A'))>);
      out (<'A','J','Res',cResJ,sign(cResJ,sk('A'))>);

      // sends the log to J
      out (<'A','J','Log',cLogJ,sign(cLogJ,sk('A'))>);

      // finalize
      event Final()
    )
)


// Always check integrity
let S =
(
  let cXA = aenc(x,pk(sk('A'))) in
  let Cy  = adec(cInitS,sk('S')) in

  let res = adec(cResS,sk('S')) in
  // res = <z,rz,rx>
  let z   = fst(res) in
  let rz  = fst(snd(res)) in
  let rx  = snd(snd(res)) in

  let log = adec(cLogS,sk('S')) in
  // log = <sigX,Cx,Cz,Z>
  let Cx  = fst(snd(log)) in
  let Cz  = fst(snd(snd(log))) in
  let Z   = snd(snd(snd(log))) in


  // receive the initialization from A
  in (<'A','S','Initialize',cInitS,sigInit>);
  if verify(sigInit,cInitS,pk(sk('A'))) = true()
    then
    (
      // sends x to A
      new x; out (<'S','A','XVal',cXA,sign(cXA,sk('S'))>);

      // receive the result from A
      in (<'A','S','Res',cResS,sigRes>);
      if verify(sigRes,cResS,pk(sk('A'))) = true()
        then
        (
          // receive the log from J
          in (<'J','S','Log',cLogS,sigLog>);
          if verify(sigLog,cLogS,pk(sk('J'))) = true()
            then
            (
              if Cx = commit(x,rx) then 
                if Cz = commit(z,rz) then
                  if <Cx,Cy,Cz> = Pub(Z) then
                    event Accepted(<x,z,sigRes>)
            )
        )
    )
)


let J = 
(
  let Cy  = adec(cInitJ,sk('J')) in
  
  let log   = adec(cLogJ,sk('J')) in
  let cLogS = aenc(log,pk(sk('S'))) in 

  // sigX is a signature of aenc(x,pk(sk('A')))
  let sigX  = fst(log) in
  let Cx    = fst(snd(log)) in
  let Cz    = fst(snd(snd(log))) in
  let Z     = snd(snd(snd(log))) in

  let res = adec(cResJ,sk('J')) in
  // res = <z,rz,rx>
  let z   = fst(res) in
  let rz  = fst(snd(res)) in
  let rx  = snd(snd(res)) in

  // All signature here are signature on ciphertext!

  // receive the initialization from A
  in (<'A','J','Initalize',cInitJ,sigInit>);
  if verify(sigInit,cInitJ,pk(sk('A'))) = true()
    then
    (
      event Initialize(Cy);

      // receive the log from A
      in (<'A','J','Log',cLogJ,sigLog>);
      if verify(sigLog,cLogJ,pk(sk('A'))) = true()
        then
        (
          event Log(<sigLog,log>);
          // reencrypt and re-sign the log for S
          out (<'J','S','Log',cLogS,sign(cLogS,sk('J'))>);

          // receive the result of computation from A 
          // sigRes is a signature of aenc(res,pk(sk('J')))
          in (<'A','J','Res',cResJ,sigRes>);
          if verify(sigRes,cResJ,pk(sk('A'))) = true()
            then
            (
              // Now, the verdicts
              if verZK(Z) = true()
                 then 
                  (
                    if <Cx,Cy,Cz> = Pub(Z)
                       then 
                        (
                          if verify(sigX,aenc(open(Cx,rx),pk(sk('A'))),pk(sk('S'))) = true()
                             then 
                              (
                                event HonestA();
                                if verify(sigRes,aenc(<open(Cz,rz),rz,rx>,pk(sk('J'))),pk(sk('A'))) = true()
                                   then event HonestS()
                                   else event NotHonestS()
                              )
                             else 
                              (
                                event NotHonestA();
                                event NotHonestS()
                              )
                        )
                       else
                        (
                          event NotHonestA();
                          if verify(sigX,aenc(open(Cx,rx),pk(sk('A'))),pk(sk('S'))) = true()
                             then 
                              (
                                if verify(sigRes,aenc(<open(Cz,rz),rz,rx>,pk(sk('J'))),pk(sk('A'))) = true()
                                   then event HonestS()
                                   else event NotHonestS()
                              )
                             else event NotHonestS()
                        )
                  )
                 else 
                  (
                    event NotHonestA();
                    if verify(sigX,aenc(open(Cx,rx),pk(sk('A'))),pk(sk('S'))) = true()
                       then 
                        (
                          if verify(sigRes,aenc(<open(Cz,rz),rz,rx>,pk(sk('J'))),pk(sk('A'))) = true()
                             then event HonestS()
                             else event NotHonestS()
                        )
                       else event NotHonestS()
                  )
            )
        )
    )
)

A || S || J
|| !( in (<'corrupt',$x>);
      // corrupt some public party x, except J
      if pred_not_eq($x,'J')
        then
        (
          event Corrupted($x);
          out (sk($x))
        )
    )

lemma sanity_exists_accepted:
  exists-trace
    "Ex #i a. Accepted(a)@i"

lemma sanity_exists_final:
  exists-trace
    "Ex #j. Final()@j"

lemma honest_run:
  "
    ( All x z r #i. Accepted(<x,z,r>)@#i
      ==>
      ( Ex #j #k Cy ry. Initialize(Cy)@#j & Final()@#k 
        & #j < #i & #i < #k
        & z = f(x,open(Cy,ry))
      )
    )
  "

lemma honest_run_1:
  exists-trace
  "
    ( Ex x z r #i #j #k Cy ry. Accepted(<x,z,r>)@#i 
      & Initialize(Cy)@#j & Final()@#k 
      & z = f(x,open(Cy,ry))
    )
  "

verdictfunction v1: 
  " Ex #i #j. NotHonestS()@#i & NotHonestA()@#j
  " -> <'A','S'>,

  " Ex #j. NotHonestA()@#j
  & (not Ex #i. NotHonestS()@#i) 
  " -> <'A'>,

  " Ex #i. NotHonestS()@#i
  & (not Ex #j. NotHonestA()@#j)
  " -> <'S'>,

  otherwise -> <>

lemma acc: 
  v1 accounts  
  for "
      ( All x z r #i. Accepted(<x,z,r>) @ #i
        ==> 
        ( Ex #j #k Cy ry. Initialize(Cy) @ #j & Final() @ #k
        //& #j < #i & #i < #k
        & z = f(x,open(Cy,ry))
        )
      ) 
      "
  for parties <'A','S'> 

end
