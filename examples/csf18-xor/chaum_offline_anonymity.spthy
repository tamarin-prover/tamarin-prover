theory Chaum_Offline_Anonymity
begin


/*
 * Protocol: Chaum's Offline eCash Protocol
 * Based on: Charles DumÃ©nil's model of Chaum's Online Protocol
 * Focus on anonymity, defined as secrecy of customer's name
 * 
 *  Automatic proof requires oracle, see associated oracle file. 
 */


/*
  Protocol ChaumOfflineECash { 
    Withdrawal phase
     C -> B: blind(x XOR C,r), blind(x,r)
     B -> C: sign(blind(x XOR C,r),skB), sign(blind(x,r),skB)    "Withdraw"
    Payment and deposit phase
     C -> S: <x, sign(x,skB)>        "Check signature" 
     S -> B: <x, sign(x,skB)>        "Check signature" 
  }

  Tamarin model below is on the following:
  Protocol ChaumOfflineECash { ( Seller and bank are considered corrupted )
    Withdrawal phase
     C -> E: blind(x XOR C,r), blind(x,r)
     E -> C: sign(blind(x XOR C,r),skB), sign(blind(x,r),skB)    "Withdraw"
    Payment and deposit phase
     C -> E: <x, sign(x,skB)>        "Check signature" 
  }

*/


builtins: xor
functions: pk/1, sign/2, checksign/2, blind/2, unblind/2
equations [convergent]: checksign( sign(m,k),pk(k) ) = m,
           unblind( blind(m,r),r ) = m,
           unblind( sign(blind(m,r),k),r ) = sign(m,k)
tactic: coins
presort: C
prio:
  regex "!St_C_1"
prio:
  regex "!Bank_Pk"
prio:
  regex "\(last"
prio:
  regex "splitEqs"
prio:
  regex "Mint"
prio:
  regex "~~>"
prio:
  regex "!KU\( ~r"


// Public key infrastructure

rule Register_Corrupted_Bank_pk:
  [ Fr(~ltkB) ]
  --[ OnlyOnce() ]->
  [ !Bank_Ltk($B, ~ltkB), !Bank_Pk($B, pk(~ltkB)), Out(~ltkB) ]

// Identities

// Generate a customer identity and give it to the adversary
rule regular_agent:
  [ Fr(~C) ]
  --[ ]->
  [ !Customer(~C), Out(~C) ]

// Generate a test subject identity, don't give it to the adversary
rule test_subject:
  [ Fr(~C) ]
  --[ TestSubject(~C) ]->
  [ !Customer(~C) ]


// Withdrawal Phase

rule C_1:
    [ Fr(~x)
    , Fr(~r)
    , !Customer(~C) ]
  --[ Mint(~x XOR ~C,~x,~r)
    , Mint(~x,~x,~r) 
    ]->
    [ Out( <blind(~x XOR ~C,~r), blind(~x,~r)> )
    , !St_C_1(~C, ~x, ~r )
    ]

// Payment and deposit phase

rule C_2:
  let s = sign(x,~skB) // unblind(sign(blind(x,~r), ~skB),~r)
  in
    [ !St_C_1(C, ~y, ~r ), In( sign(blind(x,~r), ~skB) ), !Bank_Pk($B, pk(~skB)) ]
  --[ Coin(x,~y,~r), Spend(C,~y,~r) ]->
    [ Out(< x, s >) ]


// Axioms

restriction OnlyOnce:
  " All #i #j. OnlyOnce()@i & OnlyOnce()@j ==> #i = #j " 

// Sources 

// PROOF Requires oracle, see associated oracle file.
lemma coins [heuristic={coins}, sources]:
  " All x y r #i. Coin(x,y,r)@i ==> Ex #j. Mint(x,y,r)@j"


// Executability

// SHOWS CORRECT EXECUTION 
lemma exec:
  exists-trace
  " Ex x y r #i. Spend(x,y,r)@i"

// PROVEN AUTOMATICALLY 
// TestSubject is anonymous (subject's name is secret) as long as 
// the subject does not double spend
lemma anonymity:
  "All C #i. TestSubject(C)@i ==> ((not Ex #j. !KU(C)@j) | (Ex x r #i #j. Spend(C,x,r)@i & Spend(C,x,r)@j & not #i = #j))"

// SHOWS CORRECT EXECUTION. 
// TestSubject is NOT anonymous (subject's name not secret) if the subject double spends:
lemma caught:
  exists-trace
  "Ex C #j x r #i1 #i2 #k. TestSubject(C)@j  & !KU(C)@k  & Spend(C,x,r)@i1 & Spend(C,x,r)@i2 & not (#i1 = #i2)"


end

