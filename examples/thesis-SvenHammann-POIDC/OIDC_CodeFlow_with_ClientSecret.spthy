theory OIDC_CodeFlow_with_ClientSecret
/*
 * Protocol:     Standard OpenID Connect code flow, RP using a client_secret for authenticating to the IdP
 * Modeler:      Sven Hammann and Ralf Sasse
 * Described in: "Secure, Private, and Personal: Advancing Digital Identity", doctoral thesis, Sven Hammann
 * Date:      September 2020
 *
 * Status:      working
 */


begin

functions: sign/3, pk/1, true/0, false/0

functions: mangle/2
equations: mangle(sign(m,r1,sk),r2) = sign(m,r2,sk)

functions: e1/1 [private]
functions: e2/1 [private]
functions: e3/1 [private]
equations: e1(sign(x,y,z)) = x
equations: e2(sign(x,y,z)) = y
equations: e3(sign(x,y,z)) = z

rule reSign:
[In(<sk1,r1>), In(sign(m,r2,sk2))]
-->
[Out(sign(m,r1,sk1))]

/*Public key infrastructure*/
rule Get_pk:
    [ !Pk(A, pubkey) ]
  -->
    [ Out(pubkey) ]

/*Public key infrastructure*/
rule Get_pk:
    [ !Pk(A, pubkey) ]
  -->
    [ Out(pubkey) ]


/* Channel Rules*/

rule Hello_Browser_TLS:
    [ !St_Browser_Init(~browserID, $User), Fr(~client_ID_TLS_Browser) ]
  --[ BrowserServerSession(~browserID, $Server, ~client_ID_TLS_Browser) ]->
    [ !St_Browser_Session(~browserID, $Server, ~client_ID_TLS_Browser) ]

rule Hello_Client_TLS:
    [ Fr(~client_ID_TLS) ]
  -->
    [ !St_Client_Session($Client, $Server, ~client_ID_TLS) ]


rule Hello_Server_TLS_with_Server:
    [ !St_Client_Session($Client, $Server, ~client_ID_TLS) ]
  -->
    [ !St_Server_Session($Server, ~client_ID_TLS) ]

rule Hello_Server_TLS_with_Browser:
    [ !St_Browser_Session(~browserID, $Server, ~client_ID_TLS_Browser) ]
  -->
    [ !St_Server_Session($Server, ~client_ID_TLS_Browser) ]


/*Adversary rules for TLS:*/

rule Init_Adversary_TLS_Session[color= #f5b7b1]:
    [ In($Server), Fr(~browserID), Fr(~browser_ID_TLS) ]
  --[ AdversarySessionTLS(~browserID, $Server, ~browser_ID_TLS), AdversaryAction() ]->
    [ !St_Browser_Session(~browserID, $Server, ~browser_ID_TLS)
    , !Adversary_Session_TLS(~browserID, $Server, ~browser_ID_TLS) ]

rule Send_Adversary_TLS[color= #f5b7b1]:
    [ !Adversary_Session_TLS(browserID, $Server, browser_ID_TLS)
    , In(message) ]
  --[ AdversarySends(browser_ID_TLS, $Server, message), AdversaryAction()  ]->
    [ !Client_to_Server_TLS(browser_ID_TLS, $Server, message) ]

rule Receive_Adversary_TLS[color= #f5b7b1]:
    [ !Adversary_Session_TLS(browserID, $Server, browser_ID_TLS)
    , !Server_to_Client_TLS($Server, browser_ID_TLS, message), AdversaryAction()  ]
  --[ Adversary_receives(message, 'AuthResponse') ]->
    [ Out(message) ]



/* Browser Rules */

//Browser reacts to user action.
rule Browser_Redirects_to_name[color=  #aed6f1]:
    [ User_InputTo_Browser($User, ~browserID, <'sendTo', $Server, message>)
    , !St_Browser_Init(~browserID, $User)
    , !St_Browser_Session(~browserID, $Server, ~client_ID_TLS_Browser)
    ]
  -->
    [ !Client_to_Server_TLS(~client_ID_TLS_Browser, $Server, message) ]

//Browser performs a redirect.
rule Browser_Redirects_to_uri[color=  #aed6f1]:
    [ !Server_to_Client_TLS($Server1, ~client_ID_TLS_Browser1, <'sendTo', $uri, message>)
    , !St_Browser_Session(browserID, $Server1, ~client_ID_TLS_Browser1)
    , !St_Browser_Session(browserID, $Server2, ~client_ID_TLS_Browser2)
    , !Uri_belongs_to($uri, $Server2)
    ]
  -->
    [ !Client_to_Server_TLS(~client_ID_TLS_Browser2, $Server2, message) ]

//Browser shows content to the user.
rule Browser_Shows[color=  #aed6f1]:
    [ !Server_to_Client_TLS($Server, ~client_ID_TLS_Browser, <'show', message>)
    , !St_Browser_Session(~browserID, $Server, ~client_ID_TLS_Browser)
    , !St_Browser_Init(~browserID, $User)
    ]
  -->
    [ Browser_Shows_User(~browserID, $User, $Server, message) ]


/* Compromised Agents */

rule Compromised_IdP_leaks_Signing_Key[color= #f5b7b1]:
    [ !St_IdP_Init($IdP, $authEP_uri_IdP, ~tokenRP_uri_IdP), !Ltk($IdP, ~ltk) ]
  --[ Is_Compromised($IdP), AdversaryAction()]->
    [ Out(~ltk) ]

rule Compromised_Server_receives[color= #f5b7b1]:
    [ !Client_to_Server_TLS(~browser_ID_TLS, $Server, message)
    , !St_Server_Session($Server, ~browser_ID_TLS)
    ]
  --[Compromised_Party_receives(message, 'AuthResponse'), AdversaryAction(), Is_Compromised($Server) ]->
    [ Out(message) ]

rule Compromised_Server_sends[color= #f5b7b1]:
    [ !St_Server_Session($Server, ~browser_ID_TLS), In(message) ]
  --[ AdversaryAction(), Is_Compromised($Server)  ]->
    [ !Server_to_Client_TLS($Server, ~browser_ID_TLS, message) ]

rule Compromised_Client_sends[color= #f5b7b1]:
    [ In(message) 
    , !St_Client_Session($Client, $Server, ~client_ID_TLS)
    ]
  --[ AdversaryAction(), Is_Compromised($Client) ]->
    [ !Client_to_Server_TLS(~client_ID_TLS, $Server, message) ]

rule Compromised_Client_receives[color= #f5b7b1]:
    [ !Server_to_Client_TLS($Server, ~client_ID_TLS, message)
    , !St_Client_Session($Client, $Server, ~client_ID_TLS)
    ]
  --[ Compromised_Party_receives(message, 'AuthResponse'), AdversaryAction(), Is_Compromised($Client) ]->
    [ Out(message) ]


/*Initialization*/

rule Init_Browser[color=  #f9e79f]:
    [ Fr(~browserID) ]
  --[ Start(), BrowserUser(~browserID, $User) ]->
    [ !St_Browser_Init(~browserID, $User) ]


rule User_registers_at_IdP[color=  #f9e79f]:
    [ Fr(~userSecret)]
  --[ UserID_belongs_To($userID, $User, $IdP) ]->
    [ !User_registration_at_IdP($User, $IdP, ~userSecret, $userID) ]

// When the adversary registers, he learns the ~userSecretAdv
rule Adversary_registers_at_IdP[color=  #f9e79f]:
    [ Fr(~userSecretAdv)]
  --[ UserID_belongs_To($userID, $Adversary, $IdP), AdversaryRegisters($userID), Unique(<$userID, $IdP>), AdversaryAction() ]->
    [ !User_registration_at_IdP($Adversary, $IdP, ~userSecretAdv, $userID), Out(~userSecretAdv) ]


rule Initialization_IdP[color=  #f9e79f]:
    [ Fr(~ltk)]
  --[ IdPInitializes($IdP, $authEP_uri_IdP), UriBelongsTo($authEP_uri_IdP, $IdP), UriBelongsTo($tokenEP_uri_IdP, $IdP) ]->
    [ Out(<$authEP_uri_IdP, $tokenEP_uri_IdP>)
    , !St_IdP_Init($IdP, $authEP_uri_IdP, $tokenEP_uri_IdP)
    , !Uri_belongs_to($authEP_uri_IdP, $IdP)
    , !Uri_belongs_to($tokenEP_uri_IdP, $IdP)
    , !Ltk($IdP, ~ltk), !Pk($IdP, pk(~ltk))
    ]

//RP Registers at the IdP (Registration and Discovery)
rule Registration_RP[color=  #f9e79f]:
    [ !St_IdP_Init($IdP, $authEP_uri_IdP, $tokenEP_uri_IdP)
    , Fr(~client_Secret)
    ]
  --[ Neq($RP, $IdP), RPRegisters($client_id), Not_an_IdP($RP), UriBelongsTo($redirect_uri_RP, $RP), Unique(<$client_id, $IdP>) ]->
    [ Out(<$client_id, $redirect_uri_RP>)
    , !St_RP_Registered($RP, $IdP, $client_id, ~client_Secret, $redirect_uri_RP, $authEP_uri_IdP, $tokenEP_uri_IdP)
    , !Uri_belongs_to($redirect_uri_RP, $RP) ]

/* Protocol Rules */

/*AuthRequest*/
rule User_starts_Session:
    [ !St_Browser_Init(~browserID, $User) ]
  --[ UserStarts(~browserID, $User), UserStartsSession($User, $RP, $IdP)]->
    [ St_User_1($User, ~browserID, $IdP, $RP)
    , User_InputTo_Browser($User, ~browserID, <'sendTo', $RP, <'loginWith', $IdP>>) 
    ]

//The RP answers with an Authorization request
rule AuthRequest_RP:
    [ !Client_to_Server_TLS(~client_ID_TLS_Browser, $RP, <'loginWith', $IdP>)
    , !St_Server_Session($RP, ~client_ID_TLS_Browser)
    , !St_RP_Registered($RP, $IdP, $client_id, ~client_Secret, $redirect_uri_RP, $authEP_uri_IdP, $tokenEP_uri_IdP)
    ]
  --[ AuthRequestRP(), RP_sends_AuthRequest($RP, $IdP, ~client_ID_TLS_Browser) ]->
    [ !Server_to_Client_TLS($RP, ~client_ID_TLS_Browser
        , <'sendTo', $authEP_uri_IdP
          , <'authRequest', $client_id, $redirect_uri_RP, $authEP_uri_IdP>>) 
    , St_RP_1($RP, $IdP, ~client_ID_TLS_Browser, $client_id, ~client_Secret, $redirect_uri_RP, $authEP_uri_IdP, $tokenEP_uri_IdP)
    ]

//The IdP gets the Request
rule AuthRequest_IdP:
    [ !Client_to_Server_TLS(~client_ID_TLS_Browser, $IdP
        , <'authRequest', $client_id, $redirect_uri_RP, $authEP_uri_IdP>)
    , !St_Server_Session($IdP, ~client_ID_TLS_Browser)
    , !St_RP_Registered($RP, $IdP, $client_id, ~client_Secret, $redirect_uri_RP, $authEP_uri_IdP, $tokenEP_uri_IdP)
    ]
  --[ AuthRequestIdP() ]->
    [ St_IdP_1($IdP, $RP, ~client_ID_TLS_Browser, $client_id, ~client_Secret, $redirect_uri_RP, $authEP_uri_IdP, $tokenEP_uri_IdP) 
    , !Server_to_Client_TLS($IdP, ~client_ID_TLS_Browser, <'show', <'pleaseAuthenticate', $IdP>>)
    ]


/* User Authentication and Consent*/

//The user Authenticates
rule User_Authenticates:
    [ Browser_Shows_User(~browserID, $User, $IdP, <'pleaseAuthenticate', $IdP>)
    , St_User_1($User, ~browserID, $IdP, $RP)
    , !User_registration_at_IdP($User, $IdP, ~userSecret, $userID)
    ]
  -->
    [ User_InputTo_Browser($User, ~browserID, <'sendTo', $IdP, <'IAuthenticate', $User,  ~userSecret>>) 
    , St_User_2($User, ~browserID, $IdP, $RP, ~userSecret)
    ]

//IdP asks for Consent
rule IdP_asks_for_Consent:
    [ !Client_to_Server_TLS(~client_ID_TLS_Browser, $IdP, <'IAuthenticate', $User, ~userSecret>)
    , St_IdP_1($IdP, $RP, ~client_ID_TLS_Browser, $client_id, ~client_Secret, $redirect_uri_RP, $authEP_uri_IdP, $tokenEP_uri_IdP)  
    , !User_registration_at_IdP($User, $IdP, ~userSecret, $userID)
    , Fr(~consent_nonce)
    ]
  -->
    [ !Server_to_Client_TLS($IdP, ~client_ID_TLS_Browser, <'show', <'pleaseGiveConsent', $IdP, $RP, $User, ~consent_nonce>>)
    , St_IdP_2($IdP, $RP, ~client_ID_TLS_Browser, $client_id, ~client_Secret, $redirect_uri_RP, $authEP_uri_IdP, $tokenEP_uri_IdP, $User, ~userSecret, $userID, ~consent_nonce) 
    ]

//User gives consent
rule User_Gives_Consent:
    [ Browser_Shows_User(~browserID, $User, $IdP, <'pleaseGiveConsent', $IdP, $RP, $User, consent_nonce>)
    , St_User_2($User, ~browserID, $IdP, $RP, ~userSecret)
    ]
  --[ UserGivesConsent($User, $RP, $IdP)]->
    [ User_InputTo_Browser($User, ~browserID, <'sendTo', $IdP, <'Consent', $IdP, $RP, $User, consent_nonce>>) 
    ]


/*Authentication Response*/

rule Authentication_Response_IdP:
    [ !Client_to_Server_TLS(~client_ID_TLS_Browser, $IdP, <'Consent', $IdP, $RP, $User, ~consent_nonce>)
    , St_IdP_2($IdP, $RP, ~client_ID_TLS_Browser, $client_id, ~client_Secret, $redirect_uri_RP, $authEP_uri_IdP, $tokenEP_uri_IdP, $User, ~userSecret, $userID, ~consent_nonce) 
    , Fr(~code)
    ]
  --[ GenCode(~code) ]->
    [ !Server_to_Client_TLS($IdP, ~client_ID_TLS_Browser, <'sendTo', $redirect_uri_RP  
        , <'AuthResponse', ~code, $IdP>>)
    , St_IdP_3($IdP, $RP, ~client_ID_TLS_Browser, $client_id, ~client_Secret, $redirect_uri_RP, $authEP_uri_IdP, $User, ~userSecret, $userID, ~consent_nonce, ~code) 
    ]


/*Token Request*/

rule Token_Request_RP:
    [ !Client_to_Server_TLS(~client_ID_TLS_Browser, $RP, <'AuthResponse', code, $IdP>)
    , St_RP_1($RP, $IdP, ~client_ID_TLS_Browser, $client_id, ~client_Secret, $redirect_uri_RP, $authEP_uri_IdP, $tokenEP_uri_IdP)
    , !Uri_belongs_to($tokenEP_uri_IdP, $IdP)
    , !St_Client_Session($RP, $IdP, ~client_ID_TLS_RP)
    ]
  --[ RPgetsCode($RP, ~client_ID_TLS_Browser, $IdP) ]->
    [ !Client_to_Server_TLS(~client_ID_TLS_RP, $IdP, <'TokenRequest', code, $client_id, $redirect_uri_RP, ~client_Secret>)
    , St_RP_2($RP, $IdP, ~client_ID_TLS_Browser, $client_id, ~client_Secret, $redirect_uri_RP, $authEP_uri_IdP, $tokenEP_uri_IdP, code, ~client_ID_TLS_RP)
    ]


//Token Response
rule Token_Response_IdP:
    let id_token = <'idToken'
        , <'iss', $IdP>
        , <'sub', $userID>
        , <'aud', $client_id>>
    in
    [ !Client_to_Server_TLS(~client_ID_TLS_RP, $IdP, <'TokenRequest', ~code, $client_id, $redirect_uri_RP, ~client_Secret>)
    , St_IdP_3($IdP, $RP, ~client_ID_TLS_Browser, $client_id, ~client_Secret, $redirect_uri_RP, $authEP_uri_IdP, $User, ~userSecret, $userID, ~consent_nonce, ~code) 
    , !Ltk($IdP, ~ltk)
    , !St_Server_Session($Server, ~client_ID_TLS_RP)
    ]
  -->
    [ !Server_to_Client_TLS($IdP, ~client_ID_TLS_RP  
    , <'TokenResponse', id_token, sign(id_token, '0', ~ltk)>)
    ]

//RP gets id-Token
rule RP_gets_idToken:
    let id_token = <'idToken'
        , <'iss', $IdP>
        , <'sub', userID>
        , <'aud', $client_id>>
    in
    [ !Server_to_Client_TLS($IdP, ~client_ID_TLS_IdP  
    , <'TokenResponse', id_token, id_token_sig>)
    , St_RP_2($RP, $IdP, ~client_ID_TLS_Browser, $client_id, ~client_Secret, $redirect_uri_RP, $authEP_uri_IdP, $tokenEP_uri_IdP, code, ~client_ID_TLS_IdP)
    , !Pk($IdP, pk_idp)
    ]
  --[ Finish(), RP_gets_IDToken($RP, userID, $IdP), Verified(id_token_sig,e1(id_token_sig),pk(e3(id_token_sig)),id_token,pk_idp,true)]->
    []

//restrictions

restriction uniqueness:
   "All x #i #j. Unique(x) @ i & Unique(x) @ j ==> #i = #j"

restriction uri_belongs_to_only_one_server:
  "All uri server1 server2 #i #j. UriBelongsTo(uri, server1) @ i & UriBelongsTo(uri, server2) @j ==> server1 = server2"

//IdP and RP are not allowed to be equal:
restriction Inequality_RP_IdP:
    "All x #i. Neq(x,x) @ #i ==> F"

restriction registered_RP_shouldnt_be_an_IdP:
    "All rp #i. Not_an_IdP(rp)@i ==> not(Ex x #j. IdPInitializes(rp, x)@j)"

restriction IdP_initializes_Once:
    " All idp v u #i #j. (IdPInitializes(idp, v)@i & IdPInitializes(idp, u)@j)
    ==> (#i = #j & u = v)
    "

//Lemmas
lemma executable:
  exists-trace
    " Ex #i. Finish()@i
    & (All x y a b #i #j. (IdPInitializes(x, a)@i & IdPInitializes(y, b)@j) ==> x = y & a = b)
    & (All x y #i #j. (RPRegisters(x)@i & RPRegisters(y)@j) ==> x = y)
    & (All x y a b #i #j. (UserStarts(x, a)@i & UserStarts(y, b)@j) ==> x = y & a = b & #i = #j)
    & (All #i #j. (AuthRequestRP()@i & AuthRequestRP()@j) ==> #i = #j)
    & (All #i #j. (AuthRequestIdP()@i & AuthRequestIdP()@j) ==> #i = #j)
    & (not(Ex #i. AdversaryAction()@i))  
    "

lemma User_Authentication:
    "All rp uid idp #finish. (RP_gets_IDToken(rp, uid, idp)@finish
       & not (Ex #j. Is_Compromised(idp)@j) 
       & not (Ex #j. Is_Compromised(rp)@j))
       & not (Ex #j. AdversaryRegisters(uid)@j)
    ==> (Ex usr browserSession browser #k #start #consent #getCode #m #n.         
        UserGivesConsent(usr, rp, idp)@consent
      & UserStartsSession(usr, rp, idp)@start
      & UserID_belongs_To(uid, usr, idp)@k
      & RPgetsCode(rp, browserSession, idp)@getCode
      & BrowserUser(browser, usr)@n
      & BrowserServerSession(browser, rp, browserSession)@m
      & consent < getCode & getCode < finish & start < consent)
    "


end












