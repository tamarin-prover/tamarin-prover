theory OIDC_Implicit begin

// Function signature and definition of the equational theory E

functions: e1/1 [private], e2/1 [private], e3/1 [private], false/0,
           fst/1, mangle/2, pair/2, pk/1, sign/3, snd/1, true/0
equations:
    e1(sign(x, y, z)) = x,
    e2(sign(x, y, z)) = y,
    e3(sign(x, y, z)) = z,
    fst(<x.1, x.2>) = x.1,
    mangle(sign(m, r1, sk), r2) = sign(m, r2, sk),
    snd(<x.1, x.2>) = x.2



rule (modulo E) reSign:
   [ In( <sk1, r1> ), In( sign(m, r2, sk2) ) ]
  -->
   [ Out( sign(m, r1, sk1) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Get_pk:
   [ !Pk( A, pubkey ) ] --> [ Out( pubkey ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_TLS_Session:
   [ !St_Browser_Init( ~browserID, $User ), Fr( ~browser_ID_TLS ) ]
  --[
  TLS_Hello( ~browserID, $Server ),
  BrowserServerSession( ~browserID, $Server, ~browser_ID_TLS )
  ]->
   [
   !St_Browser_Session( ~browserID, $Server, ~browser_ID_TLS ),
   !St_Server_Session( $Server, ~browser_ID_TLS )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_Adversary_TLS_Session[color=#f5b7b1]:
   [ In( $Server ), Fr( ~browserID ), Fr( ~browser_ID_TLS ) ]
  --[ AdversaryAction( ) ]->
   [
   !St_Server_Session( $Server, ~browser_ID_TLS ),
   !Adversary_Session_TLS( ~browserID, $Server, ~browser_ID_TLS )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Send_Adversary_TLS[color=#f5b7b1]:
   [
   !Adversary_Session_TLS( browserID, $Server, browser_ID_TLS ),
   In( message )
   ]
  --[ AdversaryAction( ) ]->
   [ !Client_to_Server_TLS( browser_ID_TLS, $Server, message ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Receive_Adversary_TLS[color=#f5b7b1]:
   [
   !Adversary_Session_TLS( browserID, $Server, browser_ID_TLS ),
   !Server_to_Client_TLS( $Server, browser_ID_TLS, message ),
   AdversaryAction( )
   ]
  --[ Adversary_receives( message, 'AuthResponse' ) ]->
   [ Out( message ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Browser_Performs_User_Action[color=#aed6f1]:
   [
   User_InputTo_Browser( $User, ~browserID,
                         <'userAction', $Server, message>
   ),
   !St_Browser_Init( ~browserID, $User ),
   !St_Browser_Session( ~browserID, $Server, ~browser_ID_TLS )
   ]
  -->
   [ !Client_to_Server_TLS( ~browser_ID_TLS, $Server, message ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Browser_Redirects_To_URI[color=#aed6f1]:
   [
   !Server_to_Client_TLS( $Server1, ~browser_ID_TLS1,
                          <'redirectToURI', $uri, message>
   ),
   !St_Browser_Session( browserID, $Server1, ~browser_ID_TLS1 ),
   !St_Browser_Session( browserID, $Server2, ~browser_ID_TLS2 ),
   !Uri_belongs_to( $uri, $Server2 )
   ]
  -->
   [ !Client_to_Server_TLS( ~browser_ID_TLS2, $Server2, message ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Browser_Shows[color=#aed6f1]:
   [
   !Server_to_Client_TLS( $Server, ~browser_ID_TLS, <'show', message>
   ),
   !St_Browser_Session( ~browserID, $Server, ~browser_ID_TLS ),
   !St_Browser_Init( ~browserID, $User )
   ]
  -->
   [ Browser_Shows_User( ~browserID, $User, $Server, message ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromised_IdP_leaks_Signing_Key[color=#f5b7b1]:
   [ !St_IdP_Init( $IdP, $authEP_uri_IdP ), !Ltk( $IdP, ~ltk ) ]
  --[ Is_Compromised( $IdP ), AdversaryAction( ) ]->
   [ Out( ~ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromised_Server_receives[color=#f5b7b1]:
   [
   !Client_to_Server_TLS( ~browser_ID_TLS, $Server, message ),
   !St_Server_Session( $Server, ~browser_ID_TLS )
   ]
  --[
  Compromised_Party_receives( message ), AdversaryAction( ),
  Is_Compromised( $Server )
  ]->
   [ Out( message ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromised_Server_sends[color=#f5b7b1]:
   [ !St_Server_Session( $Server, ~browser_ID_TLS ), In( message ) ]
  --[
  CompromisedPartySends( ~browser_ID_TLS, $Server, message ),
  AdversaryAction( ), Is_Compromised( $Server )
  ]->
   [ !Server_to_Client_TLS( $Server, ~browser_ID_TLS, message ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_Browser[color=#f9e79f]:
   [ Fr( ~browserID ) ]
  --[
  BrowserInits( ~browserID ), BrowserUser( ~browserID, $User ),
  Start( )
  ]->
   [ !St_Browser_Init( ~browserID, $User ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) User_registers_at_IdP[color=#f9e79f]:
   [ Fr( ~userSecret ) ]
  --[
  UserRegisters( ~userSecret ),
  UserID_belongs_To( $userID, $User, $IdP ),
  Unique( <$userID, $IdP> )
  ]->
   [ !User_registration_at_IdP( $User, $IdP, ~userSecret, $userID ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Adversary_registers_at_IdP[color=#f9e79f]:
   [ Fr( ~userSecretAdv ) ]
  --[
  UserID_belongs_To( $userID, $Adversary, $IdP ),
  AdversaryRegisters( $userID ), Unique( <$userID, $IdP> ),
  AdversaryAction( )
  ]->
   [
   !User_registration_at_IdP( $Adversary, $IdP, ~userSecretAdv,
                              $userID
   ),
   Out( ~userSecretAdv )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Initialization_IdP[color=#f9e79f]:
   [ Fr( ~ltk ) ]
  --[
  IdPInitializes( $IdP, $authEP_uri_IdP ),
  UriBelongsTo( $authEP_uri_IdP, $IdP ), GoodKey( pk(~ltk) )
  ]->
   [
   !St_IdP_Init( $IdP, $authEP_uri_IdP ),
   !Uri_belongs_to( $authEP_uri_IdP, $IdP ), !Ltk( $IdP, ~ltk ),
   !Pk( $IdP, pk(~ltk) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Registration_RP[color=#f9e79f]:
   [ !St_IdP_Init( $IdP, $authEP_uri_IdP ) ]
  --[
  Neq( $RP, $IdP ), RPRegisters( $RP, $IdP ), Not_an_IdP( $RP ),
  UriBelongsTo( $redirect_uri_RP, $RP ), Unique( <$client_id, $IdP> )
  ]->
   [
   !St_RP_Registered( $RP, $IdP, $client_id, $redirect_uri_RP,
                      $authEP_uri_IdP
   ),
   !Uri_belongs_to( $redirect_uri_RP, $RP )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) User_starts_Session:
   [
   !St_Browser_Init( ~browserID, $User ),
   !User_registration_at_IdP( $User, $IdP, ~userSecret, $userID )
   ]
  --[
  UserStarts( ~browserID, $User ),
  UserStartsSession( $User, $RP, $IdP )
  ]->
   [
   St_User_1( $User, ~browserID, $IdP, $RP ),
   User_InputTo_Browser( $User, ~browserID,
                         <'userAction', $RP, 'loginWith', $IdP>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) AuthRequest_RP:
   [
   !Client_to_Server_TLS( ~browser_ID_TLS, $RP, <'loginWith', $IdP> ),
   !St_Server_Session( $RP, ~browser_ID_TLS ),
   !St_RP_Registered( $RP, $IdP, $client_id, $redirect_uri_RP,
                      $authEP_uri_IdP
   ),
   Fr( ~nonce )
   ]
  --[ AuthRequestRP( ~nonce ), UsedNonce( ~nonce ) ]->
   [
   !Server_to_Client_TLS( $RP, ~browser_ID_TLS,
                          <'redirectToURI', $authEP_uri_IdP, 'authRequest', $client_id, 
                           $redirect_uri_RP, $authEP_uri_IdP, ~nonce>
   ),
   St_RP_1( $RP, $IdP, $client_id, $redirect_uri_RP, $authEP_uri_IdP,
            ~nonce
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) AuthRequest_IdP:
   [
   !Client_to_Server_TLS( ~browser_ID_TLS, $IdP,
                          <'authRequest', $client_id, $redirect_uri_RP, $authEP_uri_IdP, 
                           nonce>
   ),
   !St_Server_Session( $IdP, ~browser_ID_TLS ),
   !St_RP_Registered( $RP, $IdP, $client_id, $redirect_uri_RP,
                      $authEP_uri_IdP
   )
   ]
  --[
  AuthRequestIdP( nonce ),
  IdPAuthRequest( $IdP, 'authRequest', $client_id, $redirect_uri_RP,
                  $authEP_uri_IdP, nonce
  ),
  ReceivedNonce( nonce )
  ]->
   [
   St_IdP_1( $IdP, $RP, ~browser_ID_TLS, $client_id, $redirect_uri_RP,
             $authEP_uri_IdP, nonce
   ),
   !Server_to_Client_TLS( $IdP, ~browser_ID_TLS,
                          <'show', 'pleaseAuthenticate', $IdP>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) User_Authenticates:
   [
   Browser_Shows_User( ~browserID, $User, $IdP,
                       <'pleaseAuthenticate', $IdP>
   ),
   St_User_1( $User, ~browserID, $IdP, $RP ),
   !User_registration_at_IdP( $User, $IdP, ~userSecret, $userID )
   ]
  --[ UserAuthenticates( 'IAuthenticate', $User, $IdP ) ]->
   [
   User_InputTo_Browser( $User, ~browserID,
                         <'userAction', $IdP, 'IAuthenticate', $User, ~userSecret>
   ),
   St_User_2( $User, ~browserID, $IdP, $RP, ~userSecret )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdP_asks_for_Consent:
   [
   !Client_to_Server_TLS( ~browser_ID_TLS, $IdP,
                          <'IAuthenticate', $User, ~userSecret>
   ),
   St_IdP_1( $IdP, $RP, ~browser_ID_TLS, $client_id, $redirect_uri_RP,
             $authEP_uri_IdP, nonce
   ),
   !User_registration_at_IdP( $User, $IdP, ~userSecret, $userID ),
   Fr( ~consent_nonce )
   ]
  -->
   [
   !Server_to_Client_TLS( $IdP, ~browser_ID_TLS,
                          <'show', 'pleaseGiveConsent', $IdP, $RP, $User, ~consent_nonce>
   ),
   St_IdP_2( $IdP, $RP, ~browser_ID_TLS, $client_id, $redirect_uri_RP,
             $authEP_uri_IdP, nonce, $User, ~userSecret, $userID, ~consent_nonce
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) User_Gives_Consent:
   [
   Browser_Shows_User( ~browserID, $User, $IdP,
                       <'pleaseGiveConsent', $IdP, $RP, $User, consent_nonce>
   ),
   St_User_2( $User, ~browserID, $IdP, $RP, ~userSecret )
   ]
  --[ UserGivesConsent( $User, $RP, $IdP ) ]->
   [
   User_InputTo_Browser( $User, ~browserID,
                         <'userAction', $IdP, 'Consent', $IdP, $RP, $User, consent_nonce>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Authentication_Response_IdP:
   [
   !Client_to_Server_TLS( ~browser_ID_TLS, $IdP,
                          <'Consent', $IdP, $RP, $User, ~consent_nonce>
   ),
   St_IdP_2( $IdP, $RP, ~browser_ID_TLS, $client_id, $redirect_uri_RP,
             $authEP_uri_IdP, nonce, $User, ~userSecret, $userID, ~consent_nonce
   ),
   !Ltk( $IdP, ~ltk )
   ]
  --[ ReceiveConsent( $IdP, $RP, $User ) ]->
   [
   !Server_to_Client_TLS( $IdP, ~browser_ID_TLS,
                          <'redirectToURI', $redirect_uri_RP, 'AuthResponse', 
                           <'id_token', <'iss', $IdP>, <'sub', $userID>, <'aud', $client_id>, 
                            'nonce', nonce>, 
                           sign(<'id_token', <'iss', $IdP>, <'sub', $userID>, 
                                 <'aud', $client_id>, 'nonce', nonce>,
                                '0', ~ltk)
                          >
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) RP_gets_idToken:
   [
   !Client_to_Server_TLS( ~browser_ID_TLS, $RP,
                          <'AuthResponse', 
                           <'id_token', <'iss', $IdP>, <'sub', $userID>, <'aud', $client_id>, 
                            'nonce', ~nonce>, 
                           id_token_sig>
   ),
   St_RP_1( $RP, $IdP, $client_id, $redirect_uri_RP, $authEP_uri_IdP,
            ~nonce
   ),
   !Pk( $IdP, pk_idp )
   ]
  --[
  Finish( ), RP_gets_IDToken( $RP, $userID, $IdP ),
  RPgetsIDToken_FromBrowser( $RP, ~browser_ID_TLS, $IdP ),
  Verified( id_token_sig, e1(id_token_sig), pk(e3(id_token_sig)),
            <'id_token', <'iss', $IdP>, <'sub', $userID>, <'aud', $client_id>, 
             'nonce', ~nonce>,
            pk_idp, true
  )
  ]->
   [ ]

  /*
  rule (modulo AC) RP_gets_idToken:
     [
     !Client_to_Server_TLS( ~browser_ID_TLS, $RP,
                            <'AuthResponse', 
                             <'id_token', <'iss', $IdP>, <'sub', $userID>, <'aud', $client_id>, 
                              'nonce', ~nonce>, 
                             id_token_sig>
     ),
     St_RP_1( $RP, $IdP, $client_id, $redirect_uri_RP, $authEP_uri_IdP,
              ~nonce
     ),
     !Pk( $IdP, pk_idp )
     ]
    --[
    Finish( ), RP_gets_IDToken( $RP, $userID, $IdP ),
    RPgetsIDToken_FromBrowser( $RP, ~browser_ID_TLS, $IdP ),
    Verified( id_token_sig, z, pk(z.1),
              <'id_token', <'iss', $IdP>, <'sub', $userID>, <'aud', $client_id>, 
               'nonce', ~nonce>,
              pk_idp, true
    )
    ]->
     [ ]
    variants (modulo AC)
    1. id_token_sig
             = id_token_sig.20
       z     = e1(id_token_sig.20)
       z.1   = e3(id_token_sig.20)
    
    2. id_token_sig
             = sign(z.31, x.44, z.32)
       z     = z.31
       z.1   = z.32
  */

restriction uniqueness:
  "∀ x #i #j. ((Unique( x ) @ #i) ∧ (Unique( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction uri_belongs_to_only_one_server:
  "∀ uri server1 server2 #i #j.
    ((UriBelongsTo( uri, server1 ) @ #i) ∧
     (UriBelongsTo( uri, server2 ) @ #j)) ⇒
    (server1 = server2)"
  // safety formula

restriction Inequality_RP_IdP:
  "∀ x #i. (Neq( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

restriction registered_RP_shouldnt_be_an_IdP:
  "∀ rp #i.
    (Not_an_IdP( rp ) @ #i) ⇒
    (¬(∃ x #j. IdPInitializes( rp, x ) @ #j))"
  // safety formula

restriction IdP_initializes_Once:
  "∀ idp v u #i #j.
    ((IdPInitializes( idp, v ) @ #i) ∧
     (IdPInitializes( idp, u ) @ #j)) ⇒
    ((#i = #j) ∧ (u = v))"
  // safety formula

restriction RP_registers_at_IdP_Once:
  "∀ rp idp #i #j.
    ((RPRegisters( rp, idp ) @ #i) ∧ (RPRegisters( rp, idp ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction User_has_only_one_account_at_IdP:
  "∀ uid1 uid2 usr idp #i #j.
    ((UserID_belongs_To( uid1, usr, idp ) @ #i) ∧
     (UserID_belongs_To( uid2, usr, idp ) @ #j)) ⇒
    ((#i = #j) ∧ (uid1 = uid2))"
  // safety formula

restriction Correctness:
  "∀ sig tm tpk #i #j.
    ((GoodKey( tpk ) @ #i) ∧
     (Verified( sig, tm, tpk, tm, tpk, false ) @ #j)) ⇒
    (⊥)"
  // safety formula

restriction NoForgery:
  "∀ tpk tm spk sm sig #i #j.
    ((GoodKey( tpk ) @ #i) ∧
     (Verified( sig, sm, spk, tm, tpk, true ) @ #j)) ⇒
    ((sm = tm) ∧ (spk = tpk))"
  // safety formula

restriction Consistency:
  "∀ sig sm spk tm tpk r1 r2 #i #j.
    ((Verified( sig, sm, spk, tm, tpk, r1 ) @ #i) ∧
     (Verified( sig, sm, spk, tm, tpk, r2 ) @ #j)) ⇒
    (r1 = r2)"
  // safety formula

lemma Nonce_Sources [sources]:
  all-traces
  "∀ iss sub aud nonce sig #i.
    (Compromised_Party_receives( <'AuthResponse', 
                                  <'id_token', <'iss', iss>, <'sub', sub>, <'aud', aud>, 'nonce', 
                                   nonce>, 
                                  sig>
     ) @ #i) ⇒
    ((∃ #j. (!KU( nonce ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. UsedNonce( nonce ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ iss sub aud nonce sig #i.
  (Compromised_Party_receives( <'AuthResponse', 
                                <'id_token', <'iss', iss>, <'sub', sub>, <'aud', aud>, 'nonce', 
                                 nonce>, 
                                sig>
   ) @ #i)
 ∧
  (∀ #j. (!KU( nonce ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (UsedNonce( nonce ) @ #j) ⇒ ⊥)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (!KU( nonce ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
         (∃ #j. (UsedNonce( nonce ) @ #j) ∧ ¬(last(#j))) )
    case case_1
    solve( !Client_to_Server_TLS( ~browser_ID_TLS, $Server,
                                  <'AuthResponse', 
                                   <'id_token', <'iss', iss>, <'sub', sub>, <'aud', aud>, 'nonce', 
                                    nonce>, 
                                   sig>
           ) ▶₀ #i )
      case Browser_Redirects_To_URI_case_1
      by contradiction /* from formulas */
    next
      case Browser_Redirects_To_URI_case_2
      by contradiction /* from formulas */
    next
      case Browser_Redirects_To_URI_case_3
      solve( !St_Server_Session( $Server, ~browser_ID_TLS ) ▶₁ #i )
        case Init_TLS_Session
        solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                      <'Consent', $Server1, $Server, $User, ~consent_nonce>
               ) ▶₀ #vr.1 )
          case Browser_Performs_User_Action_case_1
          solve( !KU( ~consent_nonce ) @ #vk.12 )
            case Compromised_Server_receives_case_1
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'IAuthenticate', $User, ~userSecret>
                   ) ▶₀ #vr.5 )
              case Browser_Performs_User_Action_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Performs_User_Action_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Redirects_To_URI_case_1
              solve( !KU( ~userSecret ) @ #vk.21 )
                case Compromised_Server_receives_case_1
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_2
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_3
                solve( (∃ #j.
                         (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.39))  ∥
                       (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.49, 0) ~~> (#vk.1, 0) )
                qed
              next
                case Compromised_Server_receives_case_4
                solve( (∃ #j.
                         (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.39))  ∥
                       (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.49, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            qed
          next
            case Compromised_Server_receives_case_2
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'IAuthenticate', $User, ~userSecret>
                   ) ▶₀ #vr.5 )
              case Browser_Performs_User_Action_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Performs_User_Action_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Redirects_To_URI_case_1
              solve( !KU( ~userSecret ) @ #vk.21 )
                case Compromised_Server_receives_case_1
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_2
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_3
                solve( (∃ #j.
                         (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.40))  ∥
                       (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.50, 0) ~~> (#vk.1, 0) )
                qed
              next
                case Compromised_Server_receives_case_4
                solve( (∃ #j.
                         (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.40))  ∥
                       (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.50, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            qed
          next
            case Compromised_Server_receives_case_3
            solve( (∃ #j.
                     (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22))  ∥
                   (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by solve( (#vr.32, 0) ~~> (#vk, 0) )
            qed
          next
            case Compromised_Server_receives_case_4
            solve( (∃ #j.
                     (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22))  ∥
                   (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by solve( (#vr.32, 0) ~~> (#vk, 0) )
            qed
          qed
        next
          case Browser_Performs_User_Action_case_2
          solve( !KU( ~consent_nonce ) @ #vk.10 )
            case Compromised_Server_receives_case_1
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'IAuthenticate', $User, ~userSecret>
                   ) ▶₀ #vr.5 )
              case Browser_Performs_User_Action_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Performs_User_Action_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Redirects_To_URI_case_1
              solve( !KU( ~userSecret ) @ #vk.21 )
                case Compromised_Server_receives_case_1
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_2
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_3
                solve( (∃ #j.
                         (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.40))  ∥
                       (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.50, 0) ~~> (#vk.1, 0) )
                qed
              next
                case Compromised_Server_receives_case_4
                solve( (∃ #j.
                         (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.40))  ∥
                       (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.50, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            qed
          next
            case Compromised_Server_receives_case_2
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'IAuthenticate', $User, ~userSecret>
                   ) ▶₀ #vr.5 )
              case Browser_Performs_User_Action_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Performs_User_Action_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Redirects_To_URI_case_1
              solve( !KU( ~userSecret ) @ #vk.18 )
                case Compromised_Server_receives_case_1
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_2
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_3
                solve( (∃ #j.
                         (!KU( nonce.3 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.41))  ∥
                       (∃ #j. (UsedNonce( nonce.3 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.51, 0) ~~> (#vk.1, 0) )
                qed
              next
                case Compromised_Server_receives_case_4
                solve( (∃ #j.
                         (!KU( nonce.3 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.41))  ∥
                       (∃ #j. (UsedNonce( nonce.3 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.51, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            qed
          next
            case Compromised_Server_receives_case_3
            solve( (∃ #j.
                     (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
                   (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by solve( (#vr.33, 0) ~~> (#vk, 0) )
            qed
          next
            case Compromised_Server_receives_case_4
            solve( (∃ #j.
                     (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
                   (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by solve( (#vr.33, 0) ~~> (#vk, 0) )
            qed
          qed
        next
          case Browser_Performs_User_Action_case_3
          solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                        <'IAuthenticate', $User, ~userSecret>
                 ) ▶₀ #vr.5 )
            case Browser_Performs_User_Action_case_1
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce>
                   ) ▶₀ #vr.9 )
              case Browser_Redirects_To_URI_case_1
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_3
              by contradiction /* from formulas */
            qed
          next
            case Browser_Performs_User_Action_case_2
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce>
                   ) ▶₀ #vr.9 )
              case Browser_Redirects_To_URI_case_1
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_3
              by contradiction /* from formulas */
            qed
          next
            case Browser_Redirects_To_URI_case_1
            solve( !KU( ~userSecret ) @ #vk.13 )
              case Compromised_Server_receives_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Compromised_Server_receives_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Compromised_Server_receives_case_3
              solve( (∃ #j.
                       (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
                     (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by solve( (#vr.33, 0) ~~> (#vk, 0) )
              qed
            next
              case Compromised_Server_receives_case_4
              solve( (∃ #j.
                       (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
                     (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by solve( (#vr.33, 0) ~~> (#vk, 0) )
              qed
            qed
          next
            case Browser_Redirects_To_URI_case_2
            by contradiction /* from formulas */
          qed
        next
          case Browser_Performs_User_Action_case_4
          solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                        <'IAuthenticate', $User, ~userSecret>
                 ) ▶₀ #vr.5 )
            case Browser_Performs_User_Action_case_1
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce>
                   ) ▶₀ #vr.9 )
              case Browser_Redirects_To_URI_case_1
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_3
              by contradiction /* from formulas */
            qed
          next
            case Browser_Performs_User_Action_case_2
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce>
                   ) ▶₀ #vr.9 )
              case Browser_Redirects_To_URI_case_1
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_3
              by contradiction /* from formulas */
            qed
          next
            case Browser_Redirects_To_URI_case_1
            solve( !KU( ~userSecret ) @ #vk.8 )
              case Compromised_Server_receives_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Compromised_Server_receives_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Compromised_Server_receives_case_3
              solve( (∃ #j.
                       (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.24))  ∥
                     (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by solve( (#vr.34, 0) ~~> (#vk, 0) )
              qed
            next
              case Compromised_Server_receives_case_4
              solve( (∃ #j.
                       (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.24))  ∥
                     (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by solve( (#vr.34, 0) ~~> (#vk, 0) )
              qed
            qed
          next
            case Browser_Redirects_To_URI_case_2
            by contradiction /* from formulas */
          qed
        next
          case Browser_Redirects_To_URI_case_1
          solve( !KU( ~consent_nonce ) @ #vk.12 )
            case Compromised_Server_receives_case_1
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'IAuthenticate', $User, ~userSecret>
                   ) ▶₀ #vr.5 )
              case Browser_Performs_User_Action_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Performs_User_Action_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Redirects_To_URI_case_1
              solve( !KU( ~userSecret ) @ #vk.22 )
                case Compromised_Server_receives_case_1
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_2
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_3
                solve( (∃ #j.
                         (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.32))  ∥
                       (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.42, 0) ~~> (#vk.1, 0) )
                qed
              next
                case Compromised_Server_receives_case_4
                solve( (∃ #j.
                         (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.32))  ∥
                       (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.42, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            qed
          next
            case Compromised_Server_receives_case_2
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'IAuthenticate', $User, ~userSecret>
                   ) ▶₀ #vr.5 )
              case Browser_Performs_User_Action_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Performs_User_Action_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Redirects_To_URI_case_1
              solve( !KU( ~userSecret ) @ #vk.18 )
                case Compromised_Server_receives_case_1
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_2
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_3
                solve( (∃ #j.
                         (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.33))  ∥
                       (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.43, 0) ~~> (#vk.1, 0) )
                qed
              next
                case Compromised_Server_receives_case_4
                solve( (∃ #j.
                         (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.33))  ∥
                       (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.43, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            qed
          next
            case Compromised_Server_receives_case_3
            solve( (∃ #j.
                     (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                   (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by solve( (#vr.25, 0) ~~> (#vk, 0) )
            qed
          next
            case Compromised_Server_receives_case_4
            solve( (∃ #j.
                     (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                   (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by solve( (#vr.25, 0) ~~> (#vk, 0) )
            qed
          qed
        next
          case Browser_Redirects_To_URI_case_2
          by contradiction /* from formulas */
        qed
      qed
    next
      case Browser_Redirects_To_URI_case_4
      solve( !St_Server_Session( $Server, ~browser_ID_TLS ) ▶₁ #i )
        case Init_TLS_Session
        solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                      <'Consent', $Server1, $Server, $User, ~consent_nonce>
               ) ▶₀ #vr.1 )
          case Browser_Performs_User_Action_case_1
          solve( !KU( ~consent_nonce ) @ #vk.12 )
            case Compromised_Server_receives_case_1
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'IAuthenticate', $User, ~userSecret>
                   ) ▶₀ #vr.5 )
              case Browser_Performs_User_Action_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Performs_User_Action_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Redirects_To_URI_case_1
              solve( !KU( ~userSecret ) @ #vk.21 )
                case Adversary_registers_at_IdP
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_1
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_2
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_3
                solve( (∃ #j.
                         (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.39))  ∥
                       (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.49, 0) ~~> (#vk.1, 0) )
                qed
              next
                case Compromised_Server_receives_case_4
                solve( (∃ #j.
                         (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.39))  ∥
                       (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.49, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            qed
          next
            case Compromised_Server_receives_case_2
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'IAuthenticate', $User, ~userSecret>
                   ) ▶₀ #vr.5 )
              case Browser_Performs_User_Action_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Performs_User_Action_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Redirects_To_URI_case_1
              solve( !KU( ~userSecret ) @ #vk.21 )
                case Adversary_registers_at_IdP
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_1
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_2
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_3
                solve( (∃ #j.
                         (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.40))  ∥
                       (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.50, 0) ~~> (#vk.1, 0) )
                qed
              next
                case Compromised_Server_receives_case_4
                solve( (∃ #j.
                         (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.40))  ∥
                       (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.50, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            qed
          next
            case Compromised_Server_receives_case_3
            solve( (∃ #j.
                     (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22))  ∥
                   (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by solve( (#vr.32, 0) ~~> (#vk, 0) )
            qed
          next
            case Compromised_Server_receives_case_4
            solve( (∃ #j.
                     (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22))  ∥
                   (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by solve( (#vr.32, 0) ~~> (#vk, 0) )
            qed
          qed
        next
          case Browser_Performs_User_Action_case_2
          solve( !KU( ~consent_nonce ) @ #vk.10 )
            case Compromised_Server_receives_case_1
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'IAuthenticate', $User, ~userSecret>
                   ) ▶₀ #vr.5 )
              case Browser_Performs_User_Action_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Performs_User_Action_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Redirects_To_URI_case_1
              solve( !KU( ~userSecret ) @ #vk.21 )
                case Adversary_registers_at_IdP
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_1
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_2
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_3
                solve( (∃ #j.
                         (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.40))  ∥
                       (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.50, 0) ~~> (#vk.1, 0) )
                qed
              next
                case Compromised_Server_receives_case_4
                solve( (∃ #j.
                         (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.40))  ∥
                       (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.50, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            qed
          next
            case Compromised_Server_receives_case_2
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'IAuthenticate', $User, ~userSecret>
                   ) ▶₀ #vr.5 )
              case Browser_Performs_User_Action_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Performs_User_Action_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Redirects_To_URI_case_1
              solve( !KU( ~userSecret ) @ #vk.18 )
                case Adversary_registers_at_IdP
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_1
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_2
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_3
                solve( (∃ #j.
                         (!KU( nonce.3 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.41))  ∥
                       (∃ #j. (UsedNonce( nonce.3 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.51, 0) ~~> (#vk.1, 0) )
                qed
              next
                case Compromised_Server_receives_case_4
                solve( (∃ #j.
                         (!KU( nonce.3 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.41))  ∥
                       (∃ #j. (UsedNonce( nonce.3 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.51, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            qed
          next
            case Compromised_Server_receives_case_3
            solve( (∃ #j.
                     (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
                   (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by solve( (#vr.33, 0) ~~> (#vk, 0) )
            qed
          next
            case Compromised_Server_receives_case_4
            solve( (∃ #j.
                     (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
                   (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by solve( (#vr.33, 0) ~~> (#vk, 0) )
            qed
          qed
        next
          case Browser_Performs_User_Action_case_3
          solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                        <'IAuthenticate', $User, ~userSecret>
                 ) ▶₀ #vr.5 )
            case Browser_Performs_User_Action_case_1
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce>
                   ) ▶₀ #vr.9 )
              case Browser_Redirects_To_URI_case_1
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_3
              by contradiction /* from formulas */
            qed
          next
            case Browser_Performs_User_Action_case_2
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce>
                   ) ▶₀ #vr.9 )
              case Browser_Redirects_To_URI_case_1
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_3
              by contradiction /* from formulas */
            qed
          next
            case Browser_Redirects_To_URI_case_1
            solve( !KU( ~userSecret ) @ #vk.13 )
              case Adversary_registers_at_IdP
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Compromised_Server_receives_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Compromised_Server_receives_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Compromised_Server_receives_case_3
              solve( (∃ #j.
                       (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
                     (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by solve( (#vr.33, 0) ~~> (#vk, 0) )
              qed
            next
              case Compromised_Server_receives_case_4
              solve( (∃ #j.
                       (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
                     (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by solve( (#vr.33, 0) ~~> (#vk, 0) )
              qed
            qed
          next
            case Browser_Redirects_To_URI_case_2
            by contradiction /* from formulas */
          qed
        next
          case Browser_Performs_User_Action_case_4
          solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                        <'IAuthenticate', $User, ~userSecret>
                 ) ▶₀ #vr.5 )
            case Browser_Performs_User_Action_case_1
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce>
                   ) ▶₀ #vr.9 )
              case Browser_Redirects_To_URI_case_1
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_3
              by contradiction /* from formulas */
            qed
          next
            case Browser_Performs_User_Action_case_2
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce>
                   ) ▶₀ #vr.9 )
              case Browser_Redirects_To_URI_case_1
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            next
              case Browser_Redirects_To_URI_case_3
              by contradiction /* from formulas */
            qed
          next
            case Browser_Redirects_To_URI_case_1
            solve( !KU( ~userSecret ) @ #vk.8 )
              case Adversary_registers_at_IdP
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Compromised_Server_receives_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Compromised_Server_receives_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Compromised_Server_receives_case_3
              solve( (∃ #j.
                       (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.24))  ∥
                     (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by solve( (#vr.34, 0) ~~> (#vk, 0) )
              qed
            next
              case Compromised_Server_receives_case_4
              solve( (∃ #j.
                       (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.24))  ∥
                     (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by solve( (#vr.34, 0) ~~> (#vk, 0) )
              qed
            qed
          next
            case Browser_Redirects_To_URI_case_2
            by contradiction /* from formulas */
          qed
        next
          case Browser_Redirects_To_URI_case_1
          solve( !KU( ~consent_nonce ) @ #vk.12 )
            case Compromised_Server_receives_case_1
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'IAuthenticate', $User, ~userSecret>
                   ) ▶₀ #vr.5 )
              case Browser_Performs_User_Action_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Performs_User_Action_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Redirects_To_URI_case_1
              solve( !KU( ~userSecret ) @ #vk.22 )
                case Adversary_registers_at_IdP
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_1
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_2
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_3
                solve( (∃ #j.
                         (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.32))  ∥
                       (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.42, 0) ~~> (#vk.1, 0) )
                qed
              next
                case Compromised_Server_receives_case_4
                solve( (∃ #j.
                         (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.32))  ∥
                       (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.42, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            qed
          next
            case Compromised_Server_receives_case_2
            solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                          <'IAuthenticate', $User, ~userSecret>
                   ) ▶₀ #vr.5 )
              case Browser_Performs_User_Action_case_1
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Performs_User_Action_case_2
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                            <'authRequest', $client_id, $uri, $authEP_uri_IdP, nonce
                                            >
                     ) ▶₀ #vr.9 )
                case Browser_Redirects_To_URI_case_1
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_2
                by contradiction /* from formulas */
              next
                case Browser_Redirects_To_URI_case_3
                by contradiction /* from formulas */
              qed
            next
              case Browser_Redirects_To_URI_case_1
              solve( !KU( ~userSecret ) @ #vk.18 )
                case Adversary_registers_at_IdP
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_1
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_2
                solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $Server1,
                                              <'authRequest', $client_id, $uri, $authEP_uri_IdP, 
                                               nonce>
                       ) ▶₀ #vr.9 )
                  case Browser_Redirects_To_URI_case_1
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_2
                  by contradiction /* from formulas */
                next
                  case Browser_Redirects_To_URI_case_3
                  by contradiction /* from formulas */
                qed
              next
                case Compromised_Server_receives_case_3
                solve( (∃ #j.
                         (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.33))  ∥
                       (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.43, 0) ~~> (#vk.1, 0) )
                qed
              next
                case Compromised_Server_receives_case_4
                solve( (∃ #j.
                         (!KU( nonce.2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.33))  ∥
                       (∃ #j. (UsedNonce( nonce.2 ) @ #j) ∧ ¬(last(#j))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by solve( (#vr.43, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case Browser_Redirects_To_URI_case_2
              by contradiction /* from formulas */
            qed
          next
            case Compromised_Server_receives_case_3
            solve( (∃ #j.
                     (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                   (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by solve( (#vr.25, 0) ~~> (#vk, 0) )
            qed
          next
            case Compromised_Server_receives_case_4
            solve( (∃ #j.
                     (!KU( nonce.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                   (∃ #j. (UsedNonce( nonce.1 ) @ #j) ∧ ¬(last(#j))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by solve( (#vr.25, 0) ~~> (#vk, 0) )
            qed
          qed
        next
          case Browser_Redirects_To_URI_case_2
          by contradiction /* from formulas */
        qed
      qed
    next
      case Send_Adversary_TLS
      by contradiction /* from formulas */
    qed
  next
    case case_2
    by contradiction /* from formulas */
  next
    case case_3
    by contradiction /* from formulas */
  qed
qed

lemma executable:
  exists-trace
  "∃ #i.
    (((((((((Finish( ) @ #i) ∧
            (∀ x y #i.1 #j.
              ((BrowserInits( x ) @ #i.1) ∧ (BrowserInits( y ) @ #j)) ⇒
              (x = y))) ∧
           (∀ x y #i.1 #j.
             ((UserRegisters( x ) @ #i.1) ∧ (UserRegisters( y ) @ #j)) ⇒
             (x = y))) ∧
          (∀ x y a b #i.1 #j.
            ((IdPInitializes( x, a ) @ #i.1) ∧ (IdPInitializes( y, b ) @ #j)) ⇒
            (x = y))) ∧
         (∀ rp1 rp2 idp #i.1 #j.
           ((RPRegisters( rp1, idp ) @ #i.1) ∧
            (RPRegisters( rp2, idp ) @ #j)) ⇒
           (rp1 = rp2))) ∧
        (∀ x y a b #i.1 #j.
          ((UserStarts( x, a ) @ #i.1) ∧ (UserStarts( y, b ) @ #j)) ⇒
          (((x = y) ∧ (a = b)) ∧ (#i.1 = #j)))) ∧
       (∀ x y #i.1 #j.
         ((TLS_Hello( x, y ) @ #i.1) ∧ (TLS_Hello( x, y ) @ #j)) ⇒
         (#i.1 = #j))) ∧
      (∀ x y #i.1 #j.
        ((AuthRequestRP( x ) @ #i.1) ∧ (AuthRequestRP( y ) @ #j)) ⇒
        (x = y))) ∧
     (∀ x #i.1 #j.
       ((AuthRequestIdP( x ) @ #i.1) ∧ (AuthRequestIdP( x ) @ #j)) ⇒
       (#i.1 = #j))) ∧
    (¬(∃ #i.1. AdversaryAction( ) @ #i.1))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i.
  (Finish( ) @ #i)
 ∧
  (∀ x y #i.1 #j.
    (BrowserInits( x ) @ #i.1) ∧ (BrowserInits( y ) @ #j) ⇒ x = y) ∧
  (∀ x y #i.1 #j.
    (UserRegisters( x ) @ #i.1) ∧ (UserRegisters( y ) @ #j) ⇒ x = y) ∧
  (∀ x y a b #i.1 #j.
    (IdPInitializes( x, a ) @ #i.1) ∧ (IdPInitializes( y, b ) @ #j)
   ⇒
    x = y) ∧
  (∀ rp1 rp2 idp #i.1 #j.
    (RPRegisters( rp1, idp ) @ #i.1) ∧ (RPRegisters( rp2, idp ) @ #j)
   ⇒
    rp1 = rp2) ∧
  (∀ x y a b #i.1 #j.
    (UserStarts( x, a ) @ #i.1) ∧ (UserStarts( y, b ) @ #j)
   ⇒
    (x = y) ∧ (a = b) ∧ (#i.1 = #j)) ∧
  (∀ x y #i.1 #j.
    (TLS_Hello( x, y ) @ #i.1) ∧ (TLS_Hello( x, y ) @ #j)
   ⇒
    #i.1 = #j) ∧
  (∀ x y #i.1 #j.
    (AuthRequestRP( x ) @ #i.1) ∧ (AuthRequestRP( y ) @ #j) ⇒ x = y) ∧
  (∀ x #i.1 #j.
    (AuthRequestIdP( x ) @ #i.1) ∧ (AuthRequestIdP( x ) @ #j)
   ⇒
    #i.1 = #j) ∧
  (∀ #i.1. (AdversaryAction( ) @ #i.1) ⇒ ⊥)"
*/
simplify
solve( !Client_to_Server_TLS( ~browser_ID_TLS, $RP,
                              <'AuthResponse', 
                               <'id_token', <'iss', $IdP>, <'sub', $userID>, <'aud', $client_id>, 
                                'nonce', ~nonce>, 
                               id_token_sig>
       ) ▶₀ #i )
  case Browser_Redirects_To_URI_case_3
  solve( St_RP_1( $RP, $IdP, $client_id, $redirect_uri_RP,
                  $authEP_uri_IdP, ~nonce
         ) ▶₁ #i )
    case AuthRequest_RP_case_1
    solve( !Pk( $IdP, pk_idp ) ▶₂ #i )
      case Initialization_IdP
      solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $IdP,
                                    <'Consent', $IdP, $RP, $User, ~consent_nonce>
             ) ▶₀ #vr.1 )
        case Browser_Performs_User_Action_case_4
        solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $IdP,
                                      <'IAuthenticate', $User, ~userSecret>
               ) ▶₀ #vr.5 )
          case Browser_Performs_User_Action
          solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $IdP,
                                        <'authRequest', $client_id, $redirect_uri_RP, 
                                         $authEP_uri_IdP, ~nonce>
                 ) ▶₀ #vr.8 )
            case Browser_Redirects_To_URI_case_3
            solve( !Client_to_Server_TLS( ~browser_ID_TLS, $RP,
                                          <'loginWith', $IdP>
                   ) ▶₀ #vr.10 )
              case Browser_Performs_User_Action
              solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $IdP,
                                            <'authRequest', $client_id, $redirect_uri_RP, 
                                             $authEP_uri_IdP, nonce.1>
                     ) ▶₀ #vr.17 )
                case Browser_Redirects_To_URI_case_3
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma User_Authentication:
  all-traces
  "∀ rp uid idp #finish.
    ((((RP_gets_IDToken( rp, uid, idp ) @ #finish) ∧
       (¬(∃ #j. Is_Compromised( idp ) @ #j))) ∧
      (¬(∃ #j. Is_Compromised( rp ) @ #j))) ∧
     (¬(∃ #j. AdversaryRegisters( uid ) @ #j))) ⇒
    (∃ usr browserSession browser #k #start #consent #m #n.
      (((((((UserGivesConsent( usr, rp, idp ) @ #consent) ∧
            (UserStartsSession( usr, rp, idp ) @ #start)) ∧
           (UserID_belongs_To( uid, usr, idp ) @ #k)) ∧
          (RPgetsIDToken_FromBrowser( rp, browserSession, idp ) @ #finish)) ∧
         (BrowserUser( browser, usr ) @ #n)) ∧
        (BrowserServerSession( browser, rp, browserSession ) @ #m)) ∧
       (#consent < #finish)) ∧
      (#start < #consent))"
/*
guarded formula characterizing all counter-examples:
"∃ rp uid idp #finish.
  (RP_gets_IDToken( rp, uid, idp ) @ #finish)
 ∧
  (∀ #j. (Is_Compromised( idp ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Is_Compromised( rp ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (AdversaryRegisters( uid ) @ #j) ⇒ ⊥) ∧
  (∀ usr browserSession browser #k #start #consent #m #n.
    (UserGivesConsent( usr, rp, idp ) @ #consent) ∧
    (UserStartsSession( usr, rp, idp ) @ #start) ∧
    (UserID_belongs_To( uid, usr, idp ) @ #k) ∧
    (RPgetsIDToken_FromBrowser( rp, browserSession, idp ) @ #finish) ∧
    (BrowserUser( browser, usr ) @ #n) ∧
    (BrowserServerSession( browser, rp, browserSession ) @ #m)
   ⇒
    ((¬(#consent < #finish)) ∨ (¬(#start < #consent))))"
*/
simplify
solve( !Client_to_Server_TLS( ~browser_ID_TLS, $RP,
                              <'AuthResponse', 
                               <'id_token', <'iss', $IdP>, <'sub', $userID>, <'aud', $client_id>, 
                                'nonce', ~nonce>, 
                               id_token_sig>
       ) ▶₀ #finish )
  case Browser_Redirects_To_URI_case_1
  solve( St_RP_1( $RP, $IdP, $client_id, $redirect_uri_RP,
                  $authEP_uri_IdP, ~nonce
         ) ▶₁ #finish )
    case AuthRequest_RP_case_1
    by contradiction /* from formulas */
  next
    case AuthRequest_RP_case_2
    by contradiction /* from formulas */
  qed
next
  case Browser_Redirects_To_URI_case_2
  solve( St_RP_1( $RP, $IdP, $client_id, $redirect_uri_RP,
                  $authEP_uri_IdP, ~nonce
         ) ▶₁ #finish )
    case AuthRequest_RP_case_1
    solve( !Pk( $IdP, pk_idp ) ▶₂ #finish )
      case Initialization_IdP
      solve( !KU( ~nonce ) @ #vk.23 )
        case Compromised_Server_receives_case_1
        by contradiction /* from formulas */
      next
        case Compromised_Server_receives_case_2
        solve( !KU( sign(<'id_token', <'iss', $IdP>, <'sub', $userID>, 
                          <'aud', $client_id>, 'nonce', ~nonce>,
                         x, ~ltk)
               ) @ #vk.24 )
          case Compromised_Server_receives_case_1
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_2
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_3
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_4
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_5
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_6
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~ltk ) @ #vk.26 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_1
          solve( !KU( ~ltk ) @ #vk.26 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_2
          solve( !KU( ~ltk ) @ #vk.26 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_3
          solve( !KU( ~ltk ) @ #vk.26 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case Compromised_Server_receives_case_3
        solve( !KU( sign(<'id_token', <'iss', $IdP>, <'sub', $userID>, 
                          <'aud', $client_id>, 'nonce', ~nonce>,
                         x, ~ltk)
               ) @ #vk.24 )
          case Compromised_Server_receives_case_1
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_2
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_3
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_4
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_5
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_6
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~ltk ) @ #vk.26 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_1
          solve( !KU( ~ltk ) @ #vk.26 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_2
          solve( !KU( ~ltk ) @ #vk.26 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_3
          solve( !KU( ~ltk ) @ #vk.26 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case AuthRequest_RP_case_2
    solve( !Pk( $IdP, pk_idp ) ▶₂ #finish )
      case Initialization_IdP
      solve( !KU( ~nonce ) @ #vk.23 )
        case Compromised_Server_receives_case_1
        solve( !KU( sign(<'id_token', <'iss', $IdP>, <'sub', $userID>, 
                          <'aud', $client_id>, 'nonce', ~nonce>,
                         x, ~ltk)
               ) @ #vk.24 )
          case Compromised_Server_receives_case_1
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_2
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_3
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_4
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_5
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_6
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~ltk ) @ #vk.27 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_1
          solve( !KU( ~ltk ) @ #vk.27 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_2
          solve( !KU( ~ltk ) @ #vk.27 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_3
          solve( !KU( ~ltk ) @ #vk.27 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case Compromised_Server_receives_case_2
        solve( !KU( sign(<'id_token', <'iss', $IdP>, <'sub', $userID>, 
                          <'aud', $client_id>, 'nonce', ~nonce>,
                         x, ~ltk)
               ) @ #vk.24 )
          case Compromised_Server_receives_case_1
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_2
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_3
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_4
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_5
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_6
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~ltk ) @ #vk.27 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_1
          solve( !KU( ~ltk ) @ #vk.27 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_2
          solve( !KU( ~ltk ) @ #vk.27 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_3
          solve( !KU( ~ltk ) @ #vk.27 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
next
  case Browser_Redirects_To_URI_case_3
  solve( St_RP_1( $RP, $IdP, $client_id, $redirect_uri_RP,
                  $authEP_uri_IdP, ~nonce
         ) ▶₁ #finish )
    case AuthRequest_RP_case_1
    solve( !Pk( $IdP, pk_idp ) ▶₂ #finish )
      case Initialization_IdP
      solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $IdP,
                                    <'Consent', $IdP, $RP, $User, ~consent_nonce>
             ) ▶₀ #vr.1 )
        case Browser_Performs_User_Action_case_1
        by contradiction /* from formulas */
      next
        case Browser_Performs_User_Action_case_2
        by contradiction /* from formulas */
      next
        case Browser_Performs_User_Action_case_3
        by contradiction /* from formulas */
      next
        case Browser_Performs_User_Action_case_4
        by contradiction /* from formulas */
      next
        case Browser_Redirects_To_URI_case_1
        solve( !KU( ~consent_nonce ) @ #vk.12 )
          case Compromised_Server_receives_case_1
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_2
          by contradiction /* from formulas */
        qed
      next
        case Browser_Redirects_To_URI_case_2
        by contradiction /* from formulas */
      qed
    qed
  next
    case AuthRequest_RP_case_2
    solve( !Pk( $IdP, pk_idp ) ▶₂ #finish )
      case Initialization_IdP
      solve( !Client_to_Server_TLS( ~browser_ID_TLS1, $IdP,
                                    <'Consent', $IdP, $RP, $User, ~consent_nonce>
             ) ▶₀ #vr.1 )
        case Browser_Performs_User_Action_case_1
        by contradiction /* from formulas */
      next
        case Browser_Performs_User_Action_case_2
        by contradiction /* from formulas */
      next
        case Browser_Performs_User_Action_case_3
        by contradiction /* from formulas */
      next
        case Browser_Performs_User_Action_case_4
        by contradiction /* from formulas */
      next
        case Browser_Redirects_To_URI_case_1
        solve( !KU( ~consent_nonce ) @ #vk.12 )
          case Compromised_Server_receives_case_1
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_2
          by contradiction /* from formulas */
        qed
      next
        case Browser_Redirects_To_URI_case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Browser_Redirects_To_URI_case_4
  by contradiction /* from formulas */
next
  case Send_Adversary_TLS
  solve( St_RP_1( $RP, $IdP, $client_id, $redirect_uri_RP,
                  $authEP_uri_IdP, ~nonce
         ) ▶₁ #finish )
    case AuthRequest_RP_case_1
    solve( !Pk( $IdP, pk_idp ) ▶₂ #finish )
      case Initialization_IdP
      solve( !KU( ~nonce ) @ #vk.20 )
        case Compromised_Server_receives_case_1
        by contradiction /* from formulas */
      next
        case Compromised_Server_receives_case_2
        solve( !KU( sign(<'id_token', <'iss', $IdP>, <'sub', $userID>, 
                          <'aud', $client_id>, 'nonce', ~nonce>,
                         x, ~ltk)
               ) @ #vk.21 )
          case Compromised_Server_receives_case_1
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_2
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_3
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_4
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_5
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_6
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_1
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_2
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_3
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case Compromised_Server_receives_case_3
        solve( !KU( sign(<'id_token', <'iss', $IdP>, <'sub', $userID>, 
                          <'aud', $client_id>, 'nonce', ~nonce>,
                         x, ~ltk)
               ) @ #vk.21 )
          case Compromised_Server_receives_case_1
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_2
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_3
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_4
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_5
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_6
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_1
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_2
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_3
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case AuthRequest_RP_case_2
    solve( !Pk( $IdP, pk_idp ) ▶₂ #finish )
      case Initialization_IdP
      solve( !KU( ~nonce ) @ #vk.20 )
        case Compromised_Server_receives_case_1
        solve( !KU( sign(<'id_token', <'iss', $IdP>, <'sub', $userID>, 
                          <'aud', $client_id>, 'nonce', ~nonce>,
                         x, ~ltk)
               ) @ #vk.21 )
          case Compromised_Server_receives_case_1
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_2
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_3
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_4
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_5
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_6
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_1
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_2
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_3
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case Compromised_Server_receives_case_2
        solve( !KU( sign(<'id_token', <'iss', $IdP>, <'sub', $userID>, 
                          <'aud', $client_id>, 'nonce', ~nonce>,
                         x, ~ltk)
               ) @ #vk.21 )
          case Compromised_Server_receives_case_1
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_2
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_3
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_4
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_5
          by contradiction /* from formulas */
        next
          case Compromised_Server_receives_case_6
          by contradiction /* from formulas */
        next
          case c_sign
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_1
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_2
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        next
          case reSign_case_3
          solve( !KU( ~ltk ) @ #vk.23 )
            case Compromised_IdP_leaks_Signing_Key
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end