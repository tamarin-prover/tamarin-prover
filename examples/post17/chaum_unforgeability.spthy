theory Chaum_Unforgeability
begin


/*
 * Protocol: Chaum's On-line Protocol
 * Modeler: Charles DumÃ©nil
 * Date: July 2016	
 * Source: Formal Analysis of E-Cash Protocols by Jannik Dreier, Ali Kassem and Pascal Lafourcade
 * Status: working 
 */

/* Comments:
   x is imposed as a fresh value in B_1 and S_1 to model that the bank, respectively the seller, verifies the nature of the received message (e.g. using a ZKP).
*/

/*
  Protocol Chaum {
    Withdrawal phase
     C -> B: blind(x,r)
     B -> C: sign(blind(x,r),skB)    "Withdraw"
    Payment and deposit phase
     C -> S: <x, sign(x,skB)>        "Check signature"
     S -> B: <x, sign(x,skS)>        "Check signature" 
     B -> S: Private(x)              "Check signature" + "Deposit"
     S     :                         "Spend"
  }
*/


functions: pk/1, sign/2, checksign/2, blind/2, unblind/2
equations [convergent]: checksign( sign(m,k),pk(k) ) = m,
           unblind( blind(m,r),r ) = m,
           unblind( sign(blind(m,r),k),r ) = sign(m,k)


// Public key infrastructure

rule Register_pk_Bank:
  [ Fr(~ltkB) ]
  --[  ]->
  [ !Bank_Ltk($B, ~ltkB), !Bank_Pk($B, pk(~ltkB)), Out(pk(~ltkB)) ]

// Withdrawal Phase

/*
rule C_1:
    [ Fr(~x), Fr(~r) ]
  --[ ]->
    [ Out( blind(~x,~r) ), St_C_1( $C, ~x, ~r )]
*/

rule B_1:
    [ In( blind(~x,r) ), !Bank_Ltk($B, ~ltkB) ]
  --[ Withdraw(~x) ]->
    [ Out( sign( blind(~x,r), ~ltkB) ) ]


//Payment and deposit phase

/*
rule C_2:
 let s = unblind(sign(blind(~x,~r),~ltkB),~r)
  in
    [ St_C_1( $C, ~x, ~r ), In( sign(blind(~x,~r),~ltkB) ), !Bank_Pk(B, pk(~ltkB)) ]
  --[ ]->
    [ Out( <~x,s> ) ]
*/

rule S_1:
    [ In( <~x,sign(~x,~ltkB)> ), !Bank_Pk($B, pk(~ltkB)) ]
  --[  ]->
    [ Out( <~x,sign(~x,~ltkB)> ),St_S_1($B,~x) ]

rule B_2:
    [ In( <x,sign(x,~ltkB)> ), !Bank_Ltk($B, ~ltkB) ]
  --[ Deposited(x) ]->
    [ Private_Ch(x) ]

rule S_2:
    [ Private_Ch(x),St_S_1($B,x) ]
  --[ Spend( x ) ]->
    [  ]


// Axioms

restriction BankOnlyAcceptsOnce:
  " All x #j #k. Deposited(x)@j & Deposited(x)@k ==> #j = #k "

// Executability

lemma exec:
  exists-trace
  " Ex x #i. Spend( x )@i "


// Property

lemma unforgeability:
  "  All x #j. Spend(x) @ j
  ==> 
  ( Ex #i. Withdraw( x )@i & #i < #j & not (Ex #l. Spend(x)@l & not ( #l = #j ) ) ) "

/*

==============================================================================
summary of summaries:

analyzed: examples/features/equational_theories/chaum_unforgeability.spthy

  exec (exists-trace): verified (5 steps)
  unforgeability (all-traces): verified (10 steps)

==============================================================================

real	0m0.198s
user	0m0.336s
sys	0m0.056s

*/

end

