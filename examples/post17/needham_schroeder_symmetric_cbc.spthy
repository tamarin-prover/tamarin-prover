theory nsscbc begin

/*
 * Protocol: Needham-Schroeder with 'prefix property'
 * Modeler: Ralf Sasse
 * Date: October 2016	
 * Source: "A Survey of Algebraic Properties Used in Cryptographic Protocols" (Cortier, Delaune, Lafourcade)
 * Status: working (attack)
 */

/* 
 
 Protocol:

 1. A -> S: A, B, Na
 2. S -> A: {Na, B, Kab, {Kab, A}Kbs}Kas
 3. A -> B: {Kab, A}Kbs
 4. B -> A: {Nb}Kab
 5. A -> B: {succ(Nb)}Kab

*/

functions: enc/2, dec/2, prefix/1, succ/1
equations [convergent]: dec(enc(M,k), k) = M
         , prefix(enc(<X,Y>, k)) = enc(X, k)

rule setup:
  [ Fr(~k) ]
--[ KeyGen($A) ]->
  [ !SharedKeyWithServer($A, ~k) ]

rule reveal:
  [ !SharedKeyWithServer(X, k) ]
--[ Reveal(X) ]->
  [ Out(k) ]

rule Initiator1Request:
  [ Fr(~na) ]
--[ Initate($A,$B, ~na) ]->
  [ InitiatorRequested($A,$B, ~na), Out(<$A, $B, ~na>) ]

rule Initiator2KeyAndForward:
  let X = enc(<~k, $A>,kbs) in // this allows initiator to check that server generated the key for the partner correctly which is unrealistic but as long as we still find an attack that is ok.
  [ InitiatorRequested($A,$B, ~na), !SharedKeyWithServer($A, kas), In(enc(<<<~na, $B>, ~k> , X>, kas)) 
  , !SharedKeyWithServer($B, kbs)
  ]
--[ KeySharedInit($A,$B,~k) ]->
  [ Out(X), InitiatorWaitConfirm($A,$B, ~na, ~k) ]

rule Initiator3Confirm:
  [ InitiatorWaitConfirm($A,$B, ~na, ~k), In(enc(~nb,~k)) ]
--[ KeySharedInitConfirmed($A,$B,~k,~nb) ]->
  [ Out(enc(succ(~nb), ~k)) ]

rule ResponderKeyConfirm:
  [ In(enc(<~k,$A>, kbs)), !SharedKeyWithServer($B,kbs), Fr(~nb) ]
--[ KeySharedResp($B,$A,~k,~nb) ]->
  [ ResponderWaitConfirm($B,$A,~k, ~nb) , Out(enc(~nb, ~k)) ]

rule ResponderConfirmed:
  [ ResponderWaitConfirm($B,$A,~k, ~nb) , In(enc(succ(~nb), ~k)) ]
--[ KeySharedRespConfirmed($B,$A,~k, ~nb) ]->
  []

rule Server:
  [ In(<$A,$B,~n>), Fr(~k), !SharedKeyWithServer($A,kas), !SharedKeyWithServer($B,kbs)  ]
--[ CreatedKey($A,$B,~k) ]->
  [ Out(enc(<<<~n, $B>, ~k>,enc(<~k,$A>,kbs)>, kas)) ]

restriction singlesharedkeyperuser:
  "All A #i #j. KeyGen(A) @ i & KeyGen(A) @ j ==> #i = #j"

// This executability test is manually solved below to limit excessive memory
// consumption by automated heuristic.
// To verify it, uncomment the lemma within /* */ below, and open the file in
// interactive mode or alternatively run
// "tamarin-prover needham_schroeder_symmetric_cbc.spthy"
// from the command-line, without the --prove flag
/*
lemma executable:
  exists-trace "Ex A B k n #i #j. KeySharedInitConfirmed(A,B,k,n)@i & KeySharedRespConfirmed(B,A,k,n)@j"
simplify
solve( InitiatorWaitConfirm( $A, $B, ~na, ~k ) ▶₀ #i )
  case Initiator2KeyAndForward
  solve( ResponderWaitConfirm( $B, $A, ~k, ~nb ) ▶₀ #j )
    case ResponderKeyConfirm
    solve( !KU( enc(<<<~na, $B>, ~k>, enc(<~k, $A>, ~k.2)>, ~k.1)
           ) @ #vk.2 )
      case Server
      solve( !KU( ~na ) @ #vk.8 )
        case Initiator1Request
        solve( !KU( enc(~nb, ~k) ) @ #vk.2 )
          case ResponderKeyConfirm
          solve( !KU( enc(succ(~nb), ~k) ) @ #vk.5 )
            case Initiator3Confirm
            solve( !KU( enc(<<<~na.1, $B.1>, ~k>, enc(<~k, $A.1>, ~k.4)>, ~k.3)
                   ) @ #vk.9 )
              case Server
              solve( !KU( enc(<~k, $A>, ~k.1) ) @ #vk.6 )
                case Initiator2KeyAndForward
                solve( !KU( enc(<<<~na.1, $B>, ~k>, enc(<~k, $A>, ~k.1)>, ~k.2)
                       ) @ #vk.9 )
                  case Server
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed
*/

// an attack for this is found as expected
lemma secrecy:
  "All A B k n #i. KeySharedRespConfirmed(B,A,k,n)@i ==> not (Ex #j. K(k)@j ) |  (Ex #j. Reveal(B)@j)  |  (Ex #j. Reveal(A)@j)  "

/*

==============================================================================
summary of summaries:

analyzed: examples/features/equational_theories/needham_schroeder_symmetric_cbc.spthy

  executable (exists-trace): verified (11 steps)
  secrecy (all-traces): falsified - found trace (8 steps)

==============================================================================

real	0m24.074s
user	1m11.616s
sys	0m15.324s

*/

end

