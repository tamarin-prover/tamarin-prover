theory C8

begin

builtins:   signing,
            hashing,
            asymmetric-encryption,
            xor,
            symmetric-encryption,
            diffie-hellman

functions:  f/2, //key derivation function
            MAC/2, MAC_arpc/2, //cipher-based MACs
            p8/1, //padding function, used in ARPC computation w/ Method 1
            g/0,
            KDF_SKc/1,
            KDF_SKi/1

//=============== Non-DY channel ==============//
//secure channel for terminal-issuer communication
rule Terminal_Issuer_Network:
    [ Send(S, R, channelID, msg) ]-->[ Recv(S, R, channelID, msg) ]

//=================== Pools ==================//
//any given amount is always either Low or High, thus the usage of Once(...)
rule Generate_Amount_Low:
    [ ]--[ Once(<$amount, 'Amount'>) ]->[ !Value($amount, 'Low') ]

rule Generate_Amount_High:
    [ ]--[ Once(<$amount, 'Amount'>) ]->[ !Value($amount, 'High') ]

//the transaction counter
rule Generate_ATC:
    [ Fr(~ATC) ]-->[ !ATC(~ATC), Out(~ATC) ]

//=============== PKI and Issuer setup ==============//
//CA setup
//Actor of this rule is: $CA
rule Create_CA:
    let pubkCA = pk(~privkCA)
        cont = <'01', $CA, pubkCA, $CA>
        cert = <cont, sign{cont}~privkCA>
    in
    [ Fr(~privkCA) ]
  --[ Wellformedness(), //for testing wellformedness
      Once($CA),
      Role($CA, 'CA') ]->
    [ !LtkCA($CA, ~privkCA),//CA's private key
      !CertCA($CA, cert),//self-signed cert
      Out(pubkCA)//release CA's public key
    ]

//Issuer setup
//Actor of this rule is: $CA 
rule Create_Issuer:
    let pubkIssuer = pk(~privkIssuer)
        cont = <'02', $Issuer, pubkIssuer, $CA>
        cert = <cont, sign{cont}~privkCA>
    in
    [ Fr(~privkIssuer),
      !LtkCA($CA, ~privkCA) ]
  --[ Once($Issuer),
      Role($Issuer, 'Issuer') ]->
    [ !LtkIssuer($Issuer, ~privkIssuer),//issuer's private key
      !CertIssuer($Issuer, cert),//issuer's cert
      !IssuingCA($Issuer, $CA),//issuer's cert issuer
      Out(pubkIssuer)//release the issuer's public key
    ]

//=========== Compromise rules =============//
rule Compromise_CA:
    [ !LtkCA($CA, ~privkCA) ]
  --[ Compromise($CA) ]->
    [ Out(~privkCA)]

rule Compromise_Issuer:
    [ !LtkIssuer($Issuer, ~privkIssuer) ]
  --[ Compromise($Issuer) ]->
    [ Out(<$Issuer, ~privkIssuer>) ]

rule Compromise_Issuer_Card_ShK:
    [ !IssuingIssuer(~PAN, $Issuer),
      !Shk(~PAN, ~MK) ]
  --[ Compromise($Issuer), Compromise(~PAN) ]->
    [ Out(~MK) ]

rule Compromise_Card_ECC:
    [ !ECCPrivKeyCard(~PAN, ~dC) ]
  --[ Compromise(~PAN) ]->
    [ Out(<~PAN, ~dC>) ]

rule Compromise_Terminal_ECC:
    [ Terminal_May_Compromise($Terminal, ~dT) ]
  --[ Compromise($Terminal) ]->
    [ Out(~dT) ]

//=============== PIN ==================//
rule Set_PIN:
    [ Fr(~PIN),
      Set_PIN(~PAN, CVM, $CA, $Issuer) ]
  --[ NEq(CVM, 'NoCVM'),
      SecretPIN(~PIN),
      Honest($CA), Honest($Issuer), Honest(~PAN) ]->
    [ !PIN(~PAN, ~PIN),
      !Entered_PIN(~PAN, ~PIN),//legitimate cardholder enters the PIN
      !Entered_PIN(~PAN, 'WrongPIN')//attacker enters a wrong PIN
    ]

///////////////////////////////////////////////////
//                   C8                          //
///////////////////////////////////////////////////
//Card setup
//Actor of this rule is: $Issuer
rule Create_Card_C8:
    let AIP = <Data1, Data2>
    in
    [ Fr(~PAN),//card number, serves as ID too
      Fr(~expDate),//card's expiration date
      Fr(~MK),//master key shared by the card and the issuer
      !LtkIssuer($Issuer, ~privkIssuer),//issuer's private key
      !CertIssuer($Issuer, certIssuer),//issuer's cert
      !IssuingCA($Issuer, $CA),//issuer's cert issuer
      In(AIP)//let the adversary choose the AIP:
             //Data1 indicates if local auth is supported, modeled: 'LocalAuth'/'NoLocalAuth'
             //Data2 indicates if copy IAD-MAC into IAD, modeled: 'CopyIAD'/'NoCopyIAD'
    ]
  --[ Role(~PAN, 'Card'),
      SecretPAN(~PAN),
      SecretMK(~MK),
      Honest($CA), Honest($Issuer), Honest(~PAN) ]->
    [ !AIP(~PAN, AIP),//Application Interchange Profile
      !AID(~PAN, 'C8'),
      !Shk(~PAN, ~MK),//master symmetric key shared by the card and the issuer
      !IssuingIssuer(~PAN, $Issuer),//annotate the issuing issuer
      Set_Records_C8(~PAN, ~expDate, $CA, certIssuer),
      Set_PIN(~PAN, 'OnlinePIN', $CA, $Issuer) ]

rule Set_Records_C8:
    let SDA_Hash = h(<~PAN, ~expDate, AIP>)
        QC = g ^ ~dC
        signedECCPKCard = <<'14', SDA_Hash, QC>, sign{<'14', SDA_Hash, QC>}~privkIssuer>
        protectedRecords = <~PAN, ~expDate, signedECCPKCard>
    in
    [ Set_Records_C8(~PAN, ~expDate, $CA, certIssuer),
      !AIP(~PAN, AIP),
      !AID(~PAN, 'C8'),
      !IssuingIssuer(~PAN, $Issuer),
      !LtkIssuer($Issuer, ~privkIssuer),
      Fr(~dC) ] //card's ECC private key
  --[ //NEq(fst(AIP), 'SDA'),
      SecretECCPrivkCard(~dC),
      Honest($CA), Honest($Issuer), Honest(~PAN) ]->
    [ Out(QC),
      !ECCPrivKeyCard(~PAN, ~dC),
      !Protected_Records(~PAN, protectedRecords),
      !Unprotected_Records(~PAN, <$CA, certIssuer>),
      !SDA_Hash(~PAN, SDA_Hash) ]

//============== Initialization ====================//
//for simplicity, SELECT exchanges are ignored
rule Terminal_Sends_GPO_C8:
    let QT = g ^ ~dT
    in
    [ Fr(~dT) ]
  --[ OneTerminal(),
      Role($Terminal, 'Terminal') ]->
    [ Out(<'GET_PROCESSING_OPTIONS', QT>), //PDOL (Related Data) is omited
      Terminal_Sent_GPO_C8($Terminal, ~dT),
      Terminal_May_Compromise($Terminal, ~dT) ]

rule Card_Responds_To_GPO_C8:
    let z = (QT ^ ~r) ^ dC
        SKc = KDF_SKc(z)
        SKi = KDF_SKi(z)
        blindedQC = (g ^ ~r) ^ dC
    in
    [ In(<'GET_PROCESSING_OPTIONS', QT>),
      !AIP(~PAN, AIP),
      !AID(~PAN, 'C8'),
      !ATC(ATC),
      Fr(~r),
      !ECCPrivKeyCard(~PAN, dC) ]
  --[ OneCard(),
      Once(<~PAN, ATC, 'Card'>) ]->
    [ Out(< AIP, 'AFL', blindedQC, senc{'CMC', ~r}SKc >),
      Card_Responded_To_GPO_C8(~PAN, ATC, SKc, SKi) ]

rule Terminal_Receives_GPO_Respondse_C8:
    let z = blindedQC ^ dT
        SKc = KDF_SKc(z)
        SKi = KDF_SKi(z)
    in
    [ In(< AIP, 'AFL', blindedQC, senc{'CMC', r}SKc >),
      Terminal_Sent_GPO_C8($Terminal, dT) ]
  --[ ]->
    [ Terminal_Received_GPO_Resonondse_C8($Terminal, AIP, blindedQC, dT, r, SKc, SKi) ]

//==========Relay Resistance Protocol==============//
rule Terminal_Sends_RRP_C8:
    let TRRE = ~UN //Terminal Relay Resistance Entropy
    in
    [ Terminal_Received_GPO_Resonondse_C8($Terminal, AIP, blindedQC, dT, r, SKc, SKi),
      Fr(~UN) ]
  --[ FastPhaseStarts(TRRE) ]->
    [ Out(<'EXCHANGE_RELAY_RESISTANCE_DATA', TRRE>),
      Terminal_Sent_ERRD_C8($Terminal, AIP, blindedQC, dT, r, SKc, SKi, ~UN) ]

rule Card_Responds_To_RRP_C8:
    [ Card_Responded_To_GPO_C8(~PAN, ATC, SKc, SKi),
      In(<'EXCHANGE_RELAY_RESISTANCE_DATA', TRRE>),
      Fr(~DRRE) ] //Device Relay Resistance Entropy
  --[ FastPhaseAction(~PAN) ]->
    [ Card_Responded_To_ERRD_C8(~PAN, ATC, SKc, SKi, TRRE, ~DRRE),
      Out(<~DRRE, 'Timing_Data'>) ]

//============== Read Records ====================//
rule Terminal_Sends_ReadRecord_C8:
    let TRRE = UN
    in
    [ Terminal_Sent_ERRD_C8($Terminal, AIP, blindedQC, dT, r, SKc, SKi, UN),
      In(<DRRE, 'Timing_Data'>) ]
  --[ FastPhaseEnds(DRRE) ]->
    [ Out(<'READ_RECORD', 'AFL'>),
      Terminal_Sent_ReadRecord_C8($Terminal, AIP, blindedQC, dT, r, SKc, SKi, UN, DRRE) ]

rule Card_Responds_To_ReadRecord_C8:
    [ Card_Responded_To_ERRD_C8(~PAN, ATC, SKc, SKi, TRRE, DRRE),
      !AIP(~PAN, AIP),
      !Protected_Records(~PAN, protectedRecords),
      !Unprotected_Records(~PAN, unprotectedRecords),
      In(<'READ_RECORD', 'AFL'>) ]
  -->
    [ Out(< senc{protectedRecords}SKc, unprotectedRecords >),
      Card_Ready_For_Cryptogram_C8(~PAN, ATC, SKc, SKi, TRRE, DRRE) ]

//============== Offline Data Authentication ====================//
rule Terminal_Receives_Records_LocalAuth_C8:
    let AIP = <'LocalAuth', AIP_Data2>
        SDA_Hash =  h(<~PAN, expDate, AIP>) //validated as part of the Card ECC cert. verification.
        protectedRecords = <~PAN, expDate, <<'14', SDA_Hash, QC>, sign4>> //card's ECC public key (signed) record
        unprotectedRecords = <$CA, <'02', $Issuer, pubkIssuer, $CA>, sign2>
    in
    [ Terminal_Sent_ReadRecord_C8($Terminal, AIP, QC ^ r, dT, r, SKc, SKi, UN, DRRE),
      //blinding factor is validated as part of local authentication
      In(< senc{protectedRecords}SKc, unprotectedRecords >),
      !IssuingCA($Issuer, $CA),
      !CertCA($CA, <<'01', $CA, pubkCA, $CA>, sign1>) ]
  --[ //verify CA's cert (this is possibly not needed)
      Eq( verify(sign1, <'01', $CA, pubkCA, $CA>, pubkCA), true), // part of the optional pk validation
      //verify the issuer's cert
      Eq( verify(sign2, <'02', $Issuer, pubkIssuer, $CA>, pubkCA), true), //part of the optional pk validation
      //verify the card's ECC PK signed record
      Eq( verify(sign4, <'14', SDA_Hash, QC>, pubkIssuer), true) //part of the optional pk validation.
    ]->
    [ Terminal_Ready_For_Cryptogram_C8($Terminal, ~PAN, $Issuer, $CA,
        AIP, pubkIssuer, UN, SKc, SKi, expDate, DRRE) ]

rule Terminal_Receives_Records_NoLocalAuth_C8:
    let AIP = <'NoLocalAuth', AIP_Data2>
        //The 'LocalAuth' bit from EMV is the same as the 'local auth. supported' bit from C8
        protectedRecords = <~PAN, expDate, <<'14', SDA_Hash, QC>, sign4>> //card's ECC public key (signed) record
        unprotectedRecords = <$CA, <'02', $Issuer, pubkIssuer, $CA>, sign2>
    in
    [ Terminal_Sent_ReadRecord_C8($Terminal, AIP, blindedQC, dT, r, SKc, SKi, UN, DRRE),
      //The blinding factor is not validated for NoLocalAuth 
      In(< senc{protectedRecords}SKc, unprotectedRecords >),
      !IssuingCA($Issuer, $CA),
      !CertCA($CA, <<'01', $CA, pubkCA, $CA>, sign1>) ]
  -->
    [ Terminal_Ready_For_Cryptogram_C8($Terminal, ~PAN, $Issuer, $CA,
        AIP, pubkIssuer, UN, SKc, SKi, expDate, DRRE) ]

//============== Application Cryptogram =================//
rule Terminal_Sends_GenerateAC_C8:
    let CVMR = CVM
        TRMD = CVM
        country = 'Switzerland'
        TVR = 'TVR'
        currency = 'CHF'
        date = 'YYMMDD'
        type = 'Purchase'
        CDOL1 = <$amount, country, TVR, currency, date, type, UN, CVMR, TRMD>
        // Mastercard told us that the PDOL is moved into the CDOL. But we don't know that from the specs.
        X = CDOL1
        // In EMV models: 
        //CDOL1 = <'TVR', CVM, 'HHMMSS'>
        //X = <PDOL, CDOL1>
    in
    [ Terminal_Ready_For_Cryptogram_C8($Terminal, ~PAN, $Issuer, $CA,
        AIP, pubkIssuer, UN, SKc, SKi, expDate, DRRE),
      !Value($amount, value),
      In(< acType, CVM >) ] //adversary chooses the acType and the TRMD (CVM)
  --[ ValidCVM(CVM) ]->
    [ Out(< 'GENERATE_AC', acType, CDOL1 >), //Note: acType = Reference Control Parameter
      Terminal_Sent_GenerateAC_C8($Terminal, ~PAN, $Issuer, $CA,
        X, AIP, pubkIssuer, acType, CVM, SKc, SKi, expDate, DRRE) ]

rule Card_Responds_To_GenerateAC_CopyIAD_C8: //we assume card accepts the proposed CVM, if supported
    let AIP = <AIP_Data1, 'CopyIAD'> //Copy IAD indicates that the IAD-MAC is added to the AC
        CDOL1 = <amount, country, TVR, currecy, date, type, TRRE, CVMR, TRMD> //Vfy TRRE = UN for RRP
        CVM = TRMD
        X = CDOL1
        SDA_Hash = h(<~PAN, expDate, AIP>)
        IAD = 'IAD'
        IAD_MAC = MAC(SKi, <'0000', X, TRRE, DRRE, CID, ATC, CVM, IAD, SDA_Hash>)
        AC = MAC(f(~MK, ATC), <X, AIP, ATC, IAD_MAC>)
        EDA_MAC = MAC(SKi, <'0000', AC, IAD_MAC>)
        IAD_terminal = <IAD, IAD_MAC> 
        transaction = <~PAN, AIP, CVM, X, ATC, AC, IAD_terminal, 'C8'>
        protectedRecords = <~PAN, expDate, Cert>
    in
    [ Card_Ready_For_Cryptogram_C8(~PAN, ATC, SKc, SKi, TRRE, DRRE),
      !AIP(~PAN, AIP),
      !Shk(~PAN, ~MK),
      !IssuingIssuer(~PAN, $Issuer),
      !Protected_Records(~PAN, protectedRecords),
      !SDA_Hash(~PAN, SDA_Hash),
      In(< 'GENERATE_AC', CID, CDOL1 >)
    ]
  --[ SupportedCVM(~PAN, CVM),
      Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>),
      Running(~PAN, $Issuer, <'Card', 'Issuer', transaction>) ]->
    [ Out(< CID, ATC, CVM, AC, IAD, EDA_MAC >) ]

rule Card_Responds_To_GenerateAC_NoCopyIAD_C8: //we assume card accepts the proposed CVM, if supported
    let AIP = <AIP_Data1, 'NoCopyIAD'>
        CDOL1 = <amount, country, TVR, currecy, date, type, TRRE, CVMR, TRMD> //Vfy TRRE = UN for RRP
        CVM = TRMD
        X = CDOL1
        SDA_Hash = h(<~PAN, expDate, AIP>)
        IAD = 'IAD'
        IAD_MAC = MAC(SKi, <'0000', X, TRRE, DRRE, CID, ATC, CVM, IAD, SDA_Hash>)
        AC = MAC(f(~MK, ATC), <X, AIP, ATC, '0000'>)//When the IAD-MAC is not added here, a zero padding is added.
        EDA_MAC = MAC(SKi, <'0000', AC, IAD_MAC>)
        IAD_terminal = IAD //Without Copy IAD, omit the IAD-MAC from the transaction
        transaction = <~PAN, AIP, CVM, X, ATC, AC, IAD_terminal, 'C8'>
        protectedRecords = <~PAN, expDate, Cert>
    in
    [ Card_Ready_For_Cryptogram_C8(~PAN, ATC, SKc, SKi, TRRE, DRRE),
      !AIP(~PAN, AIP),
      !Shk(~PAN, ~MK),
      !IssuingIssuer(~PAN, $Issuer),
      !Protected_Records(~PAN, protectedRecords),
      !SDA_Hash(~PAN, SDA_Hash),
      In(< 'GENERATE_AC', CID, CDOL1 >)
    ]
  --[ SupportedCVM(~PAN, CVM),
      Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>),
      Running(~PAN, $Issuer, <'Card', 'Issuer', transaction>) ]->
    [ Out(< CID, ATC, CVM, AC, IAD, EDA_MAC >) ]

rule Terminal_Receives_AC_CopyIAD_C8:
    let AIP = <AIP_Data1, 'CopyIAD'>	
        CDOL1 = <$amount, 'Switzerland', 'TVR', 'CHF', 'YYMMDD', 'Purchase', UN, CVMR, TRMD>
        X = CDOL1
        SDA_Hash = h(<~PAN, expDate, AIP>)
        IAD_MAC = MAC(SKi, <'0000', X, UN, DRRE, CID, ATC, CVM, IAD, SDA_Hash>)
        IAD_terminal = <IAD, IAD_MAC> //Copy IAD indicates that the IAD-MAC is added to IAD
        EDA_MAC = MAC(SKi, <'0000', AC, IAD_MAC>)
        transaction = <~PAN, AIP, CVM, X, ATC, AC, IAD_terminal, 'C8'>
    in
    [ Terminal_Sent_GenerateAC_C8($Terminal, ~PAN, $Issuer, $CA,
        X, AIP, pubkIssuer, acType, CVM2, SKc, SKi, expDate, DRRE),
      In(< CID, ATC, CVM, AC, IAD, EDA_MAC >),
      Fr(~channelID),
      !Value($amount, value) ]
  --[ CompatibleCVM(CVM, CVM2),//why not Eq(CVM, CVM2)? Likely because CVM can be 'NoCVM'
      Running($Terminal, $Issuer, <'Terminal', 'Issuer', transaction>) ]->
    [ Terminal_Ready_For_CVM_C8($Terminal, $Issuer, $CA,
        X, AIP, pubkIssuer, CVM, CID, transaction, ~channelID, value, DRRE) ]

rule Terminal_Receives_AC_NoCopyIAD_C8:
    let AIP = <AIP_Data1, 'NoCopyIAD'>
        CDOL1 = <$amount, 'Switzerland', 'TVR', 'CHF', 'YYMMDD', 'Purchase', UN, CVMR, TRMD>
        X = CDOL1
        SDA_Hash = h(<~PAN, expDate, AIP>)
        IAD_MAC = MAC(SKi, <'0000', X, UN, DRRE, CID, ATC, CVM, IAD, SDA_Hash>)
        IAD_terminal = IAD //Not Copy IAD indicates that the IAD-MAC is NOT added to IAD
        EDA_MAC = MAC(SKi, <'0000', AC, IAD_MAC>)
        transaction = <~PAN, AIP, CVM, X, ATC, AC, IAD_terminal, 'C8'>
    in
    [ Terminal_Sent_GenerateAC_C8($Terminal, ~PAN, $Issuer, $CA,
        X, AIP, pubkIssuer, acType, CVM2, SKc, SKi, expDate, DRRE),
      In(< CID, ATC, CVM, AC, IAD, EDA_MAC >),
      Fr(~channelID),
      !Value($amount, value) ]
  --[ CompatibleCVM(CVM, CVM2),
      Running($Terminal, $Issuer, <'Terminal', 'Issuer', transaction>) ]->
    [ Terminal_Ready_For_CVM_C8($Terminal, $Issuer, $CA,
        X, AIP, pubkIssuer, CVM, CID, transaction, ~channelID, value, DRRE) ]

//============== Cardholder Verification ===================//
//No CVM (or Paper Signature)
rule Terminal_Processes_CVM_NoCVM_C8:
    [ Terminal_Ready_For_CVM_C8($Terminal, $Issuer, $CA, 
        X, AIP, pubkIssuer, 'NoCVM', CID, transaction, ~channelID, 'Low', DRRE) ]
  -->
    [ Terminal_Processed_CVM_C8($Terminal, $Issuer, $CA,
        X, AIP, pubkIssuer, 'NoCVM', CID, transaction, ~channelID, 'Low', 'Null', DRRE) ]
      
//Online PIN
rule Terminal_Processes_CVM_OnlinePIN_C8:
    let CID = 'ARQC'
        CVM = 'OnlinePIN'
        encPIN = aenc{PIN}pubkIssuer
        transaction = <~PAN, AIP, CVM, X, ATC, AC, IAD_terminal, 'C8'>
    in
    [ Terminal_Ready_For_CVM_C8($Terminal, $Issuer, $CA,
        X, AIP, pubkIssuer, CVM, CID, transaction, ~channelID, value, DRRE),
      !Entered_PIN(~PAN, PIN)/*customer or attacker enters PIN */]
  -->
    [ Terminal_Processed_CVM_C8($Terminal, $Issuer, $CA,
        X, AIP, pubkIssuer, CVM, CID, transaction, ~channelID, value, encPIN, DRRE) ]

//On-device CVM
rule Terminal_Processes_CVM_ODCVM_C8:
    [ Terminal_Ready_For_CVM_C8($Terminal, $Issuer, $CA,
        X, AIP, pubkIssuer, 'ODCVM', CID, transaction, ~channelID, value, DRRE) ]
  -->
    [ Terminal_Processed_CVM_C8($Terminal, $Issuer, $CA,
        X, AIP, pubkIssuer, 'ODCVM', CID, transaction, ~channelID, value, 'Null', DRRE) ]


rule Terminal_Sends_Transaction_to_Issuer_C8:
  [ Terminal_Processed_CVM_C8($Terminal, $Issuer, $CA,
      X, AIP, pubkIssuer, CVM, CID, transaction, ~channelID, value, encPIN, DRRE) ]
-->
  [ Terminal_Sent_Transaction_to_Issuer_C8($Terminal, $Issuer, $CA,
      X, AIP, pubkIssuer, CVM, CID, transaction, ~channelID, value, DRRE),
    Send($Terminal, $Issuer, <~channelID, '1'>, <transaction, encPIN>) ]

//============== Online Authorization ==============//
rule Terminal_Commits_ARQC_C8:
    let /*if(NoCVM) CVM = 'NoCVM' endif(NoCVM)*/
        /*if(OnlinePIN) CVM = 'OnlinePIN' endif(OnlinePIN)*/
        /*if(ODCVM) CVM = 'ODCVM' endif(ODCVM)*/
        /*if(Low) value = 'Low' endif(Low)*/
        /*if(High) value = 'High' endif(High)*/
        /*if(LocalAuth) AIP_Data1 = 'LocalAuth' endif(LocalAuth)*/
        /*if(NoLocalAuth) AIP_Data1 = 'NoLocalAuth' endif(NoLocalAuth)*/
        /*if(CopyIAD) AIP_Data2 = 'CopyIAD' endif(CopyIAD)*/
        /*if(NoCopyIAD) AIP_Data2 = 'NoCopyIAD' endif(NoCopyIAD)*/
        AIP = <AIP_Data1, AIP_Data2>
        X = <$amount, 'Switzerland', 'TVR', 'CHF', 'YYMMDD', 'Purchase', UN, CVMR, TRMD>
        transaction = <~PAN, AIP, CVM, X, ATC, AC, IAD_terminal, 'C8'>
    in
    [ Terminal_Sent_Transaction_to_Issuer_C8($Terminal, $Issuer, $CA,
        X, AIP, pubkIssuer, CVM, 'ARQC', transaction, ~channelID, value, DRRE),
      Recv($Issuer, $Terminal, <~channelID, '2'>, <'ARC', ARPC>) ]
  --[ TerminalAccepts(transaction),
      CheckRelayResistance(~PAN, UN, DRRE),
      Commit('Terminal', ~PAN, <'Card', 'Terminal', transaction>),
      Commit($Terminal, $Issuer, <'Issuer', 'Terminal', transaction>), 
      Honest($CA), Honest($Issuer), Honest($Terminal), Honest(~PAN) ]->
    [ ]

//============== Offline Authorization =============//
// for C8, we allow offline authorization
rule Terminal_Commits_TC_C8:
  let /*if(NoCVM) CVM = 'NoCVM' endif(NoCVM)*/
      /*if(OnlinePIN) CVM = 'OnlinePIN' endif(OnlinePIN)*/
      /*if(ODCVM) CVM = 'ODCVM' endif(ODCVM)*/
      /*if(Low) value = 'Low' endif(Low)*/
      /*if(High) value = 'High' endif(High)*/
      /*if(LocalAuth) AIP_Data1 = 'LocalAuth' endif(LocalAuth)*/
      /*if(NoLocalAuth) AIP_Data1 = 'NoLocalAuth' endif(NoLocalAuth)*/
      /*if(CopyIAD) AIP_Data2 = 'CopyIAD' endif(CopyIAD)*/
      /*if(NoCopyIAD) AIP_Data2 = 'NoCopyIAD' endif(NoCopyIAD)*/
      AIP = <AIP_Data1, AIP_Data2>
      X = <$amount, 'Switzerland', 'TVR', 'CHF', 'YYMMDD', 'Purchase', UN, CVMR, TRMD>
      transaction = <~PAN, AIP, CVM, X, ATC, AC, IAD_terminal, 'C8'>
  in
  [ Terminal_Sent_Transaction_to_Issuer_C8($Terminal, $Issuer, $CA,
      X, AIP, pubkIssuer, CVM, 'TC', transaction, ~channelID, value, DRRE) ]
--[ TerminalAccepts(transaction),
    CheckRelayResistance(~PAN, UN, DRRE),
    OfflineAuth(),
    Commit('Terminal', ~PAN, <'Card', 'Terminal', transaction>),
    Honest($CA), Honest($Issuer), Honest($Terminal), Honest(~PAN) ]->
  [ ]

/////////////////////////////////////////////////////
//                     Issuer                      //
/////////////////////////////////////////////////////
rule Issuer_Receives_CopyIAD_AC:
    let IAD_terminal = <IAD, IAD_MAC> 
        AIP = <AIP_Data1, 'CopyIAD'>
        AC = MAC(f(~MK, ATC), <X, AIP, ATC, IAD_MAC>)
        ARPC = MAC_arpc(f(~MK, ATC), AC XOR p8('ARC'))//could be modeled w/ senc
        transaction = <~PAN, AIP, CVM, X, ATC, AC, IAD_terminal, AID>
    in
    [ Recv($Terminal, $Issuer, <channelID, '1'>,
        <transaction, encPIN>),
      !Shk(~PAN, ~MK),
      /*if(AID) !AID(~PAN, AID), endif(AID)*/
      !IssuingIssuer(~PAN, $Issuer) ]
  --[ Once(<~PAN, ATC, 'Issuer'>) ]->
    [ Issuer_Checked_AC($Issuer, $Terminal, transaction, encPIN, channelID, ARPC) ]

rule Issuer_Receives_NoCopyIAD_AC:
    let AC = MAC(f(~MK, ATC), <X, AIP, ATC, '0000'>)
        ARPC = MAC_arpc(f(~MK, ATC), AC XOR p8('ARC'))//could be modeled w/ senc
        transaction = <~PAN, AIP, CVM, X, ATC, AC, IAD, AID>
    in
    [ Recv($Terminal, $Issuer, <channelID, '1'>,
        <transaction, encPIN>),
      !Shk(~PAN, ~MK),
      /*if(AID) !AID(~PAN, AID), endif(AID)*/
      !IssuingIssuer(~PAN, $Issuer) ]
  --[ Once(<~PAN, ATC, 'Issuer'>),
      NEq(snd(AIP), 'CopyIAD') ]->
    [ Issuer_Checked_AC($Issuer, $Terminal, transaction, encPIN, channelID, ARPC) ]

rule Issuer_Receives_AC_CopyIAD_Failed:
    let IAD_terminal = <IAD, IAD_MAC> 
        AIP = <futherData, 'CopyIAD'>
        correctAC = MAC(f(~MK, ATC), <X, AIP, ATC, IAD_MAC>)
        transaction = <~PAN, AIP, CVM, X, ATC, AC, IAD_terminal, AID>
    in
    [ Recv($Terminal, $Issuer, <channelID, '1'>,
        <transaction, encPIN>),
      /*if(AID) !AID(~PAN, AID), endif(AID)*/
      !Shk(~PAN, ~MK) ]
  --[ NEq(correctAC, AC),
      IssuerDeclines(transaction) ]->
    [ ]

rule Issuer_Receives_AC_NoCopyIAD_Failed:
    let correctAC = MAC(f(~MK, ATC), <X, AIP, ATC, '0000'>)
        transaction = <~PAN, AIP, CVM, X, ATC, AC, IAD, AID>
    in
    [ Recv($Terminal, $Issuer, <channelID, '1'>,
        <transaction, encPIN>),
      /*if(AID) !AID(~PAN, AID), endif(AID)*/
      !Shk(~PAN, ~MK) ]
  --[ NEq(correctAC, AC),
      IssuerDeclines(transaction),
      NEq(snd(AIP), 'CopyIAD') ]->
    [ ]

rule Issuer_Processes_CVM_NotOnlinePIN:
    let transaction = <~PAN, AIP, CVM, X, ATC, AC, IAD_terminal, AID>
    in
    [ Issuer_Checked_AC($Issuer, $Terminal, transaction, 'Null', channelID, ARPC) ]
  --[ NEq(CVM, 'OnlinePIN'),
      Running($Issuer, $Terminal, <'Issuer', 'Terminal', transaction>) ]->
    [ Issuer_Commits($Issuer, $Terminal, transaction, channelID, ARPC) ]

rule Issuer_Processes_CVM_OnlinePIN:
    let encPIN = aenc{PIN}pk(~privkIssuer)
        transaction = <~PAN, AIP, 'OnlinePIN', X, ATC, AC, IAD_terminal, AID>
    in
    [ Issuer_Checked_AC($Issuer, $Terminal, transaction, encPIN, channelID, ARPC),
      !LtkIssuer($Issuer, ~privkIssuer),
      !PIN(~PAN, PIN) ]
  --[ Running($Issuer, $Terminal, <'Issuer', 'Terminal', transaction>) ]->
    [ Issuer_Commits($Issuer, $Terminal, transaction, channelID, ARPC) ]

rule Issuer_Commits:
    let CDOL1 = <amount, country, TVR, currency, date, type, UN, CVMR, TRMD>
        X = CDOL1
        AID2 = 'C8'
        /*if(LocalAuth) AIP_Data1 = 'LocalAuth' endif(LocalAuth)*/
        /*if(NoLocalAuth) AIP_Data1 = 'NoLocalAuth' endif(NoLocalAuth)*/
        /*if(CopyIAD) AIP_Data2 = 'CopyIAD' endif(CopyIAD)*/
        /*if(NoCopyIAD) AIP_Data2 = 'NoCopyIAD' endif(NoCopyIAD)*/
        AIP = <AIP_Data1, AIP_Data2>
        /*if(Low) value = 'Low' endif(Low)*/
        /*if(High) value = 'High' endif(High)*/
        transaction = <~PAN, AIP, CVM, X, ATC, AC, IAD_terminal, AID>
    in
    [ Issuer_Commits($Issuer, $Terminal, transaction, channelID, ARPC),
      !Value(amount, value),
      !AID(~PAN, AID2),
      !IssuingCA($Issuer, $CA) ]
  --[ Commit($Issuer, ~PAN, <'Card', 'Issuer', transaction>),
      Commit($Issuer, $Terminal, <'Terminal', 'Issuer', transaction>),
      Honest($CA), Honest($Issuer), Honest($Terminal), Honest(~PAN) ]->
    [ Send($Issuer, $Terminal, <channelID, '2'>, <'ARC', ARPC>) ]

/////////////////////////////////////////////////////
//                 Restrictions                    //
/////////////////////////////////////////////////////
restriction equal:
  "All a b #i. Eq(a, b)@i ==> a = b"

restriction not_equal:
  "All a #i. NEq(a, a)@i ==> F"

restriction once:
  "All a #i #j. Once(a)@i & Once(a)@j ==> #i = #j"

restriction unique_role:
  "All A r1 r2 #i #j. Role(A, r1)@i & Role(A, r2)@j ==> r1 = r2"

//only valid CVMs
restriction valid_CVM:
  "All CVM #i.
    ValidCVM(CVM)@i ==> CVM = 'NoCVM' | CVM = 'OnlinePIN' | CVM = 'ODCVM'"

//a card/phone cannot do both OnlinePIN and ODCVM
restriction supported_CVM:
  "All PAN #i #j.
    SupportedCVM(PAN, 'OnlinePIN')@i & SupportedCVM(PAN, 'ODCVM')@j ==> F"

//CVM selected by card is compatible with proposal by terminal
restriction compatible_CVM:
  "All CVM1 CVM2 #i. 
    CompatibleCVM(CVM1, CVM2)@i ==> CVM1 = 'NoCVM' | CVM1 = CVM2"

////////////////////////////////////////////
//              Sanity Check              //
////////////////////////////////////////////
lemma executable:
  exists-trace
  "Ex Issuer PAN t #i #j #k #l.
    i < j & //Card-Terminal agreement
    Running(PAN, 'Terminal', <'Card', 'Terminal', t>)@i &
    Commit('Terminal', PAN, <'Card', 'Terminal', t>)@j &
    k < l & //Card-Issuer agreement
    Running(PAN, Issuer, <'Card', 'Issuer', t>)@k &
    Commit(Issuer, PAN, <'Card', 'Issuer', t>)@l &      
    (All #a #b. OneCard()@a & OneCard()@b ==> #a = #b) &
    (All #a #b. OneTerminal()@a & OneTerminal()@b ==> #a = #b) &
    (All A B r #a #b. Role(A, r)@a & Role(B, r)@b ==> A = B) &
    not (Ex A #a. Compromise(A)@a)"

lemma offlineAuth_executable:
  exists-trace
  "Ex PAN t #i #j.
    i < j & //Card-Terminal agreement
    Running(PAN, 'Terminal', <'Card', 'Terminal', t>)@i &
    Commit('Terminal', PAN, <'Card', 'Terminal', t>)@j &
    OfflineAuth()@j &
    (All #a #b. OneCard()@a & OneCard()@b ==> #a = #b) &
    (All #a #b. OneTerminal()@a & OneTerminal()@b ==> #a = #b) &
    (All A B r #a #b. Role(A, r)@a & Role(B, r)@b ==> A = B) &
    not (Ex A #a. Compromise(A)@a)"

lemma wellformedness_test:
  exists-trace
  "Ex #i. Wellformedness()@i"

/////////////////////////////////////////////////////
//           Security Properties                   //
/////////////////////////////////////////////////////
/*if(Low|OnlinePIN|ODCVM)
//executable fails for High+NoCVM, so ignore all following lemmas

//============== Issuer accepts ===========//
lemma issuer_accepts_minimal:
  "All t #i.
    (All #a #b. OneCard()@a & OneCard()@b ==> #a = #b) &
    TerminalAccepts(t)@i      
   ==>
    not (Ex #j. IssuerDeclines(t)@j) |
    Ex A #k. Honest(A)@i & Compromise(A)@k"

lemma issuer_accepts:
  "All t #i.
    TerminalAccepts(t)@i      
   ==>
    not (Ex #j. IssuerDeclines(t)@j) |
    Ex A #k. Honest(A)@i & Compromise(A)@k"

//============== Authentication ===========//
lemma auth_to_terminal_minimal: //non-injective agreement with one card session
  "All T P r t #i.
    (All #a #b. OneCard()@a & OneCard()@b ==> #a = #b) &
    Commit(T, P, <r, 'Terminal', t>)@i
   ==>
    (Ex #j. Running(P, T, <r, 'Terminal', t>)@j) |
    Ex A #k. Honest(A)@i & Compromise(A)@k"

/*if(LocalAuth|CopyIAD)
//auth_to_terminal_minimal fails for NoLocalAuth+NoCopyIAD
lemma auth_to_terminal: //injective agreement
  "All T P r t #i.
    Commit(T, P, <r, 'Terminal', t>)@i
   ==>
    ((Ex #j. Running(P, T, <r, 'Terminal', t>)@j & j < i) &
      not (Ex T2 P2 #i2. Commit(T2, P2, <r, 'Terminal', t>)@i2 & not(#i2 = #i))
    ) |
    Ex A #k. Honest(A)@i & Compromise(A)@k"
endif(LocalAuth|CopyIAD)*/

lemma auth_to_issuer_minimal: //non-injective agreement with one card session
  "All B P r t #i.
    (All #a #b. OneCard()@a & OneCard()@b ==> #a = #b) &
    Commit(B, P, <r, 'Issuer', t>)@i
   ==>
    (Ex #j. Running(P, B, <r, 'Issuer', t>)@j) |
    Ex A #k. Honest(A)@i & Compromise(A)@k"

/*if(LocalAuth|CopyIAD)
//auth_to_issuer_minimal fails for NoLocalAuth+NoCopyIAD
lemma auth_to_issuer: //injective agreement
  "All B P r t #i.
    Commit(B, P, <r, 'Issuer', t>)@i
   ==>
    ((Ex #j. Running(P, B, <r, 'Issuer', t>)@j & j < i) &
      not (Ex B2 P2 #i2. Commit(B2, P2, <r, 'Issuer', t>)@i2 & not(#i2 = #i))
    ) |
    Ex A #k. Honest(A)@i & Compromise(A)@k"
endif(LocalAuth|CopyIAD)*/

endif(Low|OnlinePIN|ODCVM)*/

//======== Secrecy ======//
lemma secrecy_MK:
  "All MK #i.
    SecretMK(MK)@i
   ==>
    not (Ex #j. !KU(MK)@j) | Ex A #k. Honest(A)@i & Compromise(A)@k"

lemma secrecy_privkCard:
  "All privkCard #i.
    SecretECCPrivkCard(privkCard)@i
   ==>
    not (Ex #j. !KU(privkCard)@j) | Ex A #k. Honest(A)@i & Compromise(A)@k"

/*if(OnlinePIN)
lemma secrecy_PIN:
  "All PIN #i.
    SecretPIN(PIN)@i
   ==>
    not (Ex #j. !KU(PIN)@j) | Ex A #k. Honest(A)@i & Compromise(A)@k"
endif(OnlinePIN)*/

lemma secrecy_PAN:
  "All PAN #i.
    SecretPAN(PAN)@i
   ==>
    not (Ex #j. !KU(PAN)@j) | Ex A #k. Honest(A)@i & Compromise(A)@k"

//=========== Relay Resistance ===========//
/*if(Low|OnlinePIN|ODCVM)
//executable fails for High+NoCVM, so ignore the following lemma. 
//some models do not terminate. Probably due to this lemma. omit it for these. 
/*if(NoLocalAuth|CopyIAD|NoCVM|OnlinePIN|Low)
/*if(NoLocalAuth|CopyIAD|OnlinePIN|High)
/*if(NoLocalAuth|NoCopyIAD|OnlinePIN|High)
/*if(NoLocalAuth|NoCopyIAD|NoCVM|OnlinePIN|Low)
lemma relay_resistance:
  "All PAN TRRE DRRE #i.
    CheckRelayResistance(PAN, TRRE, DRRE)@i
   ==>
    (Ex #s #a #e. 
      FastPhaseStarts(TRRE)@s & 
      FastPhaseAction(PAN)@a & 
      FastPhaseEnds(DRRE)@e &
      s<a & a<e) |
    Ex A #k. Honest(A)@i & Compromise(A)@k"
endif(NoLocalAuth|NoCopyIAD|NoCVM|OnlinePIN|Low)*/
endif(NoLocalAuth|NoCopyIAD|OnlinePIN|High)*/
endif(NoLocalAuth|CopyIAD|OnlinePIN|High)*/
endif(NoLocalAuth|CopyIAD|NoCVM|OnlinePIN|Low)*/
endif(Low|OnlinePIN|ODCVM)*/

end
