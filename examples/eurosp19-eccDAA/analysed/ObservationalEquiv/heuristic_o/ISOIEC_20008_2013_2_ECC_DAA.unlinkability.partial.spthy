theory ISOIEC_20008_2013_2_ECC_DAA_UNLINKABILITY begin

// Function signature and definition of the equational theory E

builtins: multiset
functions: H1/1, H2/6, H3/5, H4/8, PRF/3, accept/0, adec/2, aenc/2,
           fst/1, minus/2, multp/2, pair/2, pk/1, plus/2, s/2, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2

restriction issuer_init [right]:
  "∀ #i #j.
    ((IssuerInit( ) @ #i) ∧ (IssuerInit( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction issuer_init [left]:
  "∀ #i #j.
    ((IssuerInit( ) @ #i) ∧ (IssuerInit( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction signA [right]:
  "∀ #i #j x.
    ((UniqueExecSign( x ) @ #i) ∧ (UniqueExecSign( x ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction signA [left]:
  "∀ #i #j x.
    ((UniqueExecSign( x ) @ #i) ∧ (UniqueExecSign( x ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

rule (modulo E) ISSUER_SETUP:
   [ Fr( ~Ki ), Fr( ~P1 ), Fr( ~isk ), Fr( ~bottom ) ]
  --[ IssuerInit( ), UniqueExecJoin( 'ISSUER_SETUP' ), Create( $I )
  ]->
   [
   !F_IssuerSK( $I, ~isk ), !F_IssuerPK( $I, pk(~isk) ),
   !F_IssuerKi( $I, ~Ki ), !F_IssuerGenerator( $I, ~P1 ),
   !F_BSN( $I, ~bottom ), Out( <pk(~isk), ~Ki, ~P1, ~bottom> )
   ]

rule (modulo E) ISSUER_KEY_REVEAL:
   [ !F_IssuerSK( $I, isk ) ]
  --[ IssuerKeyReveal( $I ) ]->
   [ Out( isk ) ]

rule (modulo E) DIFF_DAA_SIGN:
   [
   !F_IssuerSK( $I, isk ), !F_IssuerGenerator( $I, P1 ),
   !F_IssuerKi( $I, Ki ), !F_BSN( $I, bsn ), Fr( ~creRandom ),
   Fr( ~DAASeed ), Fr( ~cnt ), Fr( ~l ), Fr( ~J ), Fr( ~randS1 ),
   Fr( ~nt ), Fr( ~l2 ), Fr( ~J2 ), Fr( ~randS12 ), Fr( ~nt2 ),
   Fr( ~DAASeedP ), Fr( ~cntP ), Fr( ~creRandomP ), Fr( ~lP ),
   Fr( ~JP ), Fr( ~randS1P ), Fr( ~ntP ), Fr( ~nv ), Fr( ~m )
   ]
  --[ Finished( ), UniqueExecSign( 'SIGN' ) ]->
   [
   Out( <'diffSigma', 
         <'sigma', multp(~l, multp(~creRandom, P1)), 
          multp(~l, multp(isk, multp(~creRandom, P1))), 
          multp(~l,
                plus(multp(isk, multp(~creRandom, P1)),
                     multp(multp(~creRandom, isk),
                           multp(P1, PRF(~DAASeed, Ki, ~cnt))))), 
          multp(~l,
                multp(PRF(~DAASeed, Ki, ~cnt),
                      multp(isk, multp(~creRandom, P1)))), 
          ~J, multp(PRF(~DAASeed, Ki, ~cnt), ~J), 
          H4(H3(multp(~l, multp(~creRandom, P1)),
                multp(~l, multp(isk, multp(~creRandom, P1))),
                multp(~l,
                      plus(multp(isk, multp(~creRandom, P1)),
                           multp(multp(~creRandom, isk),
                                 multp(P1, PRF(~DAASeed, Ki, ~cnt))))),
                multp(~l,
                      multp(PRF(~DAASeed, Ki, ~cnt), multp(isk, multp(~creRandom, P1)))),
                ~nv),
             ~m, ~J, multp(PRF(~DAASeed, Ki, ~cnt), ~J), bsn,
             multp(~randS1, ~J),
             multp(~randS1, multp(~l, multp(isk, multp(~creRandom, P1)))),
             ~nt), 
          s(~randS1, PRF(~DAASeed, Ki, ~cnt)), ~nv, ~nt>, 
         diff(<'sigma', multp(~l2, multp(~creRandom, P1)), 
               multp(~l2, multp(isk, multp(~creRandom, P1))), 
               multp(~l2,
                     plus(multp(isk, multp(~creRandom, P1)),
                          multp(multp(~creRandom, isk),
                                multp(P1, PRF(~DAASeed, Ki, ~cnt))))), 
               multp(~l2,
                     multp(PRF(~DAASeed, Ki, ~cnt),
                           multp(isk, multp(~creRandom, P1)))), 
               ~J2, multp(PRF(~DAASeed, Ki, ~cnt), ~J2), 
               H4(H3(multp(~l2, multp(~creRandom, P1)),
                     multp(~l2, multp(isk, multp(~creRandom, P1))),
                     multp(~l2,
                           plus(multp(isk, multp(~creRandom, P1)),
                                multp(multp(~creRandom, isk),
                                      multp(P1, PRF(~DAASeed, Ki, ~cnt))))),
                     multp(~l2,
                           multp(PRF(~DAASeed, Ki, ~cnt), multp(isk, multp(~creRandom, P1)))),
                     ~nv),
                  ~m, ~J2, multp(PRF(~DAASeed, Ki, ~cnt), ~J2), bsn,
                  multp(~randS12, ~J2),
                  multp(~randS12, multp(~l2, multp(isk, multp(~creRandom, P1)))),
                  ~nt2), 
               s(~randS12, PRF(~DAASeed, Ki, ~cnt)), ~nv, ~nt2>, <'sigma', 
                                                                  multp(~lP,
                                                                        multp(~creRandomP, P1)), 
                                                                  multp(~lP,
                                                                        multp(isk,
                                                                              multp(~creRandomP,
                                                                                    P1))), 
                                                                  multp(~lP,
                                                                        plus(multp(isk,
                                                                                   multp(~creRandomP,
                                                                                         P1)),
                                                                             multp(multp(~creRandomP,
                                                                                         isk),
                                                                                   multp(P1,
                                                                                         PRF(~DAASeedP,
                                                                                             Ki,
                                                                                             ~cntP))))), 
                                                                  multp(~lP,
                                                                        multp(PRF(~DAASeedP, Ki,
                                                                                  ~cntP),
                                                                              multp(isk,
                                                                                    multp(~creRandomP,
                                                                                          P1)))), 
                                                                  ~JP, 
                                                                  multp(PRF(~DAASeedP, Ki, ~cntP),
                                                                        ~JP), 
                                                                  H4(H3(multp(~lP,
                                                                              multp(~creRandomP,
                                                                                    P1)),
                                                                        multp(~lP,
                                                                              multp(isk,
                                                                                    multp(~creRandomP,
                                                                                          P1))),
                                                                        multp(~lP,
                                                                              plus(multp(isk,
                                                                                         multp(~creRandomP,
                                                                                               P1)),
                                                                                   multp(multp(~creRandomP,
                                                                                               isk),
                                                                                         multp(P1,
                                                                                               PRF(~DAASeedP,
                                                                                                   Ki,
                                                                                                   ~cntP))))),
                                                                        multp(~lP,
                                                                              multp(PRF(~DAASeedP,
                                                                                        Ki, ~cntP),
                                                                                    multp(isk,
                                                                                          multp(~creRandomP,
                                                                                                P1)))),
                                                                        ~nv),
                                                                     ~m, ~JP,
                                                                     multp(PRF(~DAASeedP, Ki,
                                                                               ~cntP),
                                                                           ~JP),
                                                                     bsn, multp(~randS1P, ~JP),
                                                                     multp(~randS1P,
                                                                           multp(~lP,
                                                                                 multp(isk,
                                                                                       multp(~creRandomP,
                                                                                             P1)))),
                                                                     ~ntP), 
                                                                  s(~randS1P,
                                                                    PRF(~DAASeedP, Ki, ~cntP)), 
                                                                  ~nv, ~ntP>)
        >
   ),
   Out( <~nv, ~m, multp(P1, PRF(~DAASeed, Ki, ~cnt)), 
         multp(P1, PRF(~DAASeedP, Ki, ~cntP)), multp(~randS1, ~J), 
         multp(~randS1, multp(~l, multp(isk, multp(~creRandom, P1))))>
   ),
   Shuffle( (
             <multp(~randS12, ~J2), 
              multp(~randS12, multp(~l2, multp(isk, multp(~creRandom, P1))))>+
             <multp(~randS1P, ~JP), 
              multp(~randS1P, multp(~lP, multp(isk, multp(~creRandomP, P1))))>
            )
   )
   ]

rule (modulo E) SHUFFLE:
   [ Shuffle( (x+y) ) ] --> [ Out( <x, y> ) ]

lemma functional_correctness [right]:
  exists-trace
  "∃ #r. (¬(∃ C #k1. IssuerKeyReveal( C ) @ #k1)) ∧ (Finished( ) @ #r)"
/*
guarded formula characterizing all satisfying traces:
"∃ #r.
  (Finished( ) @ #r) ∧ ∀ C #k1. (IssuerKeyReveal( C ) @ #k1) ⇒ ⊥"
*/
simplify
solve( !F_IssuerSK( $I, isk ) ▶₀ #r )
  case ISSUER_SETUP
  solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #r )
    case ISSUER_SETUP
    solve( !F_IssuerKi( $I, Ki ) ▶₂ #r )
      case ISSUER_SETUP
      solve( !F_BSN( $I, bsn ) ▶₃ #r )
        case ISSUER_SETUP
        SOLVED // trace found
      qed
    qed
  qed
qed

lemma functional_correctness [left]:
  exists-trace
  "∃ #r. (¬(∃ C #k1. IssuerKeyReveal( C ) @ #k1)) ∧ (Finished( ) @ #r)"
/*
guarded formula characterizing all satisfying traces:
"∃ #r.
  (Finished( ) @ #r) ∧ ∀ C #k1. (IssuerKeyReveal( C ) @ #k1) ⇒ ⊥"
*/
simplify
solve( !F_IssuerSK( $I, isk ) ▶₀ #r )
  case ISSUER_SETUP
  solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #r )
    case ISSUER_SETUP
    solve( !F_IssuerKi( $I, Ki ) ▶₂ #r )
      case ISSUER_SETUP
      solve( !F_BSN( $I, bsn ) ▶₃ #r )
        case ISSUER_SETUP
        SOLVED // trace found
      qed
    qed
  qed
qed

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_DIFF_DAA_SIGN
  backward-search
    case LHS
    step( simplify )
    step( solve( !F_IssuerSK( $I, isk ) ▶₀ #i ) )
      case ISSUER_SETUP
      step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #i ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #i ) )
          case ISSUER_SETUP
          step( solve( !F_BSN( $I, bsn ) ▶₃ #i ) )
            case ISSUER_SETUP
            MIRRORED
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !F_IssuerSK( $I, isk ) ▶₀ #i ) )
      case ISSUER_SETUP
      step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #i ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #i ) )
          case ISSUER_SETUP
          step( solve( !F_BSN( $I, bsn ) ▶₃ #i ) )
            case ISSUER_SETUP
            MIRRORED
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_adec
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( aenc(x, pk(x.1)) ) ▶₀ #i ) )
      case DIFF_DAA_SIGN_case_1
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
              case ISSUER_SETUP
              by step( contradiction )
            qed
          qed
        qed
      qed
    next
      case DIFF_DAA_SIGN_case_2
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            by step( contradiction )
          qed
        qed
      qed
    next
      case ISSUER_KEY_REVEAL
      step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
        case ISSUER_SETUP
        by step( contradiction )
      qed
    next
      case ISSUER_SETUP
      by step( contradiction )
    next
      case SHUFFLE
      step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
        case DIFF_DAA_SIGN_case_1
        by step( contradiction )
      next
        case DIFF_DAA_SIGN_case_2
        by step( contradiction )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( aenc(x, pk(x.1)) ) ▶₀ #i ) )
      case DIFF_DAA_SIGN_case_1
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
              case ISSUER_SETUP
              by step( contradiction )
            qed
          qed
        qed
      qed
    next
      case DIFF_DAA_SIGN_case_2
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            by step( contradiction )
          qed
        qed
      qed
    next
      case ISSUER_KEY_REVEAL
      step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
        case ISSUER_SETUP
        by step( contradiction )
      qed
    next
      case ISSUER_SETUP
      by step( contradiction )
    next
      case SHUFFLE
      step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
        case DIFF_DAA_SIGN_case_1
        by step( contradiction )
      next
        case DIFF_DAA_SIGN_case_2
        by step( contradiction )
      qed
    qed
  qed
next
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case DIFF_DAA_SIGN_case_1
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
              case ISSUER_SETUP
              step( solve( (#vl, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction )
              next
                case d_0_snd
                step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction )
                        next
                          case d_0_snd
                          step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction )
                          next
                            case d_0_snd
                            step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction )
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                                  case d_0_fst
                                  by step( contradiction )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                                    case d_0_fst
                                    by step( contradiction )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                                      case d_0_fst
                                      by step( contradiction )
                                    next
                                      case d_0_snd
                                      by step( contradiction )
                                    next
                                      case pair
                                      MIRRORED
                                    qed
                                  next
                                    case pair
                                    MIRRORED
                                  qed
                                next
                                  case pair
                                  MIRRORED
                                qed
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction )
                        next
                          case d_0_snd
                          step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction )
                          next
                            case d_0_snd
                            step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction )
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                                  case d_0_fst
                                  by step( contradiction )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                                    case d_0_fst
                                    by step( contradiction )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                                      case d_0_fst
                                      by step( contradiction )
                                    next
                                      case d_0_snd
                                      by step( contradiction )
                                    next
                                      case pair
                                      MIRRORED
                                    qed
                                  next
                                    case pair
                                    MIRRORED
                                  qed
                                next
                                  case pair
                                  MIRRORED
                                qed
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    next
      case DIFF_DAA_SIGN_case_2
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
              case ISSUER_SETUP
              step( solve( (#vl, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction )
              next
                case d_0_snd
                step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction )
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction )
                      next
                        case d_0_snd
                        by step( contradiction )
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    next
      case ISSUER_KEY_REVEAL
      step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
        case ISSUER_SETUP
        by step( contradiction )
      qed
    next
      case ISSUER_SETUP
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction )
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case pair
          MIRRORED
        qed
      next
        case pair
        MIRRORED
      qed
    next
      case SHUFFLE
      step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case d_0_snd
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case pair
          MIRRORED
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case d_0_snd
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case pair
          MIRRORED
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case DIFF_DAA_SIGN_case_1
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
              case ISSUER_SETUP
              step( solve( (#vl, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction )
              next
                case d_0_snd
                step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction )
                        next
                          case d_0_snd
                          step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction )
                          next
                            case d_0_snd
                            step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction )
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                                  case d_0_fst
                                  by step( contradiction )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                                    case d_0_fst
                                    by step( contradiction )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                                      case d_0_fst
                                      by step( contradiction )
                                    next
                                      case d_0_snd
                                      by step( contradiction )
                                    next
                                      case pair
                                      MIRRORED
                                    qed
                                  next
                                    case pair
                                    MIRRORED
                                  qed
                                next
                                  case pair
                                  MIRRORED
                                qed
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction )
                        next
                          case d_0_snd
                          step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction )
                          next
                            case d_0_snd
                            step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction )
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                                  case d_0_fst
                                  by step( contradiction )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                                    case d_0_fst
                                    by step( contradiction )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                                      case d_0_fst
                                      by step( contradiction )
                                    next
                                      case d_0_snd
                                      by step( contradiction )
                                    next
                                      case pair
                                      MIRRORED
                                    qed
                                  next
                                    case pair
                                    MIRRORED
                                  qed
                                next
                                  case pair
                                  MIRRORED
                                qed
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    next
      case DIFF_DAA_SIGN_case_2
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
              case ISSUER_SETUP
              step( solve( (#vl, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction )
              next
                case d_0_snd
                step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction )
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction )
                      next
                        case d_0_snd
                        by step( contradiction )
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    next
      case ISSUER_KEY_REVEAL
      step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
        case ISSUER_SETUP
        by step( contradiction )
      qed
    next
      case ISSUER_SETUP
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction )
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case pair
          MIRRORED
        qed
      next
        case pair
        MIRRORED
      qed
    next
      case SHUFFLE
      step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case d_0_snd
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case pair
          MIRRORED
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case d_0_snd
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case pair
          MIRRORED
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case DIFF_DAA_SIGN_case_1
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
              case ISSUER_SETUP
              step( solve( (#vl, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction )
              next
                case d_0_snd
                step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction )
                        next
                          case d_0_snd
                          step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction )
                          next
                            case d_0_snd
                            step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction )
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                                  case d_0_fst
                                  by step( contradiction )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                                    case d_0_fst
                                    by step( contradiction )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                                      case d_0_fst
                                      by step( contradiction )
                                    next
                                      case d_0_snd
                                      by step( contradiction )
                                    next
                                      case pair
                                      MIRRORED
                                    qed
                                  next
                                    case pair
                                    MIRRORED
                                  qed
                                next
                                  case pair
                                  MIRRORED
                                qed
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction )
                        next
                          case d_0_snd
                          step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction )
                          next
                            case d_0_snd
                            step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction )
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                                  case d_0_fst
                                  by step( contradiction )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                                    case d_0_fst
                                    by step( contradiction )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                                      case d_0_fst
                                      by step( contradiction )
                                    next
                                      case d_0_snd
                                      by step( contradiction )
                                    next
                                      case pair
                                      MIRRORED
                                    qed
                                  next
                                    case pair
                                    MIRRORED
                                  qed
                                next
                                  case pair
                                  MIRRORED
                                qed
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    next
      case DIFF_DAA_SIGN_case_2
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
              case ISSUER_SETUP
              step( solve( (#vl, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction )
              next
                case d_0_snd
                step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction )
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction )
                      next
                        case d_0_snd
                        by step( contradiction )
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    next
      case ISSUER_KEY_REVEAL
      step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
        case ISSUER_SETUP
        by step( contradiction )
      qed
    next
      case ISSUER_SETUP
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction )
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case pair
          MIRRORED
        qed
      next
        case pair
        MIRRORED
      qed
    next
      case SHUFFLE
      step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case d_0_snd
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case pair
          MIRRORED
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case d_0_snd
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case pair
          MIRRORED
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case DIFF_DAA_SIGN_case_1
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
              case ISSUER_SETUP
              step( solve( (#vl, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction )
              next
                case d_0_snd
                step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction )
                        next
                          case d_0_snd
                          step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction )
                          next
                            case d_0_snd
                            step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction )
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                                  case d_0_fst
                                  by step( contradiction )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                                    case d_0_fst
                                    by step( contradiction )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                                      case d_0_fst
                                      by step( contradiction )
                                    next
                                      case d_0_snd
                                      by step( contradiction )
                                    next
                                      case pair
                                      MIRRORED
                                    qed
                                  next
                                    case pair
                                    MIRRORED
                                  qed
                                next
                                  case pair
                                  MIRRORED
                                qed
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction )
                        next
                          case d_0_snd
                          step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction )
                          next
                            case d_0_snd
                            step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction )
                            next
                              case d_0_snd
                              step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction )
                              next
                                case d_0_snd
                                step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                                  case d_0_fst
                                  by step( contradiction )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                                    case d_0_fst
                                    by step( contradiction )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                                      case d_0_fst
                                      by step( contradiction )
                                    next
                                      case d_0_snd
                                      by step( contradiction )
                                    next
                                      case pair
                                      MIRRORED
                                    qed
                                  next
                                    case pair
                                    MIRRORED
                                  qed
                                next
                                  case pair
                                  MIRRORED
                                qed
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    next
      case DIFF_DAA_SIGN_case_2
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
              case ISSUER_SETUP
              step( solve( (#vl, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction )
              next
                case d_0_snd
                step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction )
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction )
                      next
                        case d_0_snd
                        by step( contradiction )
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            qed
          qed
        qed
      qed
    next
      case ISSUER_KEY_REVEAL
      step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
        case ISSUER_SETUP
        by step( contradiction )
      qed
    next
      case ISSUER_SETUP
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction )
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case pair
          MIRRORED
        qed
      next
        case pair
        MIRRORED
      qed
    next
      case SHUFFLE
      step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case d_0_snd
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case pair
          MIRRORED
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case d_0_snd
          step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction )
          next
            case d_0_snd
            by step( contradiction )
          next
            case pair
            MIRRORED
          qed
        next
          case pair
          MIRRORED
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_union
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case DIFF_DAA_SIGN_case_1
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
              case ISSUER_SETUP
              by step( contradiction )
            qed
          qed
        qed
      qed
    next
      case DIFF_DAA_SIGN_case_2
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            by step( contradiction )
          qed
        qed
      qed
    next
      case ISSUER_KEY_REVEAL
      step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
        case ISSUER_SETUP
        by step( contradiction )
      qed
    next
      case ISSUER_SETUP
      by step( contradiction )
    next
      case SHUFFLE
      step( solve( Shuffle( (x.1+y.1) ) ▶₀ #vr ) )
        case DIFF_DAA_SIGN_case_1
        by step( contradiction )
      next
        case DIFF_DAA_SIGN_case_2
        by step( contradiction )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case DIFF_DAA_SIGN_case_1
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
              case ISSUER_SETUP
              by step( contradiction )
            qed
          qed
        qed
      qed
    next
      case DIFF_DAA_SIGN_case_2
      step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
        case ISSUER_SETUP
        step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
            case ISSUER_SETUP
            by step( contradiction )
          qed
        qed
      qed
    next
      case ISSUER_KEY_REVEAL
      step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
        case ISSUER_SETUP
        by step( contradiction )
      qed
    next
      case ISSUER_SETUP
      by step( contradiction )
    next
      case SHUFFLE
      step( solve( Shuffle( (x.1+y.1) ) ▶₀ #vr ) )
        case DIFF_DAA_SIGN_case_1
        by step( contradiction )
      next
        case DIFF_DAA_SIGN_case_2
        by step( contradiction )
      qed
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KU( x ) @ #vk ) )
      case c_H1
      step( solve( !KD( H1(x) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_H2
      step( solve( !KD( H2(x, x.1, x.2, x.3, x.4, x.5) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.6) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_H3
      step( solve( !KD( H3(x, x.1, x.2, x.3, x.4) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.5) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_H4
      step( solve( !KD( H4(x, x.1, x.2, x.3, x.4, x.5, x.6, x.7)
                   ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        by sorry
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.8) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_PRF
      step( solve( !KD( PRF(x, x.1, x.2) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                      next
                        case d_0_snd
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.3) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_accept
      step( solve( !KD( accept ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (x+y) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_adec
      step( solve( !KD( adec(x, x.1) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_aenc
      step( solve( !KD( aenc(x, x.1) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_fst
      step( solve( !KD( fst(x) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_minus
      step( solve( !KD( minus(x, x.1) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_multp
      step( solve( !KD( multp(x, x.1) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case multp
                          step( solve( !KU( multp(~l, multp(~creRandom, ~P1)) ) @ #vk ) )
                            case c_multp
                            by step( solve( !KU( ~l ) @ #vk.1 ) )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case multp
                            step( solve( !KU( multp(~l, multp(~isk, multp(~creRandom, ~P1)))
                                         ) @ #vk ) )
                              case c_multp
                              by step( solve( !KU( ~l ) @ #vk.1 ) )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case multp
                              step( solve( !KU( multp(~l,
                                                      plus(multp(~isk, multp(~creRandom, ~P1)),
                                                           multp(multp(~creRandom, ~isk),
                                                                 multp(~P1,
                                                                       PRF(~DAASeed, ~Ki, ~cnt)))))
                                           ) @ #vk ) )
                                case c_multp
                                by step( solve( !KU( ~l ) @ #vk.1 ) )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case multp
                                step( solve( !KU( multp(~l,
                                                        multp(PRF(~DAASeed, ~Ki, ~cnt),
                                                              multp(~isk, multp(~creRandom, ~P1))))
                                             ) @ #vk ) )
                                  case c_multp
                                  by step( solve( !KU( ~l ) @ #vk.1 ) )
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case multp
                                    step( solve( !KU( multp(PRF(~DAASeed, ~Ki, ~cnt), ~J)
                                                 ) @ #vk ) )
                                      case c_multp
                                      step( solve( !KU( PRF(~DAASeed, ~Ki, ~cnt) ) @ #vk.1 ) )
                                        case c_PRF
                                        step( solve( !KU( ~J ) @ #vk.2 ) )
                                          case DIFF_DAA_SIGN
                                          by step( solve( !KU( ~DAASeed ) @ #vk.3 ) )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case multp
                          step( solve( !KU( multp(~l2, multp(~creRandom, ~P1)) ) @ #vk ) )
                            case c_multp
                            by step( solve( !KU( ~l2 ) @ #vk.1 ) )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case multp
                            step( solve( !KU( multp(~l2, multp(~isk, multp(~creRandom, ~P1)))
                                         ) @ #vk ) )
                              case c_multp
                              by step( solve( !KU( ~l2 ) @ #vk.1 ) )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case multp
                              step( solve( !KU( multp(~l2,
                                                      plus(multp(~isk, multp(~creRandom, ~P1)),
                                                           multp(multp(~creRandom, ~isk),
                                                                 multp(~P1,
                                                                       PRF(~DAASeed, ~Ki, ~cnt)))))
                                           ) @ #vk ) )
                                case c_multp
                                by step( solve( !KU( ~l2 ) @ #vk.1 ) )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case multp
                                step( solve( !KU( multp(~l2,
                                                        multp(PRF(~DAASeed, ~Ki, ~cnt),
                                                              multp(~isk, multp(~creRandom, ~P1))))
                                             ) @ #vk ) )
                                  case c_multp
                                  by step( solve( !KU( ~l2 ) @ #vk.1 ) )
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case multp
                                    step( solve( !KU( multp(PRF(~DAASeed, ~Ki, ~cnt), ~J2)
                                                 ) @ #vk ) )
                                      case c_multp
                                      step( solve( !KU( PRF(~DAASeed, ~Ki, ~cnt) ) @ #vk.1 ) )
                                        case c_PRF
                                        step( solve( !KU( ~J2 ) @ #vk.2 ) )
                                          case DIFF_DAA_SIGN
                                          by step( solve( !KU( ~DAASeed ) @ #vk.3 ) )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case multp
                        step( solve( !KU( multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)) ) @ #vk ) )
                          case c_multp
                          step( solve( !KU( ~P1 ) @ #vk.1 ) )
                            case ISSUER_SETUP
                            step( solve( !KU( PRF(~DAASeed, ~Ki, ~cnt) ) @ #vk.2 ) )
                              case c_PRF
                              by step( solve( !KU( ~DAASeed ) @ #vk.3 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case multp
                          step( solve( !KU( multp(~P1, PRF(~DAASeedP, ~Ki, ~cntP))
                                       ) @ #vk ) )
                            case c_multp
                            step( solve( !KU( ~P1 ) @ #vk.1 ) )
                              case ISSUER_SETUP
                              step( solve( !KU( PRF(~DAASeedP, ~Ki, ~cntP) ) @ #vk.2 ) )
                                case c_PRF
                                by step( solve( !KU( ~DAASeedP ) @ #vk.3 ) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case multp
                            step( solve( !KU( multp(~randS1, ~J) ) @ #vk ) )
                              case c_multp
                              by step( solve( !KU( ~randS1 ) @ #vk.1 ) )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case multp
                            step( solve( !KU( multp(~randS1,
                                                    multp(~l, multp(~isk, multp(~creRandom, ~P1))))
                                         ) @ #vk ) )
                              case c_multp
                              by step( solve( !KU( ~randS1 ) @ #vk.1 ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          step( solve( (#vl, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS1P, ~JP) ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS1P ) @ #vk.1 ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS1P,
                                        multp(~lP, multp(~isk, multp(~creRandomP, ~P1))))
                             ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS1P ) @ #vk.1 ) )
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS12, ~J2) ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS12 ) @ #vk.1 ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS12,
                                        multp(~l2, multp(~isk, multp(~creRandom, ~P1))))
                             ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS12 ) @ #vk.1 ) )
                qed
              qed
            qed
          qed
        next
          case DIFF_DAA_SIGN_case_2
          step( solve( (#vl, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS12, ~J2) ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS12 ) @ #vk.1 ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS12,
                                        multp(~l2, multp(~isk, multp(~creRandom, ~P1))))
                             ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS12 ) @ #vk.1 ) )
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS1P, ~JP) ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS1P ) @ #vk.1 ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS1P,
                                        multp(~lP, multp(~isk, multp(~creRandomP, ~P1))))
                             ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS1P ) @ #vk.1 ) )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case c_pair
      by sorry
    next
      case c_pk
      step( solve( !KD( pk(x) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
            case pk
            step( solve( !KU( pk(~isk) ) @ #vk ) )
              case c_pk
              step( solve( !KU( ~isk ) @ #vk.1 ) )
                case ISSUER_KEY_REVEAL
                MIRRORED
              qed
            qed
          qed
        next
          case d_0_snd
          by step( contradiction /* impossible chain */ )
        qed
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_plus
      step( solve( !KD( plus(x, x.1) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_s
      step( solve( !KD( s(x, x.1) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                      case d_0_fst
                                      step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                        case s
                                        step( solve( !KU( s(~randS1, PRF(~DAASeed, ~Ki, ~cnt))
                                                     ) @ #vk ) )
                                          case c_s
                                          by step( solve( !KU( ~randS1 ) @ #vk.1 ) )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                      case d_0_fst
                                      step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                        case s
                                        step( solve( !KU( s(~randS12, PRF(~DAASeed, ~Ki, ~cnt))
                                                     ) @ #vk ) )
                                          case c_s
                                          by step( solve( !KU( ~randS12 ) @ #vk.1 ) )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_snd
      step( solve( !KD( snd(x) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_union
      step( solve( !KD( (x+y) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (x.1+y.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case coerce
      step( solve( !KD( x ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case Const_pub_diffSigma
                    step( solve( !KD( 'diffSigma' ) ▶₀ #vk ) )
                      case DIFF_DAA_SIGN_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case DIFF_DAA_SIGN_case_2
                      by step( contradiction /* impossible chain */ )
                    next
                      case ISSUER_KEY_REVEAL
                      step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.3 ) )
                        case ISSUER_SETUP
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case ISSUER_SETUP
                      by step( contradiction /* impossible chain */ )
                    next
                      case SHUFFLE
                      step( solve( Shuffle( (x+y) ) ▶₀ #vr.3 ) )
                        case DIFF_DAA_SIGN_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case DIFF_DAA_SIGN_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case d_0_snd
                  by sorry
                next
                  case pair
                  by sorry
                qed
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        by sorry
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( (#vl, 0) ~~> (#i, 1) ) )
            case Var_fresh_isk
            step( solve( !KD( ~isk ) ▶₀ #vk ) )
              case DIFF_DAA_SIGN_case_1
              step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.2 ) )
                case ISSUER_SETUP
                step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.2 ) )
                  case ISSUER_SETUP
                  step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.2 ) )
                    case ISSUER_SETUP
                    step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.2 ) )
                      case ISSUER_SETUP
                      step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                      next
                                        case d_0_snd
                                        step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                          case d_0_fst
                                          by step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                        next
                                          case d_0_snd
                                          step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                            case d_0_fst
                                            by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                          next
                                            case d_0_snd
                                            step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                              case d_0_fst
                                              by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                            next
                                              case d_0_snd
                                              by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                      next
                                        case d_0_snd
                                        step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                          case d_0_fst
                                          by step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                        next
                                          case d_0_snd
                                          step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                            case d_0_fst
                                            by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                          next
                                            case d_0_snd
                                            step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                              case d_0_fst
                                              by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                            next
                                              case d_0_snd
                                              by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case DIFF_DAA_SIGN_case_2
              step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.2 ) )
                case ISSUER_SETUP
                step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.2 ) )
                  case ISSUER_SETUP
                  step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.2 ) )
                    case ISSUER_SETUP
                    step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.2 ) )
                      case ISSUER_SETUP
                      step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ISSUER_KEY_REVEAL
              step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.2 ) )
                case ISSUER_SETUP
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case Var_fresh_isk
                  step( solve( !KU( ~isk ) @ #vk ) )
                    case ISSUER_KEY_REVEAL
                    MIRRORED
                  qed
                qed
              qed
            next
              case ISSUER_SETUP
              step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                case d_0_fst
                by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                  qed
                qed
              qed
            next
              case SHUFFLE
              step( solve( Shuffle( (x+y) ) ▶₀ #vr.2 ) )
                case DIFF_DAA_SIGN_case_1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                  qed
                qed
              next
                case DIFF_DAA_SIGN_case_2
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ISSUER_SETUP
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
            case pk
            step( solve( !KD( pk(~isk) ) ▶₀ #vk ) )
              case DIFF_DAA_SIGN_case_1
              step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.2 ) )
                case ISSUER_SETUP
                step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.2 ) )
                  case ISSUER_SETUP
                  step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.2 ) )
                    case ISSUER_SETUP
                    step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.2 ) )
                      case ISSUER_SETUP
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              qed
            next
              case DIFF_DAA_SIGN_case_2
              step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.2 ) )
                case ISSUER_SETUP
                step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.2 ) )
                  case ISSUER_SETUP
                  step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.2 ) )
                    case ISSUER_SETUP
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            next
              case ISSUER_KEY_REVEAL
              step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.2 ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            next
              case ISSUER_SETUP
              step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                case d_0_fst
                step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
                  case pk
                  step( solve( !KU( pk(~isk) ) @ #vk ) )
                    case ISSUER_SETUP
                    MIRRORED
                  qed
                qed
              next
                case d_0_snd
                by step( contradiction /* impossible chain */ )
              qed
            next
              case SHUFFLE
              step( solve( Shuffle( (x+y) ) ▶₀ #vr.2 ) )
                case DIFF_DAA_SIGN_case_1
                by step( contradiction /* impossible chain */ )
              next
                case DIFF_DAA_SIGN_case_2
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
              case Var_fresh_Ki
              step( solve( !KD( ~Ki ) ▶₀ #vk ) )
                case DIFF_DAA_SIGN_case_1
                step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.3 ) )
                  case ISSUER_SETUP
                  step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.3 ) )
                    case ISSUER_SETUP
                    step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.3 ) )
                      case ISSUER_SETUP
                      step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.3 ) )
                        case ISSUER_SETUP
                        step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                      next
                                        case d_0_snd
                                        step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                          case d_0_fst
                                          by step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                        next
                                          case d_0_snd
                                          step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                            case d_0_fst
                                            by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                          next
                                            case d_0_snd
                                            step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                              case d_0_fst
                                              by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                            next
                                              case d_0_snd
                                              step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                                case d_0_fst
                                                by step( solve( (#vr.15, 0) ~~> (#vk, 0) ) )
                                              next
                                                case d_0_snd
                                                by step( solve( (#vr.15, 0) ~~> (#vk, 0) ) )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                      next
                                        case d_0_snd
                                        step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                          case d_0_fst
                                          by step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                        next
                                          case d_0_snd
                                          step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                            case d_0_fst
                                            by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                          next
                                            case d_0_snd
                                            step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                              case d_0_fst
                                              by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                            next
                                              case d_0_snd
                                              step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                                case d_0_fst
                                                by step( solve( (#vr.15, 0) ~~> (#vk, 0) ) )
                                              next
                                                case d_0_snd
                                                by step( solve( (#vr.15, 0) ~~> (#vk, 0) ) )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case DIFF_DAA_SIGN_case_2
                step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.3 ) )
                  case ISSUER_SETUP
                  step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.3 ) )
                    case ISSUER_SETUP
                    step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.3 ) )
                      case ISSUER_SETUP
                      step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.3 ) )
                        case ISSUER_SETUP
                        step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ISSUER_KEY_REVEAL
                step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.3 ) )
                  case ISSUER_SETUP
                  by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                qed
              next
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                      case Var_fresh_Ki
                      step( solve( !KU( ~Ki ) @ #vk ) )
                        case ISSUER_SETUP
                        MIRRORED
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                    qed
                  qed
                qed
              next
                case SHUFFLE
                step( solve( Shuffle( (x+y) ) ▶₀ #vr.3 ) )
                  case DIFF_DAA_SIGN_case_1
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                    qed
                  qed
                next
                  case DIFF_DAA_SIGN_case_2
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                case Var_fresh_P1
                step( solve( !KD( ~P1 ) ▶₀ #vk ) )
                  case DIFF_DAA_SIGN_case_1
                  step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.4 ) )
                    case ISSUER_SETUP
                    step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.4 ) )
                      case ISSUER_SETUP
                      step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.4 ) )
                        case ISSUER_SETUP
                        step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.4 ) )
                          case ISSUER_SETUP
                          step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                      next
                                        case d_0_snd
                                        step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                          case d_0_fst
                                          by step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                        next
                                          case d_0_snd
                                          step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                            case d_0_fst
                                            by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                          next
                                            case d_0_snd
                                            step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                              case d_0_fst
                                              by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                            next
                                              case d_0_snd
                                              step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                                case d_0_fst
                                                by step( solve( (#vr.15, 0) ~~> (#vk, 0) ) )
                                              next
                                                case d_0_snd
                                                step( solve( (#vr.15, 0) ~~> (#vk, 0) ) )
                                                  case d_0_fst
                                                  by step( solve( (#vr.16, 0) ~~> (#vk, 0) ) )
                                                next
                                                  case d_0_snd
                                                  by step( solve( (#vr.16, 0) ~~> (#vk, 0) ) )
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                      next
                                        case d_0_snd
                                        step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                          case d_0_fst
                                          by step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                        next
                                          case d_0_snd
                                          step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                            case d_0_fst
                                            by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                          next
                                            case d_0_snd
                                            step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                              case d_0_fst
                                              by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                            next
                                              case d_0_snd
                                              step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                                case d_0_fst
                                                by step( solve( (#vr.15, 0) ~~> (#vk, 0) ) )
                                              next
                                                case d_0_snd
                                                step( solve( (#vr.15, 0) ~~> (#vk, 0) ) )
                                                  case d_0_fst
                                                  by step( solve( (#vr.16, 0) ~~> (#vk, 0) ) )
                                                next
                                                  case d_0_snd
                                                  by step( solve( (#vr.16, 0) ~~> (#vk, 0) ) )
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case DIFF_DAA_SIGN_case_2
                  step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.4 ) )
                    case ISSUER_SETUP
                    step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.4 ) )
                      case ISSUER_SETUP
                      step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.4 ) )
                        case ISSUER_SETUP
                        step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.4 ) )
                          case ISSUER_SETUP
                          step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case ISSUER_KEY_REVEAL
                  step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.4 ) )
                    case ISSUER_SETUP
                    by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  qed
                next
                  case ISSUER_SETUP
                  step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                          case Var_fresh_P1
                          step( solve( !KU( ~P1 ) @ #vk ) )
                            case ISSUER_SETUP
                            MIRRORED
                          qed
                        qed
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      qed
                    qed
                  qed
                next
                  case SHUFFLE
                  step( solve( Shuffle( (x+y) ) ▶₀ #vr.4 ) )
                    case DIFF_DAA_SIGN_case_1
                    step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      qed
                    qed
                  next
                    case DIFF_DAA_SIGN_case_2
                    step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                case Var_fresh_bottom
                step( solve( !KD( ~bottom ) ▶₀ #vk ) )
                  case DIFF_DAA_SIGN_case_1
                  step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.4 ) )
                    case ISSUER_SETUP
                    step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.4 ) )
                      case ISSUER_SETUP
                      step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.4 ) )
                        case ISSUER_SETUP
                        step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.4 ) )
                          case ISSUER_SETUP
                          step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                      next
                                        case d_0_snd
                                        step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                          case d_0_fst
                                          by step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                        next
                                          case d_0_snd
                                          step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                            case d_0_fst
                                            by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                          next
                                            case d_0_snd
                                            step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                              case d_0_fst
                                              by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                            next
                                              case d_0_snd
                                              step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                                case d_0_fst
                                                by step( solve( (#vr.15, 0) ~~> (#vk, 0) ) )
                                              next
                                                case d_0_snd
                                                step( solve( (#vr.15, 0) ~~> (#vk, 0) ) )
                                                  case d_0_fst
                                                  by step( solve( (#vr.16, 0) ~~> (#vk, 0) ) )
                                                next
                                                  case d_0_snd
                                                  by step( solve( (#vr.16, 0) ~~> (#vk, 0) ) )
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                      next
                                        case d_0_snd
                                        step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                          case d_0_fst
                                          by step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                        next
                                          case d_0_snd
                                          step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                            case d_0_fst
                                            by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                          next
                                            case d_0_snd
                                            step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                              case d_0_fst
                                              by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                            next
                                              case d_0_snd
                                              step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                                case d_0_fst
                                                by step( solve( (#vr.15, 0) ~~> (#vk, 0) ) )
                                              next
                                                case d_0_snd
                                                step( solve( (#vr.15, 0) ~~> (#vk, 0) ) )
                                                  case d_0_fst
                                                  by step( solve( (#vr.16, 0) ~~> (#vk, 0) ) )
                                                next
                                                  case d_0_snd
                                                  by step( solve( (#vr.16, 0) ~~> (#vk, 0) ) )
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case DIFF_DAA_SIGN_case_2
                  step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.4 ) )
                    case ISSUER_SETUP
                    step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.4 ) )
                      case ISSUER_SETUP
                      step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.4 ) )
                        case ISSUER_SETUP
                        step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.4 ) )
                          case ISSUER_SETUP
                          step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case ISSUER_KEY_REVEAL
                  step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.4 ) )
                    case ISSUER_SETUP
                    by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  qed
                next
                  case ISSUER_SETUP
                  step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                          case Var_fresh_bottom
                          step( solve( !KU( ~bottom ) @ #vk ) )
                            case ISSUER_SETUP
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case SHUFFLE
                  step( solve( Shuffle( (x+y) ) ▶₀ #vr.4 ) )
                    case DIFF_DAA_SIGN_case_1
                    step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      qed
                    qed
                  next
                    case DIFF_DAA_SIGN_case_2
                    step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KD( <~P1, ~bottom> ) ▶₀ #vk ) )
                case DIFF_DAA_SIGN_case_1
                step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.3 ) )
                  case ISSUER_SETUP
                  step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.3 ) )
                    case ISSUER_SETUP
                    step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.3 ) )
                      case ISSUER_SETUP
                      step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.3 ) )
                        case ISSUER_SETUP
                        step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                          case d_0_fst
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case d_0_snd
                                          step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                            case d_0_fst
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case d_0_snd
                                            step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                              case d_0_fst
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case d_0_snd
                                              step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                                case d_0_fst
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case d_0_snd
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                          case d_0_fst
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case d_0_snd
                                          step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                            case d_0_fst
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case d_0_snd
                                            step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                              case d_0_fst
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case d_0_snd
                                              step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                                case d_0_fst
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case d_0_snd
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case DIFF_DAA_SIGN_case_2
                step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.3 ) )
                  case ISSUER_SETUP
                  step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.3 ) )
                    case ISSUER_SETUP
                    step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.3 ) )
                      case ISSUER_SETUP
                      step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.3 ) )
                        case ISSUER_SETUP
                        step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ISSUER_KEY_REVEAL
                step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.3 ) )
                  case ISSUER_SETUP
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              next
                case SHUFFLE
                step( solve( Shuffle( (x+y) ) ▶₀ #vr.3 ) )
                  case DIFF_DAA_SIGN_case_1
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case DIFF_DAA_SIGN_case_2
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              qed
            qed
          next
            case pair
            step( solve( !KD( <~Ki, ~P1, ~bottom> ) ▶₀ #vk ) )
              case DIFF_DAA_SIGN_case_1
              step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.2 ) )
                case ISSUER_SETUP
                step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.2 ) )
                  case ISSUER_SETUP
                  step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.2 ) )
                    case ISSUER_SETUP
                    step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.2 ) )
                      case ISSUER_SETUP
                      step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                          case d_0_fst
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case d_0_snd
                                          step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                            case d_0_fst
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case d_0_snd
                                            step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                              case d_0_fst
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case d_0_snd
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                          case d_0_fst
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case d_0_snd
                                          step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                            case d_0_fst
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case d_0_snd
                                            step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                              case d_0_fst
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case d_0_snd
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case DIFF_DAA_SIGN_case_2
              step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.2 ) )
                case ISSUER_SETUP
                step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.2 ) )
                  case ISSUER_SETUP
                  step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.2 ) )
                    case ISSUER_SETUP
                    step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.2 ) )
                      case ISSUER_SETUP
                      step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ISSUER_KEY_REVEAL
              step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.2 ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            next
              case ISSUER_SETUP
              step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            next
              case SHUFFLE
              step( solve( Shuffle( (x+y) ) ▶₀ #vr.2 ) )
                case DIFF_DAA_SIGN_case_1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case DIFF_DAA_SIGN_case_2
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            qed
          qed
        next
          case pair
          step( solve( !KD( <pk(~isk), ~Ki, ~P1, ~bottom> ) ▶₀ #vk ) )
            case DIFF_DAA_SIGN_case_1
            step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.1 ) )
              case ISSUER_SETUP
              step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.1 ) )
                case ISSUER_SETUP
                step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.1 ) )
                  case ISSUER_SETUP
                  step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.1 ) )
                    case ISSUER_SETUP
                    step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                          case d_0_fst
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case d_0_snd
                                          step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                            case d_0_fst
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case d_0_snd
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                          case d_0_fst
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case d_0_snd
                                          step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                            case d_0_fst
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case d_0_snd
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case DIFF_DAA_SIGN_case_2
            step( solve( !F_IssuerSK( $I.1, isk.1 ) ▶₀ #vr.1 ) )
              case ISSUER_SETUP
              step( solve( !F_IssuerGenerator( $I, P1.1 ) ▶₁ #vr.1 ) )
                case ISSUER_SETUP
                step( solve( !F_IssuerKi( $I, Ki.1 ) ▶₂ #vr.1 ) )
                  case ISSUER_SETUP
                  step( solve( !F_BSN( $I, bsn ) ▶₃ #vr.1 ) )
                    case ISSUER_SETUP
                    step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case ISSUER_KEY_REVEAL
            step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.1 ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          next
            case ISSUER_SETUP
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.1, 0) ~~> (#vk, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            qed
          next
            case SHUFFLE
            step( solve( Shuffle( (x+y) ) ▶₀ #vr.1 ) )
              case DIFF_DAA_SIGN_case_1
              step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                case d_0_fst
                step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case DIFF_DAA_SIGN_case_2
              step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                case d_0_fst
                step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            qed
          qed
        qed
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          step( solve( (#vl, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KD( multp(~randS1P, ~JP) ) ▶₀ #vk ) )
                  case DIFF_DAA_SIGN_case_1
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case DIFF_DAA_SIGN_case_2
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case ISSUER_KEY_REVEAL
                  step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.5 ) )
                    case ISSUER_SETUP
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case ISSUER_SETUP
                  by step( contradiction /* impossible chain */ )
                next
                  case SHUFFLE
                  step( solve( Shuffle( (x+y) ) ▶₀ #vr.5 ) )
                    case DIFF_DAA_SIGN
                    step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                          case multp
                          step( solve( !KU( multp(~randS1P, ~JP) ) @ #vk ) )
                            case SHUFFLE
                            MIRRORED
                          qed
                        qed
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KD( multp(~randS1P,
                                        multp(~lP, multp(~isk, multp(~creRandomP, ~P1))))
                             ) ▶₀ #vk ) )
                  case DIFF_DAA_SIGN_case_1
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case DIFF_DAA_SIGN_case_2
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case ISSUER_KEY_REVEAL
                  step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.5 ) )
                    case ISSUER_SETUP
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case ISSUER_SETUP
                  by step( contradiction /* impossible chain */ )
                next
                  case SHUFFLE
                  step( solve( Shuffle( (x+y) ) ▶₀ #vr.5 ) )
                    case DIFF_DAA_SIGN
                    step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                          case multp
                          step( solve( !KU( multp(~randS1P,
                                                  multp(~lP, multp(~isk, multp(~creRandomP, ~P1))))
                                       ) @ #vk ) )
                            case SHUFFLE
                            MIRRORED
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KD( <multp(~randS1P, ~JP), 
                                 multp(~randS1P, multp(~lP, multp(~isk, multp(~creRandomP, ~P1))))>
                           ) ▶₀ #vk ) )
                case DIFF_DAA_SIGN_case_1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case DIFF_DAA_SIGN_case_2
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ISSUER_KEY_REVEAL
                step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.4 ) )
                  case ISSUER_SETUP
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case ISSUER_SETUP
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              next
                case SHUFFLE
                step( solve( Shuffle( (x+y) ) ▶₀ #vr.4 ) )
                  case DIFF_DAA_SIGN
                  step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KD( multp(~randS12, ~J2) ) ▶₀ #vk ) )
                  case DIFF_DAA_SIGN_case_1
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case DIFF_DAA_SIGN_case_2
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case ISSUER_KEY_REVEAL
                  step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.5 ) )
                    case ISSUER_SETUP
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case ISSUER_SETUP
                  by step( contradiction /* impossible chain */ )
                next
                  case SHUFFLE
                  step( solve( Shuffle( (x+y) ) ▶₀ #vr.5 ) )
                    case DIFF_DAA_SIGN
                    step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                          case multp
                          step( solve( !KU( multp(~randS12, ~J2) ) @ #vk ) )
                            case SHUFFLE
                            MIRRORED
                          qed
                        qed
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KD( multp(~randS12,
                                        multp(~l2, multp(~isk, multp(~creRandom, ~P1))))
                             ) ▶₀ #vk ) )
                  case DIFF_DAA_SIGN_case_1
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case DIFF_DAA_SIGN_case_2
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case ISSUER_KEY_REVEAL
                  step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.5 ) )
                    case ISSUER_SETUP
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case ISSUER_SETUP
                  by step( contradiction /* impossible chain */ )
                next
                  case SHUFFLE
                  step( solve( Shuffle( (x+y) ) ▶₀ #vr.5 ) )
                    case DIFF_DAA_SIGN
                    step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                          case multp
                          step( solve( !KU( multp(~randS12,
                                                  multp(~l2, multp(~isk, multp(~creRandom, ~P1))))
                                       ) @ #vk ) )
                            case SHUFFLE
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KD( <multp(~randS12, ~J2), 
                                 multp(~randS12, multp(~l2, multp(~isk, multp(~creRandom, ~P1))))>
                           ) ▶₀ #vk ) )
                case DIFF_DAA_SIGN_case_1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case DIFF_DAA_SIGN_case_2
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ISSUER_KEY_REVEAL
                step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.4 ) )
                  case ISSUER_SETUP
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case ISSUER_SETUP
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              next
                case SHUFFLE
                step( solve( Shuffle( (x+y) ) ▶₀ #vr.4 ) )
                  case DIFF_DAA_SIGN
                  step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              qed
            qed
          next
            case pair
            step( solve( !KD( <
                               <multp(~randS1P, ~JP), 
                                multp(~randS1P, multp(~lP, multp(~isk, multp(~creRandomP, ~P1))))
                               >, 
                               multp(~randS12, ~J2), 
                               multp(~randS12, multp(~l2, multp(~isk, multp(~creRandom, ~P1))))>
                         ) ▶₀ #vk ) )
              case DIFF_DAA_SIGN_case_1
              step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case DIFF_DAA_SIGN_case_2
              step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ISSUER_KEY_REVEAL
              step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.3 ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            next
              case ISSUER_SETUP
              step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            next
              case SHUFFLE
              step( solve( Shuffle( (x+y) ) ▶₀ #vr.3 ) )
                case DIFF_DAA_SIGN
                step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            qed
          qed
        next
          case DIFF_DAA_SIGN_case_2
          step( solve( (#vl, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KD( multp(~randS12, ~J2) ) ▶₀ #vk ) )
                  case DIFF_DAA_SIGN_case_1
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case DIFF_DAA_SIGN_case_2
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case ISSUER_KEY_REVEAL
                  step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.5 ) )
                    case ISSUER_SETUP
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case ISSUER_SETUP
                  by step( contradiction /* impossible chain */ )
                next
                  case SHUFFLE
                  step( solve( Shuffle( (x+y) ) ▶₀ #vr.5 ) )
                    case DIFF_DAA_SIGN
                    step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                          case multp
                          step( solve( !KU( multp(~randS12, ~J2) ) @ #vk ) )
                            case SHUFFLE
                            MIRRORED
                          qed
                        qed
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KD( multp(~randS12,
                                        multp(~l2, multp(~isk, multp(~creRandom, ~P1))))
                             ) ▶₀ #vk ) )
                  case DIFF_DAA_SIGN_case_1
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case DIFF_DAA_SIGN_case_2
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case ISSUER_KEY_REVEAL
                  step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.5 ) )
                    case ISSUER_SETUP
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case ISSUER_SETUP
                  by step( contradiction /* impossible chain */ )
                next
                  case SHUFFLE
                  step( solve( Shuffle( (x+y) ) ▶₀ #vr.5 ) )
                    case DIFF_DAA_SIGN
                    step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                          case multp
                          step( solve( !KU( multp(~randS12,
                                                  multp(~l2, multp(~isk, multp(~creRandom, ~P1))))
                                       ) @ #vk ) )
                            case SHUFFLE
                            MIRRORED
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KD( <multp(~randS12, ~J2), 
                                 multp(~randS12, multp(~l2, multp(~isk, multp(~creRandom, ~P1))))>
                           ) ▶₀ #vk ) )
                case DIFF_DAA_SIGN_case_1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case DIFF_DAA_SIGN_case_2
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ISSUER_KEY_REVEAL
                step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.4 ) )
                  case ISSUER_SETUP
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case ISSUER_SETUP
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              next
                case SHUFFLE
                step( solve( Shuffle( (x+y) ) ▶₀ #vr.4 ) )
                  case DIFF_DAA_SIGN
                  step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KD( multp(~randS1P, ~JP) ) ▶₀ #vk ) )
                  case DIFF_DAA_SIGN_case_1
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case DIFF_DAA_SIGN_case_2
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case ISSUER_KEY_REVEAL
                  step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.5 ) )
                    case ISSUER_SETUP
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case ISSUER_SETUP
                  by step( contradiction /* impossible chain */ )
                next
                  case SHUFFLE
                  step( solve( Shuffle( (x+y) ) ▶₀ #vr.5 ) )
                    case DIFF_DAA_SIGN
                    step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                          case multp
                          step( solve( !KU( multp(~randS1P, ~JP) ) @ #vk ) )
                            case SHUFFLE
                            MIRRORED
                          qed
                        qed
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KD( multp(~randS1P,
                                        multp(~lP, multp(~isk, multp(~creRandomP, ~P1))))
                             ) ▶₀ #vk ) )
                  case DIFF_DAA_SIGN_case_1
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case DIFF_DAA_SIGN_case_2
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          next
                            case d_0_snd
                            by step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case ISSUER_KEY_REVEAL
                  step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.5 ) )
                    case ISSUER_SETUP
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case ISSUER_SETUP
                  by step( contradiction /* impossible chain */ )
                next
                  case SHUFFLE
                  step( solve( Shuffle( (x+y) ) ▶₀ #vr.5 ) )
                    case DIFF_DAA_SIGN
                    step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                          case multp
                          step( solve( !KU( multp(~randS1P,
                                                  multp(~lP, multp(~isk, multp(~creRandomP, ~P1))))
                                       ) @ #vk ) )
                            case SHUFFLE
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KD( <multp(~randS1P, ~JP), 
                                 multp(~randS1P, multp(~lP, multp(~isk, multp(~creRandomP, ~P1))))>
                           ) ▶₀ #vk ) )
                case DIFF_DAA_SIGN_case_1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.14, 0) ~~> (#vk, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case DIFF_DAA_SIGN_case_2
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ISSUER_KEY_REVEAL
                step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.4 ) )
                  case ISSUER_SETUP
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case ISSUER_SETUP
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              next
                case SHUFFLE
                step( solve( Shuffle( (x+y) ) ▶₀ #vr.4 ) )
                  case DIFF_DAA_SIGN
                  step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                qed
              qed
            qed
          next
            case pair
            step( solve( !KD( <
                               <multp(~randS12, ~J2), 
                                multp(~randS12, multp(~l2, multp(~isk, multp(~creRandom, ~P1))))>, 
                               multp(~randS1P, ~JP), 
                               multp(~randS1P, multp(~lP, multp(~isk, multp(~creRandomP, ~P1))))>
                         ) ▶₀ #vk ) )
              case DIFF_DAA_SIGN_case_1
              step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.7, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.8, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.9, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.10, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.11, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.12, 0) ~~> (#vk, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.13, 0) ~~> (#vk, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case DIFF_DAA_SIGN_case_2
              step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.6, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ISSUER_KEY_REVEAL
              step( solve( !F_IssuerSK( $I.1, t ) ▶₀ #vr.3 ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            next
              case ISSUER_SETUP
              step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            next
              case SHUFFLE
              step( solve( Shuffle( (x+y) ) ▶₀ #vr.3 ) )
                case DIFF_DAA_SIGN
                step( solve( (#vl, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case fresh
      step( solve( !KD( ~x ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                        case d_0_fst
                                        by step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                      next
                                        case d_0_snd
                                        by step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                        case d_0_fst
                                        by step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                      next
                                        case d_0_snd
                                        by step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    by step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( solve( (#vl, 0) ~~> (#i, 1) ) )
        qed
      next
        case ISSUER_SETUP
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          by step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
            case d_0_fst
            by step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
          next
            case d_0_snd
            step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
              case d_0_fst
              by step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
            next
              case d_0_snd
              by step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
            qed
          qed
        qed
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          step( solve( (#vl, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            qed
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            qed
          qed
        next
          case DIFF_DAA_SIGN_case_2
          step( solve( (#vl, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            qed
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            qed
          qed
        qed
      qed
    next
      case pub
      step( solve( !KD( $x ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KU( x ) @ #vk ) )
      case c_H1
      step( solve( !KD( H1(x) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_H2
      step( solve( !KD( H2(x, x.1, x.2, x.3, x.4, x.5) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.6) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_H3
      step( solve( !KD( H3(x, x.1, x.2, x.3, x.4) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.5) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_H4
      by sorry
    next
      case c_PRF
      step( solve( !KD( PRF(x, x.1, x.2) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                      next
                        case d_0_snd
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.3) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_accept
      step( solve( !KD( accept ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (x+y) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_adec
      step( solve( !KD( adec(x, x.1) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_aenc
      step( solve( !KD( aenc(x, x.1) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_fst
      step( solve( !KD( fst(x) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_minus
      step( solve( !KD( minus(x, x.1) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_multp
      step( solve( !KD( multp(x, x.1) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case multp
                          step( solve( !KU( multp(~l, multp(~creRandom, ~P1)) ) @ #vk ) )
                            case c_multp
                            by step( solve( !KU( ~l ) @ #vk.1 ) )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case multp
                            step( solve( !KU( multp(~l, multp(~isk, multp(~creRandom, ~P1)))
                                         ) @ #vk ) )
                              case c_multp
                              by step( solve( !KU( ~l ) @ #vk.1 ) )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case multp
                              step( solve( !KU( multp(~l,
                                                      plus(multp(~isk, multp(~creRandom, ~P1)),
                                                           multp(multp(~creRandom, ~isk),
                                                                 multp(~P1,
                                                                       PRF(~DAASeed, ~Ki, ~cnt)))))
                                           ) @ #vk ) )
                                case c_multp
                                by step( solve( !KU( ~l ) @ #vk.1 ) )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case multp
                                step( solve( !KU( multp(~l,
                                                        multp(PRF(~DAASeed, ~Ki, ~cnt),
                                                              multp(~isk, multp(~creRandom, ~P1))))
                                             ) @ #vk ) )
                                  case c_multp
                                  by step( solve( !KU( ~l ) @ #vk.1 ) )
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case multp
                                    step( solve( !KU( multp(PRF(~DAASeed, ~Ki, ~cnt), ~J)
                                                 ) @ #vk ) )
                                      case c_multp
                                      step( solve( !KU( PRF(~DAASeed, ~Ki, ~cnt) ) @ #vk.1 ) )
                                        case c_PRF
                                        step( solve( !KU( ~J ) @ #vk.2 ) )
                                          case DIFF_DAA_SIGN
                                          by step( solve( !KU( ~DAASeed ) @ #vk.3 ) )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case multp
                          step( solve( !KU( multp(~lP, multp(~creRandomP, ~P1)) ) @ #vk ) )
                            case c_multp
                            by step( solve( !KU( ~lP ) @ #vk.1 ) )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case multp
                            step( solve( !KU( multp(~lP, multp(~isk, multp(~creRandomP, ~P1)))
                                         ) @ #vk ) )
                              case c_multp
                              by step( solve( !KU( ~lP ) @ #vk.1 ) )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case multp
                              step( solve( !KU( multp(~lP,
                                                      plus(multp(~isk, multp(~creRandomP, ~P1)),
                                                           multp(multp(~creRandomP, ~isk),
                                                                 multp(~P1,
                                                                       PRF(~DAASeedP, ~Ki,
                                                                           ~cntP)))))
                                           ) @ #vk ) )
                                case c_multp
                                by step( solve( !KU( ~lP ) @ #vk.1 ) )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case multp
                                step( solve( !KU( multp(~lP,
                                                        multp(PRF(~DAASeedP, ~Ki, ~cntP),
                                                              multp(~isk, multp(~creRandomP, ~P1))))
                                             ) @ #vk ) )
                                  case c_multp
                                  by step( solve( !KU( ~lP ) @ #vk.1 ) )
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case multp
                                    step( solve( !KU( multp(PRF(~DAASeedP, ~Ki, ~cntP), ~JP)
                                                 ) @ #vk ) )
                                      case c_multp
                                      step( solve( !KU( PRF(~DAASeedP, ~Ki, ~cntP) ) @ #vk.1 ) )
                                        case c_PRF
                                        step( solve( !KU( ~JP ) @ #vk.2 ) )
                                          case DIFF_DAA_SIGN
                                          by step( solve( !KU( ~DAASeedP ) @ #vk.3 ) )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case multp
                        step( solve( !KU( multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)) ) @ #vk ) )
                          case c_multp
                          step( solve( !KU( ~P1 ) @ #vk.1 ) )
                            case ISSUER_SETUP
                            step( solve( !KU( PRF(~DAASeed, ~Ki, ~cnt) ) @ #vk.2 ) )
                              case c_PRF
                              by step( solve( !KU( ~DAASeed ) @ #vk.3 ) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case multp
                          step( solve( !KU( multp(~P1, PRF(~DAASeedP, ~Ki, ~cntP))
                                       ) @ #vk ) )
                            case c_multp
                            step( solve( !KU( ~P1 ) @ #vk.1 ) )
                              case ISSUER_SETUP
                              step( solve( !KU( PRF(~DAASeedP, ~Ki, ~cntP) ) @ #vk.2 ) )
                                case c_PRF
                                by step( solve( !KU( ~DAASeedP ) @ #vk.3 ) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case multp
                            step( solve( !KU( multp(~randS1, ~J) ) @ #vk ) )
                              case c_multp
                              by step( solve( !KU( ~randS1 ) @ #vk.1 ) )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case multp
                            step( solve( !KU( multp(~randS1,
                                                    multp(~l, multp(~isk, multp(~creRandom, ~P1))))
                                         ) @ #vk ) )
                              case c_multp
                              by step( solve( !KU( ~randS1 ) @ #vk.1 ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          step( solve( (#vl, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS1P, ~JP) ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS1P ) @ #vk.1 ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS1P,
                                        multp(~lP, multp(~isk, multp(~creRandomP, ~P1))))
                             ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS1P ) @ #vk.1 ) )
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS12, ~J2) ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS12 ) @ #vk.1 ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS12,
                                        multp(~l2, multp(~isk, multp(~creRandom, ~P1))))
                             ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS12 ) @ #vk.1 ) )
                qed
              qed
            qed
          qed
        next
          case DIFF_DAA_SIGN_case_2
          step( solve( (#vl, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS12, ~J2) ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS12 ) @ #vk.1 ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS12,
                                        multp(~l2, multp(~isk, multp(~creRandom, ~P1))))
                             ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS12 ) @ #vk.1 ) )
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS1P, ~JP) ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS1P ) @ #vk.1 ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case multp
                step( solve( !KU( multp(~randS1P,
                                        multp(~lP, multp(~isk, multp(~creRandomP, ~P1))))
                             ) @ #vk ) )
                  case c_multp
                  by step( solve( !KU( ~randS1P ) @ #vk.1 ) )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case c_pair
      by sorry
    next
      case c_pk
      step( solve( !KD( pk(x) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
            case pk
            step( solve( !KU( pk(~isk) ) @ #vk ) )
              case c_pk
              step( solve( !KU( ~isk ) @ #vk.1 ) )
                case ISSUER_KEY_REVEAL
                MIRRORED
              qed
            qed
          qed
        next
          case d_0_snd
          by step( contradiction /* impossible chain */ )
        qed
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_plus
      step( solve( !KD( plus(x, x.1) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_s
      step( solve( !KD( s(x, x.1) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                      case d_0_fst
                                      step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                        case s
                                        step( solve( !KU( s(~randS1, PRF(~DAASeed, ~Ki, ~cnt))
                                                     ) @ #vk ) )
                                          case c_s
                                          by step( solve( !KU( ~randS1 ) @ #vk.1 ) )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                      case d_0_fst
                                      step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                        case s
                                        step( solve( !KU( s(~randS1P, PRF(~DAASeedP, ~Ki, ~cntP))
                                                     ) @ #vk ) )
                                          case c_s
                                          by step( solve( !KU( ~randS1P ) @ #vk.1 ) )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.2) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_snd
      step( solve( !KD( snd(x) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case c_union
      step( solve( !KD( (x+y) ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (x.1+y.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case coerce
      by sorry
    next
      case fresh
      step( solve( !KD( ~x ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                        case d_0_fst
                                        by step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                      next
                                        case d_0_snd
                                        by step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            by step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                          next
                            case d_0_snd
                            step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              by step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                            next
                              case d_0_snd
                              step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                by step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                              next
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                                  case d_0_fst
                                  by step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                next
                                  case d_0_snd
                                  step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                                    case d_0_fst
                                    by step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                  next
                                    case d_0_snd
                                    step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                                      case d_0_fst
                                      by step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                    next
                                      case d_0_snd
                                      step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                                        case d_0_fst
                                        by step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                      next
                                        case d_0_snd
                                        by step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                step( solve( (#vl, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  by step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    by step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        by step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          by step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( solve( (#vl, 0) ~~> (#i, 1) ) )
        qed
      next
        case ISSUER_SETUP
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          by step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
            case d_0_fst
            by step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
          next
            case d_0_snd
            step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
              case d_0_fst
              by step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
            next
              case d_0_snd
              by step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
            qed
          qed
        qed
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          step( solve( (#vl, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            qed
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            qed
          qed
        next
          case DIFF_DAA_SIGN_case_2
          step( solve( (#vl, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            qed
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case d_0_fst
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
            qed
          qed
        qed
      qed
    next
      case pub
      step( solve( !KD( $x ) ▶₁ #i ) )
        case DIFF_DAA_SIGN_case_1
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              step( solve( !F_BSN( $I, bsn ) ▶₃ #vr ) )
                case ISSUER_SETUP
                by step( contradiction /* impossible chain */ )
              qed
            qed
          qed
        qed
      next
        case DIFF_DAA_SIGN_case_2
        step( solve( !F_IssuerSK( $I, isk ) ▶₀ #vr ) )
          case ISSUER_SETUP
          step( solve( !F_IssuerGenerator( $I, P1 ) ▶₁ #vr ) )
            case ISSUER_SETUP
            step( solve( !F_IssuerKi( $I, Ki ) ▶₂ #vr ) )
              case ISSUER_SETUP
              by step( contradiction /* impossible chain */ )
            qed
          qed
        qed
      next
        case ISSUER_KEY_REVEAL
        step( solve( !F_IssuerSK( $I, t ) ▶₀ #vr ) )
          case ISSUER_SETUP
          by step( contradiction /* impossible chain */ )
        qed
      next
        case ISSUER_SETUP
        by step( contradiction /* impossible chain */ )
      next
        case SHUFFLE
        step( solve( Shuffle( (y+x.1) ) ▶₀ #vr ) )
          case DIFF_DAA_SIGN_case_1
          by step( contradiction /* impossible chain */ )
        next
          case DIFF_DAA_SIGN_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    qed
  qed
next
  case Rule_ISSUER_KEY_REVEAL
  backward-search
    case LHS
    step( simplify )
    step( solve( !F_IssuerSK( $I, isk ) ▶₀ #i ) )
      case ISSUER_SETUP
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( !F_IssuerSK( $I, isk ) ▶₀ #i ) )
      case ISSUER_SETUP
      MIRRORED
    qed
  qed
next
  case Rule_ISSUER_SETUP
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_SHUFFLE
  backward-search
    case LHS
    step( simplify )
    step( solve( Shuffle( (x+y) ) ▶₀ #i ) )
      case DIFF_DAA_SIGN_case_1
      MIRRORED
    next
      case DIFF_DAA_SIGN_case_2
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( Shuffle( (x+y) ) ▶₀ #i ) )
      case DIFF_DAA_SIGN_case_1
      MIRRORED
    next
      case DIFF_DAA_SIGN_case_2
      MIRRORED
    qed
  qed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
qed

/* All well-formedness checks were successful. */

end