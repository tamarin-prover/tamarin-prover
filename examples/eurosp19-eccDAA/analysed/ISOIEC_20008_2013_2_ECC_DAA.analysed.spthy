theory ISOIEC_20008_2013_2_ECC_DAA begin

// Function signature and definition of the equational theory E

functions: H1/1, H2/5, H3/5, H4/8, MAC/2, PRF/3, U/2, accept/0,
           adec/2, aenc/2, calcR1/1, calcR2/1, calcU/1, checkAnon/5, deanon/0,
           fst/1, minus/2, multp/2, pair/2, pk/1, plus/2, s/2, snd/1,
           verifyBlindCre/5, verifyCre/5, verifyMAC/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    calcR1(minus(multp(s(randS1, PRF(DAASeed, Ki, cnt)), J),
                 multp(H4(H3(multp(l, multp(creRandom, P1)),
                             multp(l, multp(isk, multp(creRandom, P1))),
                             multp(l,
                                   plus(multp(isk, multp(creRandom, P1)),
                                        multp(multp(creRandom, isk),
                                              multp(P1, PRF(DAASeed, Ki, cnt))))),
                             multp(l,
                                   multp(PRF(DAASeed, Ki, cnt), multp(isk, multp(creRandom, P1)))),
                             nv),
                          m, J, multp(PRF(DAASeed, Ki, cnt), J), bsn, multp(randS1, J),
                          multp(randS1, multp(l, multp(isk, multp(creRandom, P1)))), nt),
                       multp(PRF(DAASeed, Ki, cnt), J))))
  = multp(randS1, J),
    calcR2(minus(multp(s(randS1, PRF(DAASeed, Ki, cnt)),
                       multp(l, multp(isk, multp(creRandom, P1)))),
                 multp(H4(H3(multp(l, multp(creRandom, P1)),
                             multp(l, multp(isk, multp(creRandom, P1))),
                             multp(l,
                                   plus(multp(isk, multp(creRandom, P1)),
                                        multp(multp(creRandom, isk),
                                              multp(P1, PRF(DAASeed, Ki, cnt))))),
                             multp(l,
                                   multp(PRF(DAASeed, Ki, cnt), multp(isk, multp(creRandom, P1)))),
                             nv),
                          m, J, multp(PRF(DAASeed, Ki, cnt), J), bsn, multp(randS1, J),
                          multp(randS1, multp(l, multp(isk, multp(creRandom, P1)))), nt),
                       multp(l,
                             multp(PRF(DAASeed, Ki, cnt), multp(isk, multp(creRandom, P1)))))))
  = multp(randS1, multp(l, multp(isk, multp(creRandom, P1)))),
    calcU(minus(multp(plus(uu,
                           multp(H2(P1, multp(P1, PRF(DAASeed, Ki, cnt)), U(uu, P1), pk(isk),
                                    ni),
                                 PRF(DAASeed, Ki, cnt))),
                      P1),
                multp(H2(P1, multp(P1, PRF(DAASeed, Ki, cnt)), U(uu, P1), pk(isk),
                         ni),
                      multp(P1, PRF(DAASeed, Ki, cnt)))))
  = U(uu, P1),
    checkAnon(multp(l, multp(isk, multp(creRandom, P1))),
              multp(l,
                    multp(PRF(DAASeed, Ki, cnt), multp(isk, multp(creRandom, P1)))),
              J, multp(PRF(DAASeed, Ki, cnt), J), PRF(DAASeed, Ki, cnt))
  = deanon,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verifyBlindCre(multp(l, multp(creRandom, P1)),
                   multp(l, multp(isk, multp(creRandom, P1))),
                   multp(l,
                         plus(multp(isk, multp(creRandom, P1)),
                              multp(multp(creRandom, isk), multp(P1, PRF(DAASeed, Ki, cnt))))),
                   multp(l,
                         multp(PRF(DAASeed, Ki, cnt), multp(isk, multp(creRandom, P1)))),
                   pk(isk))
  = accept,
    verifyCre(multp(creRandom, P1), multp(isk, multp(creRandom, P1)),
              plus(multp(isk, multp(creRandom, P1)),
                   multp(multp(creRandom, isk), multp(P1, PRF(DAASeed, Ki, cnt)))),
              multp(PRF(DAASeed, Ki, cnt), multp(isk, multp(creRandom, P1))),
              pk(isk))
  = accept,
    verifyMAC(m, MAC(m, k), k) = accept

restriction issuer_init:
  "∀ #i #j.
    ((IssuerInit( ) @ #i) ∧ (IssuerInit( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction unique_pairing:
  "∀ #i #j x.
    ((Unique_Pairing( x ) @ #i) ∧ (Unique_Pairing( x ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction platform_init:
  "∀ #i #j x y.
    ((PlatformStart( x, y ) @ #i) ∧ (PlatformStart( x, y ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction equality:
  "∀ #i x y. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction inequality:
  "∀ #i x. (Neq( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

rule (modulo E) ChanOut_S[color=#ffffff]:
   [ Out_S( $A, $B, x ), !F_Paired( $A, $B ) ]
  --[ ChanOut_S( $A, $B, x ) ]->
   [ Sec( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_S[color=#ffffff]:
   [ Sec( $A, $B, x ) ]
  --[ ChanIn_S( $A, $B, x ) ]->
   [ In_S( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ISSUER_SETUP:
   [ Fr( ~Ki ), Fr( ~P1 ), Fr( ~isk ), Fr( ~bottom ) ]
  --[ IssuerInit( ), UniqueExecJoin( 'ISSUER_SETUP' ) ]->
   [
   !F_IssuerSK( $I, ~isk ), !F_IssuerPK( $I, pk(~isk) ),
   !F_IssuerKi( $I, ~Ki ), !F_IssuerGenerator( $I, ~P1 ),
   !F_BSN( $I, ~bottom ), Out( <pk(~isk), ~Ki, ~P1, ~bottom> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) ISSUER_KEY_REVEAL:
   [ !F_IssuerSK( $I, isk ) ]
  --[ IssuerKeyReveal( $I ) ]->
   [ Out( isk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) PLATFORM_CORRUPT:
   [ !F_PSEk( $PS, sk_ek ), !F_PSPkEk( $PS, pk_ek ) ]
  --[ RevealEK( $PS ) ]->
   [ Out( <sk_ek, pk_ek> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) REVEAL_TSK:
   [ !F_PSTsk( $PS, tsk ) ]
  --[ RevealTsk( $PS ), DAAKeyReveal( tsk ), RevealPSTsk( $PS, tsk )
  ]->
   [ Out( <$PS, tsk> ), !RevealedPSTsk( $PS, tsk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) PLATFORM_SETUP:
   [ Fr( ~sk_ek ) ]
  --[
  PlatformInit( ), PlatformStart( $AS, $PS ), Create( $PS ),
  Neq( $AS, $PS ), UniqueExecJoin( 'PLATFORM_SETUP' ),
  Unique_Pairing( $PS ), Unique_Pairing( $AS )
  ]->
   [
   !F_PSEk( $PS, ~sk_ek ), !F_PSPkEk( $PS, pk(~sk_ek) ),
   !F_Paired( $PS, $AS ), !F_Paired( $AS, $PS ),
   St_PlatformInit( $AS, $PS ), Out( pk(~sk_ek) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) ISSUER_JOIN_ONE:
   [
   Fr( ~ni ), Fr( ~km ), !F_PSPkEk( $PS, pk_ek ),
   !F_IssuerPK( $I, ipk ), St_PlatformInit( $AS, $PS )
   ]
  --[
  UniqueExecJoin( 'ISSUER_JOIN_ONE' ), IssuerJoinOne( ), Create( $I )
  ]->
   [
   Out( aenc(<'ISSUER_REQ', ~km, ~ni>, pk_ek) ),
   St_ISSUER_JOIN_ONE( $I, $PS, ~km, ~ni )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) AS_JOIN_ONE:
   [ In( aenc(<'ISSUER_REQ', km, ni>, pk_ek) ) ]
  --[ UniqueExecJoin( 'AS_JOIN_ONE' ), ASJoinOne( ) ]->
   [ Out_S( $AS, $PS, aenc(<'ISSUER_REQ', km, ni>, pk_ek) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) PS_JOIN_ONE:
   [
   In_S( $AS, $PS, aenc(<'ISSUER_REQ', km, ni>, pk(sk_ek)) ),
   Fr( ~DAASeed ), Fr( ~cnt ), !F_IssuerKi( $I, Ki ),
   !F_PSEk( $PS, sk_ek ), !F_IssuerPK( $I, ipk ),
   !F_IssuerGenerator( $I, P1 ), Fr( ~u )
   ]
  --[
  UniqueExecJoin( 'PS_JOIN_ONE' ),
  DeriveTsk( PRF(~DAASeed, Ki, ~cnt) ), PSJoinOne( )
  ]->
   [
   Out_S( $PS, $AS,
          <'PS_RESP_OUT', multp(P1, PRF(~DAASeed, Ki, ~cnt)), 
           H2(P1, multp(P1, PRF(~DAASeed, Ki, ~cnt)), U(~u, P1), ipk, ni), 
           plus(~u,
                multp(H2(P1, multp(P1, PRF(~DAASeed, Ki, ~cnt)), U(~u, P1), ipk,
                         ni),
                      PRF(~DAASeed, Ki, ~cnt))), 
           MAC(<'gamma', P1, multp(P1, PRF(~DAASeed, Ki, ~cnt)), 
                H2(P1, multp(P1, PRF(~DAASeed, Ki, ~cnt)), U(~u, P1), ipk, ni), 
                plus(~u,
                     multp(H2(P1, multp(P1, PRF(~DAASeed, Ki, ~cnt)), U(~u, P1), ipk,
                              ni),
                           PRF(~DAASeed, Ki, ~cnt)))
               >,
               km)
          >
   ),
   !F_PSDaaSeed( $PS, ~DAASeed ), !F_PSCnt( $PS, ~cnt ),
   !F_PSTsk( $PS, PRF(~DAASeed, Ki, ~cnt) )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) AS_JOIN_TWO:
   [ In_S( $PS, $AS, <'PS_RESP_OUT', Q2, v, w, gamma> ) ]
  --[ UniqueExecJoin( 'AS_JOIN_TWO' ), ASJoinTwo( ) ]->
   [ Out( <'PS_RESP', Q2, v, w, gamma> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ISSUER_JOIN_TWO:
   [
   In( <'PS_RESP', Q2, v, w, MAC(<'gamma', P1, Q2, v, w>, km)> ),
   St_ISSUER_JOIN_ONE( $I, $PS, km, ni ), Fr( ~creRandom ),
   !F_IssuerSK( $I, isk ), !F_IssuerPK( $I, ipk ),
   !F_IssuerGenerator( $I, P1 ), !F_PSPkEk( $PS, pk_ek )
   ]
  --[
  Honest( $I ), Honest( $PS ), IssuerJoinTwo( ),
  Eq( verifyMAC(<'gamma', P1, Q2, v, w>,
                MAC(<'gamma', P1, Q2, v, w>, km), km),
      accept
  ),
  Eq( v,
      H2(P1, Q2, calcU(minus(multp(w, P1), multp(v, Q2))), ipk, ni)
  ),
  UniqueExecJoin( 'ISSUER_JOIN_TWO' ),
  Running( $PS, $I,
           <'creI', multp(~creRandom, P1), multp(isk, multp(~creRandom, P1)), 
            plus(multp(isk, multp(~creRandom, P1)),
                 multp(multp(~creRandom, isk), Q2))
           >
  )
  ]->
   [
   Out( aenc(<'creI', multp(~creRandom, P1), 
              multp(isk, multp(~creRandom, P1)), 
              plus(multp(isk, multp(~creRandom, P1)),
                   multp(multp(~creRandom, isk), Q2))
             >,
             pk_ek)
   )
   ]

  /*
  rule (modulo AC) ISSUER_JOIN_TWO:
     [
     In( <'PS_RESP', Q2, v, w, MAC(<'gamma', P1, Q2, v, w>, km)> ),
     St_ISSUER_JOIN_ONE( $I, $PS, km, ni ), Fr( ~creRandom ),
     !F_IssuerSK( $I, isk ), !F_IssuerPK( $I, ipk ),
     !F_IssuerGenerator( $I, P1 ), !F_PSPkEk( $PS, pk_ek )
     ]
    --[
    Honest( $I ), Honest( $PS ), IssuerJoinTwo( ),
    Eq( accept, accept ), Eq( v, H2(P1, Q2, z, ipk, ni) ),
    UniqueExecJoin( 'ISSUER_JOIN_TWO' ),
    Running( $PS, $I,
             <'creI', multp(~creRandom, P1), multp(isk, multp(~creRandom, P1)), 
              plus(multp(isk, multp(~creRandom, P1)),
                   multp(multp(~creRandom, isk), Q2))
             >
    )
    ]->
     [
     Out( aenc(<'creI', multp(~creRandom, P1), 
                multp(isk, multp(~creRandom, P1)), 
                plus(multp(isk, multp(~creRandom, P1)),
                     multp(multp(~creRandom, isk), Q2))
               >,
               pk_ek)
     )
     ]
    variants (modulo AC)
    1. P1    = P1.27
       Q2    = Q2.28
       v     = v.34
       w     = w.35
       z     = calcU(minus(multp(w.35, P1.27), multp(v.34, Q2.28)))
    
    2. P1    = P1.90
       Q2    = multp(P1.90, PRF(x.165, x.166, x.167))
       v     = H2(P1.90, multp(P1.90, PRF(x.165, x.166, x.167)),
                  U(x.173, P1.90), pk(x.174), x.175)
       w     = plus(x.173,
                    multp(H2(P1.90, multp(P1.90, PRF(x.165, x.166, x.167)),
                             U(x.173, P1.90), pk(x.174), x.175),
                          PRF(x.165, x.166, x.167)))
       z     = U(x.173, P1.90)
  */

rule (modulo E) AS_JOIN_THREE:
   [ In( aenc(<'creI', cre>, pk_ek) ) ]
  --[ ASJoinThree( ), UniqueExecJoin( 'AS_JOIN_THREE' ) ]->
   [ Out_S( $AS, $PS, aenc(<'creI', cre>, pk_ek) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) PS_JOIN_TWO:
   [
   In_S( $AS, $PS, aenc(<'creI', A, B, C>, pk(sk_ek)) ),
   !F_PSEk( $PS, sk_ek ), !F_PSTsk( $PS, PRF(DAASeed, Ki, cnt) )
   ]
  --[ PSJoinTwo( ), UniqueExecJoin( 'PS_JOIN_TWO' ) ]->
   [
   Out_S( $PS, $AS, <'cre', A, B, C, multp(PRF(DAASeed, Ki, cnt), B)>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) AS_JOIN_FOUR:
   [ In_S( $PS, $AS, <'cre', A, B, C, D> ), !F_IssuerPK( $I, ipk ) ]
  --[
  Honest( $PS ), Honest( $I ), ASJoinFour( ),
  UniqueExecJoin( 'AS_JOIN_FOUR' ),
  Eq( verifyCre(A, B, C, D, ipk), accept ),
  Commit( $I, $PS, <'creI', A, B, C> ), Secret( $I, $PS, <A, B, C> )
  ]->
   [ !F_ASCre( $AS, $PS, <A, B, C, D> ) ]

  // loop breaker: [0]
  /*
  rule (modulo AC) AS_JOIN_FOUR:
     [ In_S( $PS, $AS, <'cre', A, B, C, D> ), !F_IssuerPK( $I, ipk ) ]
    --[
    Honest( $PS ), Honest( $I ), ASJoinFour( ),
    UniqueExecJoin( 'AS_JOIN_FOUR' ), Eq( z, accept ),
    Commit( $I, $PS, <'creI', A, B, C> ), Secret( $I, $PS, <A, B, C> )
    ]->
     [ !F_ASCre( $AS, $PS, <A, B, C, D> ) ]
    variants (modulo AC)
    1. A     = A.17
       B     = B.18
       C     = C.19
       D     = D.20
       ipk   = ipk.21
       z     = verifyCre(A.17, B.18, C.19, D.20, ipk.21)
    
    2. A     = multp(x.18, x.19)
       B     = multp(x.20, multp(x.18, x.19))
       C     = plus(multp(x.20, multp(x.18, x.19)),
                    multp(multp(x.18, x.20), multp(x.19, PRF(x.21, x.22, x.23))))
       D     = multp(PRF(x.21, x.22, x.23),
                     multp(x.20, multp(x.18, x.19)))
       ipk   = pk(x.20)
       z     = accept
    // loop breaker: [0]
  */

rule (modulo E) VERIFIER_SIGN_ONE:
   [ Fr( ~nv ), Fr( ~m ) ]
  --[
  VerifierSignOne( ), UniqueExecSign( 'VERIFIER_SIGN_ONE' ),
  Send( $V, ~nv )
  ]->
   [ Out( <'V1', ~nv, ~m> ), St_VERIFIER_SIGN_1( $V, ~nv, ~m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) AS_SIGN_ONE:
   [
   In( <'V1', nv, m> ), !F_BSN( $I, bsn ), Fr( ~J ), Fr( ~l ),
   !F_ASCre( $AS, $PS, <A, B, C, D> ), Fr( ~sid )
   ]
  --[ ASSignOne( ), UniqueExecSign( 'AS_SIGN_ONE' ) ]->
   [
   Out_S( $AS, $PS,
          <~sid, 'PSSign', 
           H3(multp(~l, A), multp(~l, B), multp(~l, C), multp(~l, D), nv), 
           ~J, multp(~l, B), m, bsn>
   ),
   St_AS_SIGN_ONE( ~sid, $AS, multp(~l, A), multp(~l, B),
                   multp(~l, C), multp(~l, D), ~J, nv, m
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) PS_SIGN_ONE:
   [
   In_S( $AS, $PS, <~sid, 'PSSign', H3(R, S, T, W, nv), ~J, S, m, bsn>
   ),
   Fr( ~nt ), Fr( ~randS1 ), !F_PSTsk( $PS, PRF(DAASeed, Ki, cnt) )
   ]
  --[
  PSSignOne( ), DAASign( PRF(DAASeed, Ki, cnt), ~J, nv ),
  UniqueExecSign( 'PS_SIGN_ONE' )
  ]->
   [
   Out_S( $PS, $AS,
          <~sid, 'PSSignResp', multp(PRF(DAASeed, Ki, cnt), ~J), 
           H4(H3(R, S, T, W, nv), m, ~J, multp(PRF(DAASeed, Ki, cnt), ~J),
              bsn, multp(~randS1, ~J), multp(~randS1, S), ~nt), 
           s(~randS1, PRF(DAASeed, Ki, cnt)), ~nt>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) AS_SIGN_TWO:
   [
   In_S( $PS, $AS, <~sid, 'PSSignResp', K, h, s(~randS1, tsk), ~nt> ),
   St_AS_SIGN_ONE( ~sid, $AS, R, S, T, W, ~J, nv, m )
   ]
  --[
  ASSignTwo( ), UniqueExecSign( 'AS_SIGN_TWO' ),
  ASSendSignature( $AS, $PS, nv ),
  ASSendFullSignature( $AS, $PS,
                       <'sigma', R, S, T, W, ~J, K, h, s(~randS1, tsk), nv, ~nt>
  )
  ]->
   [
   Sigma( <'sigma', R, S, T, W, ~J, K, h, s(~randS1, tsk), nv, ~nt> ),
   Out( <'sigma', m, 'sigma', R, S, T, W, ~J, K, h, s(~randS1, tsk), 
         nv, ~nt>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) VERIFIER_VERIFY_ONE_WITH_STATE:
   [
   In( <'sigma', m, 'sigma', R, S, T, W, J, K, h, s(randS1, tsk), nv, 
        nt>
   ),
   St_VERIFIER_SIGN_1( $V, nv, m ), !F_BSN( $I, bsn ),
   !F_IssuerPK( $I, ipk )
   ]
  --[
  VerifierVerifyOneWS( ), UniqueExecSign( 'VERIFIER_VERIFY_ONE_WS' ),
  Eq( verifyBlindCre(R, S, T, W, ipk), accept ),
  Eq( H4(H3(R, S, T, W, nv), m, J, K, bsn,
         calcR1(minus(multp(s(randS1, tsk), J), multp(h, K))),
         calcR2(minus(multp(s(randS1, tsk), S), multp(h, W))), nt),
      h
  ),
  Confirm( $V, nv )
  ]->
   [ ]

  /*
  rule (modulo AC) VERIFIER_VERIFY_ONE_WITH_STATE:
     [
     In( <'sigma', m, 'sigma', R, S, T, W, J, K, h, s(randS1, tsk), nv, 
          nt>
     ),
     St_VERIFIER_SIGN_1( $V, nv, m ), !F_BSN( $I, bsn ),
     !F_IssuerPK( $I, ipk )
     ]
    --[
    VerifierVerifyOneWS( ), UniqueExecSign( 'VERIFIER_VERIFY_ONE_WS' ),
    Eq( z, accept ),
    Eq( H4(H3(R, S, T, W, nv), m, J, K, bsn, z.1, z.2, nt), h ),
    Confirm( $V, nv )
    ]->
     [ ]
    variants (modulo AC)
    1. J     = J.36
       K     = K.37
       R     = R.38
       S     = S.39
       T     = T.40
       W     = W.41
       h     = h.43
       ipk   = ipk.44
       randS1
             = randS1.48
       tsk   = tsk.49
       z     = verifyBlindCre(R.38, S.39, T.40, W.41, ipk.44)
       z.1   = calcR1(minus(multp(s(randS1.48, tsk.49), J.36),
                            multp(h.43, K.37)))
       z.2   = calcR2(minus(multp(s(randS1.48, tsk.49), S.39),
                            multp(h.43, W.41)))
    
    2. J     = J.48
       K     = K.49
       R     = multp(x.86, multp(x.87, x.88))
       S     = multp(x.86, multp(x.89, multp(x.87, x.88)))
       T     = multp(x.86,
                     plus(multp(x.89, multp(x.87, x.88)),
                          multp(multp(x.87, x.89), multp(x.88, PRF(x.90, x.91, x.92)))))
       W     = multp(x.86,
                     multp(PRF(x.90, x.91, x.92), multp(x.89, multp(x.87, x.88))))
       h     = h.55
       ipk   = pk(x.89)
       randS1
             = randS1.60
       tsk   = tsk.61
       z     = accept
       z.1   = calcR1(minus(multp(s(randS1.60, tsk.61), J.48),
                            multp(h.55, K.49)))
       z.2   = calcR2(minus(multp(s(randS1.60, tsk.61),
                                  multp(x.86, multp(x.89, multp(x.87, x.88)))),
                            multp(h.55,
                                  multp(x.86,
                                        multp(PRF(x.90, x.91, x.92),
                                              multp(x.89, multp(x.87, x.88)))))))
    
    3. J     = J.55
       K     = K.56
       R     = multp(x.93, multp(x.94, x.95))
       S     = multp(x.93, multp(x.96, multp(x.94, x.95)))
       T     = multp(x.93,
                     plus(multp(x.96, multp(x.94, x.95)),
                          multp(multp(x.94, x.96), multp(x.95, PRF(x.97, x.98, x.99)))))
       W     = multp(x.93,
                     multp(PRF(x.97, x.98, x.99), multp(x.96, multp(x.94, x.95))))
       h     = H4(H3(multp(x.93, multp(x.94, x.95)),
                     multp(x.93, multp(x.96, multp(x.94, x.95))),
                     multp(x.93,
                           plus(multp(x.96, multp(x.94, x.95)),
                                multp(multp(x.94, x.96), multp(x.95, PRF(x.97, x.98, x.99))))),
                     multp(x.93,
                           multp(PRF(x.97, x.98, x.99), multp(x.96, multp(x.94, x.95)))),
                     x.101),
                  x.102, x.103, multp(PRF(x.97, x.98, x.99), x.103), x.104,
                  multp(randS1.67, x.103),
                  multp(randS1.67, multp(x.93, multp(x.96, multp(x.94, x.95)))),
                  x.106)
       ipk   = pk(x.96)
       randS1
             = randS1.67
       tsk   = PRF(x.97, x.98, x.99)
       z     = accept
       z.1   = calcR1(minus(multp(s(randS1.67, PRF(x.97, x.98, x.99)),
                                  J.55),
                            multp(H4(H3(multp(x.93, multp(x.94, x.95)),
                                        multp(x.93, multp(x.96, multp(x.94, x.95))),
                                        multp(x.93,
                                              plus(multp(x.96, multp(x.94, x.95)),
                                                   multp(multp(x.94, x.96),
                                                         multp(x.95, PRF(x.97, x.98, x.99))))),
                                        multp(x.93,
                                              multp(PRF(x.97, x.98, x.99),
                                                    multp(x.96, multp(x.94, x.95)))),
                                        x.101),
                                     x.102, x.103, multp(PRF(x.97, x.98, x.99), x.103), x.104,
                                     multp(randS1.67, x.103),
                                     multp(randS1.67, multp(x.93, multp(x.96, multp(x.94, x.95)))),
                                     x.106),
                                  K.56)))
       z.2   = multp(randS1.67,
                     multp(x.93, multp(x.96, multp(x.94, x.95))))
    
    4. J     = J.55
       K     = multp(PRF(x.94, x.95, x.96), J.55)
       R     = multp(x.97, multp(x.98, x.99))
       S     = multp(x.97, multp(x.100, multp(x.98, x.99)))
       T     = multp(x.97,
                     plus(multp(x.100, multp(x.98, x.99)),
                          multp(multp(x.98, x.100), multp(x.99, PRF(x.94, x.95, x.96)))))
       W     = multp(x.97,
                     multp(PRF(x.94, x.95, x.96), multp(x.100, multp(x.98, x.99))))
       h     = H4(H3(multp(x.97, multp(x.98, x.99)),
                     multp(x.97, multp(x.100, multp(x.98, x.99))),
                     multp(x.97,
                           plus(multp(x.100, multp(x.98, x.99)),
                                multp(multp(x.98, x.100), multp(x.99, PRF(x.94, x.95, x.96))))),
                     multp(x.97,
                           multp(PRF(x.94, x.95, x.96), multp(x.100, multp(x.98, x.99)))),
                     x.102),
                  x.103, J.55, multp(PRF(x.94, x.95, x.96), J.55), x.104,
                  multp(randS1.67, J.55),
                  multp(randS1.67, multp(x.97, multp(x.100, multp(x.98, x.99)))),
                  x.106)
       ipk   = pk(x.100)
       randS1
             = randS1.67
       tsk   = PRF(x.94, x.95, x.96)
       z     = accept
       z.1   = multp(randS1.67, J.55)
       z.2   = multp(randS1.67,
                     multp(x.97, multp(x.100, multp(x.98, x.99))))
    
    5. J     = J.56
       K     = K.57
       R     = R.58
       S     = multp(x.94, multp(x.95, multp(x.96, x.97)))
       T     = T.60
       W     = multp(x.94,
                     multp(PRF(x.99, x.100, x.101), multp(x.95, multp(x.96, x.97))))
       h     = H4(H3(multp(x.94, multp(x.96, x.97)),
                     multp(x.94, multp(x.95, multp(x.96, x.97))),
                     multp(x.94,
                           plus(multp(x.95, multp(x.96, x.97)),
                                multp(multp(x.96, x.95), multp(x.97, PRF(x.99, x.100, x.101))))),
                     multp(x.94,
                           multp(PRF(x.99, x.100, x.101), multp(x.95, multp(x.96, x.97)))),
                     x.103),
                  x.104, x.105, multp(PRF(x.99, x.100, x.101), x.105), x.106,
                  multp(randS1.68, x.105),
                  multp(randS1.68, multp(x.94, multp(x.95, multp(x.96, x.97)))),
                  x.108)
       ipk   = ipk.64
       randS1
             = randS1.68
       tsk   = PRF(x.99, x.100, x.101)
       z     = verifyBlindCre(R.58,
                              multp(x.94, multp(x.95, multp(x.96, x.97))), T.60,
                              multp(x.94,
                                    multp(PRF(x.99, x.100, x.101), multp(x.95, multp(x.96, x.97)))),
                              ipk.64)
       z.1   = calcR1(minus(multp(s(randS1.68, PRF(x.99, x.100, x.101)),
                                  J.56),
                            multp(H4(H3(multp(x.94, multp(x.96, x.97)),
                                        multp(x.94, multp(x.95, multp(x.96, x.97))),
                                        multp(x.94,
                                              plus(multp(x.95, multp(x.96, x.97)),
                                                   multp(multp(x.96, x.95),
                                                         multp(x.97, PRF(x.99, x.100, x.101))))),
                                        multp(x.94,
                                              multp(PRF(x.99, x.100, x.101),
                                                    multp(x.95, multp(x.96, x.97)))),
                                        x.103),
                                     x.104, x.105, multp(PRF(x.99, x.100, x.101), x.105), x.106,
                                     multp(randS1.68, x.105),
                                     multp(randS1.68, multp(x.94, multp(x.95, multp(x.96, x.97)))),
                                     x.108),
                                  K.57)))
       z.2   = multp(randS1.68,
                     multp(x.94, multp(x.95, multp(x.96, x.97))))
    
    6. J     = J.57
       K     = multp(PRF(x.96, x.97, x.98), J.57)
       R     = R.59
       S     = multp(x.100, multp(x.101, multp(x.102, x.103)))
       T     = T.61
       W     = multp(x.100,
                     multp(PRF(x.96, x.97, x.98), multp(x.101, multp(x.102, x.103))))
       h     = H4(H3(multp(x.100, multp(x.102, x.103)),
                     multp(x.100, multp(x.101, multp(x.102, x.103))),
                     multp(x.100,
                           plus(multp(x.101, multp(x.102, x.103)),
                                multp(multp(x.102, x.101), multp(x.103, PRF(x.96, x.97, x.98))))),
                     multp(x.100,
                           multp(PRF(x.96, x.97, x.98), multp(x.101, multp(x.102, x.103)))),
                     x.106),
                  x.107, J.57, multp(PRF(x.96, x.97, x.98), J.57), x.108,
                  multp(randS1.69, J.57),
                  multp(randS1.69, multp(x.100, multp(x.101, multp(x.102, x.103)))),
                  x.110)
       ipk   = ipk.65
       randS1
             = randS1.69
       tsk   = PRF(x.96, x.97, x.98)
       z     = verifyBlindCre(R.59,
                              multp(x.100, multp(x.101, multp(x.102, x.103))), T.61,
                              multp(x.100,
                                    multp(PRF(x.96, x.97, x.98),
                                          multp(x.101, multp(x.102, x.103)))),
                              ipk.65)
       z.1   = multp(randS1.69, J.57)
       z.2   = multp(randS1.69,
                     multp(x.100, multp(x.101, multp(x.102, x.103))))
    
    7. J     = J.59
       K     = multp(PRF(x.98, x.99, x.100), J.59)
       R     = R.61
       S     = S.62
       T     = T.63
       W     = W.64
       h     = H4(H3(multp(x.106, multp(x.107, x.108)),
                     multp(x.106, multp(x.109, multp(x.107, x.108))),
                     multp(x.106,
                           plus(multp(x.109, multp(x.107, x.108)),
                                multp(multp(x.107, x.109), multp(x.108, PRF(x.98, x.99, x.100))))),
                     multp(x.106,
                           multp(PRF(x.98, x.99, x.100), multp(x.109, multp(x.107, x.108)))),
                     x.110),
                  x.111, J.59, multp(PRF(x.98, x.99, x.100), J.59), x.112,
                  multp(randS1.71, J.59),
                  multp(randS1.71, multp(x.106, multp(x.109, multp(x.107, x.108)))),
                  x.114)
       ipk   = ipk.67
       randS1
             = randS1.71
       tsk   = PRF(x.98, x.99, x.100)
       z     = verifyBlindCre(R.61, S.62, T.63, W.64, ipk.67)
       z.1   = multp(randS1.71, J.59)
       z.2   = calcR2(minus(multp(s(randS1.71, PRF(x.98, x.99, x.100)),
                                  S.62),
                            multp(H4(H3(multp(x.106, multp(x.107, x.108)),
                                        multp(x.106, multp(x.109, multp(x.107, x.108))),
                                        multp(x.106,
                                              plus(multp(x.109, multp(x.107, x.108)),
                                                   multp(multp(x.107, x.109),
                                                         multp(x.108, PRF(x.98, x.99, x.100))))),
                                        multp(x.106,
                                              multp(PRF(x.98, x.99, x.100),
                                                    multp(x.109, multp(x.107, x.108)))),
                                        x.110),
                                     x.111, J.59, multp(PRF(x.98, x.99, x.100), J.59), x.112,
                                     multp(randS1.71, J.59),
                                     multp(randS1.71,
                                           multp(x.106, multp(x.109, multp(x.107, x.108)))),
                                     x.114),
                                  W.64)))
    
    8. J     = J.62
       K     = multp(PRF(x.101, x.102, x.103), J.62)
       R     = multp(x.104, multp(x.105, x.106))
       S     = multp(x.104, multp(x.107, multp(x.105, x.106)))
       T     = multp(x.104,
                     plus(multp(x.107, multp(x.105, x.106)),
                          multp(multp(x.105, x.107),
                                multp(x.106, PRF(x.108, x.109, x.110)))))
       W     = multp(x.104,
                     multp(PRF(x.108, x.109, x.110), multp(x.107, multp(x.105, x.106))))
       h     = H4(H3(multp(x.112, multp(x.113, x.114)),
                     multp(x.112, multp(x.115, multp(x.113, x.114))),
                     multp(x.112,
                           plus(multp(x.115, multp(x.113, x.114)),
                                multp(multp(x.113, x.115),
                                      multp(x.114, PRF(x.101, x.102, x.103))))),
                     multp(x.112,
                           multp(PRF(x.101, x.102, x.103),
                                 multp(x.115, multp(x.113, x.114)))),
                     x.116),
                  x.117, J.62, multp(PRF(x.101, x.102, x.103), J.62), x.118,
                  multp(randS1.74, J.62),
                  multp(randS1.74, multp(x.112, multp(x.115, multp(x.113, x.114)))),
                  x.120)
       ipk   = pk(x.107)
       randS1
             = randS1.74
       tsk   = PRF(x.101, x.102, x.103)
       z     = accept
       z.1   = multp(randS1.74, J.62)
       z.2   = calcR2(minus(multp(s(randS1.74, PRF(x.101, x.102, x.103)),
                                  multp(x.104, multp(x.107, multp(x.105, x.106)))),
                            multp(H4(H3(multp(x.112, multp(x.113, x.114)),
                                        multp(x.112, multp(x.115, multp(x.113, x.114))),
                                        multp(x.112,
                                              plus(multp(x.115, multp(x.113, x.114)),
                                                   multp(multp(x.113, x.115),
                                                         multp(x.114, PRF(x.101, x.102, x.103))))),
                                        multp(x.112,
                                              multp(PRF(x.101, x.102, x.103),
                                                    multp(x.115, multp(x.113, x.114)))),
                                        x.116),
                                     x.117, J.62, multp(PRF(x.101, x.102, x.103), J.62), x.118,
                                     multp(randS1.74, J.62),
                                     multp(randS1.74,
                                           multp(x.112, multp(x.115, multp(x.113, x.114)))),
                                     x.120),
                                  multp(x.104,
                                        multp(PRF(x.108, x.109, x.110),
                                              multp(x.107, multp(x.105, x.106)))))))
  */

rule (modulo E) VERIFIER_VERIFY_ONE_NO_STATE:
   [
   In( <'sigma', m, 'sigma', R, S, T, W, J, K, h, s(randS1, tsk), nv, 
        nt>
   ),
   !F_BSN( $I, bsn ), !F_IssuerPK( $I, ipk )
   ]
  --[
  VerifierVerifyOneNS( ), UniqueExecSign( 'VERIFIER_VERIFY_ONE_NS' ),
  Eq( verifyBlindCre(R, S, T, W, ipk), accept ),
  Eq( H4(H3(R, S, T, W, nv), m, J, K, bsn,
         calcR1(minus(multp(s(randS1, tsk), J), multp(h, K))),
         calcR2(minus(multp(s(randS1, tsk), S), multp(h, W))), nt),
      h
  ),
  Confirm( $V, nv )
  ]->
   [ ]

  /*
  rule (modulo AC) VERIFIER_VERIFY_ONE_NO_STATE:
     [
     In( <'sigma', m, 'sigma', R, S, T, W, J, K, h, s(randS1, tsk), nv, 
          nt>
     ),
     !F_BSN( $I, bsn ), !F_IssuerPK( $I, ipk )
     ]
    --[
    VerifierVerifyOneNS( ), UniqueExecSign( 'VERIFIER_VERIFY_ONE_NS' ),
    Eq( z, accept ),
    Eq( H4(H3(R, S, T, W, nv), m, J, K, bsn, z.1, z.2, nt), h ),
    Confirm( $V, nv )
    ]->
     [ ]
    variants (modulo AC)
    1. J     = J.36
       K     = K.37
       R     = R.38
       S     = S.39
       T     = T.40
       W     = W.41
       h     = h.43
       ipk   = ipk.44
       randS1
             = randS1.48
       tsk   = tsk.49
       z     = verifyBlindCre(R.38, S.39, T.40, W.41, ipk.44)
       z.1   = calcR1(minus(multp(s(randS1.48, tsk.49), J.36),
                            multp(h.43, K.37)))
       z.2   = calcR2(minus(multp(s(randS1.48, tsk.49), S.39),
                            multp(h.43, W.41)))
    
    2. J     = J.48
       K     = K.49
       R     = multp(x.86, multp(x.87, x.88))
       S     = multp(x.86, multp(x.89, multp(x.87, x.88)))
       T     = multp(x.86,
                     plus(multp(x.89, multp(x.87, x.88)),
                          multp(multp(x.87, x.89), multp(x.88, PRF(x.90, x.91, x.92)))))
       W     = multp(x.86,
                     multp(PRF(x.90, x.91, x.92), multp(x.89, multp(x.87, x.88))))
       h     = h.55
       ipk   = pk(x.89)
       randS1
             = randS1.60
       tsk   = tsk.61
       z     = accept
       z.1   = calcR1(minus(multp(s(randS1.60, tsk.61), J.48),
                            multp(h.55, K.49)))
       z.2   = calcR2(minus(multp(s(randS1.60, tsk.61),
                                  multp(x.86, multp(x.89, multp(x.87, x.88)))),
                            multp(h.55,
                                  multp(x.86,
                                        multp(PRF(x.90, x.91, x.92),
                                              multp(x.89, multp(x.87, x.88)))))))
    
    3. J     = J.55
       K     = K.56
       R     = multp(x.93, multp(x.94, x.95))
       S     = multp(x.93, multp(x.96, multp(x.94, x.95)))
       T     = multp(x.93,
                     plus(multp(x.96, multp(x.94, x.95)),
                          multp(multp(x.94, x.96), multp(x.95, PRF(x.97, x.98, x.99)))))
       W     = multp(x.93,
                     multp(PRF(x.97, x.98, x.99), multp(x.96, multp(x.94, x.95))))
       h     = H4(H3(multp(x.93, multp(x.94, x.95)),
                     multp(x.93, multp(x.96, multp(x.94, x.95))),
                     multp(x.93,
                           plus(multp(x.96, multp(x.94, x.95)),
                                multp(multp(x.94, x.96), multp(x.95, PRF(x.97, x.98, x.99))))),
                     multp(x.93,
                           multp(PRF(x.97, x.98, x.99), multp(x.96, multp(x.94, x.95)))),
                     x.101),
                  x.102, x.103, multp(PRF(x.97, x.98, x.99), x.103), x.104,
                  multp(randS1.67, x.103),
                  multp(randS1.67, multp(x.93, multp(x.96, multp(x.94, x.95)))),
                  x.106)
       ipk   = pk(x.96)
       randS1
             = randS1.67
       tsk   = PRF(x.97, x.98, x.99)
       z     = accept
       z.1   = calcR1(minus(multp(s(randS1.67, PRF(x.97, x.98, x.99)),
                                  J.55),
                            multp(H4(H3(multp(x.93, multp(x.94, x.95)),
                                        multp(x.93, multp(x.96, multp(x.94, x.95))),
                                        multp(x.93,
                                              plus(multp(x.96, multp(x.94, x.95)),
                                                   multp(multp(x.94, x.96),
                                                         multp(x.95, PRF(x.97, x.98, x.99))))),
                                        multp(x.93,
                                              multp(PRF(x.97, x.98, x.99),
                                                    multp(x.96, multp(x.94, x.95)))),
                                        x.101),
                                     x.102, x.103, multp(PRF(x.97, x.98, x.99), x.103), x.104,
                                     multp(randS1.67, x.103),
                                     multp(randS1.67, multp(x.93, multp(x.96, multp(x.94, x.95)))),
                                     x.106),
                                  K.56)))
       z.2   = multp(randS1.67,
                     multp(x.93, multp(x.96, multp(x.94, x.95))))
    
    4. J     = J.55
       K     = multp(PRF(x.94, x.95, x.96), J.55)
       R     = multp(x.97, multp(x.98, x.99))
       S     = multp(x.97, multp(x.100, multp(x.98, x.99)))
       T     = multp(x.97,
                     plus(multp(x.100, multp(x.98, x.99)),
                          multp(multp(x.98, x.100), multp(x.99, PRF(x.94, x.95, x.96)))))
       W     = multp(x.97,
                     multp(PRF(x.94, x.95, x.96), multp(x.100, multp(x.98, x.99))))
       h     = H4(H3(multp(x.97, multp(x.98, x.99)),
                     multp(x.97, multp(x.100, multp(x.98, x.99))),
                     multp(x.97,
                           plus(multp(x.100, multp(x.98, x.99)),
                                multp(multp(x.98, x.100), multp(x.99, PRF(x.94, x.95, x.96))))),
                     multp(x.97,
                           multp(PRF(x.94, x.95, x.96), multp(x.100, multp(x.98, x.99)))),
                     x.102),
                  x.103, J.55, multp(PRF(x.94, x.95, x.96), J.55), x.104,
                  multp(randS1.67, J.55),
                  multp(randS1.67, multp(x.97, multp(x.100, multp(x.98, x.99)))),
                  x.106)
       ipk   = pk(x.100)
       randS1
             = randS1.67
       tsk   = PRF(x.94, x.95, x.96)
       z     = accept
       z.1   = multp(randS1.67, J.55)
       z.2   = multp(randS1.67,
                     multp(x.97, multp(x.100, multp(x.98, x.99))))
    
    5. J     = J.56
       K     = K.57
       R     = R.58
       S     = multp(x.94, multp(x.95, multp(x.96, x.97)))
       T     = T.60
       W     = multp(x.94,
                     multp(PRF(x.99, x.100, x.101), multp(x.95, multp(x.96, x.97))))
       h     = H4(H3(multp(x.94, multp(x.96, x.97)),
                     multp(x.94, multp(x.95, multp(x.96, x.97))),
                     multp(x.94,
                           plus(multp(x.95, multp(x.96, x.97)),
                                multp(multp(x.96, x.95), multp(x.97, PRF(x.99, x.100, x.101))))),
                     multp(x.94,
                           multp(PRF(x.99, x.100, x.101), multp(x.95, multp(x.96, x.97)))),
                     x.103),
                  x.104, x.105, multp(PRF(x.99, x.100, x.101), x.105), x.106,
                  multp(randS1.68, x.105),
                  multp(randS1.68, multp(x.94, multp(x.95, multp(x.96, x.97)))),
                  x.108)
       ipk   = ipk.64
       randS1
             = randS1.68
       tsk   = PRF(x.99, x.100, x.101)
       z     = verifyBlindCre(R.58,
                              multp(x.94, multp(x.95, multp(x.96, x.97))), T.60,
                              multp(x.94,
                                    multp(PRF(x.99, x.100, x.101), multp(x.95, multp(x.96, x.97)))),
                              ipk.64)
       z.1   = calcR1(minus(multp(s(randS1.68, PRF(x.99, x.100, x.101)),
                                  J.56),
                            multp(H4(H3(multp(x.94, multp(x.96, x.97)),
                                        multp(x.94, multp(x.95, multp(x.96, x.97))),
                                        multp(x.94,
                                              plus(multp(x.95, multp(x.96, x.97)),
                                                   multp(multp(x.96, x.95),
                                                         multp(x.97, PRF(x.99, x.100, x.101))))),
                                        multp(x.94,
                                              multp(PRF(x.99, x.100, x.101),
                                                    multp(x.95, multp(x.96, x.97)))),
                                        x.103),
                                     x.104, x.105, multp(PRF(x.99, x.100, x.101), x.105), x.106,
                                     multp(randS1.68, x.105),
                                     multp(randS1.68, multp(x.94, multp(x.95, multp(x.96, x.97)))),
                                     x.108),
                                  K.57)))
       z.2   = multp(randS1.68,
                     multp(x.94, multp(x.95, multp(x.96, x.97))))
    
    6. J     = J.57
       K     = multp(PRF(x.96, x.97, x.98), J.57)
       R     = R.59
       S     = multp(x.100, multp(x.101, multp(x.102, x.103)))
       T     = T.61
       W     = multp(x.100,
                     multp(PRF(x.96, x.97, x.98), multp(x.101, multp(x.102, x.103))))
       h     = H4(H3(multp(x.100, multp(x.102, x.103)),
                     multp(x.100, multp(x.101, multp(x.102, x.103))),
                     multp(x.100,
                           plus(multp(x.101, multp(x.102, x.103)),
                                multp(multp(x.102, x.101), multp(x.103, PRF(x.96, x.97, x.98))))),
                     multp(x.100,
                           multp(PRF(x.96, x.97, x.98), multp(x.101, multp(x.102, x.103)))),
                     x.106),
                  x.107, J.57, multp(PRF(x.96, x.97, x.98), J.57), x.108,
                  multp(randS1.69, J.57),
                  multp(randS1.69, multp(x.100, multp(x.101, multp(x.102, x.103)))),
                  x.110)
       ipk   = ipk.65
       randS1
             = randS1.69
       tsk   = PRF(x.96, x.97, x.98)
       z     = verifyBlindCre(R.59,
                              multp(x.100, multp(x.101, multp(x.102, x.103))), T.61,
                              multp(x.100,
                                    multp(PRF(x.96, x.97, x.98),
                                          multp(x.101, multp(x.102, x.103)))),
                              ipk.65)
       z.1   = multp(randS1.69, J.57)
       z.2   = multp(randS1.69,
                     multp(x.100, multp(x.101, multp(x.102, x.103))))
    
    7. J     = J.59
       K     = multp(PRF(x.98, x.99, x.100), J.59)
       R     = R.61
       S     = S.62
       T     = T.63
       W     = W.64
       h     = H4(H3(multp(x.106, multp(x.107, x.108)),
                     multp(x.106, multp(x.109, multp(x.107, x.108))),
                     multp(x.106,
                           plus(multp(x.109, multp(x.107, x.108)),
                                multp(multp(x.107, x.109), multp(x.108, PRF(x.98, x.99, x.100))))),
                     multp(x.106,
                           multp(PRF(x.98, x.99, x.100), multp(x.109, multp(x.107, x.108)))),
                     x.110),
                  x.111, J.59, multp(PRF(x.98, x.99, x.100), J.59), x.112,
                  multp(randS1.71, J.59),
                  multp(randS1.71, multp(x.106, multp(x.109, multp(x.107, x.108)))),
                  x.114)
       ipk   = ipk.67
       randS1
             = randS1.71
       tsk   = PRF(x.98, x.99, x.100)
       z     = verifyBlindCre(R.61, S.62, T.63, W.64, ipk.67)
       z.1   = multp(randS1.71, J.59)
       z.2   = calcR2(minus(multp(s(randS1.71, PRF(x.98, x.99, x.100)),
                                  S.62),
                            multp(H4(H3(multp(x.106, multp(x.107, x.108)),
                                        multp(x.106, multp(x.109, multp(x.107, x.108))),
                                        multp(x.106,
                                              plus(multp(x.109, multp(x.107, x.108)),
                                                   multp(multp(x.107, x.109),
                                                         multp(x.108, PRF(x.98, x.99, x.100))))),
                                        multp(x.106,
                                              multp(PRF(x.98, x.99, x.100),
                                                    multp(x.109, multp(x.107, x.108)))),
                                        x.110),
                                     x.111, J.59, multp(PRF(x.98, x.99, x.100), J.59), x.112,
                                     multp(randS1.71, J.59),
                                     multp(randS1.71,
                                           multp(x.106, multp(x.109, multp(x.107, x.108)))),
                                     x.114),
                                  W.64)))
    
    8. J     = J.62
       K     = multp(PRF(x.101, x.102, x.103), J.62)
       R     = multp(x.104, multp(x.105, x.106))
       S     = multp(x.104, multp(x.107, multp(x.105, x.106)))
       T     = multp(x.104,
                     plus(multp(x.107, multp(x.105, x.106)),
                          multp(multp(x.105, x.107),
                                multp(x.106, PRF(x.108, x.109, x.110)))))
       W     = multp(x.104,
                     multp(PRF(x.108, x.109, x.110), multp(x.107, multp(x.105, x.106))))
       h     = H4(H3(multp(x.112, multp(x.113, x.114)),
                     multp(x.112, multp(x.115, multp(x.113, x.114))),
                     multp(x.112,
                           plus(multp(x.115, multp(x.113, x.114)),
                                multp(multp(x.113, x.115),
                                      multp(x.114, PRF(x.101, x.102, x.103))))),
                     multp(x.112,
                           multp(PRF(x.101, x.102, x.103),
                                 multp(x.115, multp(x.113, x.114)))),
                     x.116),
                  x.117, J.62, multp(PRF(x.101, x.102, x.103), J.62), x.118,
                  multp(randS1.74, J.62),
                  multp(randS1.74, multp(x.112, multp(x.115, multp(x.113, x.114)))),
                  x.120)
       ipk   = pk(x.107)
       randS1
             = randS1.74
       tsk   = PRF(x.101, x.102, x.103)
       z     = accept
       z.1   = multp(randS1.74, J.62)
       z.2   = calcR2(minus(multp(s(randS1.74, PRF(x.101, x.102, x.103)),
                                  multp(x.104, multp(x.107, multp(x.105, x.106)))),
                            multp(H4(H3(multp(x.112, multp(x.113, x.114)),
                                        multp(x.112, multp(x.115, multp(x.113, x.114))),
                                        multp(x.112,
                                              plus(multp(x.115, multp(x.113, x.114)),
                                                   multp(multp(x.113, x.115),
                                                         multp(x.114, PRF(x.101, x.102, x.103))))),
                                        multp(x.112,
                                              multp(PRF(x.101, x.102, x.103),
                                                    multp(x.115, multp(x.113, x.114)))),
                                        x.116),
                                     x.117, J.62, multp(PRF(x.101, x.102, x.103), J.62), x.118,
                                     multp(randS1.74, J.62),
                                     multp(randS1.74,
                                           multp(x.112, multp(x.115, multp(x.113, x.114)))),
                                     x.120),
                                  multp(x.104,
                                        multp(PRF(x.108, x.109, x.110),
                                              multp(x.107, multp(x.105, x.106)))))))
  */

rule (modulo E) LINK:
   [
   Sigma( <'sigma', R, S, T, W, J, K, h, s(randS1, tsk), nv, nt> ),
   Sigma( <'sigma', RP, SP, TP, WP, JP, KP, hP, ssP, nvP, ntP> )
   ]
  --[ CompareLinkTokens( K, KP, J, JP ) ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) DEANONYMISE:
   [
   In( <'sigma', m, 'sigma', R, S, T, W, J, K, h, s(randS1, tsk), nv, 
        nt>
   ),
   !F_BSN( $I, bsn ), !F_IssuerPK( $I, ipk ),
   !RevealedPSTsk( $PS, tsk1 )
   ]
  --[
  Eq( verifyBlindCre(R, S, T, W, ipk), accept ),
  Eq( H4(H3(R, S, T, W, nv), m, J, K, bsn,
         calcR1(minus(multp(s(randS1, tsk), J), multp(h, K))),
         calcR2(minus(multp(s(randS1, tsk), S), multp(h, W))), nt),
      h
  ),
  Eq( checkAnon(S, W, J, K, tsk1), deanon ),
  DeAnonymised( $PS, tsk1,
                <'sigma', R, S, T, W, J, K, h, s(randS1, tsk), nv, nt>
  )
  ]->
   [ ]

  /*
  rule (modulo AC) DEANONYMISE:
     [
     In( <'sigma', m, 'sigma', R, S, T, W, J, K, h, s(randS1, tsk), nv, 
          nt>
     ),
     !F_BSN( $I, bsn ), !F_IssuerPK( $I, ipk ),
     !RevealedPSTsk( $PS, tsk1 )
     ]
    --[
    Eq( z, accept ),
    Eq( H4(H3(R, S, T, W, nv), m, J, K, bsn, z.1, z.2, nt), h ),
    Eq( z.3, deanon ),
    DeAnonymised( $PS, tsk1,
                  <'sigma', R, S, T, W, J, K, h, s(randS1, tsk), nv, nt>
    )
    ]->
     [ ]
    variants (modulo AC)
     1. J     = J.24
        K     = K.25
        R     = R.26
        S     = S.27
        T     = T.28
        W     = W.29
        h     = h.31
        ipk   = ipk.32
        randS1
              = randS1.36
        tsk   = tsk.37
        tsk1  = tsk1.38
        z     = verifyBlindCre(R.26, S.27, T.28, W.29, ipk.32)
        z.1   = calcR1(minus(multp(s(randS1.36, tsk.37), J.24),
                             multp(h.31, K.25)))
        z.2   = calcR2(minus(multp(s(randS1.36, tsk.37), S.27),
                             multp(h.31, W.29)))
        z.3   = checkAnon(S.27, W.29, J.24, K.25, tsk1.38)
    
     2. J     = J.31
        K     = K.32
        R     = multp(x.51, multp(x.52, x.53))
        S     = multp(x.51, multp(x.54, multp(x.52, x.53)))
        T     = multp(x.51,
                      plus(multp(x.54, multp(x.52, x.53)),
                           multp(multp(x.52, x.54), multp(x.53, PRF(x.55, x.56, x.57)))))
        W     = multp(x.51,
                      multp(PRF(x.55, x.56, x.57), multp(x.54, multp(x.52, x.53))))
        h     = h.38
        ipk   = pk(x.54)
        randS1
              = randS1.43
        tsk   = tsk.44
        tsk1  = tsk1.45
        z     = accept
        z.1   = calcR1(minus(multp(s(randS1.43, tsk.44), J.31),
                             multp(h.38, K.32)))
        z.2   = calcR2(minus(multp(s(randS1.43, tsk.44),
                                   multp(x.51, multp(x.54, multp(x.52, x.53)))),
                             multp(h.38,
                                   multp(x.51,
                                         multp(PRF(x.55, x.56, x.57),
                                               multp(x.54, multp(x.52, x.53)))))))
        z.3   = checkAnon(multp(x.51, multp(x.54, multp(x.52, x.53))),
                          multp(x.51,
                                multp(PRF(x.55, x.56, x.57), multp(x.54, multp(x.52, x.53)))),
                          J.31, K.32, tsk1.45)
    
     3. J     = J.32
        K     = multp(PRF(x.53, x.54, x.55), J.32)
        R     = multp(x.56, multp(x.57, x.58))
        S     = multp(x.56, multp(x.59, multp(x.57, x.58)))
        T     = multp(x.56,
                      plus(multp(x.59, multp(x.57, x.58)),
                           multp(multp(x.57, x.59), multp(x.58, PRF(x.53, x.54, x.55)))))
        W     = multp(x.56,
                      multp(PRF(x.53, x.54, x.55), multp(x.59, multp(x.57, x.58))))
        h     = h.39
        ipk   = pk(x.59)
        randS1
              = randS1.44
        tsk   = tsk.45
        tsk1  = PRF(x.53, x.54, x.55)
        z     = accept
        z.1   = calcR1(minus(multp(s(randS1.44, tsk.45), J.32),
                             multp(h.39, multp(PRF(x.53, x.54, x.55), J.32))))
        z.2   = calcR2(minus(multp(s(randS1.44, tsk.45),
                                   multp(x.56, multp(x.59, multp(x.57, x.58)))),
                             multp(h.39,
                                   multp(x.56,
                                         multp(PRF(x.53, x.54, x.55),
                                               multp(x.59, multp(x.57, x.58)))))))
        z.3   = deanon
    
     4. J     = J.33
        K     = multp(PRF(x.54, x.55, x.56), J.33)
        R     = R.35
        S     = multp(x.58, multp(x.59, multp(x.60, x.61)))
        T     = T.37
        W     = multp(x.58,
                      multp(PRF(x.54, x.55, x.56), multp(x.59, multp(x.60, x.61))))
        h     = h.40
        ipk   = ipk.41
        randS1
              = randS1.45
        tsk   = tsk.46
        tsk1  = PRF(x.54, x.55, x.56)
        z     = verifyBlindCre(R.35,
                               multp(x.58, multp(x.59, multp(x.60, x.61))), T.37,
                               multp(x.58,
                                     multp(PRF(x.54, x.55, x.56), multp(x.59, multp(x.60, x.61)))),
                               ipk.41)
        z.1   = calcR1(minus(multp(s(randS1.45, tsk.46), J.33),
                             multp(h.40, multp(PRF(x.54, x.55, x.56), J.33))))
        z.2   = calcR2(minus(multp(s(randS1.45, tsk.46),
                                   multp(x.58, multp(x.59, multp(x.60, x.61)))),
                             multp(h.40,
                                   multp(x.58,
                                         multp(PRF(x.54, x.55, x.56),
                                               multp(x.59, multp(x.60, x.61)))))))
        z.3   = deanon
    
     5. J     = J.37
        K     = multp(PRF(x.58, x.59, x.60), J.37)
        R     = multp(x.61, multp(x.62, x.63))
        S     = multp(x.61, multp(x.64, multp(x.62, x.63)))
        T     = multp(x.61,
                      plus(multp(x.64, multp(x.62, x.63)),
                           multp(multp(x.62, x.64), multp(x.63, PRF(x.58, x.59, x.60)))))
        W     = multp(x.61,
                      multp(PRF(x.58, x.59, x.60), multp(x.64, multp(x.62, x.63))))
        h     = H4(H3(multp(x.61, multp(x.62, x.63)),
                      multp(x.61, multp(x.64, multp(x.62, x.63))),
                      multp(x.61,
                            plus(multp(x.64, multp(x.62, x.63)),
                                 multp(multp(x.62, x.64), multp(x.63, PRF(x.58, x.59, x.60))))),
                      multp(x.61,
                            multp(PRF(x.58, x.59, x.60), multp(x.64, multp(x.62, x.63)))),
                      x.66),
                   x.67, J.37, multp(PRF(x.58, x.59, x.60), J.37), x.68,
                   multp(randS1.49, J.37),
                   multp(randS1.49, multp(x.61, multp(x.64, multp(x.62, x.63)))),
                   x.70)
        ipk   = pk(x.64)
        randS1
              = randS1.49
        tsk   = PRF(x.58, x.59, x.60)
        tsk1  = PRF(x.58, x.59, x.60)
        z     = accept
        z.1   = multp(randS1.49, J.37)
        z.2   = multp(randS1.49,
                      multp(x.61, multp(x.64, multp(x.62, x.63))))
        z.3   = deanon
    
     6. J     = J.38
        K     = K.39
        R     = multp(x.58, multp(x.59, x.60))
        S     = multp(x.58, multp(x.61, multp(x.59, x.60)))
        T     = multp(x.58,
                      plus(multp(x.61, multp(x.59, x.60)),
                           multp(multp(x.59, x.61), multp(x.60, PRF(x.62, x.63, x.64)))))
        W     = multp(x.58,
                      multp(PRF(x.62, x.63, x.64), multp(x.61, multp(x.59, x.60))))
        h     = H4(H3(multp(x.58, multp(x.59, x.60)),
                      multp(x.58, multp(x.61, multp(x.59, x.60))),
                      multp(x.58,
                            plus(multp(x.61, multp(x.59, x.60)),
                                 multp(multp(x.59, x.61), multp(x.60, PRF(x.62, x.63, x.64))))),
                      multp(x.58,
                            multp(PRF(x.62, x.63, x.64), multp(x.61, multp(x.59, x.60)))),
                      x.66),
                   x.67, x.68, multp(PRF(x.62, x.63, x.64), x.68), x.69,
                   multp(randS1.50, x.68),
                   multp(randS1.50, multp(x.58, multp(x.61, multp(x.59, x.60)))),
                   x.71)
        ipk   = pk(x.61)
        randS1
              = randS1.50
        tsk   = PRF(x.62, x.63, x.64)
        tsk1  = tsk1.52
        z     = accept
        z.1   = calcR1(minus(multp(s(randS1.50, PRF(x.62, x.63, x.64)),
                                   J.38),
                             multp(H4(H3(multp(x.58, multp(x.59, x.60)),
                                         multp(x.58, multp(x.61, multp(x.59, x.60))),
                                         multp(x.58,
                                               plus(multp(x.61, multp(x.59, x.60)),
                                                    multp(multp(x.59, x.61),
                                                          multp(x.60, PRF(x.62, x.63, x.64))))),
                                         multp(x.58,
                                               multp(PRF(x.62, x.63, x.64),
                                                     multp(x.61, multp(x.59, x.60)))),
                                         x.66),
                                      x.67, x.68, multp(PRF(x.62, x.63, x.64), x.68), x.69,
                                      multp(randS1.50, x.68),
                                      multp(randS1.50, multp(x.58, multp(x.61, multp(x.59, x.60)))),
                                      x.71),
                                   K.39)))
        z.2   = multp(randS1.50,
                      multp(x.58, multp(x.61, multp(x.59, x.60))))
        z.3   = checkAnon(multp(x.58, multp(x.61, multp(x.59, x.60))),
                          multp(x.58,
                                multp(PRF(x.62, x.63, x.64), multp(x.61, multp(x.59, x.60)))),
                          J.38, K.39, tsk1.52)
    
     7. J     = J.38
        K     = multp(PRF(x.59, x.60, x.61), J.38)
        R     = multp(x.62, multp(x.63, x.64))
        S     = multp(x.62, multp(x.65, multp(x.63, x.64)))
        T     = multp(x.62,
                      plus(multp(x.65, multp(x.63, x.64)),
                           multp(multp(x.63, x.65), multp(x.64, PRF(x.59, x.60, x.61)))))
        W     = multp(x.62,
                      multp(PRF(x.59, x.60, x.61), multp(x.65, multp(x.63, x.64))))
        h     = H4(H3(multp(x.62, multp(x.63, x.64)),
                      multp(x.62, multp(x.65, multp(x.63, x.64))),
                      multp(x.62,
                            plus(multp(x.65, multp(x.63, x.64)),
                                 multp(multp(x.63, x.65), multp(x.64, PRF(x.59, x.60, x.61))))),
                      multp(x.62,
                            multp(PRF(x.59, x.60, x.61), multp(x.65, multp(x.63, x.64)))),
                      x.67),
                   x.68, J.38, multp(PRF(x.59, x.60, x.61), J.38), x.69,
                   multp(randS1.50, J.38),
                   multp(randS1.50, multp(x.62, multp(x.65, multp(x.63, x.64)))),
                   x.71)
        ipk   = pk(x.65)
        randS1
              = randS1.50
        tsk   = PRF(x.59, x.60, x.61)
        tsk1  = tsk1.52
        z     = accept
        z.1   = multp(randS1.50, J.38)
        z.2   = multp(randS1.50,
                      multp(x.62, multp(x.65, multp(x.63, x.64))))
        z.3   = checkAnon(multp(x.62, multp(x.65, multp(x.63, x.64))),
                          multp(x.62,
                                multp(PRF(x.59, x.60, x.61), multp(x.65, multp(x.63, x.64)))),
                          J.38, multp(PRF(x.59, x.60, x.61), J.38), tsk1.52)
    
     8. J     = J.38
        K     = multp(PRF(x.59, x.60, x.61), J.38)
        R     = multp(x.62, multp(x.63, x.64))
        S     = multp(x.62, multp(x.65, multp(x.63, x.64)))
        T     = multp(x.62,
                      plus(multp(x.65, multp(x.63, x.64)),
                           multp(multp(x.63, x.65), multp(x.64, PRF(x.59, x.60, x.61)))))
        W     = multp(x.62,
                      multp(PRF(x.59, x.60, x.61), multp(x.65, multp(x.63, x.64))))
        h     = H4(H3(multp(x.62, multp(x.63, x.64)),
                      multp(x.62, multp(x.65, multp(x.63, x.64))),
                      multp(x.62,
                            plus(multp(x.65, multp(x.63, x.64)),
                                 multp(multp(x.63, x.65), multp(x.64, PRF(x.59, x.60, x.61))))),
                      multp(x.62,
                            multp(PRF(x.59, x.60, x.61), multp(x.65, multp(x.63, x.64)))),
                      x.67),
                   x.68, x.69, multp(PRF(x.59, x.60, x.61), x.69), x.70,
                   multp(randS1.50, x.69),
                   multp(randS1.50, multp(x.62, multp(x.65, multp(x.63, x.64)))),
                   x.72)
        ipk   = pk(x.65)
        randS1
              = randS1.50
        tsk   = PRF(x.59, x.60, x.61)
        tsk1  = PRF(x.59, x.60, x.61)
        z     = accept
        z.1   = calcR1(minus(multp(s(randS1.50, PRF(x.59, x.60, x.61)),
                                   J.38),
                             multp(H4(H3(multp(x.62, multp(x.63, x.64)),
                                         multp(x.62, multp(x.65, multp(x.63, x.64))),
                                         multp(x.62,
                                               plus(multp(x.65, multp(x.63, x.64)),
                                                    multp(multp(x.63, x.65),
                                                          multp(x.64, PRF(x.59, x.60, x.61))))),
                                         multp(x.62,
                                               multp(PRF(x.59, x.60, x.61),
                                                     multp(x.65, multp(x.63, x.64)))),
                                         x.67),
                                      x.68, x.69, multp(PRF(x.59, x.60, x.61), x.69), x.70,
                                      multp(randS1.50, x.69),
                                      multp(randS1.50, multp(x.62, multp(x.65, multp(x.63, x.64)))),
                                      x.72),
                                   multp(PRF(x.59, x.60, x.61), J.38))))
        z.2   = multp(randS1.50,
                      multp(x.62, multp(x.65, multp(x.63, x.64))))
        z.3   = deanon
    
     9. J     = J.39
        K     = K.40
        R     = R.41
        S     = multp(x.59, multp(x.60, multp(x.61, x.62)))
        T     = T.43
        W     = multp(x.59,
                      multp(PRF(x.64, x.65, x.66), multp(x.60, multp(x.61, x.62))))
        h     = H4(H3(multp(x.59, multp(x.61, x.62)),
                      multp(x.59, multp(x.60, multp(x.61, x.62))),
                      multp(x.59,
                            plus(multp(x.60, multp(x.61, x.62)),
                                 multp(multp(x.61, x.60), multp(x.62, PRF(x.64, x.65, x.66))))),
                      multp(x.59,
                            multp(PRF(x.64, x.65, x.66), multp(x.60, multp(x.61, x.62)))),
                      x.68),
                   x.69, x.70, multp(PRF(x.64, x.65, x.66), x.70), x.71,
                   multp(randS1.51, x.70),
                   multp(randS1.51, multp(x.59, multp(x.60, multp(x.61, x.62)))),
                   x.73)
        ipk   = ipk.47
        randS1
              = randS1.51
        tsk   = PRF(x.64, x.65, x.66)
        tsk1  = tsk1.53
        z     = verifyBlindCre(R.41,
                               multp(x.59, multp(x.60, multp(x.61, x.62))), T.43,
                               multp(x.59,
                                     multp(PRF(x.64, x.65, x.66), multp(x.60, multp(x.61, x.62)))),
                               ipk.47)
        z.1   = calcR1(minus(multp(s(randS1.51, PRF(x.64, x.65, x.66)),
                                   J.39),
                             multp(H4(H3(multp(x.59, multp(x.61, x.62)),
                                         multp(x.59, multp(x.60, multp(x.61, x.62))),
                                         multp(x.59,
                                               plus(multp(x.60, multp(x.61, x.62)),
                                                    multp(multp(x.61, x.60),
                                                          multp(x.62, PRF(x.64, x.65, x.66))))),
                                         multp(x.59,
                                               multp(PRF(x.64, x.65, x.66),
                                                     multp(x.60, multp(x.61, x.62)))),
                                         x.68),
                                      x.69, x.70, multp(PRF(x.64, x.65, x.66), x.70), x.71,
                                      multp(randS1.51, x.70),
                                      multp(randS1.51, multp(x.59, multp(x.60, multp(x.61, x.62)))),
                                      x.73),
                                   K.40)))
        z.2   = multp(randS1.51,
                      multp(x.59, multp(x.60, multp(x.61, x.62))))
        z.3   = checkAnon(multp(x.59, multp(x.60, multp(x.61, x.62))),
                          multp(x.59,
                                multp(PRF(x.64, x.65, x.66), multp(x.60, multp(x.61, x.62)))),
                          J.39, K.40, tsk1.53)
    
    10. J     = J.40
        K     = multp(PRF(x.61, x.62, x.63), J.40)
        R     = R.42
        S     = multp(x.65, multp(x.66, multp(x.67, x.68)))
        T     = T.44
        W     = multp(x.65,
                      multp(PRF(x.61, x.62, x.63), multp(x.66, multp(x.67, x.68))))
        h     = H4(H3(multp(x.65, multp(x.67, x.68)),
                      multp(x.65, multp(x.66, multp(x.67, x.68))),
                      multp(x.65,
                            plus(multp(x.66, multp(x.67, x.68)),
                                 multp(multp(x.67, x.66), multp(x.68, PRF(x.61, x.62, x.63))))),
                      multp(x.65,
                            multp(PRF(x.61, x.62, x.63), multp(x.66, multp(x.67, x.68)))),
                      x.71),
                   x.72, J.40, multp(PRF(x.61, x.62, x.63), J.40), x.73,
                   multp(randS1.52, J.40),
                   multp(randS1.52, multp(x.65, multp(x.66, multp(x.67, x.68)))),
                   x.75)
        ipk   = ipk.48
        randS1
              = randS1.52
        tsk   = PRF(x.61, x.62, x.63)
        tsk1  = tsk1.54
        z     = verifyBlindCre(R.42,
                               multp(x.65, multp(x.66, multp(x.67, x.68))), T.44,
                               multp(x.65,
                                     multp(PRF(x.61, x.62, x.63), multp(x.66, multp(x.67, x.68)))),
                               ipk.48)
        z.1   = multp(randS1.52, J.40)
        z.2   = multp(randS1.52,
                      multp(x.65, multp(x.66, multp(x.67, x.68))))
        z.3   = checkAnon(multp(x.65, multp(x.66, multp(x.67, x.68))),
                          multp(x.65,
                                multp(PRF(x.61, x.62, x.63), multp(x.66, multp(x.67, x.68)))),
                          J.40, multp(PRF(x.61, x.62, x.63), J.40), tsk1.54)
    
    11. J     = J.40
        K     = multp(PRF(x.61, x.62, x.63), J.40)
        R     = R.42
        S     = multp(x.65, multp(x.66, multp(x.67, x.68)))
        T     = T.44
        W     = multp(x.65,
                      multp(PRF(x.61, x.62, x.63), multp(x.66, multp(x.67, x.68))))
        h     = H4(H3(multp(x.65, multp(x.67, x.68)),
                      multp(x.65, multp(x.66, multp(x.67, x.68))),
                      multp(x.65,
                            plus(multp(x.66, multp(x.67, x.68)),
                                 multp(multp(x.67, x.66), multp(x.68, PRF(x.61, x.62, x.63))))),
                      multp(x.65,
                            multp(PRF(x.61, x.62, x.63), multp(x.66, multp(x.67, x.68)))),
                      x.71),
                   x.72, J.40, multp(PRF(x.61, x.62, x.63), J.40), x.73,
                   multp(randS1.52, J.40),
                   multp(randS1.52, multp(x.65, multp(x.66, multp(x.67, x.68)))),
                   x.75)
        ipk   = ipk.48
        randS1
              = randS1.52
        tsk   = PRF(x.61, x.62, x.63)
        tsk1  = PRF(x.61, x.62, x.63)
        z     = verifyBlindCre(R.42,
                               multp(x.65, multp(x.66, multp(x.67, x.68))), T.44,
                               multp(x.65,
                                     multp(PRF(x.61, x.62, x.63), multp(x.66, multp(x.67, x.68)))),
                               ipk.48)
        z.1   = multp(randS1.52, J.40)
        z.2   = multp(randS1.52,
                      multp(x.65, multp(x.66, multp(x.67, x.68))))
        z.3   = deanon
    
    12. J     = J.41
        K     = multp(PRF(x.62, x.63, x.64), J.41)
        R     = R.43
        S     = multp(x.66, multp(x.67, multp(x.68, x.69)))
        T     = T.45
        W     = multp(x.66,
                      multp(PRF(x.62, x.63, x.64), multp(x.67, multp(x.68, x.69))))
        h     = H4(H3(multp(x.66, multp(x.68, x.69)),
                      multp(x.66, multp(x.67, multp(x.68, x.69))),
                      multp(x.66,
                            plus(multp(x.67, multp(x.68, x.69)),
                                 multp(multp(x.68, x.67), multp(x.69, PRF(x.62, x.63, x.64))))),
                      multp(x.66,
                            multp(PRF(x.62, x.63, x.64), multp(x.67, multp(x.68, x.69)))),
                      x.72),
                   x.73, x.74, multp(PRF(x.62, x.63, x.64), x.74), x.75,
                   multp(randS1.53, x.74),
                   multp(randS1.53, multp(x.66, multp(x.67, multp(x.68, x.69)))),
                   x.77)
        ipk   = ipk.49
        randS1
              = randS1.53
        tsk   = PRF(x.62, x.63, x.64)
        tsk1  = PRF(x.62, x.63, x.64)
        z     = verifyBlindCre(R.43,
                               multp(x.66, multp(x.67, multp(x.68, x.69))), T.45,
                               multp(x.66,
                                     multp(PRF(x.62, x.63, x.64), multp(x.67, multp(x.68, x.69)))),
                               ipk.49)
        z.1   = calcR1(minus(multp(s(randS1.53, PRF(x.62, x.63, x.64)),
                                   J.41),
                             multp(H4(H3(multp(x.66, multp(x.68, x.69)),
                                         multp(x.66, multp(x.67, multp(x.68, x.69))),
                                         multp(x.66,
                                               plus(multp(x.67, multp(x.68, x.69)),
                                                    multp(multp(x.68, x.67),
                                                          multp(x.69, PRF(x.62, x.63, x.64))))),
                                         multp(x.66,
                                               multp(PRF(x.62, x.63, x.64),
                                                     multp(x.67, multp(x.68, x.69)))),
                                         x.72),
                                      x.73, x.74, multp(PRF(x.62, x.63, x.64), x.74), x.75,
                                      multp(randS1.53, x.74),
                                      multp(randS1.53, multp(x.66, multp(x.67, multp(x.68, x.69)))),
                                      x.77),
                                   multp(PRF(x.62, x.63, x.64), J.41))))
        z.2   = multp(randS1.53,
                      multp(x.66, multp(x.67, multp(x.68, x.69))))
        z.3   = deanon
    
    13. J     = J.41
        K     = multp(PRF(x.62, x.63, x.64), J.41)
        R     = multp(x.65, multp(x.66, x.67))
        S     = multp(x.65, multp(x.68, multp(x.66, x.67)))
        T     = multp(x.65,
                      plus(multp(x.68, multp(x.66, x.67)),
                           multp(multp(x.66, x.68), multp(x.67, PRF(x.62, x.63, x.64)))))
        W     = multp(x.65,
                      multp(PRF(x.62, x.63, x.64), multp(x.68, multp(x.66, x.67))))
        h     = H4(H3(multp(x.70, multp(x.71, x.72)),
                      multp(x.70, multp(x.73, multp(x.71, x.72))),
                      multp(x.70,
                            plus(multp(x.73, multp(x.71, x.72)),
                                 multp(multp(x.71, x.73), multp(x.72, PRF(x.62, x.63, x.64))))),
                      multp(x.70,
                            multp(PRF(x.62, x.63, x.64), multp(x.73, multp(x.71, x.72)))),
                      x.74),
                   x.75, J.41, multp(PRF(x.62, x.63, x.64), J.41), x.76,
                   multp(randS1.53, J.41),
                   multp(randS1.53, multp(x.70, multp(x.73, multp(x.71, x.72)))),
                   x.78)
        ipk   = pk(x.68)
        randS1
              = randS1.53
        tsk   = PRF(x.62, x.63, x.64)
        tsk1  = PRF(x.62, x.63, x.64)
        z     = accept
        z.1   = multp(randS1.53, J.41)
        z.2   = calcR2(minus(multp(s(randS1.53, PRF(x.62, x.63, x.64)),
                                   multp(x.65, multp(x.68, multp(x.66, x.67)))),
                             multp(H4(H3(multp(x.70, multp(x.71, x.72)),
                                         multp(x.70, multp(x.73, multp(x.71, x.72))),
                                         multp(x.70,
                                               plus(multp(x.73, multp(x.71, x.72)),
                                                    multp(multp(x.71, x.73),
                                                          multp(x.72, PRF(x.62, x.63, x.64))))),
                                         multp(x.70,
                                               multp(PRF(x.62, x.63, x.64),
                                                     multp(x.73, multp(x.71, x.72)))),
                                         x.74),
                                      x.75, J.41, multp(PRF(x.62, x.63, x.64), J.41), x.76,
                                      multp(randS1.53, J.41),
                                      multp(randS1.53, multp(x.70, multp(x.73, multp(x.71, x.72)))),
                                      x.78),
                                   multp(x.65,
                                         multp(PRF(x.62, x.63, x.64),
                                               multp(x.68, multp(x.66, x.67)))))))
        z.3   = deanon
    
    14. J     = J.42
        K     = multp(PRF(x.63, x.64, x.65), J.42)
        R     = R.44
        S     = S.45
        T     = T.46
        W     = W.47
        h     = H4(H3(multp(x.71, multp(x.72, x.73)),
                      multp(x.71, multp(x.74, multp(x.72, x.73))),
                      multp(x.71,
                            plus(multp(x.74, multp(x.72, x.73)),
                                 multp(multp(x.72, x.74), multp(x.73, PRF(x.63, x.64, x.65))))),
                      multp(x.71,
                            multp(PRF(x.63, x.64, x.65), multp(x.74, multp(x.72, x.73)))),
                      x.75),
                   x.76, J.42, multp(PRF(x.63, x.64, x.65), J.42), x.77,
                   multp(randS1.54, J.42),
                   multp(randS1.54, multp(x.71, multp(x.74, multp(x.72, x.73)))),
                   x.79)
        ipk   = ipk.50
        randS1
              = randS1.54
        tsk   = PRF(x.63, x.64, x.65)
        tsk1  = tsk1.56
        z     = verifyBlindCre(R.44, S.45, T.46, W.47, ipk.50)
        z.1   = multp(randS1.54, J.42)
        z.2   = calcR2(minus(multp(s(randS1.54, PRF(x.63, x.64, x.65)),
                                   S.45),
                             multp(H4(H3(multp(x.71, multp(x.72, x.73)),
                                         multp(x.71, multp(x.74, multp(x.72, x.73))),
                                         multp(x.71,
                                               plus(multp(x.74, multp(x.72, x.73)),
                                                    multp(multp(x.72, x.74),
                                                          multp(x.73, PRF(x.63, x.64, x.65))))),
                                         multp(x.71,
                                               multp(PRF(x.63, x.64, x.65),
                                                     multp(x.74, multp(x.72, x.73)))),
                                         x.75),
                                      x.76, J.42, multp(PRF(x.63, x.64, x.65), J.42), x.77,
                                      multp(randS1.54, J.42),
                                      multp(randS1.54, multp(x.71, multp(x.74, multp(x.72, x.73)))),
                                      x.79),
                                   W.47)))
        z.3   = checkAnon(S.45, W.47, J.42,
                          multp(PRF(x.63, x.64, x.65), J.42), tsk1.56)
    
    15. J     = J.44
        K     = multp(PRF(x.65, x.66, x.67), J.44)
        R     = R.46
        S     = multp(x.69, multp(x.70, multp(x.71, x.72)))
        T     = T.48
        W     = multp(x.69,
                      multp(PRF(x.65, x.66, x.67), multp(x.70, multp(x.71, x.72))))
        h     = H4(H3(multp(x.75, multp(x.76, x.77)),
                      multp(x.75, multp(x.78, multp(x.76, x.77))),
                      multp(x.75,
                            plus(multp(x.78, multp(x.76, x.77)),
                                 multp(multp(x.76, x.78), multp(x.77, PRF(x.65, x.66, x.67))))),
                      multp(x.75,
                            multp(PRF(x.65, x.66, x.67), multp(x.78, multp(x.76, x.77)))),
                      x.79),
                   x.80, J.44, multp(PRF(x.65, x.66, x.67), J.44), x.81,
                   multp(randS1.56, J.44),
                   multp(randS1.56, multp(x.75, multp(x.78, multp(x.76, x.77)))),
                   x.83)
        ipk   = ipk.52
        randS1
              = randS1.56
        tsk   = PRF(x.65, x.66, x.67)
        tsk1  = PRF(x.65, x.66, x.67)
        z     = verifyBlindCre(R.46,
                               multp(x.69, multp(x.70, multp(x.71, x.72))), T.48,
                               multp(x.69,
                                     multp(PRF(x.65, x.66, x.67), multp(x.70, multp(x.71, x.72)))),
                               ipk.52)
        z.1   = multp(randS1.56, J.44)
        z.2   = calcR2(minus(multp(s(randS1.56, PRF(x.65, x.66, x.67)),
                                   multp(x.69, multp(x.70, multp(x.71, x.72)))),
                             multp(H4(H3(multp(x.75, multp(x.76, x.77)),
                                         multp(x.75, multp(x.78, multp(x.76, x.77))),
                                         multp(x.75,
                                               plus(multp(x.78, multp(x.76, x.77)),
                                                    multp(multp(x.76, x.78),
                                                          multp(x.77, PRF(x.65, x.66, x.67))))),
                                         multp(x.75,
                                               multp(PRF(x.65, x.66, x.67),
                                                     multp(x.78, multp(x.76, x.77)))),
                                         x.79),
                                      x.80, J.44, multp(PRF(x.65, x.66, x.67), J.44), x.81,
                                      multp(randS1.56, J.44),
                                      multp(randS1.56, multp(x.75, multp(x.78, multp(x.76, x.77)))),
                                      x.83),
                                   multp(x.69,
                                         multp(PRF(x.65, x.66, x.67),
                                               multp(x.70, multp(x.71, x.72)))))))
        z.3   = deanon
    
    16. J     = J.45
        K     = multp(PRF(x.66, x.67, x.68), J.45)
        R     = multp(x.69, multp(x.70, x.71))
        S     = multp(x.69, multp(x.72, multp(x.70, x.71)))
        T     = multp(x.69,
                      plus(multp(x.72, multp(x.70, x.71)),
                           multp(multp(x.70, x.72), multp(x.71, PRF(x.73, x.74, x.75)))))
        W     = multp(x.69,
                      multp(PRF(x.73, x.74, x.75), multp(x.72, multp(x.70, x.71))))
        h     = H4(H3(multp(x.77, multp(x.78, x.79)),
                      multp(x.77, multp(x.80, multp(x.78, x.79))),
                      multp(x.77,
                            plus(multp(x.80, multp(x.78, x.79)),
                                 multp(multp(x.78, x.80), multp(x.79, PRF(x.66, x.67, x.68))))),
                      multp(x.77,
                            multp(PRF(x.66, x.67, x.68), multp(x.80, multp(x.78, x.79)))),
                      x.81),
                   x.82, J.45, multp(PRF(x.66, x.67, x.68), J.45), x.83,
                   multp(randS1.57, J.45),
                   multp(randS1.57, multp(x.77, multp(x.80, multp(x.78, x.79)))),
                   x.85)
        ipk   = pk(x.72)
        randS1
              = randS1.57
        tsk   = PRF(x.66, x.67, x.68)
        tsk1  = tsk1.59
        z     = accept
        z.1   = multp(randS1.57, J.45)
        z.2   = calcR2(minus(multp(s(randS1.57, PRF(x.66, x.67, x.68)),
                                   multp(x.69, multp(x.72, multp(x.70, x.71)))),
                             multp(H4(H3(multp(x.77, multp(x.78, x.79)),
                                         multp(x.77, multp(x.80, multp(x.78, x.79))),
                                         multp(x.77,
                                               plus(multp(x.80, multp(x.78, x.79)),
                                                    multp(multp(x.78, x.80),
                                                          multp(x.79, PRF(x.66, x.67, x.68))))),
                                         multp(x.77,
                                               multp(PRF(x.66, x.67, x.68),
                                                     multp(x.80, multp(x.78, x.79)))),
                                         x.81),
                                      x.82, J.45, multp(PRF(x.66, x.67, x.68), J.45), x.83,
                                      multp(randS1.57, J.45),
                                      multp(randS1.57, multp(x.77, multp(x.80, multp(x.78, x.79)))),
                                      x.85),
                                   multp(x.69,
                                         multp(PRF(x.73, x.74, x.75),
                                               multp(x.72, multp(x.70, x.71)))))))
        z.3   = checkAnon(multp(x.69, multp(x.72, multp(x.70, x.71))),
                          multp(x.69,
                                multp(PRF(x.73, x.74, x.75), multp(x.72, multp(x.70, x.71)))),
                          J.45, multp(PRF(x.66, x.67, x.68), J.45), tsk1.59)
  */

lemma functional_correctness:
  exists-trace
  "∃ #a #i #j #k #l #m #n #o #p #q #r #s #t #u.
    (((((((((((((((((((((((((((((((¬(∃ C #k1.
                                      IssuerKeyReveal( C ) @ #k1)) ∧
                                  (¬(∃ C #k2. RevealEK( C ) @ #k2))) ∧
                                 (¬(∃ C #k3. RevealTsk( C ) @ #k3))) ∧
                                (PlatformInit( ) @ #a)) ∧
                               (IssuerJoinOne( ) @ #i)) ∧
                              (ASJoinOne( ) @ #j)) ∧
                             (PSJoinOne( ) @ #k)) ∧
                            (ASJoinTwo( ) @ #l)) ∧
                           (IssuerJoinTwo( ) @ #m)) ∧
                          (ASJoinThree( ) @ #n)) ∧
                         (PSJoinTwo( ) @ #o)) ∧
                        (ASJoinFour( ) @ #p)) ∧
                       (VerifierSignOne( ) @ #q)) ∧
                      (ASSignOne( ) @ #r)) ∧
                     (PSSignOne( ) @ #s)) ∧
                    (ASSignTwo( ) @ #t)) ∧
                   (VerifierVerifyOneWS( ) @ #u)) ∧
                  (#a < #i)) ∧
                 (#i < #j)) ∧
                (#j < #k)) ∧
               (#k < #l)) ∧
              (#l < #m)) ∧
             (#m < #n)) ∧
            (#n < #o)) ∧
           (#o < #p)) ∧
          (#p < #q)) ∧
         (#q < #r)) ∧
        (#r < #s)) ∧
       (#s < #t)) ∧
      (#t < #u)) ∧
     (∀ #i.1 #j.1 x.
       ((UniqueExecJoin( x ) @ #i.1) ∧ (UniqueExecJoin( x ) @ #j.1)) ⇒
       (#i.1 = #j.1))) ∧
    (∀ #i.1 #j.1 x.
      ((UniqueExecSign( x ) @ #i.1) ∧ (UniqueExecSign( x ) @ #j.1)) ⇒
      (#i.1 = #j.1))"
/*
guarded formula characterizing all satisfying traces:
"∃ #a #i #j #k #l #m #n #o #p #q #r #s #t #u.
  (PlatformInit( ) @ #a) ∧
  (IssuerJoinOne( ) @ #i) ∧
  (ASJoinOne( ) @ #j) ∧
  (PSJoinOne( ) @ #k) ∧
  (ASJoinTwo( ) @ #l) ∧
  (IssuerJoinTwo( ) @ #m) ∧
  (ASJoinThree( ) @ #n) ∧
  (PSJoinTwo( ) @ #o) ∧
  (ASJoinFour( ) @ #p) ∧
  (VerifierSignOne( ) @ #q) ∧
  (ASSignOne( ) @ #r) ∧
  (PSSignOne( ) @ #s) ∧
  (ASSignTwo( ) @ #t) ∧
  (VerifierVerifyOneWS( ) @ #u)
 ∧
  (∀ C #k1. (IssuerKeyReveal( C ) @ #k1) ⇒ ⊥) ∧
  (∀ C #k2. (RevealEK( C ) @ #k2) ⇒ ⊥) ∧
  (∀ C #k3. (RevealTsk( C ) @ #k3) ⇒ ⊥) ∧
  (#a < #i) ∧
  (#i < #j) ∧
  (#j < #k) ∧
  (#k < #l) ∧
  (#l < #m) ∧
  (#m < #n) ∧
  (#n < #o) ∧
  (#o < #p) ∧
  (#p < #q) ∧
  (#q < #r) ∧
  (#r < #s) ∧
  (#s < #t) ∧
  (#t < #u) ∧
  (∀ #i.1 #j.1 x.
    (UniqueExecJoin( x ) @ #i.1) ∧ (UniqueExecJoin( x ) @ #j.1)
   ⇒
    #i.1 = #j.1) ∧
  (∀ #i.1 #j.1 x.
    (UniqueExecSign( x ) @ #i.1) ∧ (UniqueExecSign( x ) @ #j.1)
   ⇒
    #i.1 = #j.1)"
*/
simplify
solve( !F_PSPkEk( $PS.1, pk_ek ) ▶₂ #i )
  case PLATFORM_SETUP
  solve( !F_IssuerPK( $I, ipk ) ▶₃ #i )
    case ISSUER_SETUP
    solve( !F_IssuerKi( $I.1, Ki ) ▶₃ #k )
      case ISSUER_SETUP
      solve( !F_PSEk( $PS.2, sk_ek.1 ) ▶₄ #k )
        case PLATFORM_SETUP
        solve( !F_IssuerPK( $I, ipk ) ▶₅ #k )
          case ISSUER_SETUP
          solve( !F_IssuerGenerator( $I, P1 ) ▶₆ #k )
            case ISSUER_SETUP
            solve( !F_IssuerSK( $I.1, isk.1 ) ▶₃ #m )
              case ISSUER_SETUP
              solve( !F_IssuerPK( $I, pk(x.4) ) ▶₄ #m )
                case ISSUER_SETUP
                solve( !F_IssuerGenerator( $I, P1.1 ) ▶₅ #m )
                  case ISSUER_SETUP
                  solve( !F_PSPkEk( $PS.3, pk_ek.1 ) ▶₆ #m )
                    case PLATFORM_SETUP
                    solve( !F_PSEk( $PS.4, sk_ek.1 ) ▶₁ #o )
                      case PLATFORM_SETUP
                      solve( !F_PSTsk( $PS, PRF(DAASeed.1, Ki.1, cnt.1) ) ▶₂ #o )
                        case PS_JOIN_ONE
                        solve( !F_IssuerPK( $I.1, pk(x.6) ) ▶₁ #p )
                          case ISSUER_SETUP
                          solve( !F_BSN( $I.1, bsn ) ▶₁ #r )
                            case ISSUER_SETUP
                            solve( !F_ASCre( $AS.8, $PS.5, <A.1, B.1, C.1, D> ) ▶₄ #r )
                              case AS_JOIN_FOUR
                              solve( !F_PSTsk( $PS.5, PRF(DAASeed.1, Ki.1, cnt.1) ) ▶₃ #s )
                                case PS_JOIN_ONE
                                solve( !F_BSN( $I.1, bsn.1 ) ▶₂ #u.1 )
                                  case ISSUER_SETUP
                                  solve( !F_IssuerPK( $I, pk(x.12) ) ▶₃ #u.1 )
                                    case ISSUER_SETUP
                                    solve( St_PlatformInit( $AS.1, $PS ) ▶₄ #i )
                                      case PLATFORM_SETUP
                                      solve( In_S( $PS.2, $AS.3, <'PS_RESP_OUT', Q2, v, w, gamma>
                                             ) ▶₀ #l )
                                        case ChanIn_S
                                        solve( St_ISSUER_JOIN_ONE( $I, $PS, km.3, ni.3 ) ▶₁ #m )
                                          case ISSUER_JOIN_ONE
                                          solve( In_S( $PS.4, $AS.6,
                                                       <~sid.2, 'PSSignResp', K, h, 
                                                        s(~randS1.1, tsk), ~nt.1>
                                                 ) ▶₀ #t )
                                            case ChanIn_S
                                            solve( St_AS_SIGN_ONE( ~sid.1, $AS, R.1, S.1, T.1, W.1,
                                                                   ~J.2, nv.3, m.4
                                                   ) ▶₁ #t )
                                              case AS_SIGN_ONE
                                              solve( St_VERIFIER_SIGN_1( $V.1, nv.3, m.4 ) ▶₁ #u.1 )
                                                case VERIFIER_SIGN_ONE
                                                solve( !KU( MAC(<'gamma', ~P1, 
                                                                 multp(~P1, PRF(x, x.1, x.2)), 
                                                                 H2(~P1,
                                                                    multp(~P1, PRF(x, x.1, x.2)),
                                                                    U(x.3, ~P1), pk(~isk), ~ni), 
                                                                 plus(x.3,
                                                                      multp(H2(~P1,
                                                                               multp(~P1,
                                                                                     PRF(x, x.1,
                                                                                         x.2)),
                                                                               U(x.3, ~P1),
                                                                               pk(~isk), ~ni),
                                                                            PRF(x, x.1, x.2)))
                                                                >,
                                                                ~km)
                                                       ) @ #vk.9 )
                                                  case AS_JOIN_TWO
                                                  solve( !KU( multp(x.5,
                                                                    multp(~isk, multp(x.6, x.7)))
                                                         ) @ #vk.24 )
                                                    case AS_SIGN_TWO_case_2
                                                    solve( !KU( multp(~l.1,
                                                                      plus(multp(~isk,
                                                                                 multp(x, x.1)),
                                                                           multp(multp(x, ~isk),
                                                                                 multp(x.1,
                                                                                       PRF(x.5, x.6,
                                                                                           x.7)))))
                                                           ) @ #vk.26 )
                                                      case AS_SIGN_TWO
                                                      solve( !KU( H4(H3(multp(~l.1, multp(x, x.1)),
                                                                        multp(~l.1,
                                                                              multp(~isk,
                                                                                    multp(x, x.1))),
                                                                        multp(~l.1,
                                                                              plus(multp(~isk,
                                                                                         multp(x,
                                                                                               x.1)),
                                                                                   multp(multp(x,
                                                                                               ~isk),
                                                                                         multp(x.1,
                                                                                               PRF(x.2,
                                                                                                   x.3,
                                                                                                   x.4))))),
                                                                        multp(~l.1,
                                                                              multp(PRF(x.2, x.3,
                                                                                        x.4),
                                                                                    multp(~isk,
                                                                                          multp(x,
                                                                                                x.1)))),
                                                                        ~nv),
                                                                     ~m.1, J.2,
                                                                     multp(PRF(x.2, x.3, x.4), J.2),
                                                                     ~bottom, multp(randS1.1, J.2),
                                                                     multp(randS1.1,
                                                                           multp(~l.1,
                                                                                 multp(~isk,
                                                                                       multp(x,
                                                                                             x.1)))),
                                                                     nt.1)
                                                             ) @ #vk.34 )
                                                        case AS_SIGN_TWO
                                                        solve( !KU( ~J.1 ) @ #vk.31 )
                                                          case AS_SIGN_TWO_case_1
                                                          solve( In_S( $AS, $PS,
                                                                       aenc(<'ISSUER_REQ', ~km, ~ni
                                                                            >,
                                                                            pk(~sk_ek))
                                                                 ) ▶₀ #k )
                                                            case ChanIn_S_case_2
                                                            solve( In_S( $AS.2, $PS,
                                                                         aenc(<'creI', A, B, C>,
                                                                              pk(~sk_ek))
                                                                   ) ▶₀ #o )
                                                              case ChanIn_S_case_2
                                                              solve( !KU( aenc(<'creI', A, B, C>,
                                                                               pk(~sk_ek))
                                                                     ) @ #vk.24 )
                                                                case ISSUER_JOIN_TWO
                                                                solve( In_S( $PS.1, $AS,
                                                                             <'cre', multp(x, x.1), 
                                                                              multp(~isk,
                                                                                    multp(x, x.1)), 
                                                                              plus(multp(~isk,
                                                                                         multp(x,
                                                                                               x.1)),
                                                                                   multp(multp(x,
                                                                                               ~isk),
                                                                                         multp(x.1,
                                                                                               PRF(~DAASeed,
                                                                                                   ~Ki,
                                                                                                   ~cnt)))), 
                                                                              multp(PRF(~DAASeed,
                                                                                        ~Ki, ~cnt),
                                                                                    multp(~isk,
                                                                                          multp(x,
                                                                                                x.1)))
                                                                             >
                                                                       ) ▶₀ #p )
                                                                  case ChanIn_S
                                                                  solve( In_S( $AS, $PS,
                                                                               <~sid, 'PSSign', 
                                                                                H3(multp(~l.1,
                                                                                         multp(~creRandom,
                                                                                               ~P1)),
                                                                                   multp(~l.1,
                                                                                         multp(~isk,
                                                                                               multp(~creRandom,
                                                                                                     ~P1))),
                                                                                   multp(~l.1,
                                                                                         plus(multp(~isk,
                                                                                                    multp(~creRandom,
                                                                                                          ~P1)),
                                                                                              multp(multp(~creRandom,
                                                                                                          ~isk),
                                                                                                    multp(~P1,
                                                                                                          PRF(~DAASeed,
                                                                                                              ~Ki,
                                                                                                              ~cnt))))),
                                                                                   multp(~l.1,
                                                                                         multp(PRF(~DAASeed,
                                                                                                   ~Ki,
                                                                                                   ~cnt),
                                                                                               multp(~isk,
                                                                                                     multp(~creRandom,
                                                                                                           ~P1)))),
                                                                                   ~nv), 
                                                                                ~J, 
                                                                                multp(~l.1,
                                                                                      multp(~isk,
                                                                                            multp(~creRandom,
                                                                                                  ~P1))), 
                                                                                ~m.1, ~bottom>
                                                                         ) ▶₀ #s )
                                                                    case ChanIn_S_case_2
                                                                    solve( !KU( ~m.1 ) @ #vk.30 )
                                                                      case VERIFIER_SIGN_ONE
                                                                      solve( !KU( ~nv ) @ #vk.29 )
                                                                        case VERIFIER_SIGN_ONE
                                                                        solve( !KU( ~nt ) @ #vk.37 )
                                                                          case AS_SIGN_TWO
                                                                          solve( !KU( aenc(<
                                                                                            'ISSUER_REQ', 
                                                                                            ~km, ~ni
                                                                                           >,
                                                                                           pk(~sk_ek))
                                                                                 ) @ #vk.26 )
                                                                            case ISSUER_JOIN_ONE
                                                                            solve( !KU( s(~randS1,
                                                                                          PRF(~DAASeed,
                                                                                              ~Ki,
                                                                                              ~cnt))
                                                                                   ) @ #vk.37 )
                                                                              case AS_SIGN_TWO
                                                                              solve( !KU( multp(~P1,
                                                                                                PRF(~DAASeed,
                                                                                                    ~Ki,
                                                                                                    ~cnt))
                                                                                     ) @ #vk.30 )
                                                                                case AS_JOIN_TWO
                                                                                solve( !KU( H2(~P1,
                                                                                               multp(~P1,
                                                                                                     PRF(~DAASeed,
                                                                                                         ~Ki,
                                                                                                         ~cnt)),
                                                                                               U(~u,
                                                                                                 ~P1),
                                                                                               pk(~isk),
                                                                                               ~ni)
                                                                                       ) @ #vk.31 )
                                                                                  case AS_JOIN_TWO
                                                                                  solve( !KU( plus(~u,
                                                                                                   multp(H2(~P1,
                                                                                                            multp(~P1,
                                                                                                                  PRF(~DAASeed,
                                                                                                                      ~Ki,
                                                                                                                      ~cnt)),
                                                                                                            U(~u,
                                                                                                              ~P1),
                                                                                                            pk(~isk),
                                                                                                            ~ni),
                                                                                                         PRF(~DAASeed,
                                                                                                             ~Ki,
                                                                                                             ~cnt)))
                                                                                         ) @ #vk.32 )
                                                                                    case AS_JOIN_TWO
                                                                                    solve( !KU( multp(~l.1,
                                                                                                      multp(~creRandom,
                                                                                                            ~P1))
                                                                                           ) @ #vk.35 )
                                                                                      case AS_SIGN_TWO
                                                                                      solve( !KU( multp(~l.1,
                                                                                                        multp(PRF(~DAASeed,
                                                                                                                  ~Ki,
                                                                                                                  ~cnt),
                                                                                                              multp(~isk,
                                                                                                                    multp(~creRandom,
                                                                                                                          ~P1))))
                                                                                             ) @ #vk.36 )
                                                                                        case AS_SIGN_TWO
                                                                                        solve( !KU( multp(PRF(~DAASeed,
                                                                                                              ~Ki,
                                                                                                              ~cnt),
                                                                                                          ~J)
                                                                                               ) @ #vk.37 )
                                                                                          case AS_SIGN_TWO
                                                                                          SOLVED // trace found
                                                                                        qed
                                                                                      qed
                                                                                    qed
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma functional_correctness_dishonest_send:
  exists-trace
  "∃ V nv #j.
    (Confirm( V, nv ) @ #j) ∧ (¬(∃ #i. Send( V, nv ) @ #i))"
/*
guarded formula characterizing all satisfying traces:
"∃ V nv #j.
  (Confirm( V, nv ) @ #j) ∧ ∀ #i. (Send( V, nv ) @ #i) ⇒ ⊥"
*/
simplify
solve( Confirm( V, nv ) @ #j )
  case VERIFIER_VERIFY_ONE_NO_STATE
  solve( !F_BSN( $I, bsn ) ▶₁ #j )
    case ISSUER_SETUP
    solve( !F_IssuerPK( $I, pk(x.3) ) ▶₂ #j )
      case ISSUER_SETUP
      solve( !KU( multp(x, multp(~isk, multp(x.1, x.2))) ) @ #vk.8 )
        case AS_SIGN_TWO_case_2
        solve( !KU( multp(~l,
                          plus(multp(~isk, multp(x, x.1)),
                               multp(multp(x, ~isk), multp(x.1, PRF(x.2, x.3, x.4)))))
               ) @ #vk.10 )
          case AS_SIGN_TWO
          solve( !KU( H4(H3(multp(~l, multp(x, x.1)),
                            multp(~l, multp(~isk, multp(x, x.1))),
                            multp(~l,
                                  plus(multp(~isk, multp(x, x.1)),
                                       multp(multp(x, ~isk), multp(x.1, PRF(x.2, x.3, x.4))))),
                            multp(~l, multp(PRF(x.2, x.3, x.4), multp(~isk, multp(x, x.1)))),
                            nv),
                         m, J, multp(PRF(x.2, x.3, x.4), J), ~bottom, multp(randS1, J),
                         multp(randS1, multp(~l, multp(~isk, multp(x, x.1)))), nt)
                 ) @ #vk.18 )
            case AS_SIGN_TWO
            solve( !KU( ~J ) @ #vk.15 )
              case AS_SIGN_TWO_case_1
              solve( In_S( $PS.1, $AS,
                           <'cre', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                            plus(multp(~isk, multp(x, x.1)),
                                 multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt)))), 
                            multp(PRF(~DAASeed, ~Ki, ~cnt), multp(~isk, multp(x, x.1)))>
                     ) ▶₀ #vr.10 )
                case ChanIn_S
                solve( In_S( $AS, $PS,
                             <~sid, 'PSSign', H3(R, S, T, W, nv.1), ~J.2, S, m.2, bsn>
                       ) ▶₀ #vr.11 )
                  case ChanIn_S_case_2
                  solve( In_S( $AS.1, $PS, aenc(<'ISSUER_REQ', km, ni>, pk(~sk_ek))
                         ) ▶₀ #vr.13 )
                    case ChanIn_S_case_2
                    solve( !KU( aenc(<'ISSUER_REQ', km, ni>, pk(~sk_ek)) ) @ #vk.37 )
                      case ISSUER_JOIN_ONE
                      solve( In_S( $PS.1, $AS,
                                   <'cre', multp(x.2, x.3), multp(~isk, multp(x.2, x.3)), 
                                    plus(multp(~isk, multp(x.2, x.3)),
                                         multp(multp(x.2, ~isk), multp(x.3, PRF(x.4, x.5, x.6)))), 
                                    multp(PRF(x.4, x.5, x.6), multp(~isk, multp(x.2, x.3)))>
                             ) ▶₀ #vr.30 )
                        case ChanIn_S
                        solve( In_S( $AS, $PS,
                                     <~sid.1, 'PSSign', 
                                      H3(multp(~l, multp(x, x.1)),
                                         multp(~l, multp(~isk, multp(x, x.1))),
                                         multp(~l,
                                               plus(multp(~isk, multp(x, x.1)),
                                                    multp(multp(x, ~isk),
                                                          multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))),
                                         multp(~l,
                                               multp(PRF(~DAASeed, ~Ki, ~cnt),
                                                     multp(~isk, multp(x, x.1)))),
                                         nv), 
                                      ~J, multp(~l, multp(~isk, multp(x, x.1))), m, ~bottom>
                               ) ▶₀ #vr.31 )
                          case ChanIn_S
                          solve( In_S( $AS, $PS,
                                       aenc(<'creI', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                                             plus(multp(~isk, multp(x, x.1)),
                                                  multp(multp(x, ~isk),
                                                        multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                                            >,
                                            pk(~sk_ek))
                                 ) ▶₀ #vr.24 )
                            case ChanIn_S_case_2
                            solve( !KU( aenc(<'creI', multp(x, x.1), 
                                              multp(~isk, multp(x, x.1)), 
                                              plus(multp(~isk, multp(x, x.1)),
                                                   multp(multp(x, ~isk),
                                                         multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                                             >,
                                             pk(~sk_ek))
                                   ) @ #vk.28 )
                              case ISSUER_JOIN_TWO
                              solve( !KU( multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)) ) @ #vk.32 )
                                case AS_JOIN_TWO
                                solve( !KU( H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)),
                                               U(x, ~P1), pk(~isk), ~ni)
                                       ) @ #vk.34 )
                                  case AS_JOIN_TWO
                                  solve( !KU( ~nt ) @ #vk.31 )
                                    case AS_SIGN_TWO
                                    solve( !KU( s(~randS1, PRF(~DAASeed, ~Ki, ~cnt)) ) @ #vk.30 )
                                      case AS_SIGN_TWO
                                      solve( !KU( multp(~l, multp(~creRandom, ~P1)) ) @ #vk.28 )
                                        case AS_SIGN_TWO
                                        solve( !KU( multp(~l,
                                                          multp(PRF(~DAASeed, ~Ki, ~cnt),
                                                                multp(~isk,
                                                                      multp(~creRandom, ~P1))))
                                               ) @ #vk.30 )
                                          case AS_SIGN_TWO
                                          solve( !KU( multp(PRF(~DAASeed, ~Ki, ~cnt), ~J)
                                                 ) @ #vk.31 )
                                            case AS_SIGN_TWO
                                            solve( In_S( $PS.1, $AS,
                                                         <'cre', multp(x, x.1), 
                                                          multp(~isk, multp(x, x.1)), 
                                                          plus(multp(~isk, multp(x, x.1)),
                                                               multp(multp(x, ~isk),
                                                                     multp(x.1,
                                                                           PRF(x.2, x.3, x.4)))), 
                                                          multp(PRF(x.2, x.3, x.4),
                                                                multp(~isk, multp(x, x.1)))
                                                         >
                                                   ) ▶₀ #vr.61 )
                                              case ChanIn_S
                                              solve( In_S( $AS, $PS,
                                                           <~sid.1, 'PSSign', H3(R, S, T, W, nv.1), 
                                                            ~J, S, m.2, bsn>
                                                     ) ▶₀ #vr.62 )
                                                case ChanIn_S
                                                solve( !KU( plus(~u,
                                                                 multp(H2(~P1,
                                                                          multp(~P1,
                                                                                PRF(~DAASeed, ~Ki,
                                                                                    ~cnt)),
                                                                          U(~u, ~P1), pk(~isk),
                                                                          ~ni),
                                                                       PRF(~DAASeed, ~Ki, ~cnt)))
                                                       ) @ #vk.36 )
                                                  case AS_JOIN_TWO
                                                  solve( !KU( MAC(<'gamma', ~P1, 
                                                                   multp(~P1,
                                                                         PRF(~DAASeed, ~Ki, ~cnt)), 
                                                                   H2(~P1,
                                                                      multp(~P1,
                                                                            PRF(~DAASeed, ~Ki,
                                                                                ~cnt)),
                                                                      U(~u, ~P1), pk(~isk), ~ni), 
                                                                   plus(~u,
                                                                        multp(H2(~P1,
                                                                                 multp(~P1,
                                                                                       PRF(~DAASeed,
                                                                                           ~Ki,
                                                                                           ~cnt)),
                                                                                 U(~u, ~P1),
                                                                                 pk(~isk), ~ni),
                                                                              PRF(~DAASeed, ~Ki,
                                                                                  ~cnt)))
                                                                  >,
                                                                  ~km)
                                                         ) @ #vk.37 )
                                                    case AS_JOIN_TWO
                                                    SOLVED // trace found
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma functional_correctness_group_verification:
  exists-trace
  "∃ V V1 nv #i #j.
    ((Send( V, nv ) @ #i) ∧ (Confirm( V1, nv ) @ #j)) ∧ (¬(V = V1))"
/*
guarded formula characterizing all satisfying traces:
"∃ V V1 nv #i #j.
  (Send( V, nv ) @ #i) ∧ (Confirm( V1, nv ) @ #j) ∧ ¬(V = V1)"
*/
simplify
solve( Confirm( V1, ~nv ) @ #j )
  case VERIFIER_VERIFY_ONE_NO_STATE
  solve( !F_BSN( $I, bsn ) ▶₁ #j )
    case ISSUER_SETUP
    solve( !F_IssuerPK( $I, pk(x.3) ) ▶₂ #j )
      case ISSUER_SETUP
      solve( !KU( multp(x, multp(~isk, multp(x.1, x.2))) ) @ #vk.8 )
        case AS_SIGN_TWO_case_2
        solve( !KU( multp(~l,
                          plus(multp(~isk, multp(x, x.1)),
                               multp(multp(x, ~isk), multp(x.1, PRF(x.2, x.3, x.4)))))
               ) @ #vk.10 )
          case AS_SIGN_TWO
          solve( !KU( H4(H3(multp(~l, multp(x, x.1)),
                            multp(~l, multp(~isk, multp(x, x.1))),
                            multp(~l,
                                  plus(multp(~isk, multp(x, x.1)),
                                       multp(multp(x, ~isk), multp(x.1, PRF(x.2, x.3, x.4))))),
                            multp(~l, multp(PRF(x.2, x.3, x.4), multp(~isk, multp(x, x.1)))),
                            ~nv),
                         m.1, J, multp(PRF(x.2, x.3, x.4), J), ~bottom, multp(randS1, J),
                         multp(randS1, multp(~l, multp(~isk, multp(x, x.1)))), nt)
                 ) @ #vk.18 )
            case AS_SIGN_TWO
            solve( !KU( ~J ) @ #vk.15 )
              case AS_SIGN_TWO_case_1
              solve( In_S( $PS.1, $AS,
                           <'cre', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                            plus(multp(~isk, multp(x, x.1)),
                                 multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt)))), 
                            multp(PRF(~DAASeed, ~Ki, ~cnt), multp(~isk, multp(x, x.1)))>
                     ) ▶₀ #vr.10 )
                case ChanIn_S
                solve( In_S( $AS, $PS,
                             <~sid, 'PSSign', H3(R, S, T, W, nv.1), ~J.2, S, m.3, bsn>
                       ) ▶₀ #vr.11 )
                  case ChanIn_S_case_2
                  solve( In_S( $AS.1, $PS, aenc(<'ISSUER_REQ', km, ni>, pk(~sk_ek))
                         ) ▶₀ #vr.13 )
                    case ChanIn_S_case_2
                    solve( !KU( aenc(<'ISSUER_REQ', km, ni>, pk(~sk_ek)) ) @ #vk.37 )
                      case ISSUER_JOIN_ONE
                      solve( In_S( $PS.1, $AS,
                                   <'cre', multp(x.2, x.3), multp(~isk, multp(x.2, x.3)), 
                                    plus(multp(~isk, multp(x.2, x.3)),
                                         multp(multp(x.2, ~isk), multp(x.3, PRF(x.4, x.5, x.6)))), 
                                    multp(PRF(x.4, x.5, x.6), multp(~isk, multp(x.2, x.3)))>
                             ) ▶₀ #vr.30 )
                        case ChanIn_S
                        solve( In_S( $AS, $PS,
                                     <~sid.1, 'PSSign', 
                                      H3(multp(~l, multp(x, x.1)),
                                         multp(~l, multp(~isk, multp(x, x.1))),
                                         multp(~l,
                                               plus(multp(~isk, multp(x, x.1)),
                                                    multp(multp(x, ~isk),
                                                          multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))),
                                         multp(~l,
                                               multp(PRF(~DAASeed, ~Ki, ~cnt),
                                                     multp(~isk, multp(x, x.1)))),
                                         ~nv), 
                                      ~J, multp(~l, multp(~isk, multp(x, x.1))), m.1, ~bottom>
                               ) ▶₀ #vr.31 )
                          case ChanIn_S
                          solve( In_S( $AS, $PS,
                                       aenc(<'creI', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                                             plus(multp(~isk, multp(x, x.1)),
                                                  multp(multp(x, ~isk),
                                                        multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                                            >,
                                            pk(~sk_ek))
                                 ) ▶₀ #vr.24 )
                            case ChanIn_S_case_2
                            solve( !KU( aenc(<'creI', multp(x, x.1), 
                                              multp(~isk, multp(x, x.1)), 
                                              plus(multp(~isk, multp(x, x.1)),
                                                   multp(multp(x, ~isk),
                                                         multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                                             >,
                                             pk(~sk_ek))
                                   ) @ #vk.28 )
                              case ISSUER_JOIN_TWO
                              solve( !KU( multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)) ) @ #vk.32 )
                                case AS_JOIN_TWO
                                solve( !KU( H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)),
                                               U(x, ~P1), pk(~isk), ~ni)
                                       ) @ #vk.34 )
                                  case AS_JOIN_TWO
                                  solve( !KU( ~nv ) @ #vk.30 )
                                    case VERIFIER_SIGN_ONE
                                    solve( !KU( ~nt ) @ #vk.32 )
                                      case AS_SIGN_TWO
                                      solve( !KU( s(~randS1, PRF(~DAASeed, ~Ki, ~cnt)) ) @ #vk.32 )
                                        case AS_SIGN_TWO
                                        solve( !KU( multp(~l, multp(~creRandom, ~P1)) ) @ #vk.30 )
                                          case AS_SIGN_TWO
                                          solve( !KU( multp(~l,
                                                            multp(PRF(~DAASeed, ~Ki, ~cnt),
                                                                  multp(~isk,
                                                                        multp(~creRandom, ~P1))))
                                                 ) @ #vk.31 )
                                            case AS_SIGN_TWO
                                            solve( !KU( multp(PRF(~DAASeed, ~Ki, ~cnt), ~J)
                                                   ) @ #vk.32 )
                                              case AS_SIGN_TWO
                                              solve( In_S( $PS.1, $AS,
                                                           <'cre', multp(x, x.1), 
                                                            multp(~isk, multp(x, x.1)), 
                                                            plus(multp(~isk, multp(x, x.1)),
                                                                 multp(multp(x, ~isk),
                                                                       multp(x.1,
                                                                             PRF(x.2, x.3, x.4)))), 
                                                            multp(PRF(x.2, x.3, x.4),
                                                                  multp(~isk, multp(x, x.1)))
                                                           >
                                                     ) ▶₀ #vr.63 )
                                                case ChanIn_S
                                                solve( In_S( $AS, $PS,
                                                             <~sid.1, 'PSSign', 
                                                              H3(R, S, T, W, nv.1), ~J, S, m.3, bsn>
                                                       ) ▶₀ #vr.64 )
                                                  case ChanIn_S
                                                  solve( !KU( plus(~u,
                                                                   multp(H2(~P1,
                                                                            multp(~P1,
                                                                                  PRF(~DAASeed, ~Ki,
                                                                                      ~cnt)),
                                                                            U(~u, ~P1), pk(~isk),
                                                                            ~ni),
                                                                         PRF(~DAASeed, ~Ki, ~cnt)))
                                                         ) @ #vk.36 )
                                                    case AS_JOIN_TWO
                                                    solve( !KU( MAC(<'gamma', ~P1, 
                                                                     multp(~P1,
                                                                           PRF(~DAASeed, ~Ki,
                                                                               ~cnt)), 
                                                                     H2(~P1,
                                                                        multp(~P1,
                                                                              PRF(~DAASeed, ~Ki,
                                                                                  ~cnt)),
                                                                        U(~u, ~P1), pk(~isk), ~ni), 
                                                                     plus(~u,
                                                                          multp(H2(~P1,
                                                                                   multp(~P1,
                                                                                         PRF(~DAASeed,
                                                                                             ~Ki,
                                                                                             ~cnt)),
                                                                                   U(~u, ~P1),
                                                                                   pk(~isk), ~ni),
                                                                                PRF(~DAASeed, ~Ki,
                                                                                    ~cnt)))
                                                                    >,
                                                                    ~km)
                                                           ) @ #vk.37 )
                                                      case AS_JOIN_TWO
                                                      SOLVED // trace found
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma aliveness:
  all-traces
  "∀ a b n #i.
    (Commit( a, b, n ) @ #i) ⇒
    ((((∃ #j. Create( a ) @ #j) ∨
       (∃ C #r. (IssuerKeyReveal( C ) @ #r) ∧ (Honest( C ) @ #i))) ∨
      (∃ C #r. (RevealEK( C ) @ #r) ∧ (Honest( C ) @ #i))) ∨
     (∃ C #r. (RevealTsk( C ) @ #r) ∧ (Honest( C ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b n #i.
  (Commit( a, b, n ) @ #i)
 ∧
  (∀ #j. (Create( a ) @ #j) ⇒ ⊥) ∧
  (∀ C #r. (IssuerKeyReveal( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥) ∧
  (∀ C #r. (RevealEK( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥) ∧
  (∀ C #r. (RevealTsk( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥)"
*/
simplify
solve( !F_IssuerPK( $I, pk(x.2) ) ▶₁ #i )
  case ISSUER_SETUP
  solve( In_S( $PS, $AS,
               <'cre', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                plus(multp(~isk, multp(x, x.1)),
                     multp(multp(x, ~isk), multp(x.1, PRF(x.2, x.3, x.4)))), 
                multp(PRF(x.2, x.3, x.4), multp(~isk, multp(x, x.1)))>
         ) ▶₀ #i )
    case ChanIn_S
    solve( In_S( $AS, $PS,
                 aenc(<'creI', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                       plus(multp(~isk, multp(x, x.1)),
                            multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                      >,
                      pk(~sk_ek))
           ) ▶₀ #vr.3 )
      case ChanIn_S_case_1
      by contradiction /* from formulas */
    next
      case ChanIn_S_case_2
      solve( !KU( aenc(<'creI', multp(x, x.1), 
                        multp(~isk, multp(x, x.1)), 
                        plus(multp(~isk, multp(x, x.1)),
                             multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                       >,
                       pk(~sk_ek))
             ) @ #vk )
        case ISSUER_JOIN_TWO
        by contradiction /* from formulas */
      next
        case c_aenc
        solve( !KU( multp(~isk, multp(x, x.1)) ) @ #vk.7 )
          case ISSUER_JOIN_TWO
          by contradiction /* from formulas */
        next
          case c_multp
          solve( !KU( ~isk ) @ #vk.9 )
            case ISSUER_KEY_REVEAL
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma weak_agreement_any_reveal:
  all-traces
  "∀ a b n #i.
    (Commit( a, b, n ) @ #i) ⇒
    ((((∃ n2 #j. Running( b, a, n2 ) @ #j) ∨
       (∃ C #r. IssuerKeyReveal( C ) @ #r)) ∨
      (∃ C #r. RevealEK( C ) @ #r)) ∨
     (∃ C #r. RevealTsk( C ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b n #i.
  (Commit( a, b, n ) @ #i)
 ∧
  (∀ n2 #j. (Running( b, a, n2 ) @ #j) ⇒ ⊥) ∧
  (∀ C #r. (IssuerKeyReveal( C ) @ #r) ⇒ ⊥) ∧
  (∀ C #r. (RevealEK( C ) @ #r) ⇒ ⊥) ∧
  (∀ C #r. (RevealTsk( C ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !F_IssuerPK( $I, pk(x.2) ) ▶₁ #i )
  case ISSUER_SETUP
  solve( In_S( $PS, $AS,
               <'cre', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                plus(multp(~isk, multp(x, x.1)),
                     multp(multp(x, ~isk), multp(x.1, PRF(x.2, x.3, x.4)))), 
                multp(PRF(x.2, x.3, x.4), multp(~isk, multp(x, x.1)))>
         ) ▶₀ #i )
    case ChanIn_S
    solve( In_S( $AS, $PS,
                 aenc(<'creI', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                       plus(multp(~isk, multp(x, x.1)),
                            multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                      >,
                      pk(~sk_ek))
           ) ▶₀ #vr.3 )
      case ChanIn_S_case_1
      by contradiction /* from formulas */
    next
      case ChanIn_S_case_2
      solve( !KU( aenc(<'creI', multp(x, x.1), 
                        multp(~isk, multp(x, x.1)), 
                        plus(multp(~isk, multp(x, x.1)),
                             multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                       >,
                       pk(~sk_ek))
             ) @ #vk )
        case ISSUER_JOIN_TWO
        by contradiction /* from formulas */
      next
        case c_aenc
        solve( !KU( multp(~isk, multp(x, x.1)) ) @ #vk.7 )
          case ISSUER_JOIN_TWO
          solve( !KU( ~sk_ek.1 ) @ #vk.18 )
            case PLATFORM_CORRUPT
            by contradiction /* from formulas */
          qed
        next
          case c_multp
          solve( !KU( ~isk ) @ #vk.9 )
            case ISSUER_KEY_REVEAL
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma weak_agreement:
  all-traces
  "∀ a b n #i.
    (Commit( a, b, n ) @ #i) ⇒
    ((((∃ n2 #j. Running( b, a, n2 ) @ #j) ∨
       (∃ C #r. (IssuerKeyReveal( C ) @ #r) ∧ (Honest( C ) @ #i))) ∨
      (∃ C #r. (RevealEK( C ) @ #r) ∧ (Honest( C ) @ #i))) ∨
     (∃ C #r. (RevealTsk( C ) @ #r) ∧ (Honest( C ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b n #i.
  (Commit( a, b, n ) @ #i)
 ∧
  (∀ n2 #j. (Running( b, a, n2 ) @ #j) ⇒ ⊥) ∧
  (∀ C #r. (IssuerKeyReveal( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥) ∧
  (∀ C #r. (RevealEK( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥) ∧
  (∀ C #r. (RevealTsk( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥)"
*/
simplify
solve( !F_IssuerPK( $I, pk(x.2) ) ▶₁ #i )
  case ISSUER_SETUP
  solve( In_S( $PS, $AS,
               <'cre', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                plus(multp(~isk, multp(x, x.1)),
                     multp(multp(x, ~isk), multp(x.1, PRF(x.2, x.3, x.4)))), 
                multp(PRF(x.2, x.3, x.4), multp(~isk, multp(x, x.1)))>
         ) ▶₀ #i )
    case ChanIn_S
    solve( In_S( $AS, $PS,
                 aenc(<'creI', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                       plus(multp(~isk, multp(x, x.1)),
                            multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                      >,
                      pk(~sk_ek))
           ) ▶₀ #vr.3 )
      case ChanIn_S_case_2
      solve( !KU( aenc(<'creI', multp(x, x.1), 
                        multp(~isk, multp(x, x.1)), 
                        plus(multp(~isk, multp(x, x.1)),
                             multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                       >,
                       pk(~sk_ek))
             ) @ #vk )
        case c_aenc
        solve( !KU( multp(~isk, multp(x, x.1)) ) @ #vk.7 )
          case ISSUER_JOIN_TWO
          solve( !KU( ~sk_ek.1 ) @ #vk.18 )
            case PLATFORM_CORRUPT
            solve( !KU( plus(multp(~isk, multp(~creRandom, ~P1)),
                             multp(multp(~creRandom, ~isk),
                                   multp(~P1, PRF(~DAASeed, ~Ki, ~cnt))))
                   ) @ #vk.9 )
              case ISSUER_JOIN_TWO
              solve( !KU( multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)) ) @ #vk.13 )
                case AS_JOIN_TWO
                solve( !KU( H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)),
                               U(x, ~P1), pk(~isk), ~ni.1)
                       ) @ #vk.15 )
                  case AS_JOIN_TWO
                  solve( !KU( MAC(<'gamma', ~P1, 
                                   multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)), 
                                   H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)), U(~u, ~P1),
                                      pk(~isk), ~ni), 
                                   plus(~u,
                                        multp(H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)),
                                                 U(~u, ~P1), pk(~isk), ~ni),
                                              PRF(~DAASeed, ~Ki, ~cnt)))
                                  >,
                                  ~km.1)
                         ) @ #vk.18 )
                    case AS_JOIN_TWO
                    solve( In_S( $AS, $PS, aenc(<'ISSUER_REQ', ~km, ~ni>, pk(~sk_ek))
                           ) ▶₀ #vr.5 )
                      case ChanIn_S_case_2
                      solve( !KU( aenc(<'ISSUER_REQ', ~km, ~ni>, pk(~sk_ek)) ) @ #vk.19 )
                        case c_aenc
                        solve( !KU( ~km ) @ #vk.23 )
                          case ISSUER_JOIN_ONE
                          solve( !KU( ~ni ) @ #vk.24 )
                            case ISSUER_JOIN_ONE
                            solve( !KU( pk(~sk_ek) ) @ #vk.18 )
                              case PLATFORM_SETUP
                              solve( !KU( multp(~creRandom, ~P1) ) @ #vk.21 )
                                case ISSUER_JOIN_TWO
                                solve( !KU( plus(~u,
                                                 multp(H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)),
                                                          U(~u, ~P1), pk(~isk), ~ni),
                                                       PRF(~DAASeed, ~Ki, ~cnt)))
                                       ) @ #vk.23 )
                                  case AS_JOIN_TWO
                                  SOLVED // trace found
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma ni_agreement_any_reveal:
  all-traces
  "∀ a b n #i.
    (Commit( a, b, n ) @ #i) ⇒
    ((((∃ #j. Running( b, a, n ) @ #j) ∨
       (∃ C #r. IssuerKeyReveal( C ) @ #r)) ∨
      (∃ C #r. RevealEK( C ) @ #r)) ∨
     (∃ C #r. RevealTsk( C ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b n #i.
  (Commit( a, b, n ) @ #i)
 ∧
  (∀ #j. (Running( b, a, n ) @ #j) ⇒ ⊥) ∧
  (∀ C #r. (IssuerKeyReveal( C ) @ #r) ⇒ ⊥) ∧
  (∀ C #r. (RevealEK( C ) @ #r) ⇒ ⊥) ∧
  (∀ C #r. (RevealTsk( C ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !F_IssuerPK( $I, pk(x.2) ) ▶₁ #i )
  case ISSUER_SETUP
  solve( In_S( $PS, $AS,
               <'cre', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                plus(multp(~isk, multp(x, x.1)),
                     multp(multp(x, ~isk), multp(x.1, PRF(x.2, x.3, x.4)))), 
                multp(PRF(x.2, x.3, x.4), multp(~isk, multp(x, x.1)))>
         ) ▶₀ #i )
    case ChanIn_S
    solve( In_S( $AS, $PS,
                 aenc(<'creI', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                       plus(multp(~isk, multp(x, x.1)),
                            multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                      >,
                      pk(~sk_ek))
           ) ▶₀ #vr.3 )
      case ChanIn_S_case_1
      by contradiction /* from formulas */
    next
      case ChanIn_S_case_2
      solve( !KU( aenc(<'creI', multp(x, x.1), 
                        multp(~isk, multp(x, x.1)), 
                        plus(multp(~isk, multp(x, x.1)),
                             multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                       >,
                       pk(~sk_ek))
             ) @ #vk )
        case ISSUER_JOIN_TWO
        by contradiction /* from formulas */
      next
        case c_aenc
        solve( !KU( multp(~isk, multp(x, x.1)) ) @ #vk.7 )
          case ISSUER_JOIN_TWO
          solve( !KU( ~sk_ek.1 ) @ #vk.18 )
            case PLATFORM_CORRUPT
            by contradiction /* from formulas */
          qed
        next
          case c_multp
          solve( !KU( ~isk ) @ #vk.9 )
            case ISSUER_KEY_REVEAL
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma ni_agreement:
  all-traces
  "∀ a b n #i.
    (Commit( a, b, n ) @ #i) ⇒
    ((((∃ #j. Running( b, a, n ) @ #j) ∨
       (∃ C #r. (IssuerKeyReveal( C ) @ #r) ∧ (Honest( C ) @ #i))) ∨
      (∃ C #r. (RevealEK( C ) @ #r) ∧ (Honest( C ) @ #i))) ∨
     (∃ C #r. (RevealTsk( C ) @ #r) ∧ (Honest( C ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b n #i.
  (Commit( a, b, n ) @ #i)
 ∧
  (∀ #j. (Running( b, a, n ) @ #j) ⇒ ⊥) ∧
  (∀ C #r. (IssuerKeyReveal( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥) ∧
  (∀ C #r. (RevealEK( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥) ∧
  (∀ C #r. (RevealTsk( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥)"
*/
simplify
solve( !F_IssuerPK( $I, pk(x.2) ) ▶₁ #i )
  case ISSUER_SETUP
  solve( In_S( $PS, $AS,
               <'cre', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                plus(multp(~isk, multp(x, x.1)),
                     multp(multp(x, ~isk), multp(x.1, PRF(x.2, x.3, x.4)))), 
                multp(PRF(x.2, x.3, x.4), multp(~isk, multp(x, x.1)))>
         ) ▶₀ #i )
    case ChanIn_S
    solve( In_S( $AS, $PS,
                 aenc(<'creI', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                       plus(multp(~isk, multp(x, x.1)),
                            multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                      >,
                      pk(~sk_ek))
           ) ▶₀ #vr.3 )
      case ChanIn_S_case_2
      solve( !KU( aenc(<'creI', multp(x, x.1), 
                        multp(~isk, multp(x, x.1)), 
                        plus(multp(~isk, multp(x, x.1)),
                             multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                       >,
                       pk(~sk_ek))
             ) @ #vk )
        case c_aenc
        solve( !KU( multp(~isk, multp(x, x.1)) ) @ #vk.7 )
          case ISSUER_JOIN_TWO
          solve( !KU( ~sk_ek.1 ) @ #vk.18 )
            case PLATFORM_CORRUPT
            solve( !KU( plus(multp(~isk, multp(~creRandom, ~P1)),
                             multp(multp(~creRandom, ~isk),
                                   multp(~P1, PRF(~DAASeed, ~Ki, ~cnt))))
                   ) @ #vk.9 )
              case ISSUER_JOIN_TWO
              solve( !KU( multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)) ) @ #vk.13 )
                case AS_JOIN_TWO
                solve( !KU( H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)),
                               U(x, ~P1), pk(~isk), ~ni.1)
                       ) @ #vk.15 )
                  case AS_JOIN_TWO
                  solve( !KU( MAC(<'gamma', ~P1, 
                                   multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)), 
                                   H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)), U(~u, ~P1),
                                      pk(~isk), ~ni), 
                                   plus(~u,
                                        multp(H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)),
                                                 U(~u, ~P1), pk(~isk), ~ni),
                                              PRF(~DAASeed, ~Ki, ~cnt)))
                                  >,
                                  ~km.1)
                         ) @ #vk.18 )
                    case AS_JOIN_TWO
                    solve( In_S( $AS, $PS, aenc(<'ISSUER_REQ', ~km, ~ni>, pk(~sk_ek))
                           ) ▶₀ #vr.5 )
                      case ChanIn_S_case_2
                      solve( !KU( aenc(<'ISSUER_REQ', ~km, ~ni>, pk(~sk_ek)) ) @ #vk.19 )
                        case c_aenc
                        solve( !KU( ~km ) @ #vk.23 )
                          case ISSUER_JOIN_ONE
                          solve( !KU( ~ni ) @ #vk.24 )
                            case ISSUER_JOIN_ONE
                            solve( !KU( pk(~sk_ek) ) @ #vk.18 )
                              case PLATFORM_SETUP
                              solve( !KU( multp(~creRandom, ~P1) ) @ #vk.21 )
                                case ISSUER_JOIN_TWO
                                solve( !KU( plus(~u,
                                                 multp(H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)),
                                                          U(~u, ~P1), pk(~isk), ~ni),
                                                       PRF(~DAASeed, ~Ki, ~cnt)))
                                       ) @ #vk.23 )
                                  case AS_JOIN_TWO
                                  SOLVED // trace found
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma i_agreement:
  all-traces
  "∀ a b n #i.
    (Commit( a, b, n ) @ #i) ⇒
    ((((∃ #j.
         ((Running( a, b, n ) @ #j) ∧ (#j < #i)) ∧
         (¬(∃ a2 b2 #i2. (Commit( a2, b2, n ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
       (∃ C #r. (IssuerKeyReveal( C ) @ #r) ∧ (Honest( C ) @ #i))) ∨
      (∃ C #r. (RevealEK( C ) @ #r) ∧ (Honest( C ) @ #i))) ∨
     (∃ C #r. (RevealTsk( C ) @ #r) ∧ (Honest( C ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b n #i.
  (Commit( a, b, n ) @ #i)
 ∧
  (∀ #j.
    (Running( a, b, n ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2. (Commit( a2, b2, n ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ C #r. (IssuerKeyReveal( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥) ∧
  (∀ C #r. (RevealEK( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥) ∧
  (∀ C #r. (RevealTsk( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥)"
*/
simplify
solve( !F_IssuerPK( $I, pk(x.2) ) ▶₁ #i )
  case ISSUER_SETUP
  solve( In_S( $PS, $AS,
               <'cre', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                plus(multp(~isk, multp(x, x.1)),
                     multp(multp(x, ~isk), multp(x.1, PRF(x.2, x.3, x.4)))), 
                multp(PRF(x.2, x.3, x.4), multp(~isk, multp(x, x.1)))>
         ) ▶₀ #i )
    case ChanIn_S
    solve( In_S( $AS, $PS,
                 aenc(<'creI', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                       plus(multp(~isk, multp(x, x.1)),
                            multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                      >,
                      pk(~sk_ek))
           ) ▶₀ #vr.3 )
      case ChanIn_S_case_2
      solve( !KU( aenc(<'creI', multp(x, x.1), 
                        multp(~isk, multp(x, x.1)), 
                        plus(multp(~isk, multp(x, x.1)),
                             multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                       >,
                       pk(~sk_ek))
             ) @ #vk )
        case ISSUER_JOIN_TWO
        solve( !KU( multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)) ) @ #vk.4 )
          case AS_JOIN_TWO
          solve( !KU( H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)),
                         U(x, ~P1), pk(~isk), ~ni.1)
                 ) @ #vk.6 )
            case AS_JOIN_TWO
            solve( !KU( MAC(<'gamma', ~P1, 
                             multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)), 
                             H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)), U(~u, ~P1), pk(~isk),
                                ~ni), 
                             plus(~u,
                                  multp(H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)), U(~u, ~P1),
                                           pk(~isk), ~ni),
                                        PRF(~DAASeed, ~Ki, ~cnt)))
                            >,
                            ~km.1)
                   ) @ #vk.9 )
              case AS_JOIN_TWO
              solve( In_S( $AS, $PS, aenc(<'ISSUER_REQ', ~km, ~ni>, pk(~sk_ek))
                     ) ▶₀ #vr.5 )
                case ChanIn_S_case_2
                solve( !KU( plus(~u,
                                 multp(H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)), U(~u, ~P1),
                                          pk(~isk), ~ni),
                                       PRF(~DAASeed, ~Ki, ~cnt)))
                       ) @ #vk.9 )
                  case AS_JOIN_TWO
                  solve( !KU( aenc(<'ISSUER_REQ', ~km, ~ni>, pk(~sk_ek)) ) @ #vk.10 )
                    case ISSUER_JOIN_ONE
                    SOLVED // trace found
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy_cre:
  all-traces
  "∀ A B x #i.
    (Secret( A, B, x ) @ #i) ⇒
    ((((¬(∃ #k. K( x ) @ #k)) ∨
       (∃ C #r. (IssuerKeyReveal( C ) @ #r) ∧ (Honest( C ) @ #i))) ∨
      (∃ C #r. (RevealEK( C ) @ #r) ∧ (Honest( C ) @ #i))) ∨
     (∃ C #r. (RevealTsk( C ) @ #r) ∧ (Honest( C ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B x #i.
  (Secret( A, B, x ) @ #i)
 ∧
  (∃ #k. (K( x ) @ #k)) ∧
  (∀ C #r. (IssuerKeyReveal( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥) ∧
  (∀ C #r. (RevealEK( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥) ∧
  (∀ C #r. (RevealTsk( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥)"
*/
simplify
solve( !F_IssuerPK( $I, pk(x.2) ) ▶₁ #i )
  case ISSUER_SETUP
  solve( !KU( multp(~isk, multp(x, x.1)) ) @ #vk.3 )
    case ISSUER_JOIN_TWO
    solve( !KU( ~sk_ek ) @ #vk.14 )
      case PLATFORM_CORRUPT
      solve( !KU( plus(multp(~isk, multp(~creRandom, ~P1)),
                       multp(multp(~creRandom, ~isk), multp(~P1, PRF(x, x.1, x.2))))
             ) @ #vk.5 )
        case ISSUER_JOIN_TWO
        solve( !KU( multp(~P1, PRF(x, x.1, x.2)) ) @ #vk.9 )
          case AS_JOIN_TWO
          solve( !KU( H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)),
                         U(x, ~P1), pk(~isk), ~ni)
                 ) @ #vk.11 )
            case AS_JOIN_TWO
            solve( !KU( MAC(<'gamma', ~P1, 
                             multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)), 
                             H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)), U(~u, ~P1), pk(~isk),
                                ~ni), 
                             plus(~u,
                                  multp(H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)), U(~u, ~P1),
                                           pk(~isk), ~ni),
                                        PRF(~DAASeed, ~Ki, ~cnt)))
                            >,
                            ~km)
                   ) @ #vk.14 )
              case AS_JOIN_TWO
              solve( In_S( $PS, $AS,
                           <'cre', multp(~creRandom, ~P1), 
                            multp(~isk, multp(~creRandom, ~P1)), 
                            plus(multp(~isk, multp(~creRandom, ~P1)),
                                 multp(multp(~creRandom, ~isk),
                                       multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)))), 
                            multp(PRF(~DAASeed, ~Ki, ~cnt),
                                  multp(~isk, multp(~creRandom, ~P1)))
                           >
                     ) ▶₀ #i )
                case ChanIn_S
                solve( In_S( $AS, $PS, aenc(<'ISSUER_REQ', ~km, ~ni>, pk(~sk_ek.1))
                       ) ▶₀ #vr.16 )
                  case ChanIn_S_case_2
                  solve( !KU( aenc(<'ISSUER_REQ', ~km, ~ni>, pk(~sk_ek.1))
                         ) @ #vk.15 )
                    case c_aenc
                    solve( !KU( ~km ) @ #vk.20 )
                      case ISSUER_JOIN_ONE
                      solve( In_S( $AS, $PS,
                                   aenc(<'creI', multp(~creRandom, ~P1), 
                                         multp(~isk, multp(~creRandom, ~P1)), 
                                         plus(multp(~isk, multp(~creRandom, ~P1)),
                                              multp(multp(~creRandom, ~isk),
                                                    multp(~P1, PRF(~DAASeed, ~Ki, ~cnt))))
                                        >,
                                        pk(~sk_ek.1))
                             ) ▶₀ #vr.24 )
                        case ChanIn_S_case_2
                        solve( !KU( aenc(<'creI', multp(~creRandom, ~P1), 
                                          multp(~isk, multp(~creRandom, ~P1)), 
                                          plus(multp(~isk, multp(~creRandom, ~P1)),
                                               multp(multp(~creRandom, ~isk),
                                                     multp(~P1, PRF(~DAASeed, ~Ki, ~cnt))))
                                         >,
                                         pk(~sk_ek.1))
                               ) @ #vk.22 )
                          case c_aenc
                          solve( !KU( ~ni ) @ #vk.23 )
                            case ISSUER_JOIN_ONE
                            solve( !KU( multp(~creRandom, ~P1) ) @ #vk.19 )
                              case ISSUER_JOIN_TWO
                              solve( !KU( plus(~u,
                                               multp(H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)),
                                                        U(~u, ~P1), pk(~isk), ~ni),
                                                     PRF(~DAASeed, ~Ki, ~cnt)))
                                     ) @ #vk.21 )
                                case AS_JOIN_TWO
                                solve( !KU( pk(~sk_ek.1) ) @ #vk.22 )
                                  case PLATFORM_SETUP
                                  SOLVED // trace found
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma can_be_deanonymised:
  exists-trace
  "∃ AS PS sigma tsk #i #j #k #l.
    (((PlatformStart( AS, PS ) @ #i) ∧ (RevealPSTsk( PS, tsk ) @ #j)) ∧
     (ASSendFullSignature( AS, PS, sigma ) @ #k)) ∧
    (DeAnonymised( PS, tsk, sigma ) @ #l)"
/*
guarded formula characterizing all satisfying traces:
"∃ AS PS sigma tsk #i #j #k #l.
  (PlatformStart( AS, PS ) @ #i) ∧
  (RevealPSTsk( PS, tsk ) @ #j) ∧
  (ASSendFullSignature( AS, PS, sigma ) @ #k) ∧
  (DeAnonymised( PS, tsk, sigma ) @ #l)"
*/
simplify
solve( !F_PSTsk( $PS, PRF(x, x.1, x.2) ) ▶₀ #j )
  case PS_JOIN_ONE
  solve( !F_BSN( $I, bsn ) ▶₁ #l )
    case ISSUER_SETUP
    solve( !F_IssuerPK( $I, pk(x.3) ) ▶₂ #l )
      case ISSUER_SETUP
      solve( In_S( $PS, $AS,
                   <~sid, 'PSSignResp', multp(PRF(~DAASeed, ~Ki, ~cnt), ~J), 
                    H4(H3(multp(x, multp(x.1, x.2)),
                          multp(x, multp(~isk, multp(x.1, x.2))),
                          multp(x,
                                plus(multp(~isk, multp(x.1, x.2)),
                                     multp(multp(x.1, ~isk),
                                           multp(x.2, PRF(~DAASeed, ~Ki, ~cnt))))),
                          multp(x,
                                multp(PRF(~DAASeed, ~Ki, ~cnt), multp(~isk, multp(x.1, x.2)))),
                          nv),
                       m, ~J, multp(PRF(~DAASeed, ~Ki, ~cnt), ~J), ~bottom,
                       multp(~randS1, ~J),
                       multp(~randS1, multp(x, multp(~isk, multp(x.1, x.2)))), ~nt), 
                    s(~randS1, PRF(~DAASeed, ~Ki, ~cnt)), ~nt>
             ) ▶₀ #k )
        case ChanIn_S
        solve( St_AS_SIGN_ONE( ~sid, $AS, multp(x, multp(x.1, x.2)),
                               multp(x, multp(~isk, multp(x.1, x.2))),
                               multp(x,
                                     plus(multp(~isk, multp(x.1, x.2)),
                                          multp(multp(x.1, ~isk),
                                                multp(x.2, PRF(~DAASeed, ~Ki, ~cnt))))),
                               multp(x,
                                     multp(PRF(~DAASeed, ~Ki, ~cnt), multp(~isk, multp(x.1, x.2)))),
                               ~J, nv, m.1
               ) ▶₁ #k )
          case AS_SIGN_ONE
          solve( !RevealedPSTsk( $PS, PRF(~DAASeed, ~Ki, ~cnt) ) ▶₃ #l.1 )
            case REVEAL_TSK
            solve( In_S( $AS.1, $PS, aenc(<'ISSUER_REQ', km, ni>, pk(~sk_ek))
                   ) ▶₀ #vr )
              case ChanIn_S_case_2
              solve( !KU( aenc(<'ISSUER_REQ', km, ni>, pk(~sk_ek)) ) @ #vk.28 )
                case ISSUER_JOIN_ONE
                solve( In_S( $AS, $PS,
                             <~sid, 'PSSign', 
                              H3(multp(~l, multp(x, x.1)), multp(~l, multp(~isk, multp(x, x.1))),
                                 multp(~l,
                                       plus(multp(~isk, multp(x, x.1)),
                                            multp(multp(x, ~isk),
                                                  multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))),
                                 multp(~l,
                                       multp(PRF(~DAASeed, ~Ki, ~cnt), multp(~isk, multp(x, x.1)))),
                                 nv), 
                              ~J, multp(~l, multp(~isk, multp(x, x.1))), m, ~bottom>
                       ) ▶₀ #vr.4 )
                  case ChanIn_S_case_2
                  solve( In_S( $PS, $AS,
                               <'cre', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                                plus(multp(~isk, multp(x, x.1)),
                                     multp(multp(x, ~isk), multp(x.1, PRF(~DAASeed, ~Ki, ~cnt)))), 
                                multp(PRF(~DAASeed, ~Ki, ~cnt), multp(~isk, multp(x, x.1)))>
                         ) ▶₀ #vr.6 )
                    case ChanIn_S
                    solve( In_S( $AS, $PS,
                                 aenc(<'creI', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                                       plus(multp(~isk, multp(x, x.1)),
                                            multp(multp(x, ~isk),
                                                  multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                                      >,
                                      pk(~sk_ek))
                           ) ▶₀ #vr.16 )
                      case ChanIn_S_case_2
                      solve( !KU( aenc(<'creI', multp(x, x.1), 
                                        multp(~isk, multp(x, x.1)), 
                                        plus(multp(~isk, multp(x, x.1)),
                                             multp(multp(x, ~isk),
                                                   multp(x.1, PRF(~DAASeed, ~Ki, ~cnt))))
                                       >,
                                       pk(~sk_ek))
                             ) @ #vk.28 )
                        case ISSUER_JOIN_TWO
                        solve( !KU( multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)) ) @ #vk.32 )
                          case AS_JOIN_TWO
                          solve( !KU( H2(~P1, multp(~P1, PRF(~DAASeed, ~Ki, ~cnt)),
                                         U(x, ~P1), pk(~isk), ~ni)
                                 ) @ #vk.34 )
                            case AS_JOIN_TWO
                            solve( !KU( ~J ) @ #vk.22 )
                              case AS_SIGN_TWO
                              solve( !KU( ~nt ) @ #vk.32 )
                                case AS_SIGN_TWO
                                solve( !KU( s(~randS1, PRF(~DAASeed, ~Ki, ~cnt)) ) @ #vk.30 )
                                  case AS_SIGN_TWO
                                  solve( !KU( multp(~l, multp(~creRandom, ~P1)) ) @ #vk.21 )
                                    case AS_SIGN_TWO
                                    solve( !KU( multp(~l, multp(~isk, multp(~creRandom, ~P1)))
                                           ) @ #vk.25 )
                                      case AS_SIGN_TWO
                                      solve( !KU( multp(~l,
                                                        plus(multp(~isk, multp(~creRandom, ~P1)),
                                                             multp(multp(~creRandom, ~isk),
                                                                   multp(~P1,
                                                                         PRF(~DAASeed, ~Ki,
                                                                             ~cnt)))))
                                             ) @ #vk.27 )
                                        case AS_SIGN_TWO
                                        solve( !KU( multp(~l,
                                                          multp(PRF(~DAASeed, ~Ki, ~cnt),
                                                                multp(~isk,
                                                                      multp(~creRandom, ~P1))))
                                               ) @ #vk.29 )
                                          case AS_SIGN_TWO
                                          solve( !KU( multp(PRF(~DAASeed, ~Ki, ~cnt), ~J)
                                                 ) @ #vk.30 )
                                            case AS_SIGN_TWO
                                            solve( In_S( $PS.1, $AS,
                                                         <'cre', multp(x, x.1), 
                                                          multp(~isk, multp(x, x.1)), 
                                                          plus(multp(~isk, multp(x, x.1)),
                                                               multp(multp(x, ~isk),
                                                                     multp(x.1,
                                                                           PRF(x.2, x.3, x.4)))), 
                                                          multp(PRF(x.2, x.3, x.4),
                                                                multp(~isk, multp(x, x.1)))
                                                         >
                                                   ) ▶₀ #vr.59 )
                                              case ChanIn_S
                                              solve( In_S( $AS, $PS,
                                                           <~sid.1, 'PSSign', H3(R, S, T, W, nv.1), 
                                                            ~J, S, m.2, bsn>
                                                     ) ▶₀ #vr.60 )
                                                case ChanIn_S
                                                solve( !KU( H4(H3(multp(~l, multp(~creRandom, ~P1)),
                                                                  multp(~l,
                                                                        multp(~isk,
                                                                              multp(~creRandom,
                                                                                    ~P1))),
                                                                  multp(~l,
                                                                        plus(multp(~isk,
                                                                                   multp(~creRandom,
                                                                                         ~P1)),
                                                                             multp(multp(~creRandom,
                                                                                         ~isk),
                                                                                   multp(~P1,
                                                                                         PRF(~DAASeed,
                                                                                             ~Ki,
                                                                                             ~cnt))))),
                                                                  multp(~l,
                                                                        multp(PRF(~DAASeed, ~Ki,
                                                                                  ~cnt),
                                                                              multp(~isk,
                                                                                    multp(~creRandom,
                                                                                          ~P1)))),
                                                                  nv),
                                                               m, ~J,
                                                               multp(PRF(~DAASeed, ~Ki, ~cnt), ~J),
                                                               ~bottom, multp(~randS1, ~J),
                                                               multp(~randS1,
                                                                     multp(~l,
                                                                           multp(~isk,
                                                                                 multp(~creRandom,
                                                                                       ~P1)))),
                                                               ~nt)
                                                       ) @ #vk.31 )
                                                  case AS_SIGN_TWO
                                                  solve( !KU( plus(~u,
                                                                   multp(H2(~P1,
                                                                            multp(~P1,
                                                                                  PRF(~DAASeed, ~Ki,
                                                                                      ~cnt)),
                                                                            U(~u, ~P1), pk(~isk),
                                                                            ~ni),
                                                                         PRF(~DAASeed, ~Ki, ~cnt)))
                                                         ) @ #vk.36 )
                                                    case AS_JOIN_TWO
                                                    solve( !KU( MAC(<'gamma', ~P1, 
                                                                     multp(~P1,
                                                                           PRF(~DAASeed, ~Ki,
                                                                               ~cnt)), 
                                                                     H2(~P1,
                                                                        multp(~P1,
                                                                              PRF(~DAASeed, ~Ki,
                                                                                  ~cnt)),
                                                                        U(~u, ~P1), pk(~isk), ~ni), 
                                                                     plus(~u,
                                                                          multp(H2(~P1,
                                                                                   multp(~P1,
                                                                                         PRF(~DAASeed,
                                                                                             ~Ki,
                                                                                             ~cnt)),
                                                                                   U(~u, ~P1),
                                                                                   pk(~isk), ~ni),
                                                                                PRF(~DAASeed, ~Ki,
                                                                                    ~cnt)))
                                                                    >,
                                                                    ~km)
                                                           ) @ #vk.37 )
                                                      case AS_JOIN_TWO
                                                      SOLVED // trace found
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma user_controlled_independent_link_tokens:
  all-traces
  "∀ k kP j jP #i.
    ((CompareLinkTokens( k, kP, j, jP ) @ #i) ∧ (¬(j = jP))) ⇒
    (¬(k = kP))"
/*
guarded formula characterizing all counter-examples:
"∃ k kP j jP #i.
  (CompareLinkTokens( k, kP, j, jP ) @ #i) ∧ (¬(j = jP)) ∧ (k = kP)"
*/
simplify
solve( Sigma( <'sigma', R, S, T, W, j, k, h, s(randS1, tsk), nv, nt
              >
       ) ▶₀ #i )
  case AS_SIGN_TWO
  solve( Sigma( <'sigma', RP, SP, TP, WP, jP, 
                 multp(PRF(~DAASeed, ~Ki, ~cnt), ~J.1), hP, ssP, nvP, ntP>
         ) ▶₁ #i )
    case AS_SIGN_TWO
    solve( In_S( $PS.1, $AS,
                 <'cre', multp(x, x.1), multp(~isk, multp(x, x.1)), 
                  plus(multp(~isk, multp(x, x.1)),
                       multp(multp(x, ~isk), multp(x.1, PRF(x.2, x.3, x.4)))), 
                  multp(PRF(x.2, x.3, x.4), multp(~isk, multp(x, x.1)))>
           ) ▶₀ #vr.5 )
      case ChanIn_S
      solve( In_S( $AS, $PS,
                   <~sid, 'PSSign', H3(R, S, T, W, nv), ~J.1, S, m, bsn>
             ) ▶₀ #vr.6 )
        case ChanIn_S_case_1
        by contradiction /* from formulas */
      next
        case ChanIn_S_case_2
        solve( In_S( $AS.1, $PS, aenc(<'ISSUER_REQ', km, ni>, pk(~sk_ek))
               ) ▶₀ #vr.8 )
          case ChanIn_S_case_1
          by contradiction /* from formulas */
        next
          case ChanIn_S_case_2
          solve( !KU( aenc(<'ISSUER_REQ', km, ni>, pk(~sk_ek)) ) @ #vk.9 )
            case ISSUER_JOIN_ONE
            solve( In_S( $PS.1, $AS,
                         <'cre', multp(x.2, x.3), multp(~isk, multp(x.2, x.3)), 
                          plus(multp(~isk, multp(x.2, x.3)),
                               multp(multp(x.2, ~isk), multp(x.3, PRF(x.4, x.5, x.6)))), 
                          multp(PRF(x.4, x.5, x.6), multp(~isk, multp(x.2, x.3)))>
                   ) ▶₀ #vr.13 )
              case ChanIn_S
              by solve( In_S( $AS, $PS,
                              <~sid.1, 'PSSign', H3(R, S, T, W, nv.1), ~J, S, m.1, bsn>
                        ) ▶₀ #vr.14 )
            qed
          next
            case c_aenc
            solve( In_S( $PS.1, $AS,
                         <'cre', multp(x.2, x.3), multp(~isk, multp(x.2, x.3)), 
                          plus(multp(~isk, multp(x.2, x.3)),
                               multp(multp(x.2, ~isk), multp(x.3, PRF(x.4, x.5, x.6)))), 
                          multp(PRF(x.4, x.5, x.6), multp(~isk, multp(x.2, x.3)))>
                   ) ▶₀ #vr.13 )
              case ChanIn_S
              by solve( In_S( $AS, $PS,
                              <~sid.1, 'PSSign', H3(R, S, T, W, nv.1), ~J, S, m.1, bsn>
                        ) ▶₀ #vr.14 )
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end