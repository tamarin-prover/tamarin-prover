theory Phoolproof_MA 
begin

/* 
============
INTRODUCTION
============
* Protocol:	Phoolproof
* Modeler: 	Lara Schmid
* Date: 	March 2020
* Source:	[1] "Advancing the Formal Foundations for Voting Protocols", Lara Schmid, PhD Thesis, ETH ZÃ¼rich.

=========
RESULTS: 
=========
proven with oracle o_Phoolproof_MA

// for -D=infallible
- lemma functional functional (exists-trace): verified (9 steps)
- lemma message_authentication (all-traces): verified (8 steps)

// for -D=untrained
- lemma functional (exists-trace): verified (11 steps)
- lemma message_authentication (all-traces): verified (7 steps)

*/


/* built-ins */
builtins: signing, asymmetric-encryption, hashing, symmetric-encryption
// in contrast to the thesis text, we use here the built in signing and verification functions sign/2 and verify/3 that obey the equation verify(sign(x.1, x.2), x.1, pk(x.2)) = true

functions: pw/1 // used to give password a type.


/* only allow human agent rules (corresponding to infallible human) */
#ifdef infallible
axiom only_infallible_humans:  
  	"not (Ex #k. H('Human') @k)" 
#endif

/* only allow for untrained human rules (corresponding to fallible human) */
#ifdef ruleBased
axiom only_fallible_humansRB:  
  	"not (Ex H x #k. H_role(H,x) @k)" 
#endif
#ifdef untrained
axiom only_fallible_humansU:  
  	"not (Ex H x #k. H_role(H,x) @k)"
#endif


tactic: functional 
presort: C
prio:
  regex "AgSt_S7"
prio:
  regex "AgSt"
prio:
  regex "~skD"
prio:
  regex "~skS"

tactic: message_authentication 
presort: C
prio:
  regex "AgSt_S7"
prio:
  regex "!KU\( ~skD"
prio:
  regex "!HK\( \$H, 'm', ~skD"

/* untrained human rules*/ 
// insecure channels
rule H_fresh:
        [ Fr(~x) ]
	--[ Fresh($H,$x.1,~x), !HK($H,$x.1,~x),
		H($H) ]->
	[ !HK($H,$x.1,~x)]

rule H_send: 
	[ !HK($H,$x.1,x.2) ]
	--[ Send($H,$x.1,x.2),
		H($H) ]->
	[ Out(<$x.1,x.2>)]

rule H_receive: 
	[ In( <$x.1,x.2>) ]
	--[ Receive($H,$x.1,x.2), !HK($H,$x.1, x.2),
		H($H) ]->
	[ !HK($H,$x.1, x.2) ]

// secure channel
rule H_send_S:
  	[ !HK($H,$x.1,x.2) ]
	--[ Send($H,$x.1,x.2),
		H($H), To($A)]->
	[ Out_S($H,$A,$x.1,x.2) ]

rule H_receive_S:
	[ In_S( $A,$H, $x.1, x.2 ) ]
	--[ Receive($H,$x.1,x.2), !HK($H,$x.1,x.2), 
		H($H), From($A)]->
	[ !HK($H,$x.1,x.2) ]

rule H_send_S2: 
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2) ]
	--[ Send($H,$x.1,x.2), 
  	    Send($H,$y.1,y.2), 
	    H($H), To($A)]->
	[ Out_S($H,$A,<$x.1,$y.1>,<x.2,y.2>) ]


rule H_send_S3:
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2) ]
	--[ Send($H,$x.1,x.2), 
	    Send($H,$y.1,y.2),
	    Send($H,$z.1,z.2), 
	    H($H), To($A)]->
	[ Out_S($H,$A,<$x.1,$y.1,$z.1>,<x.2,y.2,z.2>) ]

rule H_send_S4:
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2), !HK($H,$w.1,w.2) ]
	--[     Send($H,$x.1,x.2), 
		Send($H,$y.1,y.2),
		Send($H,$z.1,z.2), 
		Send($H,$w.1,w.2), 
		H($H), To($A)]->
	[ Out_S($H,$A,<$x.1,$y.1,$z.1,$w.1>,<x.2,y.2,z.2,w.2>) ]


rule H_receive_S2:
	[ In_S( $A,$H, <$x.1,$y.1>, <x.2,y.2> ) ]
	--[ Receive($H,$x.1,x.2), 
		Receive($H,$y.1,y.2), !HK($H,$x.1,x.2),!HK($H,$y.1,y.2),
		H($H), From($A)]->
	[ !HK($H,$x.1,x.2),!HK($H,$y.1,y.2) ]


rule H_receive_S4:
	[ In_S( $A,$H, <$x.1,$y.1,$z.1,$v.1>,<x.2,y.2,z.2,v.2> ) ]
	--[     Receive($H,$x.1,x.2), 
		Receive($H,$y.1,y.2), 
		Receive($H,$z.1,z.2), 
		Receive($H,$v.1,v.2), !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2), !HK($H,$v.1,v.2),
		H($H), From($A)]->
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2), !HK($H,$v.1,v.2) ]



/* Channel rules */
rule ChanOut_S:
	[Out_S($A,$B,xn,x)]
	--[ChanOut_S($A,$B,xn,x)]->
	[!Sec($A,$B,xn,x)]

rule ChanIn_S:
	[!Sec($A,$B,xn,x)]
	--[ChanIn_S($A,$B,xn,x)]->
	[In_S($A,$B,xn,x)]

rule ChanOut_C:
	[Out_C($A,$B,xn,x)]
	--[ChanOut_C($A,$B,xn,x)]->
	[!Conf($B,xn,x)]

rule ChanIn_C:
	[!Conf($B,xn,x), In($A)]
	--[ChanIn_C($A,$B,xn,x)]->
	[In_C($A,$B,xn,x)]

rule ChanIn_CAdv:
	[In(<$A,$B,xn,x>)]
	--[]->
	[In_C($A,$B,xn,x)]

rule ChanOut_A:
	[Out_A($A,$B,xn,x)]
	--[ChanOut_A($A,$B,xn,x)]->
	[!Auth($A,xn,x), Out(<$A,$B,xn,x>)]
rule ChanIn_A:
	[!Auth($A,xn,x), In($B)]
	--[ChanIn_A($A,$B,xn,x)]->
	[In_A($A,$B,xn,x)]


/* setup */
rule passworddistribution:
	[Fr(~pw)]
	--[PasswordHS($X,$Y,~pw)]->
	[!Password($X,$Y,~pw)]
rule publickeyinfrastructure:
	[Fr(~skX)]
	--[LontermKey($X,~skX)]->
	[!Ltk($X, ~skX),!Pk($X, pk(~skX)), Out(pk(~skX)) ]

rule Setup: 
  	[ Fr(~m), !Password($H,$S,~pw), !Ltk($S, ~skS), !Ltk($D, ~skD) ] 
  	--[ Setup($H), Roles($H,$D,$P,$S), Device($H,$D), User($idH,$H)
		, InitK($H,'D',$D), InitK($H,'P',$P), InitK($H,'S',$S), InitK($H,'m',~m), InitK($H,'pw',pw(~pw)), InitK($H,'idH',$idH)
	]-> 
  	[ AgSt_D0($D,'D_0',< $H, $S, ~skD, $idH, pk(~skS) >)
	, AgSt_S0($S,'S_0',< $H, $D, pk(~skD), ~skS, pw(~pw), $idH >) 
	                  
	, !HK($H,'D',$D), !HK($H,'P',$P), !HK($H,'S',$S), !HK($H,'m',~m), !HK($H,'pw',pw(~pw)), !HK($H,'idH',$idH)
	, AgSt_H0($H,'H_0',< $D, $P, $S, ~m, pw(~pw), $idH >) 
  	]

/* agent rules */
rule D_1: 
	[ AgSt_D0($D,'D_0',< $H, $S, ~skD, $idH, pk(~skS) >), In_S($H,$D,<'S','m'>,<$S,~m>) ]
 	--[ ]->
	[ AgSt_D2($D,'D_2',< $H, $S, ~skD, $idH, pk(~skS), ~m >), Out(<'S',$S>) ]
rule D_5: 
	[ AgSt_D2($D,'D_2',< $H, $S, ~skD, $idH, pk(~skS), ~m >), In(<~chall,sign(~chall,~skS)>) ]
 	--[ Dfin() ]->
	[  Out(<$idH,~m, sign(<$idH,~chall,~m>,~skD)>) ]

rule S_3:
	[ AgSt_S0($S,'S_0',< $H, $D, pk(~skD), ~skS, pw(~pw), $idH >), In('hello'), Fr(~chall) ]
	--[ ]->
	[ AgSt_S4($S,'S_4',< $H, $D, pk(~skD), ~skS, pw(~pw), $idH, ~chall >), Out(<~chall,sign(~chall,~skS)>) ]
rule S_7:
	[ AgSt_S4($S,'S_4',< $H, $D, pk(~skD), ~skS, pw(~pw), $idH, ~chall >), In(<$idH,~m, sign(<$idH,~chall,~m>,~skD)>)  ]
	--[ ]->
	[ AgSt_S7($S,'S_7',< $H, $D, pk(~skD), ~skS, pw(~pw), $idH, ~chall, ~m >)]
rule S_9:
	[ AgSt_S7($S,'S_7',< $H, $D, pk(~skD), ~skS, pw(~pw), $idH, ~chall, ~m >), In(<$idH,~m,pw(~pw)>)]
	--[Commit($S,$H,~m)]->
	[ ]


/* human agent rules */
rule H_1:
	[ AgSt_H0($H,'H_0',< $D, $P, $S, ~m, pw(~pw), $idH >) ]
	--[H_role($H,'1'), Send($H,'S',$S), Send($H,'m',~m)]->
	[ AgSt_H1($H,'H_1',< $D, $P, $S, ~m, pw(~pw), $idH >), Out_S($H,$D,<'S','m'>,<$S,~m>)  ]
rule H_8:           
	[ AgSt_H1($H,'H_1',< $D, $P, $S, ~m, pw(~pw), $idH >) ]
	--[H_role($H,'5'),Send($H,'pw',pw(~pw)), Send($H,'idH',$idH) ]->
	[ Out(< <'pw','idH'>,<pw(~pw),$idH> >)]

/* axioms assumptions */

/* Every Human starts in the initial state */
axiom setup_for_IK:
	"All H #i. H(H) @i ==> Ex #j. Setup(H) @j & j<i"

/* No secure channels between humans exist. Humans
   must communicate over incecure channels.         
   This assumption is necessary to remove unsolved chains
   in the protocol model. It is not a strong restriction
   because the protocols do not rely on human to human 
   for security. */
axiom not_Chan_S_human_to_human:
	"All A B mn m #i #j #k.
		ChanOut_S(A,B,mn,m) @i & H(A) @j & H(B) @k ==> F"

/* Assumption: Two distinct roles are not executed by the same agent */
axiom notSameRole:
	"All H1 H2 D1 D2 P1 P2 S1 S2 #i #j. Roles(H1,D1,P1,S1) @i & Roles(H2,D2,P2,S2) @j ==>
		  not H1 = D1
		& not H1 = D2
		& not H1 = P1
		& not H1 = P2
		& not H1 = S1
		& not H1 = S2
		& not D1 = P1
		& not D1 = P2
		& not D1 = S1
		& not D1 = S2
		& not P1 = S1
		& not P1 = S2
	"
/* Assumption: Two humans do not share a single device */
axiom Device:
	"All H1 H2 D #i #j. Device(H1,D) @i & Device (H2,D) @j ==> H1=H2 "




/* lemmas */

/* Functionality Lemma */

lemma functional[heuristic={functional}]: exists-trace
	"(All H1 H2 #i #j. Setup(H1) @i & Setup(H2) @j ==> #i = #j) 
	& (Ex #k #n S m 
		.
		Dfin() @k
		& Commit(S,'Human',m) @n
		
		)"

/* Message Authentication */

lemma message_authentication[heuristic={message_authentication}]:
	"All S m #k. Commit(S,'Human',m) @k ==> 
		(Ex mn #i. Send('Human',mn,m) @i & i < k)" 







end

 
