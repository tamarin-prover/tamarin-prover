theory alethea_vot_ShHh_RF
begin


/* 
============
INTRODUCTION
============
* Protocol:	Alethea's voting phase
* Modeler: 	Lara Schmid
* Date: 	March 2020
* Source:	[1] "Advancing the Formal Foundations for Voting Protocols", Lara Schmid, PhD Thesis, ETH ZÃ¼rich.
* Notes:
- as S is honest, we do not model the auditors. nevertheless we model the posting of messages to BB, such that the adversary can still learn everything that auditors normally learn.

- as S is honest and there is an authentic channel from S to BB (i.e., only S can write to BB), we model S and BB together for simplification

========
RESULTS:
========
- lemma functional:
	LHS:	verified and checked, see proof file		
	RHS:	verified and checked, see proof file		 	

- lemma indivVerif_v: 
	LHS:	verified w/ oracle	
	RHS:	verified w/ oracle	
- lemma indivVerif_b:  
	LHS:	verified w/ oracle		
	RHS:	verified w/ oracle		
	
- lemma Observational_equivalence: (modeling receipt-freeness)
		verified w/ oracle (interactive mode and delete in between)


*/

/*============
SPECIFICATION:
============== */

/*=====================
Functions and equations 
======================= */
builtins: signing, asymmetric-encryption, hashing, symmetric-encryption, multiset

functions: 
zkp/3, 		//zero knowledge proof of mix and decrypt
verzkp/4, 	//verification of zkp
encp/3, decp/2, //encryption function
sg/2, ver/2 	//new signing function

equations: 

//encryption of x under pk(sk) and with randomness r; don't need randomness to decrypt it
decp(encp(x,r,pk(sk)),sk)=x,

//verification equation that returns the signed message: models that given a signature, can also see the signed plaintext (only if have public key, but adversary anyways has all pks). with this, do not explicitly have to always send the message in plaintext and signed, but only the signed one is enough.

ver(sg(m, sk), pk(sk)) = m 


tactic: indivVerif_v 
prio:
  regex "In_S"
prio:
	regex "AgSt"
prio:
	regex "~skS"
prio:
	regex "h\("
prio:
	regex "encp\("

tactic: indivVerif_b 
prio:
  regex "In_S"
prio:
	regex "AgSt"
prio:
	regex "~skS"
prio:
	regex "h\("
prio:
	regex "encp\("

/* ==========
Channel rules
============= */
rule ChanOut_S: [Out_S($A,$B,x)]--[ChanOut_S($A,$B,x)]->[!Sec($A,$B,x)]
rule ChanIn_S: [!Sec($A,$B,x)]--[ChanIn_S($A,$B,x)]->[In_S($A,$B,x)]
/*
rule ChanOut_C:	[Out_C($A,$B,x)]--[ChanOut_C($A,$B,x)]->[!Conf($B,x)]
rule ChanIn_C:	[!Conf($B,x), In($A)]--[ChanIn_C($A,$B,x)]->[In_C($A,$B,x)]
rule ChanIn_CAdv: [In(<$A,$B,x>)]--[]->[In_C($A,$B,x)]
*/
rule ChanOut_A: [Out_A($A,x)]--[ChanOut_A($A,x)]->[!Auth($A,x), Out(<$A,x>)]
rule ChanIn_A:	[!Auth($A,x)]--[ChanIn_A($A,x)]->[In_A($A,x)]


/* =====
Protocol
======== */

rule publickeyinfrastructure:
   [ Fr(~skX) ]--[ LongtermKey($X,~skX) ]-> [ !Ltk($X,~skX), !Pk($X,pk(~skX)), Out(pk(~skX)) ]


rule Setup: 
  	[ !Ltk('S',~skS), Fr(~x1), Fr(~x2) ] 
  	--[ 	Setup(),
		BB_pskDs('BB',<'spkDSG', pk(h('H1',~x1)) + pk(h('H2',~x2))>), //corresponds to singal BB_SG in thesis
		Voter('H1'),
		Voter('H2')		
	]-> 
  	[ AgSt_H0('H1',< 'D1','BB',diff($v1,$v2)>)
	, AgSt_H0('H2',< 'D2','BB',diff($v2,$v1)>)
	
	, AgSt_D0('D1',< 'H1','S',pk(~skS),h('H1',~x1) >)
	, AgSt_D0('D2',< 'H2','S',pk(~skS),h('H2',~x2) >)

	, Out_A('BB',<'spkDSG', pk(h('H1',~x1)) + pk(h('H2',~x2))>) //corresponds to [pk_D^SG] in thesis
	
	, AgSt_SBB('S','BB', <~skS, h('H1',~x1)+ h('H2',~x2)>) // as S is trusted, model S and BB as one entity
 	//S also knows ~x1, ~x2, but as S is honest (will not use it in another context) it is enough to model it like this

	//for receipt freeness (RF): output knowledge of H1, except for the vote which is always claimed to be $v1
	, Out(<'H1',< 'D1','BB', $v1>>)
		
  	]

rule H_1:
	[ AgSt_H0($H, <$D, $BB, $v>) ]
	--[	Vote($H,$v)
	]->
	[ AgSt_H1($H, <$D, $BB, $v>), Out_S($H,$D,$v)
	  // RF: H does not learn any new terms, so there is nothing to output	
	]

rule D_1:
	[ AgSt_D0($D, <$H,$S,pkS,sskD >), In_S($H,$D,v), Fr(~r) ]
	--[  ]->
	[ Out_S($D,$H, sg(encp(v,~r,pkS),sskD) )
	]

rule H_2:
	[ AgSt_H1($H, <$D, $BB, $v>), In_S($D,$H, b) ]
	--[	Comm_H_vote($H,$S,$v),
		Comm_H_ballot($H,$S,b)
	   	
	]->
	[ AgSt_H2($H, <$D, $BB, $v, b>),
	  Out(b)
	  // RF: everything H newly learns is already sent to the adversary, so nothing additional to output
	]

rule S_1:
	[ AgSt_SBB($S, $BB, <~skS, sskDa + sskDb>), 
	  //implicitly (by pattern matching) ensured that only accept correct signatures and all of them only once
	  In(sg(encp(va,ra,pk(~skS)),sskDa)), 
   	  In(sg(encp(vb,rb,pk(~skS)),sskDb))
        ]
	--[  	Learn_S_ballot($S,sg(encp(va,ra,pk(~skS)),sskDa)),
		Learn_S_ballot($S,sg(encp(vb,rb,pk(~skS)),sskDb)),
	  	BB_rec($BB,<'b', sg(encp(va,ra,pk(~skS)),sskDa) +
			  	 sg(encp(vb,rb,pk(~skS)),sskDb)>),
		BB_woS($BB,<'bPrime', encp(va,ra,pk(~skS)) +
			       	      encp(vb,rb,pk(~skS))>),
		BB_tal($BB,<'v', va+vb>),
		BB_zkp($BB,<'zkp', zkp(<encp(va,ra,pk(~skS)), encp(vb,rb,pk(~skS))>,
				<va,vb>,~skS)>)
	]->
	[ Out_A($BB, <'b', sg(encp(va,ra,pk(~skS)),sskDa) +
  			   sg(encp(vb,rb,pk(~skS)),sskDb)>)
	, Out_A($BB, <'bPrime', encp(va,ra,pk(~skS)) +
			       encp(vb,rb,pk(~skS))  >)
	, Out_A($BB, <'v', va+vb>)
	, Out_A($BB, <'zkp', zkp(<encp(va,ra,pk(~skS)), encp(vb,rb,pk(~skS))>,
				<va,vb>,~skS)>) ]
	
rule H_3: 
	[ AgSt_H2($H, <$D, $BB, $v, b>),
	  In_A($BB, <'b', ba + bbb >)
	]
	--[	Verify($H,b,ba + bbb)
	]->
	[ //RF: everything H learns is already known to adversary (it is received on an authentic channel), so nothing additional to output
        ]



/* =========
RESTRICTIONS
========== */

// there is only one setup
restriction OneSetup:
	"All #i #j. Setup() @i & Setup() @j ==> #i = #j "


/* ====
LEMMAS 
======= */
/* ==================
Functional properties
=================== */

lemma functional: exists-trace
	" Ex H1 H2 v1 v2
		S #i b1
		#j b2		
		BB #k #l #m #n 
		.
		not (H1 = H2) & not (v1 = v2)
		& Comm_H_vote(H1,S,v1) @i
		& Comm_H_ballot(H1,S,b1) @i
		& Comm_H_vote(H2,S,v2) @j
		& Comm_H_ballot(H2,S,b2) @j
		
		& BB_rec(BB,<'b', b1+b2 >) @k
		& BB_tal(BB,<'v', v1+v2>) @l

		& Verify(H1,b1,b1 + b2) @m
		& Verify(H2,b2,b1 + b2) @n

		"


/*=================================
Individual verifiability properties
=================================*/

lemma indivVerif_v[heuristic={indivVerif_v}]: 
	"All H v #i b #j bOther .
		Vote(H,v) @i 			
		& Verify(H,b,b + bOther) @j	
	==> Ex BB b2 #l r pkS sskD . 
		BB_rec(BB,<'b', b + b2 >) @l 	
		& b = sg(encp(v,r,pkS),sskD) " 	


lemma indivVerif_b[heuristic={indivVerif_b}]: 
	"All H b #j bOther .
		Verify(H,b,b + bOther) @j
	==> Ex BB b2 #l . 
		BB_rec(BB,<'b', b + b2 >) @l 
  	" 	



end

	     			   


