theory NAXOS_eCK begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: fst/1, h1/1, h2/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



section{* NAXOS *}

rule (modulo E) generate_ltk:
   [ Fr( ~ea ) ]
  --[ RegKey( $A ) ]->
   [ !Ltk( $A, ~ea ), !Pk( $A, 'g'^~ea ), Out( 'g'^~ea ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ex ), !Ltk( $A, ~ea ) ]
  -->
   [
   Init_1( ~ex, $A, $B, ~ea ), !Ephk( ~ex, ~ex ), Out( 'g'^h1(<~ex, ~ea>) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ex, $A, $B, ~ea ), !Pk( $B, 'g'^~eb ), In( Y ) ]
  --[
  Accept( ~ex,
          h2(<Y^~ea, 'g'^~eb^h1(<~ex, ~ea>), Y^h1(<~ex, ~ea>), $A, $B>)
  ),
  Sid( ~ex, <$A, $B, 'g'^h1(<~ex, ~ea>), Y, 'Init'> )
  ]->
   [
   !Sessk( ~ex,
           h2(<Y^~ea, 'g'^~eb^h1(<~ex, ~ea>), Y^h1(<~ex, ~ea>), $A, $B>)
   )
   ]

  /*
  rule (modulo AC) Init_2:
     [ Init_1( ~ex, $A, $B, ~ea ), !Pk( $B, 'g'^~x ), In( Y ) ]
    --[
    Accept( ~ex, h2(<z, 'g'^(~x*h1(<~ex, ~ea>)), z.1, $A, $B>) ),
    Sid( ~ex, <$A, $B, 'g'^h1(<~ex, ~ea>), Y, 'Init'> )
    ]->
     [ !Sessk( ~ex, h2(<z, 'g'^(~x*h1(<~ex, ~ea>)), z.1, $A, $B>) ) ]
    variants (modulo AC)
     1. ~ea   = ~ea.32
        ~ex   = ~ex.34
        Y     = Y.35
        z     = Y.35^~ea.32
        z.1   = Y.35^h1(<~ex.34, ~ea.32>)
    
     2. ~ea   = ~ea.34
        ~ex   = ~ex.36
        Y     = z.39^inv(~ea.34)
        z     = z.39
        z.1   = z.39^(h1(<~ex.36, ~ea.34>)*inv(~ea.34))
    
     3. ~ea   = ~ea.36
        ~ex   = ~ex.38
        Y     = z.43^inv(h1(<~ex.38, ~ea.36>))
        z     = z.43^(~ea.36*inv(h1(<~ex.38, ~ea.36>)))
        z.1   = z.43
    
     4. ~ea   = ~ea.348
        ~ex   = ~ex.350
        Y     = x.691^x.692
        z     = x.691^(~ea.348*x.692)
        z.1   = x.691^(x.692*h1(<~ex.350, ~ea.348>))
    
     5. ~ea   = ~ea.350
        ~ex   = ~ex.352
        Y     = x.696^inv((~ea.350*h1(<~ex.352, ~ea.350>)))
        z     = x.696^inv(h1(<~ex.352, ~ea.350>))
        z.1   = x.696^inv(~ea.350)
    
     6. ~ea   = ~ea.351
        ~ex   = ~ex.353
        Y     = x.697^inv((~ea.351*x.698))
        z     = x.697^inv(x.698)
        z.1   = x.697^(h1(<~ex.353, ~ea.351>)*inv((~ea.351*x.698)))
    
     7. ~ea   = ~ea.351
        ~ex   = ~ex.353
        Y     = x.697^inv((~ea.351*x.698*h1(<~ex.353, ~ea.351>)))
        z     = x.697^inv((x.698*h1(<~ex.353, ~ea.351>)))
        z.1   = x.697^inv((~ea.351*x.698))
    
     8. ~ea   = ~ea.351
        ~ex   = ~ex.353
        Y     = x.697^inv((x.698*h1(<~ex.353, ~ea.351>)))
        z     = x.697^(~ea.351*inv((x.698*h1(<~ex.353, ~ea.351>))))
        z.1   = x.697^inv(x.698)
    
     9. ~ea   = ~ea.351
        ~ex   = ~ex.353
        Y     = x.697^(x.698*inv(~ea.351))
        z     = x.697^x.698
        z.1   = x.697^(x.698*h1(<~ex.353, ~ea.351>)*inv(~ea.351))
    
    10. ~ea   = ~ea.351
        ~ex   = ~ex.353
        Y     = x.697^(x.698*inv(h1(<~ex.353, ~ea.351>)))
        z     = x.697^(~ea.351*x.698*inv(h1(<~ex.353, ~ea.351>)))
        z.1   = x.697^x.698
    
    11. ~ea   = ~ea.351
        ~ex   = ~ex.353
        Y     = x.697^(x.698*inv((~ea.351*h1(<~ex.353, ~ea.351>))))
        z     = x.697^(x.698*inv(h1(<~ex.353, ~ea.351>)))
        z.1   = x.697^(x.698*inv(~ea.351))
    
    12. ~ea   = ~ea.352
        ~ex   = ~ex.354
        Y     = x.698^(x.699*inv((~ea.352*x.700)))
        z     = x.698^(x.699*inv(x.700))
        z.1   = x.698^(x.699*h1(<~ex.354, ~ea.352>)*inv((~ea.352*x.700)))
    
    13. ~ea   = ~ea.352
        ~ex   = ~ex.354
        Y     = x.698^(x.699*inv((~ea.352*x.700*h1(<~ex.354, ~ea.352>))))
        z     = x.698^(x.699*inv((x.700*h1(<~ex.354, ~ea.352>))))
        z.1   = x.698^(x.699*inv((~ea.352*x.700)))
    
    14. ~ea   = ~ea.352
        ~ex   = ~ex.354
        Y     = x.698^(x.699*inv((x.700*h1(<~ex.354, ~ea.352>))))
        z     = x.698^(~ea.352*x.699*inv((x.700*h1(<~ex.354, ~ea.352>))))
        z.1   = x.698^(x.699*inv(x.700))
  */

rule (modulo E) Resp_1:
   [ Fr( ~ey ), !Ltk( $B, ~eb ), !Pk( $A, 'g'^~lkI ), In( X ) ]
  --[
  Accept( ~ey,
          h2(<'g'^~lkI^h1(<~ey, ~eb>), X^~eb, X^h1(<~ey, ~eb>), $A, $B>)
  ),
  Sid( ~ey, <$B, $A, 'g'^h1(<~ey, ~eb>), X, 'Resp'> )
  ]->
   [
   Out( 'g'^h1(<~ey, ~eb>) ), !Ephk( ~ey, ~ey ),
   !Sessk( ~ey,
           h2(<'g'^~lkI^h1(<~ey, ~eb>), X^~eb, X^h1(<~ey, ~eb>), $A, $B>)
   )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ Fr( ~ey ), !Ltk( $B, ~eb ), !Pk( $A, 'g'^~x ), In( X ) ]
    --[
    Accept( ~ey, h2(<'g'^(~x*h1(<~ey, ~eb>)), z, z.1, $A, $B>) ),
    Sid( ~ey, <$B, $A, 'g'^h1(<~ey, ~eb>), X, 'Resp'> )
    ]->
     [
     Out( 'g'^h1(<~ey, ~eb>) ), !Ephk( ~ey, ~ey ),
     !Sessk( ~ey, h2(<'g'^(~x*h1(<~ey, ~eb>)), z, z.1, $A, $B>) )
     ]
    variants (modulo AC)
     1. ~eb   = ~eb.35
        ~ey   = ~ey.36
        X     = X.38
        z     = X.38^~eb.35
        z.1   = X.38^h1(<~ey.36, ~eb.35>)
    
     2. ~eb   = ~eb.39
        ~ey   = ~ey.40
        X     = z.46^inv(~eb.39)
        z     = z.46
        z.1   = z.46^(h1(<~ey.40, ~eb.39>)*inv(~eb.39))
    
     3. ~eb   = ~eb.40
        ~ey   = ~ey.41
        X     = z.48^inv(h1(<~ey.41, ~eb.40>))
        z     = z.48^(~eb.40*inv(h1(<~ey.41, ~eb.40>)))
        z.1   = z.48
    
     4. ~eb   = ~eb.436
        ~ey   = ~ey.437
        X     = x.867^x.868
        z     = x.867^(~eb.436*x.868)
        z.1   = x.867^(x.868*h1(<~ey.437, ~eb.436>))
    
     5. ~eb   = ~eb.438
        ~ey   = ~ey.439
        X     = x.872^inv((~eb.438*h1(<~ey.439, ~eb.438>)))
        z     = x.872^inv(h1(<~ey.439, ~eb.438>))
        z.1   = x.872^inv(~eb.438)
    
     6. ~eb   = ~eb.439
        ~ey   = ~ey.440
        X     = x.873^inv((~eb.439*x.874))
        z     = x.873^inv(x.874)
        z.1   = x.873^(h1(<~ey.440, ~eb.439>)*inv((~eb.439*x.874)))
    
     7. ~eb   = ~eb.439
        ~ey   = ~ey.440
        X     = x.873^inv((~eb.439*x.874*h1(<~ey.440, ~eb.439>)))
        z     = x.873^inv((x.874*h1(<~ey.440, ~eb.439>)))
        z.1   = x.873^inv((~eb.439*x.874))
    
     8. ~eb   = ~eb.439
        ~ey   = ~ey.440
        X     = x.873^inv((x.874*h1(<~ey.440, ~eb.439>)))
        z     = x.873^(~eb.439*inv((x.874*h1(<~ey.440, ~eb.439>))))
        z.1   = x.873^inv(x.874)
    
     9. ~eb   = ~eb.439
        ~ey   = ~ey.440
        X     = x.873^(x.874*inv(~eb.439))
        z     = x.873^x.874
        z.1   = x.873^(x.874*h1(<~ey.440, ~eb.439>)*inv(~eb.439))
    
    10. ~eb   = ~eb.439
        ~ey   = ~ey.440
        X     = x.873^(x.874*inv(h1(<~ey.440, ~eb.439>)))
        z     = x.873^(~eb.439*x.874*inv(h1(<~ey.440, ~eb.439>)))
        z.1   = x.873^x.874
    
    11. ~eb   = ~eb.439
        ~ey   = ~ey.440
        X     = x.873^(x.874*inv((~eb.439*h1(<~ey.440, ~eb.439>))))
        z     = x.873^(x.874*inv(h1(<~ey.440, ~eb.439>)))
        z.1   = x.873^(x.874*inv(~eb.439))
    
    12. ~eb   = ~eb.440
        ~ey   = ~ey.441
        X     = x.874^(x.875*inv((~eb.440*x.876)))
        z     = x.874^(x.875*inv(x.876))
        z.1   = x.874^(x.875*h1(<~ey.441, ~eb.440>)*inv((~eb.440*x.876)))
    
    13. ~eb   = ~eb.440
        ~ey   = ~ey.441
        X     = x.874^(x.875*inv((~eb.440*x.876*h1(<~ey.441, ~eb.440>))))
        z     = x.874^(x.875*inv((x.876*h1(<~ey.441, ~eb.440>))))
        z.1   = x.874^(x.875*inv((~eb.440*x.876)))
    
    14. ~eb   = ~eb.440
        ~ey   = ~ey.441
        X     = x.874^(x.875*inv((x.876*h1(<~ey.441, ~eb.440>))))
        z     = x.874^(~eb.440*x.875*inv((x.876*h1(<~ey.441, ~eb.440>))))
        z.1   = x.874^(x.875*inv(x.876))
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~s, k ) ] --[ RevealSessk( ~s ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, ea ) ] --[ RevealLtk( $A ) ]-> [ Out( ea ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~s, ~ek ) ] --[ RevealEphk( ~s ) ]-> [ Out( ~ek ) ]

  /* has exactly the trivial AC variant */

lemma eCK_key_secrecy:
  all-traces
  "∀ #i1 #i2 #i3 test A B k sent recvd role.
    (((Accept( test, k ) @ #i1) ∧ (K( k ) @ #i2)) ∧
     (Sid( test, <A, B, sent, recvd, role> ) @ #i3)) ⇒
    ((((∃ #i3.1. RevealSessk( test ) @ #i3.1) ∨
       (∃ #i5 #i6. (RevealLtk( A ) @ #i5) ∧ (RevealEphk( test ) @ #i6))) ∨
      (∃ matchingSession #i3.1 matchingRole.
        ((Sid( matchingSession, <B, A, recvd, sent, matchingRole> ) @ #i3.1) ∧
         (¬(matchingRole = role))) ∧
        ((∃ #i5. RevealSessk( matchingSession ) @ #i5) ∨
         (∃ #i5 #i6.
           (RevealLtk( B ) @ #i5) ∧ (RevealEphk( matchingSession ) @ #i6))))) ∨
     ((¬(∃ matchingSession #i3.1 matchingRole.
          (Sid( matchingSession, <B, A, recvd, sent, matchingRole> ) @ #i3.1) ∧
          (¬(matchingRole = role)))) ∧
      (∃ #i5. RevealLtk( B ) @ #i5)))"
/*
guarded formula characterizing all counter-examples:
"∃ #i1 #i2 #i3 test A B k sent recvd role.
  (Accept( test, k ) @ #i1) ∧
  (K( k ) @ #i2) ∧
  (Sid( test, <A, B, sent, recvd, role> ) @ #i3)
 ∧
  (∀ #i3.1. (RevealSessk( test ) @ #i3.1) ⇒ ⊥) ∧
  (∀ #i5 #i6. (RevealLtk( A ) @ #i5) ∧ (RevealEphk( test ) @ #i6) ⇒ ⊥) ∧
  (∀ matchingSession #i3.1 matchingRole.
    (Sid( matchingSession, <B, A, recvd, sent, matchingRole> ) @ #i3.1)
   ⇒
    ((matchingRole = role) ∨
     ((∀ #i5. (RevealSessk( matchingSession ) @ #i5) ⇒ ⊥) ∧
      (∀ #i5 #i6.
        (RevealLtk( B ) @ #i5) ∧ (RevealEphk( matchingSession ) @ #i6) ⇒ ⊥)))) ∧
  (((∃ matchingSession #i3.1 matchingRole.
      (Sid( matchingSession, <B, A, recvd, sent, matchingRole> ) @ #i3.1)
     ∧
      ¬(matchingRole = role)) ∨
    (∀ #i5. (RevealLtk( B ) @ #i5) ⇒ ⊥)))"
*/
simplify
solve( (∃ matchingSession #i3 matchingRole.
         (Sid( matchingSession, <B, A, recvd, sent, matchingRole> ) @ #i3)
        ∧
         ¬(matchingRole = role))  ∥
       (∀ #i5. (RevealLtk( B ) @ #i5) ⇒ ⊥) )
  case case_1
  solve( (matchingRole = role)  ∥
         ((∀ #i5. (RevealSessk( matchingSession ) @ #i5) ⇒ ⊥) ∧
          (∀ #i5 #i6.
            (RevealLtk( B ) @ #i5) ∧ (RevealEphk( matchingSession ) @ #i6) ⇒ ⊥)) )
    case case_1
    by contradiction /* from formulas */
  next
    case case_2
    solve( Accept( test, k ) @ #i1 )
      case Init_2
      solve( Init_1( ~ex, $A, $B, ~ea ) ▶₀ #i1 )
        case Init_1
        solve( !Pk( $B, 'g'^~x ) ▶₁ #i1 )
          case generate_ltk
          solve( Sid( ~ex, <A.1, B.1, sent, recvd, role> ) @ #i3 )
            case Init_2
            solve( Init_1( ~ex, $A.1, $B.1, ~ea.1 ) ▶₀ #i3 )
              case Init_1
              solve( Sid( matchingSession,
                          <$B, $A, Y, 'g'^h1(<~ex, ~ea>), matchingRole>
                     ) @ #i3 )
                case Init_2
                by contradiction /* from formulas */
              next
                case Resp_1
                solve( !Ltk( $B, ~eb ) ▶₁ #i3 )
                  case generate_ltk
                  solve( !Pk( $A, 'g'^~x.1 ) ▶₂ #i3 )
                    case generate_ltk
                    solve( !KU( h2(<'g'^(~ea*h1(<~ey, ~eb>)), 'g'^(~x*h1(<~ex, ~ea>)), 
                                    'g'^(h1(<~ex, ~ea>)*h1(<~ey, ~eb>)), $A, $B>)
                           ) @ #vk )
                      case Sessk_reveal_case_1
                      by contradiction /* from formulas */
                    next
                      case Sessk_reveal_case_2
                      by contradiction /* from formulas */
                    next
                      case c_h2
                      solve( !KU( 'g'^(~ea*h1(<~ey, ~eb>)) ) @ #vk.4 )
                        case Resp_1
                        solve( !KU( ~ea ) @ #vk.12 )
                          case Ltk_reveal
                          solve( !KU( 'g'^(~x*h1(<~ex, ~ea>)) ) @ #vk.7 )
                            case Init_1
                            solve( !KU( ~x ) @ #vk.13 )
                              case Ltk_reveal
                              solve( !KU( 'g'^(h1(<~ex, ~ea>)*h1(<~ey, ~eb>)) ) @ #vk.10 )
                                case Init_1
                                solve( !KU( h1(<~ey, ~eb>) ) @ #vk.14 )
                                  case c_h1
                                  solve( !KU( ~ey ) @ #vk.16 )
                                    case Ephk_reveal
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              next
                                case Resp_1
                                solve( !KU( h1(<~ex, ~ea>) ) @ #vk.14 )
                                  case c_h1
                                  solve( !KU( ~ex ) @ #vk.16 )
                                    case Ephk_reveal
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              next
                                case c_exp
                                solve( !KU( h1(<~ex, ~ea>) ) @ #vk.16 )
                                  case c_h1
                                  solve( !KU( ~ex ) @ #vk.19 )
                                    case Ephk_reveal
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_exp
                            solve( !KU( ~x ) @ #vk.15 )
                              case Ltk_reveal
                              solve( !KU( h1(<~ex, ~ea>) ) @ #vk.16 )
                                case c_h1
                                solve( !KU( ~ex ) @ #vk.18 )
                                  case Ephk_reveal
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          next
                            case generate_ltk
                            solve( !KU( h1(<~ex, ~ea>) ) @ #vk.13 )
                              case c_h1
                              solve( !KU( ~ex ) @ #vk.15 )
                                case Ephk_reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_exp
                        solve( !KU( ~ea ) @ #vk.14 )
                          case Ltk_reveal
                          solve( !KU( h1(<~ey, ~eb>) ) @ #vk.15 )
                            case c_h1
                            solve( !KU( ~ey ) @ #vk.17 )
                              case Ephk_reveal
                              solve( !KU( ~eb ) @ #vk.18 )
                                case Ltk_reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      next
                        case generate_ltk
                        solve( !KU( h1(<~ey, ~eb>) ) @ #vk.12 )
                          case c_h1
                          solve( !KU( ~ey ) @ #vk.14 )
                            case Ephk_reveal
                            solve( !KU( ~eb ) @ #vk.15 )
                              case Ltk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Resp_1
      solve( !Ltk( $B, ~eb ) ▶₁ #i1 )
        case generate_ltk
        solve( !Pk( $A, 'g'^~x ) ▶₂ #i1 )
          case generate_ltk
          solve( Sid( ~ey, <A.1, B.1, sent, recvd, role> ) @ #i3 )
            case Init_2
            by solve( Init_1( ~ey, $A.1, $B.1, ~ea ) ▶₀ #i3 )
          next
            case Resp_1
            solve( Sid( matchingSession,
                        <$A, $B, X, 'g'^h1(<~ey, ~eb>), matchingRole>
                   ) @ #i3 )
              case Init_2
              solve( Init_1( ~ex, $A, $B, ~ea ) ▶₀ #i3 )
                case Init_1
                solve( !Pk( $B, 'g'^~x.1 ) ▶₁ #i3 )
                  case generate_ltk
                  solve( !KU( h2(<'g'^(~x*h1(<~ey, ~eb>)), 'g'^(~eb*h1(<~ex, ~ea>)), 
                                  'g'^(h1(<~ex, ~ea>)*h1(<~ey, ~eb>)), $A, $B>)
                         ) @ #vk )
                    case Sessk_reveal_case_1
                    by contradiction /* from formulas */
                  next
                    case Sessk_reveal_case_2
                    by contradiction /* from formulas */
                  next
                    case c_h2
                    solve( !KU( 'g'^(~x*h1(<~ey, ~eb>)) ) @ #vk.4 )
                      case Resp_1
                      solve( !KU( ~x ) @ #vk.12 )
                        case Ltk_reveal
                        solve( !KU( 'g'^(~eb*h1(<~ex, ~ea>)) ) @ #vk.7 )
                          case Init_1
                          solve( !KU( ~eb ) @ #vk.13 )
                            case Ltk_reveal
                            solve( !KU( 'g'^(h1(<~ex, ~ea>)*h1(<~ey, ~eb>)) ) @ #vk.10 )
                              case Init_1
                              solve( !KU( h1(<~ey, ~eb>) ) @ #vk.14 )
                                case c_h1
                                solve( !KU( ~ey ) @ #vk.16 )
                                  case Ephk_reveal
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case Resp_1
                              solve( !KU( h1(<~ex, ~ea>) ) @ #vk.14 )
                                case c_h1
                                solve( !KU( ~ex ) @ #vk.16 )
                                  case Ephk_reveal
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case c_exp
                              solve( !KU( h1(<~ex, ~ea>) ) @ #vk.16 )
                                case c_h1
                                solve( !KU( ~ex ) @ #vk.19 )
                                  case Ephk_reveal
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_exp
                          solve( !KU( ~eb ) @ #vk.15 )
                            case Ltk_reveal
                            solve( !KU( h1(<~ex, ~ea>) ) @ #vk.16 )
                              case c_h1
                              solve( !KU( ~ex ) @ #vk.18 )
                                case Ephk_reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case generate_ltk
                          solve( !KU( h1(<~ex, ~ea>) ) @ #vk.13 )
                            case c_h1
                            solve( !KU( ~ex ) @ #vk.15 )
                              case Ephk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_exp
                      solve( !KU( ~x ) @ #vk.14 )
                        case Ltk_reveal
                        solve( !KU( h1(<~ey, ~eb>) ) @ #vk.15 )
                          case c_h1
                          solve( !KU( ~ey ) @ #vk.17 )
                            case Ephk_reveal
                            solve( !KU( ~eb ) @ #vk.18 )
                              case Ltk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case generate_ltk
                      solve( !KU( h1(<~ey, ~eb>) ) @ #vk.12 )
                        case c_h1
                        solve( !KU( ~ey ) @ #vk.14 )
                          case Ephk_reveal
                          solve( !KU( ~eb ) @ #vk.15 )
                            case Ltk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Resp_1
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Accept( test, k ) @ #i1 )
    case Init_2
    solve( Init_1( ~ex, $A, $B, ~ea ) ▶₀ #i1 )
      case Init_1
      solve( !Pk( $B, 'g'^~x ) ▶₁ #i1 )
        case generate_ltk
        solve( Sid( ~ex, <A.1, B.1, sent, recvd, role> ) @ #i3 )
          case Init_2
          solve( Init_1( ~ex, $A.1, $B.1, ~ea.1 ) ▶₀ #i3 )
            case Init_1
            solve( !KU( h2(<z, 'g'^(~x*h1(<~ex, ~ea>)), z.1, $A, $B>) ) @ #vk )
              case Sessk_reveal_case_1
              by contradiction /* from formulas */
            next
              case Sessk_reveal_case_2
              solve( splitEqs(2) )
                case split_case_1
                by contradiction /* from formulas */
              next
                case split_case_2
                solve( !KU( 'g'^(~x*h1(<~ex, ~ea>)*inv(~ea)) ) @ #vk.2 )
                  case Init_1
                  solve( !KU( ~x ) @ #vk.4 )
                    case Ltk_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case c_exp
                  solve( !KU( ~x ) @ #vk.5 )
                    case Ltk_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case generate_ltk
                  solve( !KU( ~ea ) @ #vk.6 )
                    case Ltk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case c_h2
              solve( !KU( 'g'^(~x*h1(<~ex, ~ea>)) ) @ #vk.5 )
                case Init_1
                solve( !KU( ~x ) @ #vk.11 )
                  case Ltk_reveal
                  by contradiction /* from formulas */
                qed
              next
                case c_exp
                solve( !KU( ~x ) @ #vk.13 )
                  case Ltk_reveal
                  by contradiction /* from formulas */
                qed
              next
                case generate_ltk
                solve( !KU( h1(<~ex, ~ea>) ) @ #vk.11 )
                  case c_h1
                  solve( !KU( ~ex ) @ #vk.13 )
                    case Ephk_reveal
                    solve( !KU( ~ea ) @ #vk.14 )
                      case Ltk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Resp_1
    solve( !Ltk( $B, ~eb ) ▶₁ #i1 )
      case generate_ltk
      solve( !Pk( $A, 'g'^~x ) ▶₂ #i1 )
        case generate_ltk
        solve( Sid( ~ey, <A.1, B.1, sent, recvd, role> ) @ #i3 )
          case Init_2
          by solve( Init_1( ~ey, $A.1, $B.1, ~ea ) ▶₀ #i3 )
        next
          case Resp_1
          solve( !KU( h2(<'g'^(~x*h1(<~ey, ~eb>)), z, z.1, $A, $B>) ) @ #vk )
            case Sessk_reveal_case_1
            solve( splitEqs(2) )
              case split_case_1
              by contradiction /* from formulas */
            next
              case split_case_2
              solve( !KU( 'g'^(~x*h1(<~ey, ~ea>)*inv(~ea)) ) @ #vk.2 )
                case Resp_1
                solve( !KU( ~x ) @ #vk.4 )
                  case Ltk_reveal
                  by contradiction /* from formulas */
                qed
              next
                case c_exp
                solve( !KU( ~x ) @ #vk.5 )
                  case Ltk_reveal
                  by contradiction /* from formulas */
                qed
              next
                case generate_ltk
                solve( !KU( ~ea ) @ #vk.6 )
                  case Ltk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Sessk_reveal_case_2
            by contradiction /* from formulas */
          next
            case c_h2
            solve( !KU( 'g'^(~x*h1(<~ey, ~eb>)) ) @ #vk.3 )
              case Resp_1
              solve( !KU( ~x ) @ #vk.11 )
                case Ltk_reveal
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              solve( !KU( ~x ) @ #vk.13 )
                case Ltk_reveal
                by contradiction /* from formulas */
              qed
            next
              case generate_ltk
              solve( !KU( h1(<~ey, ~eb>) ) @ #vk.11 )
                case c_h1
                solve( !KU( ~ey ) @ #vk.13 )
                  case Ephk_reveal
                  solve( !KU( ~eb ) @ #vk.14 )
                    case Ltk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/ake/dh/NAXOS_eCK.spthy

------------------------------------------------------------------------------
analyzed: examples/ake/dh/NAXOS_eCK.spthy

  output:          examples/ake/dh/NAXOS_eCK.spthy.tmp
  processing time: 4.054229711s
  eCK_key_secrecy (all-traces): verified (136 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/ake/dh/NAXOS_eCK.spthy

  output:          examples/ake/dh/NAXOS_eCK.spthy.tmp
  processing time: 4.054229711s
  eCK_key_secrecy (all-traces): verified (136 steps)

==============================================================================
*/
