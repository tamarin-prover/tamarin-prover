theory UM_one_pass_fix begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



rule (modulo E) Register_key_honest:
   [ Fr( ~ea ) ]
  --[ KeyReg( $A ) ]->
   [ !Ltk( $A, ~ea ), !Pk( $A, 'g'^~ea ), Out( 'g'^~ea ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_Activate:
   [ Fr( ~ex ) ]
  --[ Activate( <$A, $B, 'g'^~ex> ) ]->
   [ I_Act( ~ex, $A, $B ), !SessionState( <$A, $B, 'g'^~ex>, $A, ~ex ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_Complete:
   [ I_Act( ~ex, $A, $B ), !Ltk( $A, ~ea ), !Pk( $B, 'g'^~eb ) ]
  --[
  Complete( <$A, $B, 'g'^~ex>, 'I', h(<'g'^~eb^~ex, 'g'^~eb^~ea, $A, $B>) )
  ]->
   [
   I_Comp( <$A, $B, 'g'^~ex> ), Out( <$B, $A, 'g'^~ex> ),
   !SessionKey( <$A, $B, 'g'^~ex>, $A, h(<'g'^~eb^~ex, 'g'^~eb^~ea, $A, $B>)
   )
   ]

  /*
  rule (modulo AC) I_Complete:
     [ I_Act( ~ex, $A, $B ), !Ltk( $A, ~ea ), !Pk( $B, 'g'^~eb ) ]
    --[
    Complete( <$A, $B, 'g'^~ex>, 'I',
              h(<'g'^(~eb*~ex), 'g'^(~ea*~eb), $A, $B>)
    )
    ]->
     [
     I_Comp( <$A, $B, 'g'^~ex> ), Out( <$B, $A, 'g'^~ex> ),
     !SessionKey( <$A, $B, 'g'^~ex>, $A,
                  h(<'g'^(~eb*~ex), 'g'^(~ea*~eb), $A, $B>)
     )
     ]
  */

rule (modulo E) I_Expire:
   [ I_Comp( sid ) ] --[ Expire( sid ) ]-> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_Complete:
   [ In( X ), !Ltk( $B, ~eb ), !Pk( $A, 'g'^~ea ) ]
  --[
  Activate( <$B, $A, X> ),
  Complete( <$B, $A, X>, 'R', h(<X^~eb, 'g'^~ea^~eb, $A, $B>) )
  ]->
   [
   R_Comp( <$B, $A, X> ),
   !SessionKey( <$B, $A, X>, $B, h(<X^~eb, 'g'^~ea^~eb, $A, $B>) )
   ]

  /*
  rule (modulo AC) R_Complete:
     [ In( X ), !Ltk( $B, ~eb ), !Pk( $A, 'g'^~x ) ]
    --[
    Activate( <$B, $A, X> ),
    Complete( <$B, $A, X>, 'R', h(<z, 'g'^(~eb*~x), $A, $B>) )
    ]->
     [
     R_Comp( <$B, $A, X> ),
     !SessionKey( <$B, $A, X>, $B, h(<z, 'g'^(~eb*~x), $A, $B>) )
     ]
    variants (modulo AC)
    1. ~eb   = ~eb.28
       X     = X.29
       z     = X.29^~eb.28
    
    2. ~eb   = ~eb.28
       X     = z.31^inv(~eb.28)
       z     = z.31
    
    3. ~eb   = ~eb.137
       X     = x.268^x.269
       z     = x.268^(~eb.137*x.269)
    
    4. ~eb   = ~eb.138
       X     = x.270^inv((~eb.138*x.271))
       z     = x.270^inv(x.271)
    
    5. ~eb   = ~eb.138
       X     = x.270^(x.271*inv(~eb.138))
       z     = x.270^x.271
    
    6. ~eb   = ~eb.139
       X     = x.271^(x.272*inv((~eb.139*x.273)))
       z     = x.271^(x.272*inv(x.273))
  */

rule (modulo E) R_Expire:
   [ R_Comp( sid ) ] --[ Expire( sid ) ]-> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Corrupt_Ltk:
   [ !Ltk( $A, ~ea ) ] --[ Corrupt( $A ) ]-> [ Out( ~ea ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Corrupt_SessionState:
   [ !SessionState( sid, ~x, $A ) ]
  --[ Corrupt( $A ), BeforeComplete( sid ) ]->
   [ Out( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Corrupt_SessionKey:
   [ !SessionKey( sid, $A, k ) ]
  --[ Corrupt( $A ), BeforeExpire( sid ) ]->
   [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_SessionState:
   [ !SessionState( sid, ~x, $A ) ]
  --[ SessionStateReveal( sid ), BeforeComplete( sid ) ]->
   [ Out( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_SessionKey:
   [ !SessionKey( sid, $A, k ) ]
  --[ SessionKeyReveal( sid ), BeforeExpire( sid ) ]->
   [ Out( k ) ]

  /* has exactly the trivial AC variant */

restriction sid_unique:
  "∀ #i #j sid.
    ((Activate( sid ) @ #i) ∧ (Activate( sid ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction keyreg_unique:
  "∀ #i #j A. ((KeyReg( A ) @ #i) ∧ (KeyReg( A ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction corrupt_and_reveal_not_too_early:
  "(∀ #i #j s role_ k_.
     ((BeforeComplete( s ) @ #i) ∧ (Complete( s, role_, k_ ) @ #j)) ⇒
     (#i < #j)) ∧
   (∀ #i #j s. ((BeforeExpire( s ) @ #i) ∧ (Expire( s ) @ #j)) ⇒ (#i < #j))"
  // safety formula

lemma key_agreement_reachable:
  exists-trace
  "∃ #i #j sid sidm k.
    ((((Complete( sid, 'I', k ) @ #i) ∧ (Complete( sidm, 'R', k ) @ #j)) ∧
      (¬(∃ #j.1 C. Corrupt( C ) @ #j.1))) ∧
     (¬(∃ #j.1 s. SessionKeyReveal( s ) @ #j.1))) ∧
    (¬(∃ #j.1 s. SessionStateReveal( s ) @ #j.1))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j sid sidm k.
  (Complete( sid, 'I', k ) @ #i) ∧ (Complete( sidm, 'R', k ) @ #j)
 ∧
  (∀ #j.1 C. (Corrupt( C ) @ #j.1) ⇒ ⊥) ∧
  (∀ #j.1 s. (SessionKeyReveal( s ) @ #j.1) ⇒ ⊥) ∧
  (∀ #j.1 s. (SessionStateReveal( s ) @ #j.1) ⇒ ⊥)"
*/
simplify
solve( Complete( sid, 'I', k ) @ #i )
  case I_Complete
  solve( I_Act( ~ex, $A, $B ) ▶₀ #i )
    case I_Activate
    solve( !Ltk( $A, ~ea ) ▶₁ #i )
      case Register_key_honest
      solve( !Pk( $B, 'g'^~eb ) ▶₂ #i )
        case Register_key_honest
        solve( Complete( sidm, 'R', h(<'g'^(~eb*~ex), 'g'^(~ea*~eb), $A, $B>)
               ) @ #j )
          case R_Complete_case_2
          solve( !Ltk( $B, ~eb ) ▶₁ #j )
            case Register_key_honest
            solve( !Pk( $A, 'g'^~ea ) ▶₂ #j )
              case Register_key_honest
              solve( !KU( 'g'^~ex ) @ #vk )
                case I_Complete
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma CK_secure:
  all-traces
  "∀ #i #j role A B X k s sp.
    ((((Complete( <A, B, X>, role, k ) @ #i) ∧ (K( k ) @ #j)) ∧
      (s = <A, B, X>)) ∧
     (sp = <B, A, X>)) ⇒
    ((((∃ #k.1. SessionKeyReveal( s ) @ #k.1) ∨
       (∃ #i1. SessionKeyReveal( sp ) @ #i1)) ∨
      ((role = 'I') ∧
       (((∃ #k.1.
           (Corrupt( A ) @ #k.1) ∧
           ((∃ #l. (Expire( s ) @ #l) ∧ (#k.1 < #l)) ∨
            (¬(∃ #l. Expire( s ) @ #l)))) ∨
         (∃ #k.1 #l. (SessionStateReveal( s ) @ #k.1) ∧ (Corrupt( A ) @ #l))) ∨
        (∃ #k.1. Corrupt( B ) @ #k.1)))) ∨
     ((((role = 'R') ∧ (∃ #k.1. Corrupt( A ) @ #k.1)) ∨
       (∃ #k.1 k_.
         (Complete( sp, 'I', k_ ) @ #k.1) ∧
         ((∃ #k.2.
            (Corrupt( B ) @ #k.2) ∧
            ((∃ #l. (Expire( sp ) @ #l) ∧ (#k.2 < #l)) ∨
             (¬(∃ #l. Expire( sp ) @ #l)))) ∨
          (∃ #k.2 #l. (SessionStateReveal( sp ) @ #k.2) ∧ (Corrupt( B ) @ #l))))) ∨
      ((¬(∃ #k.1 k_. Complete( sp, 'I', k_ ) @ #k.1)) ∧
       (∃ #k.1. Corrupt( B ) @ #k.1))))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j role A B X k s sp.
  (Complete( <A, B, X>, role, k ) @ #i) ∧
  (K( k ) @ #j) ∧
  (s = <A, B, X>) ∧
  (sp = <B, A, X>)
 ∧
  (∀ #k.1. (SessionKeyReveal( s ) @ #k.1) ⇒ ⊥) ∧
  (∀ #i1. (SessionKeyReveal( sp ) @ #i1) ⇒ ⊥) ∧
  (((¬(role = 'I')) ∨
    ((∀ #k.1.
       (Corrupt( A ) @ #k.1)
      ⇒
       (∀ #l. (Expire( s ) @ #l) ⇒ ¬(#k.1 < #l)) ∧ (∃ #l. (Expire( s ) @ #l))) ∧
     (∀ #k.1 #l. (SessionStateReveal( s ) @ #k.1) ∧ (Corrupt( A ) @ #l) ⇒ ⊥) ∧
     (∀ #k.1. (Corrupt( B ) @ #k.1) ⇒ ⊥)))) ∧
  (((¬(role = 'R')) ∨ (∀ #k.1. (Corrupt( A ) @ #k.1) ⇒ ⊥))) ∧
  (∀ #k.1 k_.
    (Complete( sp, 'I', k_ ) @ #k.1)
   ⇒
    (∀ #k.2.
      (Corrupt( B ) @ #k.2)
     ⇒
      (∀ #l. (Expire( sp ) @ #l) ⇒ ¬(#k.2 < #l)) ∧
      (∃ #l. (Expire( sp ) @ #l))) ∧
    (∀ #k.2 #l.
      (SessionStateReveal( sp ) @ #k.2) ∧ (Corrupt( B ) @ #l) ⇒ ⊥)) ∧
  (((∃ #k.1 k_. (Complete( sp, 'I', k_ ) @ #k.1)) ∨
    (∀ #k.1. (Corrupt( B ) @ #k.1) ⇒ ⊥)))"
*/
simplify
solve( (¬(role = 'I'))  ∥
       ((∀ #k.
          (Corrupt( A ) @ #k)
         ⇒
          (∀ #l. (Expire( <A, B, X> ) @ #l) ⇒ ¬(#k < #l)) ∧
          (∃ #l. (Expire( <A, B, X> ) @ #l))) ∧
        (∀ #k #l.
          (SessionStateReveal( <A, B, X> ) @ #k) ∧ (Corrupt( A ) @ #l) ⇒ ⊥) ∧
        (∀ #k. (Corrupt( B ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( (¬(role = 'R'))  ∥ (∀ #k. (Corrupt( A ) @ #k) ⇒ ⊥) )
    case case_1
    solve( (∃ #k k_. (Complete( <B, A, X>, 'I', k_ ) @ #k))  ∥
           (∀ #k. (Corrupt( B ) @ #k) ⇒ ⊥) )
      case case_1
      solve( Complete( <A, B, X>, role, k ) @ #i )
        case I_Complete
        by contradiction /* from formulas */
      next
        case R_Complete
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( Complete( <A, B, X>, role, k ) @ #i )
        case I_Complete
        by contradiction /* from formulas */
      next
        case R_Complete
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_2
    solve( (∃ #k k_. (Complete( <B, A, X>, 'I', k_ ) @ #k))  ∥
           (∀ #k. (Corrupt( B ) @ #k) ⇒ ⊥) )
      case case_1
      solve( Complete( <A, B, X>, role, k ) @ #i )
        case I_Complete
        by contradiction /* from formulas */
      next
        case R_Complete
        solve( !Ltk( $B, ~eb ) ▶₁ #i )
          case Register_key_honest
          solve( !Pk( $A, 'g'^~x ) ▶₂ #i )
            case Register_key_honest
            solve( Complete( <$A, $B, X>, 'I', k_ ) @ #k )
              case I_Complete
              solve( I_Act( ~ex, $A, $B ) ▶₀ #k )
                case I_Activate
                solve( !Ltk( $A, ~ea ) ▶₁ #k )
                  case Register_key_honest
                  solve( !Pk( $B, 'g'^~eb.1 ) ▶₂ #k )
                    case Register_key_honest
                    solve( !KU( h(<'g'^(~eb*~ex), 'g'^(~ea*~eb), $A, $B>) ) @ #vk )
                      case Corrupt_SessionKey_case_1
                      by contradiction /* from formulas */
                    next
                      case Corrupt_SessionKey_case_2
                      by contradiction /* from formulas */
                    next
                      case Reveal_SessionKey_case_1
                      by contradiction /* from formulas */
                    next
                      case Reveal_SessionKey_case_2
                      by contradiction /* from formulas */
                    next
                      case c_h
                      solve( !KU( 'g'^(~eb*~ex) ) @ #vk.3 )
                        case I_Complete
                        solve( !KU( ~eb ) @ #vk.9 )
                          case Corrupt_Ltk
                          by contradiction /* from formulas */
                        qed
                      next
                        case Register_key_honest
                        by solve( !KU( ~ex ) @ #vk.9 )
                      next
                        case c_exp
                        solve( !KU( ~eb ) @ #vk.11 )
                          case Corrupt_Ltk
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( Complete( <A, B, X>, role, k ) @ #i )
        case I_Complete
        by contradiction /* from formulas */
      next
        case R_Complete
        solve( !Ltk( $B, ~eb ) ▶₁ #i )
          case Register_key_honest
          solve( !Pk( $A, 'g'^~x ) ▶₂ #i )
            case Register_key_honest
            solve( !KU( h(<z, 'g'^(~eb*~x), $A, $B>) ) @ #vk )
              case Corrupt_SessionKey_case_1
              by contradiction /* from formulas */
            next
              case Corrupt_SessionKey_case_2
              by contradiction /* from formulas */
            next
              case Corrupt_SessionKey_case_3
              by contradiction /* from formulas */
            next
              case Reveal_SessionKey_case_1
              by contradiction /* from formulas */
            next
              case Reveal_SessionKey_case_2
              solve( splitEqs(0) )
                case split_case_1
                by contradiction /* from formulas */
              next
                case split_case_2
                by contradiction /* from formulas */
              next
                case split_case_3
                by contradiction /* from formulas */
              next
                case split_case_4
                by contradiction /* from formulas */
              next
                case split_case_5
                by contradiction /* from formulas */
              next
                case split_case_6
                by contradiction /* from formulas */
              qed
            next
              case Reveal_SessionKey_case_3
              solve( splitEqs(0) )
                case split_case_1
                by contradiction /* from formulas */
              next
                case split_case_2
                by contradiction /* from formulas */
              next
                case split_case_3
                by contradiction /* from formulas */
              next
                case split_case_4
                by contradiction /* from formulas */
              next
                case split_case_5
                by contradiction /* from formulas */
              next
                case split_case_6
                by contradiction /* from formulas */
              qed
            next
              case c_h
              solve( !KU( 'g'^(~eb*~x) ) @ #vk.5 )
                case Register_key_honest_case_1
                solve( !KU( ~eb ) @ #vk.9 )
                  case Corrupt_Ltk
                  by contradiction /* from formulas */
                qed
              next
                case Register_key_honest_case_2
                solve( !KU( ~x ) @ #vk.9 )
                  case Corrupt_Ltk
                  by contradiction /* from formulas */
                qed
              next
                case c_exp
                solve( !KU( ~eb ) @ #vk.11 )
                  case Corrupt_Ltk
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( (¬(role = 'R'))  ∥ (∀ #k. (Corrupt( A ) @ #k) ⇒ ⊥) )
    case case_1
    solve( (∃ #k k_. (Complete( <B, A, X>, 'I', k_ ) @ #k))  ∥
           (∀ #k. (Corrupt( B ) @ #k) ⇒ ⊥) )
      case case_1
      solve( Complete( <A, B, X>, role, k ) @ #i )
        case I_Complete
        solve( I_Act( ~ex, $A, $B ) ▶₀ #i )
          case I_Activate
          solve( !Ltk( $A, ~ea ) ▶₁ #i )
            case Register_key_honest
            solve( !Pk( $B, 'g'^~eb ) ▶₂ #i )
              case Register_key_honest
              solve( Complete( <$B, $A, 'g'^~ex>, 'I', k_ ) @ #k )
                case I_Complete
                solve( I_Act( ~ex, $B, $A ) ▶₀ #k )
                  case I_Activate
                  solve( !KU( h(<'g'^(~ea*~ex), 'g'^(~ea*~ea), $A, $A>) ) @ #vk )
                    case Corrupt_SessionKey
                    by contradiction /* from formulas */
                  next
                    case Reveal_SessionKey
                    by contradiction /* from formulas */
                  next
                    case c_h
                    solve( !KU( 'g'^(~ea*~ex) ) @ #vk.2 )
                      case I_Complete
                      solve( !KU( ~ea ) @ #vk.7 )
                        case Corrupt_Ltk
                        by contradiction /* from formulas */
                      qed
                    next
                      case Register_key_honest
                      by solve( !KU( ~ex ) @ #vk.7 )
                    next
                      case c_exp
                      solve( !KU( ~ea ) @ #vk.9 )
                        case Corrupt_Ltk
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case R_Complete
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( Complete( <A, B, X>, role, k ) @ #i )
        case I_Complete
        solve( I_Act( ~ex, $A, $B ) ▶₀ #i )
          case I_Activate
          solve( !Ltk( $A, ~ea ) ▶₁ #i )
            case Register_key_honest
            solve( !Pk( $B, 'g'^~eb ) ▶₂ #i )
              case Register_key_honest
              solve( !KU( h(<'g'^(~eb*~ex), 'g'^(~ea*~eb), $A, $B>) ) @ #vk )
                case Corrupt_SessionKey_case_1
                by contradiction /* from formulas */
              next
                case Corrupt_SessionKey_case_2
                by contradiction /* from formulas */
              next
                case Reveal_SessionKey_case_1
                by contradiction /* from formulas */
              next
                case Reveal_SessionKey_case_2
                by contradiction /* from formulas */
              next
                case c_h
                solve( !KU( 'g'^(~eb*~ex) ) @ #vk.2 )
                  case I_Complete
                  solve( !KU( ~eb ) @ #vk.8 )
                    case Corrupt_Ltk
                    by contradiction /* from formulas */
                  qed
                next
                  case Register_key_honest
                  by solve( !KU( ~ex ) @ #vk.8 )
                next
                  case c_exp
                  solve( !KU( ~eb ) @ #vk.10 )
                    case Corrupt_Ltk
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case R_Complete
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_2
    solve( (∃ #k k_. (Complete( <B, A, X>, 'I', k_ ) @ #k))  ∥
           (∀ #k. (Corrupt( B ) @ #k) ⇒ ⊥) )
      case case_1
      solve( Complete( <A, B, X>, role, k ) @ #i )
        case I_Complete
        solve( I_Act( ~ex, $A, $B ) ▶₀ #i )
          case I_Activate
          solve( !Ltk( $A, ~ea ) ▶₁ #i )
            case Register_key_honest
            solve( !Pk( $B, 'g'^~eb ) ▶₂ #i )
              case Register_key_honest
              solve( Complete( <$B, $A, 'g'^~ex>, 'I', k_ ) @ #k )
                case I_Complete
                solve( I_Act( ~ex, $B, $A ) ▶₀ #k )
                  case I_Activate
                  solve( !KU( h(<'g'^(~ea*~ex), 'g'^(~ea*~ea), $A, $A>) ) @ #vk )
                    case Corrupt_SessionKey
                    by contradiction /* from formulas */
                  next
                    case Reveal_SessionKey
                    by contradiction /* from formulas */
                  next
                    case c_h
                    solve( !KU( 'g'^(~ea*~ex) ) @ #vk.2 )
                      case I_Complete
                      solve( !KU( ~ea ) @ #vk.7 )
                        case Corrupt_Ltk
                        by contradiction /* from formulas */
                      qed
                    next
                      case Register_key_honest
                      by solve( !KU( ~ex ) @ #vk.7 )
                    next
                      case c_exp
                      solve( !KU( ~ea ) @ #vk.9 )
                        case Corrupt_Ltk
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case R_Complete
        solve( !Ltk( $B, ~eb ) ▶₁ #i )
          case Register_key_honest
          solve( !Pk( $A, 'g'^~x ) ▶₂ #i )
            case Register_key_honest
            solve( Complete( <$A, $B, X>, 'I', k_ ) @ #k )
              case I_Complete
              solve( I_Act( ~ex, $A, $B ) ▶₀ #k )
                case I_Activate
                solve( !Ltk( $A, ~ea ) ▶₁ #k )
                  case Register_key_honest
                  solve( !Pk( $B, 'g'^~eb.1 ) ▶₂ #k )
                    case Register_key_honest
                    solve( !KU( h(<'g'^(~eb*~ex), 'g'^(~ea*~eb), $A, $B>) ) @ #vk )
                      case Corrupt_SessionKey_case_1
                      by contradiction /* from formulas */
                    next
                      case Corrupt_SessionKey_case_2
                      by contradiction /* from formulas */
                    next
                      case Reveal_SessionKey_case_1
                      by contradiction /* from formulas */
                    next
                      case Reveal_SessionKey_case_2
                      by contradiction /* from formulas */
                    next
                      case c_h
                      solve( !KU( 'g'^(~eb*~ex) ) @ #vk.3 )
                        case I_Complete
                        solve( !KU( ~eb ) @ #vk.9 )
                          case Corrupt_Ltk
                          by contradiction /* from formulas */
                        qed
                      next
                        case Register_key_honest
                        by solve( !KU( ~ex ) @ #vk.9 )
                      next
                        case c_exp
                        solve( !KU( ~eb ) @ #vk.11 )
                          case Corrupt_Ltk
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( Complete( <A, B, X>, role, k ) @ #i )
        case I_Complete
        solve( I_Act( ~ex, $A, $B ) ▶₀ #i )
          case I_Activate
          solve( !Ltk( $A, ~ea ) ▶₁ #i )
            case Register_key_honest
            solve( !Pk( $B, 'g'^~eb ) ▶₂ #i )
              case Register_key_honest
              solve( !KU( h(<'g'^(~eb*~ex), 'g'^(~ea*~eb), $A, $B>) ) @ #vk )
                case Corrupt_SessionKey_case_1
                by contradiction /* from formulas */
              next
                case Corrupt_SessionKey_case_2
                by contradiction /* from formulas */
              next
                case Reveal_SessionKey_case_1
                by contradiction /* from formulas */
              next
                case Reveal_SessionKey_case_2
                by contradiction /* from formulas */
              next
                case c_h
                solve( !KU( 'g'^(~eb*~ex) ) @ #vk.2 )
                  case I_Complete
                  solve( !KU( ~eb ) @ #vk.8 )
                    case Corrupt_Ltk
                    by contradiction /* from formulas */
                  qed
                next
                  case Register_key_honest
                  by solve( !KU( ~ex ) @ #vk.8 )
                next
                  case c_exp
                  solve( !KU( ~eb ) @ #vk.10 )
                    case Corrupt_Ltk
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case R_Complete
        solve( !Ltk( $B, ~eb ) ▶₁ #i )
          case Register_key_honest
          solve( !Pk( $A, 'g'^~x ) ▶₂ #i )
            case Register_key_honest
            solve( !KU( h(<z, 'g'^(~eb*~x), $A, $B>) ) @ #vk )
              case Corrupt_SessionKey_case_1
              by contradiction /* from formulas */
            next
              case Corrupt_SessionKey_case_2
              by contradiction /* from formulas */
            next
              case Corrupt_SessionKey_case_3
              by contradiction /* from formulas */
            next
              case Reveal_SessionKey_case_1
              by contradiction /* from formulas */
            next
              case Reveal_SessionKey_case_2
              solve( splitEqs(0) )
                case split_case_1
                by contradiction /* from formulas */
              next
                case split_case_2
                by contradiction /* from formulas */
              next
                case split_case_3
                by contradiction /* from formulas */
              next
                case split_case_4
                by contradiction /* from formulas */
              next
                case split_case_5
                by contradiction /* from formulas */
              next
                case split_case_6
                by contradiction /* from formulas */
              qed
            next
              case Reveal_SessionKey_case_3
              solve( splitEqs(0) )
                case split_case_1
                by contradiction /* from formulas */
              next
                case split_case_2
                by contradiction /* from formulas */
              next
                case split_case_3
                by contradiction /* from formulas */
              next
                case split_case_4
                by contradiction /* from formulas */
              next
                case split_case_5
                by contradiction /* from formulas */
              next
                case split_case_6
                by contradiction /* from formulas */
              qed
            next
              case c_h
              solve( !KU( 'g'^(~eb*~x) ) @ #vk.5 )
                case Register_key_honest_case_1
                solve( !KU( ~eb ) @ #vk.9 )
                  case Corrupt_Ltk
                  by contradiction /* from formulas */
                qed
              next
                case Register_key_honest_case_2
                solve( !KU( ~x ) @ #vk.9 )
                  case Corrupt_Ltk
                  by contradiction /* from formulas */
                qed
              next
                case c_exp
                solve( !KU( ~eb ) @ #vk.11 )
                  case Corrupt_Ltk
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/ake/dh/UM_one_pass_fix.spthy

------------------------------------------------------------------------------
analyzed: examples/ake/dh/UM_one_pass_fix.spthy

  output:          examples/ake/dh/UM_one_pass_fix.spthy.tmp
  processing time: 1.777790178s
  key_agreement_reachable (exists-trace): verified (10 steps)
  CK_secure (all-traces): verified (170 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/ake/dh/UM_one_pass_fix.spthy

  output:          examples/ake/dh/UM_one_pass_fix.spthy.tmp
  processing time: 1.777790178s
  key_agreement_reachable (exists-trace): verified (10 steps)
  CK_secure (all-traces): verified (170 steps)

==============================================================================
*/
