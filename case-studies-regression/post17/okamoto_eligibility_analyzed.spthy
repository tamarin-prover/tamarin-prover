theory Okamoto_Eligibilty begin

// Function signature and definition of the equational theory E

functions: blind/2, checksign/2, f/4, fst/1, open/2, pair/2, pk/1,
           sign/2, snd/1, tdcommit/3, unblind/2
equations:
    checksign(sign(m, sk), pk(sk)) = m,
    f(m1, f(m, r, td, m1), td, m2) = f(m, r, td, m2),
    fst(<x.1, x.2>) = x.1,
    open(tdcommit(m, r, td), r) = m,
    open(tdcommit(m1, r, td), f(m1, r, td, m2)) = m2,
    snd(<x.1, x.2>) = x.2,
    tdcommit(m2, f(m1, r, td, m2), td) = tdcommit(m1, r, td),
    unblind(blind(m, b), b) = m,
    unblind(sign(blind(m, b), sk), b) = sign(m, sk)



rule (modulo E) Register_Voter_pk:
   [ Fr( ~ltkV ) ]
  -->
   [ !Ltk( $V, ~ltkV ), !Pk( $V, pk(~ltkV) ), Out( pk(~ltkV) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Register_Admin_pk:
   [ Fr( ~ltkA ) ]
  -->
   [ !AdminLtk( $A, ~ltkA ), !AdminPk( $A, pk(~ltkA) ), Out( pk(~ltkA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) V_1:
   [ Fr( ~r ), Fr( ~b ), Fr( ~td ), !Ltk( V, ~ltkV ) ]
  --[ Voted( $vote ), Create_V_1( blind(tdcommit($vote, ~r, ~td), ~b) ) ]->
   [
   Out( <blind(tdcommit($vote, ~r, ~td), ~b), 
         sign(blind(tdcommit($vote, ~r, ~td), ~b), ~ltkV)>
   ),
   St_V_1( V, $vote, ~r, ~b, ~td )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_1:
   [ In( <e, sign(e, ~ltkV)> ), !AdminLtk( A, ~ltkA ), !Pk( V, pk(~ltkV) ) ]
  --[ Registered( e ), In_A_1( e ) ]->
   [ Out( <e, sign(e, ~ltkA)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) V_2:
   [
   In( <blind(tdcommit($vote, ~r, ~td), ~b), 
        sign(blind(tdcommit($vote, ~r, ~td), ~b), ~ltkA)>
   ),
   St_V_1( V, $vote, ~r, ~b, ~td ), !AdminPk( A, pk(~ltkA) )
   ]
  -->
   [
   Out( <tdcommit($vote, ~r, ~td), sign(tdcommit($vote, ~r, ~td), ~ltkA)> ),
   P_Ch_Timeliness( $vote, ~r, tdcommit($vote, ~r, ~td) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_1:
   [ In( <x, sign(x, ~ltkA)> ), !AdminPk( A, pk(~ltkA) ) ]
  -->
   [ Out( <x, sign(x, ~ltkA)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) T_1:
   [ P_Ch_Timeliness( $vote, ~r, x ) ]
  --[ VotePublished( x ) ]->
   [ Out( $vote ) ]

  /* has exactly the trivial AC variant */

lemma types [sources]:
  all-traces
  "∀ e #i. (In_A_1( e ) @ #i) ⇒ (∃ #j. (Create_V_1( e ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ e #i. (In_A_1( e ) @ #i) ∧ ∀ #j. (Create_V_1( e ) @ #j) ⇒ ¬(#j < #i)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (Create_V_1( e ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    solve( !AdminLtk( A, ~ltkA ) ▶₁ #i )
      case Register_Admin_pk
      solve( !Pk( V, pk(~ltkV) ) ▶₂ #i )
        case Register_Voter_pk
        solve( !KU( sign(e, ~ltkV) ) @ #vk.2 )
          case A_1
          solve( (#vr.7, 0) ~~> (#vk, 0) )
            case d_0_open
            by contradiction /* forbidden KD-fact */
          qed
        next
          case V_1_case_1
          solve( !KU( ~b ) @ #vk.3 )
            case A_1
            solve( (#vr.11, 0) ~~> (#vk.1, 0) )
              case d_0_open
              by contradiction /* forbidden KD-fact */
            qed
          qed
        next
          case V_1_case_2
          by contradiction /* from formulas */
        next
          case V_1_case_3
          solve( !KU( ~b ) @ #vk.4 )
            case A_1
            solve( (#vr.12, 0) ~~> (#vk.1, 0) )
              case d_0_open
              by contradiction /* forbidden KD-fact */
            qed
          qed
        next
          case V_1_case_4
          solve( !KU( ~b ) @ #vk.3 )
            case A_1
            solve( (#vr.10, 0) ~~> (#vk.1, 0) )
              case d_0_open
              by contradiction /* forbidden KD-fact */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~ltkV ) @ #vk.3 )
            case A_1
            solve( (#vr.7, 0) ~~> (#vk.1, 0) )
              case d_0_open
              by contradiction /* forbidden KD-fact */
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma exec:
  exists-trace "∃ x #i. VotePublished( x ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i. (VotePublished( x ) @ #i)"
*/
simplify
solve( P_Ch_Timeliness( $vote, ~r, x ) ▶₀ #i )
  case V_2
  solve( !KU( sign(blind(tdcommit($vote, ~r, ~td), ~b), ~ltkA) ) @ #vk.2 )
    case A_1
    solve( !KU( sign(blind(tdcommit($vote, ~r, ~td), ~b), ~ltkV.1)
           ) @ #vk.4 )
      case V_1
      solve( !KU( blind(tdcommit($vote, ~r, ~td), ~b) ) @ #vk.3 )
        case V_1_case_1
        SOLVED // trace found
      qed
    qed
  qed
qed

lemma eligibility:
  all-traces
  "∀ x #j.
    (VotePublished( x ) @ #j) ⇒
    (∃ b #i. (Registered( blind(x, b) ) @ #i) ∧ (#i < #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (VotePublished( x ) @ #j)
 ∧
  ∀ b #i. (Registered( blind(x, b) ) @ #i) ⇒ ¬(#i < #j)"
*/
simplify
solve( P_Ch_Timeliness( $vote, ~r, x ) ▶₀ #j )
  case V_2
  solve( !KU( sign(blind(tdcommit($vote, ~r, ~td), ~b), ~ltkA) ) @ #vk.2 )
    case A_1
    by contradiction /* from formulas */
  next
    case c_sign
    by solve( !KU( ~ltkA ) @ #vk.3 )
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/post17/okamoto_eligibility.spthy

------------------------------------------------------------------------------
analyzed: examples/post17/okamoto_eligibility.spthy

  output:          examples/post17/okamoto_eligibility.spthy.tmp
  processing time: 0.593926401s
  types (all-traces): verified (23 steps)
  exec (exists-trace): verified (6 steps)
  eligibility (all-traces): verified (5 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/post17/okamoto_eligibility.spthy

  output:          examples/post17/okamoto_eligibility.spthy.tmp
  processing time: 0.593926401s
  types (all-traces): verified (23 steps)
  exec (exists-trace): verified (6 steps)
  eligibility (all-traces): verified (5 steps)

==============================================================================
*/
