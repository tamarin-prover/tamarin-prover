theory Chaum_Anonymity begin

// Function signature and definition of the equational theory E

functions: blind/2, checksign/2, fst/1, pair/2, pk/1, sign/2, snd/1,
           unblind/2
equations:
    checksign(sign(m, k), pk(k)) = m,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    unblind(blind(m, r), r) = m,
    unblind(sign(blind(m, r), k), r) = sign(m, k)



rule (modulo E) Register_Corrupted_Bank_pk:
   [ Fr( ~ltkB ) ]
  --[ OnlyOnce( ) ]->
   [ !Bank_Ltk( $B, ~ltkB ), !Bank_Pk( $B, pk(~ltkB) ), Out( ~ltkB ) ]

rule (modulo E) C_1_1:
   [ Fr( ~x ), Fr( ~r ) ]
  -->
   [ Out( blind(~x, ~r) ), St_C_1( 'c1', ~x, ~r ) ]

rule (modulo E) C_1_2:
   [ Fr( ~x ), Fr( ~r ) ]
  -->
   [ Out( blind(~x, ~r) ), St_C_1( 'c2', ~x, ~r ) ]

rule (modulo E) C_2:
   [
   St_C_1( C, ~x, ~r ), In( sign(blind(~x, ~r), ~skB) ),
   !Bank_Pk( $B, pk(~skB) )
   ]
  -->
   [ St_C_2( C, ~x, unblind(sign(blind(~x, ~r), ~skB), ~r) ) ]

rule (modulo E) C_2sync:
   [ St_C_2( 'c1', x1, s1 ), St_C_2( 'c2', x2, s2 ) ]
  --[ Finish( ) ]->
   [ Out( diff(<x1, s1>, <x2, s2>) ) ]

restriction OnlyOnce [right]:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction OnlyOnce [left]:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma exec [right]:
  exists-trace "∃ #i. Finish( ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (Finish( ) @ #i)"
*/
simplify
solve( St_C_2( 'c1', x1, s1 ) ▶₀ #i )
  case C_2
  solve( St_C_2( 'c2', x2, s2 ) ▶₁ #i )
    case C_2
    solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk )
      case c_sign
      solve( !KU( sign(blind(~x.1, ~r.1), ~skB) ) @ #vk.1 )
        case c_sign
        solve( !KU( ~skB ) @ #vk.3 )
          case Register_Corrupted_Bank_pk
          solve( !KU( blind(~x, ~r) ) @ #vk.3 )
            case C_1_1
            solve( !KU( blind(~x.1, ~r.1) ) @ #vk.4 )
              case C_1_2
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma exec [left]:
  exists-trace "∃ #i. Finish( ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (Finish( ) @ #i)"
*/
simplify
solve( St_C_2( 'c1', x1, s1 ) ▶₀ #i )
  case C_2
  solve( St_C_2( 'c2', x2, s2 ) ▶₁ #i )
    case C_2
    solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk )
      case c_sign
      solve( !KU( sign(blind(~x.1, ~r.1), ~skB) ) @ #vk.1 )
        case c_sign
        solve( !KU( ~skB ) @ #vk.3 )
          case Register_Corrupted_Bank_pk
          solve( !KU( blind(~x, ~r) ) @ #vk.3 )
            case C_1_1
            solve( !KU( blind(~x.1, ~r.1) ) @ #vk.4 )
              case C_1_2
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_C_1_1
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_C_1_2
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_C_2
  backward-search
    case LHS
    step( simplify )
    step( solve( St_C_1( C, ~x, ~r ) ▶₀ #i ) )
      case C_1_1
      step( solve( !Bank_Pk( $B, pk(~skB) ) ▶₂ #i ) )
        case Register_Corrupted_Bank_pk
        step( solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk ) )
          case c_sign
          step( solve( !KU( ~skB ) @ #vk.2 ) )
            case Register_Corrupted_Bank_pk
            step( solve( !KU( blind(~x, ~r) ) @ #vk.2 ) )
              case C_1_1
              MIRRORED
            next
              case c_blind
              step( solve( !KU( ~x ) @ #vk.3 ) )
                case C_1_1_case_1
                by step( solve( !KU( ~r ) @ #vk.4 ) )
              next
                case C_1_1_case_2
                by step( solve( !KU( ~r ) @ #vk.4 ) )
              next
                case C_2sync_case_1
                by step( contradiction /* cyclic */ )
              next
                case C_2sync_case_2
                by step( contradiction /* cyclic */ )
              qed
            qed
          qed
        qed
      qed
    next
      case C_1_2
      step( solve( !Bank_Pk( $B, pk(~skB) ) ▶₂ #i ) )
        case Register_Corrupted_Bank_pk
        step( solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk ) )
          case c_sign
          step( solve( !KU( ~skB ) @ #vk.2 ) )
            case Register_Corrupted_Bank_pk
            step( solve( !KU( blind(~x, ~r) ) @ #vk.2 ) )
              case C_1_2
              MIRRORED
            next
              case c_blind
              step( solve( !KU( ~x ) @ #vk.3 ) )
                case C_1_2_case_1
                by step( solve( !KU( ~r ) @ #vk.4 ) )
              next
                case C_1_2_case_2
                by step( solve( !KU( ~r ) @ #vk.4 ) )
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( St_C_1( C, ~x, ~r ) ▶₀ #i ) )
      case C_1_1
      step( solve( !Bank_Pk( $B, pk(~skB) ) ▶₂ #i ) )
        case Register_Corrupted_Bank_pk
        step( solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk ) )
          case c_sign
          step( solve( !KU( ~skB ) @ #vk.2 ) )
            case Register_Corrupted_Bank_pk
            step( solve( !KU( blind(~x, ~r) ) @ #vk.2 ) )
              case C_1_1
              MIRRORED
            next
              case c_blind
              step( solve( !KU( ~x ) @ #vk.3 ) )
                case C_1_1_case_1
                by step( solve( !KU( ~r ) @ #vk.4 ) )
              next
                case C_1_1_case_2
                by step( solve( !KU( ~r ) @ #vk.4 ) )
              qed
            qed
          qed
        qed
      qed
    next
      case C_1_2
      step( solve( !Bank_Pk( $B, pk(~skB) ) ▶₂ #i ) )
        case Register_Corrupted_Bank_pk
        step( solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk ) )
          case c_sign
          step( solve( !KU( ~skB ) @ #vk.2 ) )
            case Register_Corrupted_Bank_pk
            step( solve( !KU( blind(~x, ~r) ) @ #vk.2 ) )
              case C_1_2
              MIRRORED
            next
              case c_blind
              step( solve( !KU( ~x ) @ #vk.3 ) )
                case C_1_2_case_1
                by step( solve( !KU( ~r ) @ #vk.4 ) )
              next
                case C_1_2_case_2
                by step( solve( !KU( ~r ) @ #vk.4 ) )
              next
                case C_2sync_case_1
                by step( contradiction /* cyclic */ )
              next
                case C_2sync_case_2
                by step( contradiction /* cyclic */ )
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_C_2sync
  backward-search
    case LHS
    step( simplify )
    step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #i ) )
      case C_2
      step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #i ) )
        case C_2
        step( solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk ) )
          case c_sign
          step( solve( !KU( sign(blind(~x.1, ~r.1), ~skB) ) @ #vk.1 ) )
            case c_sign
            step( solve( !KU( ~skB ) @ #vk.3 ) )
              case Register_Corrupted_Bank_pk
              step( solve( !KU( blind(~x, ~r) ) @ #vk.3 ) )
                case C_1_1
                step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.4 ) )
                  case C_1_2
                  MIRRORED
                next
                  case c_blind
                  step( solve( !KU( ~x.1 ) @ #vk.5 ) )
                    case C_1_2_case_1
                    by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                  next
                    case C_1_2_case_2
                    by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                  qed
                qed
              next
                case c_blind
                step( solve( !KU( ~x ) @ #vk.5 ) )
                  case C_1_1_case_1
                  by step( solve( !KU( ~r ) @ #vk.6 ) )
                next
                  case C_1_1_case_2
                  by step( solve( !KU( ~r ) @ #vk.6 ) )
                next
                  case C_2sync_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case C_2sync_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #i ) )
      case C_2
      step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #i ) )
        case C_2
        step( solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk ) )
          case c_sign
          step( solve( !KU( sign(blind(~x.1, ~r.1), ~skB) ) @ #vk.1 ) )
            case c_sign
            step( solve( !KU( ~skB ) @ #vk.3 ) )
              case Register_Corrupted_Bank_pk
              step( solve( !KU( blind(~x, ~r) ) @ #vk.3 ) )
                case C_1_1
                step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.4 ) )
                  case C_1_2
                  MIRRORED
                next
                  case c_blind
                  step( solve( !KU( ~x.1 ) @ #vk.5 ) )
                    case C_1_2_case_1
                    by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                  next
                    case C_1_2_case_2
                    by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                  next
                    case C_2sync_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case C_2sync_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case c_blind
                step( solve( !KU( ~x ) @ #vk.5 ) )
                  case C_1_1_case_1
                  by step( solve( !KU( ~r ) @ #vk.6 ) )
                next
                  case C_1_1_case_2
                  by step( solve( !KU( ~r ) @ #vk.6 ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_0_unblind_sign
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( blind(m, r) ) ▶₀ #i ) )
      case C_1_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case blind
        by step( solve( !KU( ~r ) @ #vk ) )
      next
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_1_2
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case blind
        by step( solve( !KU( ~r ) @ #vk ) )
      next
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_2sync
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_snd
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_checksign
            by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
          qed
        qed
      qed
    next
      case Register_Corrupted_Bank_pk
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( blind(m, r) ) ▶₀ #i ) )
      case C_1_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case blind
        by step( solve( !KU( ~r ) @ #vk ) )
      next
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_1_2
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case blind
        by step( solve( !KU( ~r ) @ #vk ) )
      next
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_2sync
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
            case C_2
            by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          qed
        qed
      next
        case d_0_snd
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
            case C_2
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_checksign
              by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
            qed
          qed
        qed
      qed
    next
      case Register_Corrupted_Bank_pk
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    qed
  qed
next
  case Rule_Destrd_0_checksign
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( sign(m, k) ) ▶₀ #i ) )
      case C_1_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        next
          case sign
          by step( solve( !KU( ~r ) @ #vk.1 ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_1_2
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        next
          case sign
          by step( solve( !KU( ~r ) @ #vk.1 ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_2sync
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_snd
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_checksign
            by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
          next
            case sign
            step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
              case C_2
              step( solve( !KU( pk(~skB) ) @ #vk ) )
                case c_pk
                step( solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk.1 ) )
                  case c_sign
                  step( solve( !KU( sign(blind(~x.1, ~r.1), ~skB) ) @ #vk.2 ) )
                    case c_sign
                    step( solve( !KU( ~skB ) @ #vk.3 ) )
                      case Register_Corrupted_Bank_pk
                      step( solve( !KU( blind(~x, ~r) ) @ #vk.4 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.5 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          step( solve( !KU( ~x.1 ) @ #vk.6 ) )
                            case C_1_2_case_1
                            by step( solve( !KU( ~r.1 ) @ #vk.7 ) )
                          next
                            case C_1_2_case_2
                            by step( solve( !KU( ~r.1 ) @ #vk.7 ) )
                          qed
                        qed
                      next
                        case c_blind
                        step( solve( !KU( ~x ) @ #vk.6 ) )
                          case C_1_1_case_1
                          by step( solve( !KU( ~r ) @ #vk.7 ) )
                        next
                          case C_1_1_case_2
                          by step( solve( !KU( ~r ) @ #vk.7 ) )
                        next
                          case C_2sync_case_1
                          by step( contradiction /* cyclic */ )
                        next
                          case C_2sync_case_2
                          by step( contradiction /* cyclic */ )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Register_Corrupted_Bank_pk
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( sign(m, k) ) ▶₀ #i ) )
      case C_1_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        next
          case sign
          by step( solve( !KU( ~r ) @ #vk.1 ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_1_2
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        next
          case sign
          by step( solve( !KU( ~r ) @ #vk.1 ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_2sync
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
            case C_2
            by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          qed
        qed
      next
        case d_0_snd
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
            case C_2
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_checksign
              by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
            next
              case sign
              step( solve( !KU( pk(~skB) ) @ #vk ) )
                case c_pk
                step( solve( !KU( sign(blind(~x.1, ~r), ~skB) ) @ #vk.1 ) )
                  case c_sign
                  step( solve( !KU( sign(blind(~x, ~r.1), ~skB) ) @ #vk.2 ) )
                    case c_sign
                    step( solve( !KU( ~skB ) @ #vk.3 ) )
                      case Register_Corrupted_Bank_pk
                      step( solve( !KU( blind(~x.1, ~r) ) @ #vk.4 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x, ~r.1) ) @ #vk.5 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          step( solve( !KU( ~x ) @ #vk.6 ) )
                            case C_1_2_case_1
                            by step( solve( !KU( ~r.1 ) @ #vk.7 ) )
                          next
                            case C_1_2_case_2
                            by step( solve( !KU( ~r.1 ) @ #vk.7 ) )
                          next
                            case C_2sync_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case C_2sync_case_2
                            by step( contradiction /* cyclic */ )
                          qed
                        qed
                      next
                        case c_blind
                        step( solve( !KU( ~x.1 ) @ #vk.6 ) )
                          case C_1_1_case_1
                          by step( solve( !KU( ~r ) @ #vk.7 ) )
                        next
                          case C_1_1_case_2
                          by step( solve( !KU( ~r ) @ #vk.7 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Register_Corrupted_Bank_pk
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    qed
  qed
next
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case C_1_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_1_2
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_2sync
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_snd
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_checksign
            by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
          qed
        qed
      next
        case pair
        step( solve( St_C_2( 'c1', x, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
            case C_2
            step( solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk ) )
              case c_sign
              step( solve( !KU( sign(blind(~x.1, ~r.1), ~skB) ) @ #vk.1 ) )
                case c_sign
                step( solve( !KU( ~skB ) @ #vk.3 ) )
                  case Register_Corrupted_Bank_pk
                  step( solve( !KU( blind(~x, ~r) ) @ #vk.3 ) )
                    case C_1_1
                    step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.4 ) )
                      case C_1_2
                      MIRRORED
                    next
                      case c_blind
                      step( solve( !KU( ~x.1 ) @ #vk.5 ) )
                        case C_1_2_case_1
                        by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                      next
                        case C_1_2_case_2
                        by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                      qed
                    qed
                  next
                    case c_blind
                    step( solve( !KU( ~x ) @ #vk.5 ) )
                      case C_1_1_case_1
                      by step( solve( !KU( ~r ) @ #vk.6 ) )
                    next
                      case C_1_1_case_2
                      by step( solve( !KU( ~r ) @ #vk.6 ) )
                    next
                      case C_2sync_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case C_2sync_case_2
                      by step( contradiction /* cyclic */ )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Register_Corrupted_Bank_pk
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case C_1_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_1_2
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_2sync
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
            case C_2
            by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          qed
        qed
      next
        case d_0_snd
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
            case C_2
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_checksign
              by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
            qed
          qed
        qed
      next
        case pair
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x, s2 ) ▶₁ #vr ) )
            case C_2
            step( solve( !KU( sign(blind(~x.1, ~r), ~skB) ) @ #vk ) )
              case c_sign
              step( solve( !KU( sign(blind(~x, ~r.1), ~skB) ) @ #vk.1 ) )
                case c_sign
                step( solve( !KU( ~skB ) @ #vk.3 ) )
                  case Register_Corrupted_Bank_pk
                  step( solve( !KU( blind(~x.1, ~r) ) @ #vk.3 ) )
                    case C_1_1
                    step( solve( !KU( blind(~x, ~r.1) ) @ #vk.4 ) )
                      case C_1_2
                      MIRRORED
                    next
                      case c_blind
                      step( solve( !KU( ~x ) @ #vk.5 ) )
                        case C_1_2_case_1
                        by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                      next
                        case C_1_2_case_2
                        by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                      next
                        case C_2sync_case_1
                        by step( contradiction /* cyclic */ )
                      next
                        case C_2sync_case_2
                        by step( contradiction /* cyclic */ )
                      qed
                    qed
                  next
                    case c_blind
                    step( solve( !KU( ~x.1 ) @ #vk.5 ) )
                      case C_1_1_case_1
                      by step( solve( !KU( ~r ) @ #vk.6 ) )
                    next
                      case C_1_1_case_2
                      by step( solve( !KU( ~r ) @ #vk.6 ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Register_Corrupted_Bank_pk
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case C_1_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_1_2
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_2sync
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_snd
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_checksign
            by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
          qed
        qed
      next
        case pair
        step( solve( St_C_2( 'c1', x, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
            case C_2
            step( solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk ) )
              case c_sign
              step( solve( !KU( sign(blind(~x.1, ~r.1), ~skB) ) @ #vk.1 ) )
                case c_sign
                step( solve( !KU( ~skB ) @ #vk.3 ) )
                  case Register_Corrupted_Bank_pk
                  step( solve( !KU( blind(~x, ~r) ) @ #vk.3 ) )
                    case C_1_1
                    step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.4 ) )
                      case C_1_2
                      MIRRORED
                    next
                      case c_blind
                      step( solve( !KU( ~x.1 ) @ #vk.5 ) )
                        case C_1_2_case_1
                        by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                      next
                        case C_1_2_case_2
                        by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                      qed
                    qed
                  next
                    case c_blind
                    step( solve( !KU( ~x ) @ #vk.5 ) )
                      case C_1_1_case_1
                      by step( solve( !KU( ~r ) @ #vk.6 ) )
                    next
                      case C_1_1_case_2
                      by step( solve( !KU( ~r ) @ #vk.6 ) )
                    next
                      case C_2sync_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case C_2sync_case_2
                      by step( contradiction /* cyclic */ )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Register_Corrupted_Bank_pk
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case C_1_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_1_2
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_checksign
          by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
        qed
      next
        case d_0_unblind
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case C_2sync
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
            case C_2
            by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          qed
        qed
      next
        case d_0_snd
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
            case C_2
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_checksign
              by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
            qed
          qed
        qed
      next
        case pair
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x, s2 ) ▶₁ #vr ) )
            case C_2
            step( solve( !KU( sign(blind(~x.1, ~r), ~skB) ) @ #vk ) )
              case c_sign
              step( solve( !KU( sign(blind(~x, ~r.1), ~skB) ) @ #vk.1 ) )
                case c_sign
                step( solve( !KU( ~skB ) @ #vk.3 ) )
                  case Register_Corrupted_Bank_pk
                  step( solve( !KU( blind(~x.1, ~r) ) @ #vk.3 ) )
                    case C_1_1
                    step( solve( !KU( blind(~x, ~r.1) ) @ #vk.4 ) )
                      case C_1_2
                      MIRRORED
                    next
                      case c_blind
                      step( solve( !KU( ~x ) @ #vk.5 ) )
                        case C_1_2_case_1
                        by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                      next
                        case C_1_2_case_2
                        by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                      next
                        case C_2sync_case_1
                        by step( contradiction /* cyclic */ )
                      next
                        case C_2sync_case_2
                        by step( contradiction /* cyclic */ )
                      qed
                    qed
                  next
                    case c_blind
                    step( solve( !KU( ~x.1 ) @ #vk.5 ) )
                      case C_1_1_case_1
                      by step( solve( !KU( ~r ) @ #vk.6 ) )
                    next
                      case C_1_1_case_2
                      by step( solve( !KU( ~r ) @ #vk.6 ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Register_Corrupted_Bank_pk
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    qed
  qed
next
  case Rule_Destrd_0_unblind
  backward-search
    case LHS
    step( simplify )
    step( solve( DiffIntrDestrd_0_unblind( ) @ #i ) )
      case d_0_unblind_case_1
      step( solve( !KD( blind(m, r) ) ▶₀ #i ) )
        case C_1_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case blind
          by step( solve( !KU( ~r ) @ #vk ) )
        next
          case d_0_0_unblind_sign
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_checksign
            by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
          qed
        next
          case d_0_unblind
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case C_1_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case blind
          by step( solve( !KU( ~r ) @ #vk ) )
        next
          case d_0_0_unblind_sign
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_checksign
            by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
          qed
        next
          case d_0_unblind
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case C_2sync
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
            case C_2
            by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          qed
        next
          case d_0_snd
          step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
            case C_2
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_checksign
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            qed
          qed
        qed
      next
        case Register_Corrupted_Bank_pk
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      qed
    next
      case d_0_unblind_case_2
      step( solve( !KD( sign(blind(m, r), k) ) ▶₀ #i ) )
        case C_1_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_0_unblind_sign
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_checksign
            by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
          qed
        next
          case d_0_unblind
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case C_1_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_0_unblind_sign
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_checksign
            by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
          qed
        next
          case d_0_unblind
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case C_2sync
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
            case C_2
            by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          qed
        next
          case d_0_snd
          step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
            case C_2
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_checksign
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            qed
          qed
        qed
      next
        case Register_Corrupted_Bank_pk
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( DiffIntrDestrd_0_unblind( ) @ #i ) )
      case d_0_unblind_case_1
      step( solve( !KD( blind(m, r) ) ▶₀ #i ) )
        case C_1_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case blind
          by step( solve( !KU( ~r ) @ #vk ) )
        next
          case d_0_0_unblind_sign
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_checksign
            by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
          qed
        next
          case d_0_unblind
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case C_1_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case blind
          by step( solve( !KU( ~r ) @ #vk ) )
        next
          case d_0_0_unblind_sign
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_checksign
            by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
          qed
        next
          case d_0_unblind
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case C_2sync
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
            case C_2
            step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
              case C_2
              by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            qed
          qed
        next
          case d_0_snd
          step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
            case C_2
            step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
              case C_2
              step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
                case d_0_checksign
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              qed
            qed
          qed
        qed
      next
        case Register_Corrupted_Bank_pk
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      qed
    next
      case d_0_unblind_case_2
      step( solve( !KD( sign(blind(m, r), k) ) ▶₀ #i ) )
        case C_1_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_0_unblind_sign
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_checksign
            by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
          qed
        next
          case d_0_unblind
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case C_1_2
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_0_unblind_sign
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_checksign
            by step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
          qed
        next
          case d_0_unblind
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case C_2sync
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
            case C_2
            step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
              case C_2
              by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            qed
          qed
        next
          case d_0_snd
          step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
            case C_2
            step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
              case C_2
              step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
                case d_0_checksign
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              qed
            qed
          qed
        qed
      next
        case Register_Corrupted_Bank_pk
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      qed
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case C_1_1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case blind
        step( solve( !KU( blind(~x, ~r) ) @ #vk ) )
          case C_1_1
          MIRRORED
        next
          case c_blind
          step( solve( !KU( ~x ) @ #vk.1 ) )
            case C_1_1_case_1
            by step( solve( !KU( ~r ) @ #vk.2 ) )
          next
            case C_1_1_case_2
            by step( solve( !KU( ~r ) @ #vk.2 ) )
          next
            case C_2sync_case_1
            by step( solve( !KU( ~r ) @ #vk.2 ) )
          next
            case C_2sync_case_2
            by step( solve( !KU( ~r ) @ #vk.3 ) )
          qed
        qed
      next
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case d_0_checksign
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case Var_fresh_1_x
            by step( solve( !KU( ~r ) @ #vk.1 ) )
          qed
        next
          case sign
          by step( solve( !KU( ~r ) @ #vk.1 ) )
        qed
      next
        case d_0_unblind
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_fresh_1_x
          by step( solve( !KU( ~r ) @ #vk.1 ) )
        qed
      qed
    next
      case C_1_2
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case blind
        step( solve( !KU( blind(~x, ~r) ) @ #vk ) )
          case C_1_2
          MIRRORED
        next
          case c_blind
          step( solve( !KU( ~x ) @ #vk.1 ) )
            case C_1_2_case_1
            by step( solve( !KU( ~r ) @ #vk.2 ) )
          next
            case C_1_2_case_2
            by step( solve( !KU( ~r ) @ #vk.2 ) )
          qed
        qed
      next
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case d_0_checksign
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case Var_fresh_1_x
            by step( solve( !KU( ~r ) @ #vk.1 ) )
          qed
        next
          case sign
          by step( solve( !KU( ~r ) @ #vk.1 ) )
        qed
      next
        case d_0_unblind
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_fresh_1_x
          by step( solve( !KU( ~r ) @ #vk.1 ) )
        qed
      qed
    next
      case C_2sync
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
            case Var_fresh_1_x
            step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
              case C_2
              step( solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk.1 ) )
                case c_sign
                step( solve( !KU( sign(blind(~x.1, ~r.1), ~skB) ) @ #vk.2 ) )
                  case c_sign
                  step( solve( !KU( ~x ) @ #vk.2 ) )
                    case C_1_1_case_1
                    by step( solve( !KU( ~r ) @ #vk.6 ) )
                  next
                    case C_1_1_case_2
                    by step( solve( !KU( ~r ) @ #vk.6 ) )
                  next
                    case C_2sync_case_1
                    step( solve( !KU( ~skB ) @ #vk.4 ) )
                      case Register_Corrupted_Bank_pk
                      step( solve( !KU( blind(~x, ~r) ) @ #vk.4 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.5 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          step( solve( !KU( ~x.1 ) @ #vk.6 ) )
                            case C_1_2_case_1
                            by step( solve( !KU( ~r.1 ) @ #vk.7 ) )
                          next
                            case C_1_2_case_2
                            by step( solve( !KU( ~r.1 ) @ #vk.7 ) )
                          qed
                        qed
                      next
                        case c_blind
                        by step( contradiction /* cyclic */ )
                      qed
                    qed
                  next
                    case C_2sync_case_2
                    step( solve( !KU( ~skB ) @ #vk.5 ) )
                      case Register_Corrupted_Bank_pk
                      step( solve( !KU( blind(~x, ~r) ) @ #vk.5 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.6 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                            case C_1_2_case_1
                            by step( solve( !KU( ~r.1 ) @ #vk.8 ) )
                          next
                            case C_1_2_case_2
                            by step( solve( !KU( ~r.1 ) @ #vk.8 ) )
                          qed
                        qed
                      next
                        case c_blind
                        by step( contradiction /* cyclic */ )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
            case d_0_checksign
            step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
              case Var_fresh_1_x
              step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
                case C_2
                step( solve( !KU( pk(~skB) ) @ #vk.2 ) )
                  case c_pk
                  step( solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk.2 ) )
                    case c_sign
                    step( solve( !KU( sign(blind(~x.1, ~r.1), ~skB) ) @ #vk.3 ) )
                      case c_sign
                      step( solve( !KU( ~x ) @ #vk.3 ) )
                        case C_1_1_case_1
                        by step( solve( !KU( ~r ) @ #vk.7 ) )
                      next
                        case C_1_1_case_2
                        by step( solve( !KU( ~r ) @ #vk.7 ) )
                      next
                        case C_2sync_case_1
                        step( solve( !KU( ~skB ) @ #vk.4 ) )
                          case Register_Corrupted_Bank_pk
                          step( solve( !KU( blind(~x, ~r) ) @ #vk.5 ) )
                            case C_1_1
                            step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.6 ) )
                              case C_1_2
                              MIRRORED
                            next
                              case c_blind
                              step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                                case C_1_2_case_1
                                by step( solve( !KU( ~r.1 ) @ #vk.8 ) )
                              next
                                case C_1_2_case_2
                                by step( solve( !KU( ~r.1 ) @ #vk.8 ) )
                              qed
                            qed
                          next
                            case c_blind
                            by step( contradiction /* cyclic */ )
                          qed
                        qed
                      next
                        case C_2sync_case_2
                        step( solve( !KU( ~skB ) @ #vk.4 ) )
                          case Register_Corrupted_Bank_pk
                          step( solve( !KU( blind(~x, ~r) ) @ #vk.5 ) )
                            case C_1_1
                            step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.6 ) )
                              case C_1_2
                              MIRRORED
                            next
                              case c_blind
                              step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                                case C_1_2_case_1
                                by step( solve( !KU( ~r.1 ) @ #vk.8 ) )
                              next
                                case C_1_2_case_2
                                by step( solve( !KU( ~r.1 ) @ #vk.8 ) )
                              qed
                            qed
                          next
                            case c_blind
                            by step( contradiction /* cyclic */ )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case sign
            step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
              case C_2
              step( solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk.1 ) )
                case c_sign
                step( solve( !KU( sign(blind(~x.1, ~r.1), ~skB) ) @ #vk.2 ) )
                  case c_sign
                  step( solve( !KU( ~skB ) @ #vk.4 ) )
                    case Register_Corrupted_Bank_pk
                    step( solve( !KU( sign(~x, ~skB) ) @ #vk.3 ) )
                      case C_1_1
                      by step( solve( !KU( ~r ) @ #vk.6 ) )
                    next
                      case C_2sync
                      step( solve( !KU( blind(~x, ~r) ) @ #vk.4 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.5 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          step( solve( !KU( ~x.1 ) @ #vk.6 ) )
                            case C_1_2_case_1
                            by step( solve( !KU( ~r.1 ) @ #vk.7 ) )
                          next
                            case C_1_2_case_2
                            by step( solve( !KU( ~r.1 ) @ #vk.7 ) )
                          qed
                        qed
                      next
                        case c_blind
                        step( solve( !KU( ~x ) @ #vk.6 ) )
                          case C_1_1_case_1
                          by step( solve( !KU( ~r ) @ #vk.7 ) )
                        next
                          case C_1_1_case_2
                          by step( solve( !KU( ~r ) @ #vk.7 ) )
                        next
                          case C_2sync_case_1
                          by step( contradiction /* cyclic */ )
                        next
                          case C_2sync_case_2
                          by step( contradiction /* cyclic */ )
                        qed
                      qed
                    next
                      case c_sign
                      step( solve( !KU( ~x ) @ #vk.6 ) )
                        case C_1_1_case_1
                        by step( solve( !KU( ~r ) @ #vk.7 ) )
                      next
                        case C_1_1_case_2
                        by step( solve( !KU( ~r ) @ #vk.7 ) )
                      next
                        case C_2sync_case_1
                        step( solve( !KU( blind(~x, ~r) ) @ #vk.5 ) )
                          case C_1_1
                          step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.6 ) )
                            case C_1_2
                            MIRRORED
                          next
                            case c_blind
                            step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                              case C_1_2_case_1
                              by step( solve( !KU( ~r.1 ) @ #vk.8 ) )
                            next
                              case C_1_2_case_2
                              by step( solve( !KU( ~r.1 ) @ #vk.8 ) )
                            qed
                          qed
                        next
                          case c_blind
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case C_2sync_case_2
                        step( solve( !KU( blind(~x, ~r) ) @ #vk.6 ) )
                          case C_1_1
                          step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.7 ) )
                            case C_1_2
                            MIRRORED
                          next
                            case c_blind
                            step( solve( !KU( ~x.1 ) @ #vk.8 ) )
                              case C_1_2_case_1
                              by step( solve( !KU( ~r.1 ) @ #vk.9 ) )
                            next
                              case C_1_2_case_2
                              by step( solve( !KU( ~r.1 ) @ #vk.9 ) )
                            qed
                          qed
                        next
                          case c_blind
                          by step( contradiction /* cyclic */ )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
            case C_2
            step( solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk.3 ) )
              case c_sign
              step( solve( !KU( sign(blind(~x.1, ~r.1), ~skB) ) @ #vk.4 ) )
                case c_sign
                step( solve( !KU( ~x ) @ #vk.3 ) )
                  case C_1_1_case_1
                  by step( solve( !KU( ~r ) @ #vk.8 ) )
                next
                  case C_1_1_case_2
                  by step( solve( !KU( ~r ) @ #vk.8 ) )
                next
                  case C_2sync_case_1
                  step( solve( !KU( ~skB ) @ #vk.6 ) )
                    case Register_Corrupted_Bank_pk
                    step( solve( !KU( sign(~x, ~skB) ) @ #vk.5 ) )
                      case C_1_1
                      by step( solve( !KU( ~r ) @ #vk.8 ) )
                    next
                      case C_2sync
                      step( solve( !KU( blind(~x, ~r) ) @ #vk.6 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.7 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          step( solve( !KU( ~x.1 ) @ #vk.8 ) )
                            case C_1_2_case_1
                            by step( solve( !KU( ~r.1 ) @ #vk.9 ) )
                          next
                            case C_1_2_case_2
                            by step( solve( !KU( ~r.1 ) @ #vk.9 ) )
                          qed
                        qed
                      next
                        case c_blind
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case c_sign
                      step( solve( !KU( blind(~x, ~r) ) @ #vk.6 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.7 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          step( solve( !KU( ~x.1 ) @ #vk.8 ) )
                            case C_1_2_case_1
                            by step( solve( !KU( ~r.1 ) @ #vk.9 ) )
                          next
                            case C_1_2_case_2
                            by step( solve( !KU( ~r.1 ) @ #vk.9 ) )
                          qed
                        qed
                      next
                        case c_blind
                        by step( contradiction /* cyclic */ )
                      qed
                    qed
                  qed
                next
                  case C_2sync_case_2
                  step( solve( !KU( ~skB ) @ #vk.7 ) )
                    case Register_Corrupted_Bank_pk
                    step( solve( !KU( sign(~x, ~skB) ) @ #vk.6 ) )
                      case C_1_1
                      by step( solve( !KU( ~r ) @ #vk.9 ) )
                    next
                      case C_2sync
                      step( solve( !KU( blind(~x, ~r) ) @ #vk.7 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.8 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          step( solve( !KU( ~x.1 ) @ #vk.9 ) )
                            case C_1_2_case_1
                            by step( solve( !KU( ~r.1 ) @ #vk.10 ) )
                          next
                            case C_1_2_case_2
                            by step( solve( !KU( ~r.1 ) @ #vk.10 ) )
                          qed
                        qed
                      next
                        case c_blind
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case c_sign
                      step( solve( !KU( blind(~x, ~r) ) @ #vk.7 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x.1, ~r.1) ) @ #vk.8 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          step( solve( !KU( ~x.1 ) @ #vk.9 ) )
                            case C_1_2_case_1
                            by step( solve( !KU( ~r.1 ) @ #vk.10 ) )
                          next
                            case C_1_2_case_2
                            by step( solve( !KU( ~r.1 ) @ #vk.10 ) )
                          qed
                        qed
                      next
                        case c_blind
                        by step( contradiction /* cyclic */ )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Register_Corrupted_Bank_pk
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_ltkB
        step( solve( !KU( ~ltkB ) @ #vk ) )
          case Register_Corrupted_Bank_pk
          MIRRORED
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case C_1_1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case blind
        step( solve( !KU( blind(~x, ~r) ) @ #vk ) )
          case C_1_1
          MIRRORED
        next
          case c_blind
          step( solve( !KU( ~x ) @ #vk.1 ) )
            case C_1_1_case_1
            by step( solve( !KU( ~r ) @ #vk.2 ) )
          next
            case C_1_1_case_2
            by step( solve( !KU( ~r ) @ #vk.2 ) )
          qed
        qed
      next
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case d_0_checksign
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case Var_fresh_1_x
            by step( solve( !KU( ~r ) @ #vk.1 ) )
          qed
        next
          case sign
          by step( solve( !KU( ~r ) @ #vk.1 ) )
        qed
      next
        case d_0_unblind
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_fresh_1_x
          by step( solve( !KU( ~r ) @ #vk.1 ) )
        qed
      qed
    next
      case C_1_2
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case blind
        step( solve( !KU( blind(~x, ~r) ) @ #vk ) )
          case C_1_2
          MIRRORED
        next
          case c_blind
          step( solve( !KU( ~x ) @ #vk.1 ) )
            case C_1_2_case_1
            by step( solve( !KU( ~r ) @ #vk.2 ) )
          next
            case C_1_2_case_2
            by step( solve( !KU( ~r ) @ #vk.2 ) )
          next
            case C_2sync_case_1
            by step( solve( !KU( ~r ) @ #vk.2 ) )
          next
            case C_2sync_case_2
            by step( solve( !KU( ~r ) @ #vk.3 ) )
          qed
        qed
      next
        case d_0_0_unblind_sign
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case d_0_checksign
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case Var_fresh_1_x
            by step( solve( !KU( ~r ) @ #vk.1 ) )
          qed
        next
          case sign
          by step( solve( !KU( ~r ) @ #vk.1 ) )
        qed
      next
        case d_0_unblind
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_fresh_1_x
          by step( solve( !KU( ~r ) @ #vk.1 ) )
        qed
      qed
    next
      case C_2sync
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
            case C_2
            step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
              case Var_fresh_2_x
              step( solve( !KU( sign(blind(~x.1, ~r), ~skB) ) @ #vk.1 ) )
                case c_sign
                step( solve( !KU( sign(blind(~x, ~r.1), ~skB) ) @ #vk.2 ) )
                  case c_sign
                  step( solve( !KU( ~x ) @ #vk.2 ) )
                    case C_1_2_case_1
                    by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                  next
                    case C_1_2_case_2
                    by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                  next
                    case C_2sync_case_1
                    step( solve( !KU( ~skB ) @ #vk.4 ) )
                      case Register_Corrupted_Bank_pk
                      step( solve( !KU( blind(~x.1, ~r) ) @ #vk.4 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x, ~r.1) ) @ #vk.5 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case c_blind
                        step( solve( !KU( ~x.1 ) @ #vk.6 ) )
                          case C_1_1_case_1
                          by step( solve( !KU( ~r ) @ #vk.7 ) )
                        next
                          case C_1_1_case_2
                          by step( solve( !KU( ~r ) @ #vk.7 ) )
                        qed
                      qed
                    qed
                  next
                    case C_2sync_case_2
                    step( solve( !KU( ~skB ) @ #vk.5 ) )
                      case Register_Corrupted_Bank_pk
                      step( solve( !KU( blind(~x.1, ~r) ) @ #vk.5 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x, ~r.1) ) @ #vk.6 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case c_blind
                        step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                          case C_1_1_case_1
                          by step( solve( !KU( ~r ) @ #vk.8 ) )
                        next
                          case C_1_1_case_2
                          by step( solve( !KU( ~r ) @ #vk.8 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
            case C_2
            step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
              case d_0_checksign
              step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                case Var_fresh_2_x
                step( solve( !KU( pk(~skB) ) @ #vk.3 ) )
                  case c_pk
                  step( solve( !KU( sign(blind(~x.1, ~r), ~skB) ) @ #vk.2 ) )
                    case c_sign
                    step( solve( !KU( sign(blind(~x, ~r.1), ~skB) ) @ #vk.3 ) )
                      case c_sign
                      step( solve( !KU( ~x ) @ #vk.3 ) )
                        case C_1_2_case_1
                        by step( solve( !KU( ~r.1 ) @ #vk.7 ) )
                      next
                        case C_1_2_case_2
                        by step( solve( !KU( ~r.1 ) @ #vk.7 ) )
                      next
                        case C_2sync_case_1
                        step( solve( !KU( ~skB ) @ #vk.4 ) )
                          case Register_Corrupted_Bank_pk
                          step( solve( !KU( blind(~x.1, ~r) ) @ #vk.5 ) )
                            case C_1_1
                            step( solve( !KU( blind(~x, ~r.1) ) @ #vk.6 ) )
                              case C_1_2
                              MIRRORED
                            next
                              case c_blind
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case c_blind
                            step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                              case C_1_1_case_1
                              by step( solve( !KU( ~r ) @ #vk.8 ) )
                            next
                              case C_1_1_case_2
                              by step( solve( !KU( ~r ) @ #vk.8 ) )
                            qed
                          qed
                        qed
                      next
                        case C_2sync_case_2
                        step( solve( !KU( ~skB ) @ #vk.4 ) )
                          case Register_Corrupted_Bank_pk
                          step( solve( !KU( blind(~x.1, ~r) ) @ #vk.5 ) )
                            case C_1_1
                            step( solve( !KU( blind(~x, ~r.1) ) @ #vk.6 ) )
                              case C_1_2
                              MIRRORED
                            next
                              case c_blind
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case c_blind
                            step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                              case C_1_1_case_1
                              by step( solve( !KU( ~r ) @ #vk.8 ) )
                            next
                              case C_1_1_case_2
                              by step( solve( !KU( ~r ) @ #vk.8 ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case sign
              step( solve( !KU( sign(blind(~x.1, ~r), ~skB) ) @ #vk.1 ) )
                case c_sign
                step( solve( !KU( sign(blind(~x, ~r.1), ~skB) ) @ #vk.2 ) )
                  case c_sign
                  step( solve( !KU( ~skB ) @ #vk.4 ) )
                    case Register_Corrupted_Bank_pk
                    step( solve( !KU( sign(~x, ~skB) ) @ #vk.3 ) )
                      case C_1_2
                      by step( solve( !KU( ~r.1 ) @ #vk.6 ) )
                    next
                      case C_2sync
                      step( solve( !KU( blind(~x.1, ~r) ) @ #vk.4 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x, ~r.1) ) @ #vk.5 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          step( solve( !KU( ~x ) @ #vk.6 ) )
                            case C_1_2_case_1
                            by step( solve( !KU( ~r.1 ) @ #vk.7 ) )
                          next
                            case C_1_2_case_2
                            by step( solve( !KU( ~r.1 ) @ #vk.7 ) )
                          next
                            case C_2sync_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case C_2sync_case_2
                            by step( contradiction /* cyclic */ )
                          qed
                        qed
                      next
                        case c_blind
                        step( solve( !KU( ~x.1 ) @ #vk.6 ) )
                          case C_1_1_case_1
                          by step( solve( !KU( ~r ) @ #vk.7 ) )
                        next
                          case C_1_1_case_2
                          by step( solve( !KU( ~r ) @ #vk.7 ) )
                        qed
                      qed
                    next
                      case c_sign
                      step( solve( !KU( ~x ) @ #vk.6 ) )
                        case C_1_2_case_1
                        by step( solve( !KU( ~r.1 ) @ #vk.7 ) )
                      next
                        case C_1_2_case_2
                        by step( solve( !KU( ~r.1 ) @ #vk.7 ) )
                      next
                        case C_2sync_case_1
                        step( solve( !KU( blind(~x.1, ~r) ) @ #vk.5 ) )
                          case C_1_1
                          step( solve( !KU( blind(~x, ~r.1) ) @ #vk.6 ) )
                            case C_1_2
                            MIRRORED
                          next
                            case c_blind
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case c_blind
                          step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                            case C_1_1_case_1
                            by step( solve( !KU( ~r ) @ #vk.8 ) )
                          next
                            case C_1_1_case_2
                            by step( solve( !KU( ~r ) @ #vk.8 ) )
                          qed
                        qed
                      next
                        case C_2sync_case_2
                        step( solve( !KU( blind(~x.1, ~r) ) @ #vk.6 ) )
                          case C_1_1
                          step( solve( !KU( blind(~x, ~r.1) ) @ #vk.7 ) )
                            case C_1_2
                            MIRRORED
                          next
                            case c_blind
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case c_blind
                          step( solve( !KU( ~x.1 ) @ #vk.8 ) )
                            case C_1_1_case_1
                            by step( solve( !KU( ~r ) @ #vk.9 ) )
                          next
                            case C_1_1_case_2
                            by step( solve( !KU( ~r ) @ #vk.9 ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( St_C_2( 'c1', x1, s1 ) ▶₀ #vr ) )
          case C_2
          step( solve( St_C_2( 'c2', x2, s2 ) ▶₁ #vr ) )
            case C_2
            step( solve( !KU( sign(blind(~x.1, ~r), ~skB) ) @ #vk.3 ) )
              case c_sign
              step( solve( !KU( sign(blind(~x, ~r.1), ~skB) ) @ #vk.4 ) )
                case c_sign
                step( solve( !KU( ~x ) @ #vk.3 ) )
                  case C_1_2_case_1
                  by step( solve( !KU( ~r.1 ) @ #vk.8 ) )
                next
                  case C_1_2_case_2
                  by step( solve( !KU( ~r.1 ) @ #vk.8 ) )
                next
                  case C_2sync_case_1
                  step( solve( !KU( ~skB ) @ #vk.6 ) )
                    case Register_Corrupted_Bank_pk
                    step( solve( !KU( sign(~x, ~skB) ) @ #vk.5 ) )
                      case C_1_2
                      by step( solve( !KU( ~r.1 ) @ #vk.8 ) )
                    next
                      case C_2sync
                      step( solve( !KU( blind(~x.1, ~r) ) @ #vk.6 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x, ~r.1) ) @ #vk.7 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case c_blind
                        step( solve( !KU( ~x.1 ) @ #vk.8 ) )
                          case C_1_1_case_1
                          by step( solve( !KU( ~r ) @ #vk.9 ) )
                        next
                          case C_1_1_case_2
                          by step( solve( !KU( ~r ) @ #vk.9 ) )
                        qed
                      qed
                    next
                      case c_sign
                      step( solve( !KU( blind(~x.1, ~r) ) @ #vk.6 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x, ~r.1) ) @ #vk.7 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case c_blind
                        step( solve( !KU( ~x.1 ) @ #vk.8 ) )
                          case C_1_1_case_1
                          by step( solve( !KU( ~r ) @ #vk.9 ) )
                        next
                          case C_1_1_case_2
                          by step( solve( !KU( ~r ) @ #vk.9 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case C_2sync_case_2
                  step( solve( !KU( ~skB ) @ #vk.7 ) )
                    case Register_Corrupted_Bank_pk
                    step( solve( !KU( sign(~x, ~skB) ) @ #vk.6 ) )
                      case C_1_2
                      by step( solve( !KU( ~r.1 ) @ #vk.9 ) )
                    next
                      case C_2sync
                      step( solve( !KU( blind(~x.1, ~r) ) @ #vk.7 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x, ~r.1) ) @ #vk.8 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case c_blind
                        step( solve( !KU( ~x.1 ) @ #vk.9 ) )
                          case C_1_1_case_1
                          by step( solve( !KU( ~r ) @ #vk.10 ) )
                        next
                          case C_1_1_case_2
                          by step( solve( !KU( ~r ) @ #vk.10 ) )
                        qed
                      qed
                    next
                      case c_sign
                      step( solve( !KU( blind(~x.1, ~r) ) @ #vk.7 ) )
                        case C_1_1
                        step( solve( !KU( blind(~x, ~r.1) ) @ #vk.8 ) )
                          case C_1_2
                          MIRRORED
                        next
                          case c_blind
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case c_blind
                        step( solve( !KU( ~x.1 ) @ #vk.9 ) )
                          case C_1_1_case_1
                          by step( solve( !KU( ~r ) @ #vk.10 ) )
                        next
                          case C_1_1_case_2
                          by step( solve( !KU( ~r ) @ #vk.10 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Register_Corrupted_Bank_pk
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_ltkB
        step( solve( !KU( ~ltkB ) @ #vk ) )
          case Register_Corrupted_Bank_pk
          MIRRORED
        qed
      qed
    qed
  qed
next
  case Rule_Register_Corrupted_Bank_pk
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
qed

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/post17/chaum_anonymity.spthy

------------------------------------------------------------------------------
analyzed: examples/post17/chaum_anonymity.spthy

  output:          examples/post17/chaum_anonymity.spthy.tmp
  processing time: 7.384559908s
  RHS :  exec (exists-trace): verified (9 steps)
  LHS :  exec (exists-trace): verified (9 steps)
  DiffLemma:  Observational_equivalence : verified (739 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/post17/chaum_anonymity.spthy

  output:          examples/post17/chaum_anonymity.spthy.tmp
  processing time: 7.384559908s
  RHS :  exec (exists-trace): verified (9 steps)
  LHS :  exec (exists-trace): verified (9 steps)
  DiffLemma:  Observational_equivalence : verified (739 steps)

==============================================================================
*/
