theory CertificateTransparencyExt begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, pk/1, read/1, sign/2,
           skca/1[private,destructor], snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    read(sign(sk, m)) = m,
    snd(<x.1, x.2>) = x.2,
    verify(sign(sk, m), m, pk(sk)) = true



heuristic: p















restriction terminate:
  "∃ #t. Terminate( ) @ #t"





























rule (modulo E) inca_0_1111111[color=#408053, process="in($ca.1);"]:
   [ State_1111111( ), In( $ca.1 ) ]
  -->
   [ !Semistate_11111111111( $ca.1 ), Out( pk(skca($ca.1)) ) ]

  /*
  rule (modulo AC) inca_0_1111111[color=#408053, process="in($ca.1);"]:
     [ State_1111111( ), In( $ca ) ]
    -->
     [ !Semistate_11111111111( $ca ), Out( pk(skca($ca)) ) ]
  */

rule (modulo E) p_1_1111111111[color=#40806c, process="!"]:
   [ !Semistate_11111111111( $ca.1 ), In( <$s.1, $ca.2> ), Fr( skS.1 ) ]
  --[ HonestRegister( $s.1, $ca.2, pk(skS.1) ) ]->
   [ State_11111111111111( $ca.1, $s.1, skS.1, $ca.2 ) ]

  /*
  rule (modulo AC) p_1_1111111111[color=#40806c, process="!"]:
     [ !Semistate_11111111111( $ca ), In( <$s, $ca.1> ), Fr( skS ) ]
    --[ HonestRegister( $s, $ca.1, pk(skS) ) ]->
     [ State_11111111111111( $ca, $s, skS, $ca.1 ) ]
  */

rule (modulo E) insertcaproofOfIDspkskSyes_0_11111111111111[color=#40806c,
                                                            process="insert <$ca.2, 'proofOfID', $s.1, pk(skS.1)>,'yes';"]:
   [ State_11111111111111( $ca.1, $s.1, skS.1, $ca.2 ) ]
  --[ Insert( <$ca.2, 'proofOfID', $s.1, pk(skS.1)>, 'yes' ) ]->
   [ State_1111111111111111( $ca.1, $s.1, skS.1, $ca.2 ), Out( pk(skS.1) ) ]

  /*
  rule (modulo AC) insertcaproofOfIDspkskSyes_0_11111111111111[color=#40806c,
                                                               process="insert <$ca.2, 'proofOfID', $s.1, pk(skS.1)>,'yes';"]:
     [ State_11111111111111( $ca, $s, skS, $ca.1 ) ]
    --[ Insert( <$ca.1, 'proofOfID', $s, pk(skS)>, 'yes' ) ]->
     [ State_1111111111111111( $ca, $s, skS, $ca.1 ), Out( pk(skS) ) ]
  */

rule (modulo E) outsignskcacapkskSs_0_1111111111111111[color=#40806c,
                                                       process="out(sign(skca($ca.2), <pk(skS.1), $s.1>));"]:
   [ State_1111111111111111( $ca.1, $s.1, skS.1, $ca.2 ) ]
  -->
   [ Out( sign(skca($ca.2), <pk(skS.1), $s.1>) ) ]

  /*
  rule (modulo AC) outsignskcacapkskSs_0_1111111111111111[color=#40806c,
                                                          process="out(sign(skca($ca.2), <pk(skS.1), $s.1>));"]:
     [ State_1111111111111111( $ca, $s, skS, $ca.1 ) ]
    -->
     [ Out( sign(skca($ca.1), <pk(skS), $s>) ) ]
  */

rule (modulo E) inla_0_1111112[color=#408053, process="in($la.1);"]:
   [ State_1111112( ), In( $la.1 ), In( sign(skca($ca.3), <pk.1, $s.2>) ) ]
  -->
   [ !Semistate_11111121111( $la.1, pk.1, $s.2, $ca.3 ) ]

  /*
  rule (modulo AC) inla_0_1111112[color=#408053, process="in($la.1);"]:
     [ State_1111112( ), In( $la ), In( sign(skca($ca), <pk, $s>) ) ]
    -->
     [ !Semistate_11111121111( $la, pk, $s, $ca ) ]
  */

rule (modulo E) p_1_1111112111[color=#408069, process="!"]:
   [ !Semistate_11111121111( $la.1, pk.1, $s.2, $ca.3 ), Fr( lock ) ]
  --[ Lock_0( '0', lock, 'log' ), Lock( '0', lock, 'log' ) ]->
   [ State_111111211111( lock, $la.1, pk.1, $s.2, $ca.3 ) ]

  /*
  rule (modulo AC) p_1_1111112111[color=#408069, process="!"]:
     [ !Semistate_11111121111( $la, pk, $s, $ca ), Fr( lock ) ]
    --[ Lock_0( '0', lock, 'log' ), Lock( '0', lock, 'log' ) ]->
     [ State_111111211111( lock, $la, pk, $s, $ca ) ]
  */

rule (modulo E) insertlalogspkcyes_0_111111211111[color=#408069,
                                                  process="insert <$la.1, 'log', $s.2, pk.1, 'c1'>,'yes';"]:
   [ State_111111211111( lock, $la.1, pk.1, $s.2, $ca.3 ) ]
  --[ Insert( <$la.1, 'log', $s.2, pk.1, 'c1'>, 'yes' ) ]->
   [ State_1111112111111( lock, $la.1, pk.1, $s.2, $ca.3 ) ]

  /*
  rule (modulo AC) insertlalogspkcyes_0_111111211111[color=#408069,
                                                     process="insert <$la.1, 'log', $s.2, pk.1, 'c1'>,'yes';"]:
     [ State_111111211111( lock, $la, pk, $s, $ca ) ]
    --[ Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) ]->
     [ State_1111112111111( lock, $la, pk, $s, $ca ) ]
  */

rule (modulo E) insertlalogspksyes_0_1111112111111[color=#408069,
                                                   process="insert <$la.1, 'log', $s.2, pk.1, 's1'>,'yes';"]:
   [ State_1111112111111( lock, $la.1, pk.1, $s.2, $ca.3 ) ]
  --[ Insert( <$la.1, 'log', $s.2, pk.1, 's1'>, 'yes' ) ]->
   [ State_11111121111111( lock, $la.1, pk.1, $s.2, $ca.3 ) ]

  /*
  rule (modulo AC) insertlalogspksyes_0_1111112111111[color=#408069,
                                                      process="insert <$la.1, 'log', $s.2, pk.1, 's1'>,'yes';"]:
     [ State_1111112111111( lock, $la, pk, $s, $ca ) ]
    --[ Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) ]->
     [ State_11111121111111( lock, $la, pk, $s, $ca ) ]
  */

rule (modulo E) insertlalogspkiyes_0_11111121111111[color=#408069,
                                                    process="insert <$la.1, 'log', $s.2, pk.1, 'i'>,'yes';"]:
   [ State_11111121111111( lock, $la.1, pk.1, $s.2, $ca.3 ) ]
  --[ Insert( <$la.1, 'log', $s.2, pk.1, 'i'>, 'yes' ) ]->
   [ State_111111211111111( lock, $la.1, pk.1, $s.2, $ca.3 ) ]

  /*
  rule (modulo AC) insertlalogspkiyes_0_11111121111111[color=#408069,
                                                       process="insert <$la.1, 'log', $s.2, pk.1, 'i'>,'yes';"]:
     [ State_11111121111111( lock, $la, pk, $s, $ca ) ]
    --[ Insert( <$la, 'log', $s, pk, 'i'>, 'yes' ) ]->
     [ State_111111211111111( lock, $la, pk, $s, $ca ) ]
  */

rule (modulo E) unlocklog_0_111111211111111[color=#408069,
                                            process="unlock 'log';"]:
   [ State_111111211111111( lock, $la.1, pk.1, $s.2, $ca.3 ) ]
  --[ Unlock_0( '0', lock, 'log' ), Unlock( '0', lock, 'log' ) ]->
   [ ]

  /*
  rule (modulo AC) unlocklog_0_111111211111111[color=#408069,
                                               process="unlock 'log';"]:
     [ State_111111211111111( lock, $la, pk, $s, $ca ) ]
    --[ Unlock_0( '0', lock, 'log' ), Unlock( '0', lock, 'log' ) ]->
     [ ]
  */

rule (modulo E) locktestCA_0_1111121[color=#408069,
                                     process="lock 'testCA';"]:
   [ State_1111121( ), Fr( lock.1 ), In( sign(skca($ca.4), <pk.2, $s.3>) ) ]
  --[ Lock_1( '1', lock.1, 'testCA' ), Lock( '1', lock.1, 'testCA' ) ]->
   [ State_111112111( lock.1, pk.2, $s.3, $ca.4 ) ]

  /*
  rule (modulo AC) locktestCA_0_1111121[color=#408069,
                                        process="lock 'testCA';"]:
     [ State_1111121( ), Fr( lock ), In( sign(skca($ca), <pk, $s>) ) ]
    --[ Lock_1( '1', lock, 'testCA' ), Lock( '1', lock, 'testCA' ) ]->
     [ State_111112111( lock, pk, $s, $ca ) ]
  */

rule (modulo E) lookupcaproofOfIDspkasignored_0_111112111[color=#408080,
                                                          process="lookup <$ca.4, 'proofOfID', $s.3, pk.2> as ignored.1"]:
   [ State_111112111( lock.1, pk.2, $s.3, $ca.4 ) ]
  --[ IsIn( <$ca.4, 'proofOfID', $s.3, pk.2>, ignored.1 ) ]->
   [ State_1111121111( ignored.1, lock.1, pk.2, $s.3, $ca.4 ) ]

  /*
  rule (modulo AC) lookupcaproofOfIDspkasignored_0_111112111[color=#408080,
                                                             process="lookup <$ca.4, 'proofOfID', $s.3, pk.2> as ignored.1"]:
     [ State_111112111( lock, pk, $s, $ca ) ]
    --[ IsIn( <$ca, 'proofOfID', $s, pk>, ignored ) ]->
     [ State_1111121111( ignored, lock, pk, $s, $ca ) ]
  */

rule (modulo E) eventHonestCAca_0_1111121111[color=#408080,
                                             process="event HonestCA( $ca.4 );"]:
   [ State_1111121111( ignored.1, lock.1, pk.2, $s.3, $ca.4 ) ]
  --[ HonestCA( $ca.4 ) ]->
   [ State_11111211111( ignored.1, lock.1, pk.2, $s.3, $ca.4 ) ]

  /*
  rule (modulo AC) eventHonestCAca_0_1111121111[color=#408080,
                                                process="event HonestCA( $ca.4 );"]:
     [ State_1111121111( ignored, lock, pk, $s, $ca ) ]
    --[ HonestCA( $ca ) ]->
     [ State_11111211111( ignored, lock, pk, $s, $ca ) ]
  */

rule (modulo E) eventTestCAcaspk_0_11111211111[color=#408080,
                                               process="event TestCA( $ca.4, $s.3, pk.2 );"]:
   [ State_11111211111( ignored.1, lock.1, pk.2, $s.3, $ca.4 ) ]
  --[ TestCA( $ca.4, $s.3, pk.2 ) ]->
   [ State_111112111111( ignored.1, lock.1, pk.2, $s.3, $ca.4 ) ]

  /*
  rule (modulo AC) eventTestCAcaspk_0_11111211111[color=#408080,
                                                  process="event TestCA( $ca.4, $s.3, pk.2 );"]:
     [ State_11111211111( ignored, lock, pk, $s, $ca ) ]
    --[ TestCA( $ca, $s, pk ) ]->
     [ State_111112111111( ignored, lock, pk, $s, $ca ) ]
  */

rule (modulo E) unlocktestCA_0_111112111111[color=#408080,
                                            process="unlock 'testCA';"]:
   [ State_111112111111( ignored.1, lock.1, pk.2, $s.3, $ca.4 ) ]
  --[ Unlock_1( '1', lock.1, 'testCA' ), Unlock( '1', lock.1, 'testCA' )
  ]->
   [ ]

  /*
  rule (modulo AC) unlocktestCA_0_111112111111[color=#408080,
                                               process="unlock 'testCA';"]:
     [ State_111112111111( ignored, lock, pk, $s, $ca ) ]
    --[ Unlock_1( '1', lock, 'testCA' ), Unlock( '1', lock, 'testCA' ) ]->
     [ ]
  */

rule (modulo E) lookupcaproofOfIDspkasignored_1_111112111[color=#408080,
                                                          process="lookup <$ca.4, 'proofOfID', $s.3, pk.2> as ignored.1"]:
   [ State_111112111( lock.1, pk.2, $s.3, $ca.4 ) ]
  --[ IsNotSet( <$ca.4, 'proofOfID', $s.3, pk.2> ) ]->
   [ State_1111121112( lock.1, pk.2, $s.3, $ca.4 ) ]

  /*
  rule (modulo AC) lookupcaproofOfIDspkasignored_1_111112111[color=#408080,
                                                             process="lookup <$ca.4, 'proofOfID', $s.3, pk.2> as ignored.1"]:
     [ State_111112111( lock, pk, $s, $ca ) ]
    --[ IsNotSet( <$ca, 'proofOfID', $s, pk> ) ]->
     [ State_1111121112( lock, pk, $s, $ca ) ]
  */

rule (modulo E) eventDishonestCAca_0_1111121112[color=#408080,
                                                process="event DishonestCA( $ca.4 );"]:
   [ State_1111121112( lock.1, pk.2, $s.3, $ca.4 ) ]
  --[ DishonestCA( $ca.4 ) ]->
   [ State_11111211121( lock.1, pk.2, $s.3, $ca.4 ) ]

  /*
  rule (modulo AC) eventDishonestCAca_0_1111121112[color=#408080,
                                                   process="event DishonestCA( $ca.4 );"]:
     [ State_1111121112( lock, pk, $s, $ca ) ]
    --[ DishonestCA( $ca ) ]->
     [ State_11111211121( lock, pk, $s, $ca ) ]
  */

rule (modulo E) eventTestCAcaspk_0_11111211121[color=#408080,
                                               process="event TestCA( $ca.4, $s.3, pk.2 );"]:
   [ State_11111211121( lock.1, pk.2, $s.3, $ca.4 ) ]
  --[ TestCA( $ca.4, $s.3, pk.2 ) ]->
   [ State_111112111211( lock.1, pk.2, $s.3, $ca.4 ) ]

  /*
  rule (modulo AC) eventTestCAcaspk_0_11111211121[color=#408080,
                                                  process="event TestCA( $ca.4, $s.3, pk.2 );"]:
     [ State_11111211121( lock, pk, $s, $ca ) ]
    --[ TestCA( $ca, $s, pk ) ]->
     [ State_111112111211( lock, pk, $s, $ca ) ]
  */

rule (modulo E) unlocktestCA_0_111112111211[color=#408080,
                                            process="unlock 'testCA';"]:
   [ State_111112111211( lock.1, pk.2, $s.3, $ca.4 ) ]
  --[ Unlock_1( '1', lock.1, 'testCA' ), Unlock( '1', lock.1, 'testCA' )
  ]->
   [ ]

  /*
  rule (modulo AC) unlocktestCA_0_111112111211[color=#408080,
                                               process="unlock 'testCA';"]:
     [ State_111112111211( lock, pk, $s, $ca ) ]
    --[ Unlock_1( '1', lock, 'testCA' ), Unlock( '1', lock, 'testCA' ) ]->
     [ ]
  */

rule (modulo E) locklog_0_111121[color=#40805d, process="lock 'log';"]:
   [ State_111121( ), Fr( lock.2 ), In( <$la.2, 'c1', 's1', $s.4, pk.3> ) ]
  --[ Lock_2( '2', lock.2, 'log' ), Lock( '2', lock.2, 'log' ) ]->
   [ State_11112111( $la.2, lock.2, pk.3, $s.4 ) ]

  /*
  rule (modulo AC) locklog_0_111121[color=#40805d, process="lock 'log';"]:
     [ State_111121( ), Fr( lock ), In( <$la, 'c1', 's1', $s, pk> ) ]
    --[ Lock_2( '2', lock, 'log' ), Lock( '2', lock, 'log' ) ]->
     [ State_11112111( $la, lock, pk, $s ) ]
  */

rule (modulo E) lookuplalogspkcasx_0_11112111[color=#408067,
                                              process="lookup <$la.2, 'log', $s.4, pk.3, 'c1'> as x1.1"]:
   [ State_11112111( $la.2, lock.2, pk.3, $s.4 ) ]
  --[ IsIn( <$la.2, 'log', $s.4, pk.3, 'c1'>, x1.1 ) ]->
   [ State_111121111( x1.1, $la.2, lock.2, pk.3, $s.4 ) ]

  /*
  rule (modulo AC) lookuplalogspkcasx_0_11112111[color=#408067,
                                                 process="lookup <$la.2, 'log', $s.4, pk.3, 'c1'> as x1.1"]:
     [ State_11112111( $la, lock, pk, $s ) ]
    --[ IsIn( <$la, 'log', $s, pk, 'c1'>, x1 ) ]->
     [ State_111121111( x1, $la, lock, pk, $s ) ]
  */

rule (modulo E) lookuplalogspksasx_0_111121111[color=#408067,
                                               process="lookup <$la.2, 'log', $s.4, pk.3, 's1'> as x2.1"]:
   [ State_111121111( x1.1, $la.2, lock.2, pk.3, $s.4 ) ]
  --[ IsIn( <$la.2, 'log', $s.4, pk.3, 's1'>, x2.1 ) ]->
   [ State_1111211111( x1.1, x2.1, $la.2, lock.2, pk.3, $s.4 ) ]

  /*
  rule (modulo AC) lookuplalogspksasx_0_111121111[color=#408067,
                                                  process="lookup <$la.2, 'log', $s.4, pk.3, 's1'> as x2.1"]:
     [ State_111121111( x1, $la, lock, pk, $s ) ]
    --[ IsIn( <$la, 'log', $s, pk, 's1'>, x2 ) ]->
     [ State_1111211111( x1, x2, $la, lock, pk, $s ) ]
  */

rule (modulo E) eventHonestLA_0_1111211111[color=#408067,
                                           process="event HonestLA( );"]:
   [ State_1111211111( x1.1, x2.1, $la.2, lock.2, pk.3, $s.4 ) ]
  --[ HonestLA( ) ]->
   [ State_11112111111( x1.1, x2.1, $la.2, lock.2, pk.3, $s.4 ) ]

  /*
  rule (modulo AC) eventHonestLA_0_1111211111[color=#408067,
                                              process="event HonestLA( );"]:
     [ State_1111211111( x1, x2, $la, lock, pk, $s ) ]
    --[ HonestLA( ) ]->
     [ State_11112111111( x1, x2, $la, lock, pk, $s ) ]
  */

rule (modulo E) eventTestLAlaspk_0_11112111111[color=#408067,
                                               process="event TestLA( $la.2, $s.4, pk.3 );"]:
   [ State_11112111111( x1.1, x2.1, $la.2, lock.2, pk.3, $s.4 ) ]
  --[ TestLA( $la.2, $s.4, pk.3 ) ]->
   [ State_111121111111( x1.1, x2.1, $la.2, lock.2, pk.3, $s.4 ) ]

  /*
  rule (modulo AC) eventTestLAlaspk_0_11112111111[color=#408067,
                                                  process="event TestLA( $la.2, $s.4, pk.3 );"]:
     [ State_11112111111( x1, x2, $la, lock, pk, $s ) ]
    --[ TestLA( $la, $s, pk ) ]->
     [ State_111121111111( x1, x2, $la, lock, pk, $s ) ]
  */

rule (modulo E) unlocklog_0_111121111111[color=#408067,
                                         process="unlock 'log';"]:
   [ State_111121111111( x1.1, x2.1, $la.2, lock.2, pk.3, $s.4 ) ]
  --[ Unlock_2( '2', lock.2, 'log' ), Unlock( '2', lock.2, 'log' ) ]->
   [ ]

  /*
  rule (modulo AC) unlocklog_0_111121111111[color=#408067,
                                            process="unlock 'log';"]:
     [ State_111121111111( x1, x2, $la, lock, pk, $s ) ]
    --[ Unlock_2( '2', lock, 'log' ), Unlock( '2', lock, 'log' ) ]->
     [ ]
  */

rule (modulo E) lookuplalogspksasx_1_111121111[color=#408067,
                                               process="lookup <$la.2, 'log', $s.4, pk.3, 's1'> as x2.1"]:
   [ State_111121111( x1.1, $la.2, lock.2, pk.3, $s.4 ) ]
  --[ IsNotSet( <$la.2, 'log', $s.4, pk.3, 's1'> ) ]->
   [ State_1111211112( x1.1, $la.2, lock.2, pk.3, $s.4 ) ]

  /*
  rule (modulo AC) lookuplalogspksasx_1_111121111[color=#408067,
                                                  process="lookup <$la.2, 'log', $s.4, pk.3, 's1'> as x2.1"]:
     [ State_111121111( x1, $la, lock, pk, $s ) ]
    --[ IsNotSet( <$la, 'log', $s, pk, 's1'> ) ]->
     [ State_1111211112( x1, $la, lock, pk, $s ) ]
  */

rule (modulo E) eventDishonestLAla_0_1111211112[color=#408067,
                                                process="event DishonestLA( $la.2 );"]:
   [ State_1111211112( x1.1, $la.2, lock.2, pk.3, $s.4 ) ]
  --[ DishonestLA( $la.2 ) ]->
   [ State_11112111121( x1.1, $la.2, lock.2, pk.3, $s.4 ) ]

  /*
  rule (modulo AC) eventDishonestLAla_0_1111211112[color=#408067,
                                                   process="event DishonestLA( $la.2 );"]:
     [ State_1111211112( x1, $la, lock, pk, $s ) ]
    --[ DishonestLA( $la ) ]->
     [ State_11112111121( x1, $la, lock, pk, $s ) ]
  */

rule (modulo E) eventTestLAlaspk_0_11112111121[color=#408067,
                                               process="event TestLA( $la.2, $s.4, pk.3 );"]:
   [ State_11112111121( x1.1, $la.2, lock.2, pk.3, $s.4 ) ]
  --[ TestLA( $la.2, $s.4, pk.3 ) ]->
   [ State_111121111211( x1.1, $la.2, lock.2, pk.3, $s.4 ) ]

  /*
  rule (modulo AC) eventTestLAlaspk_0_11112111121[color=#408067,
                                                  process="event TestLA( $la.2, $s.4, pk.3 );"]:
     [ State_11112111121( x1, $la, lock, pk, $s ) ]
    --[ TestLA( $la, $s, pk ) ]->
     [ State_111121111211( x1, $la, lock, pk, $s ) ]
  */

rule (modulo E) unlocklog_0_111121111211[color=#408067,
                                         process="unlock 'log';"]:
   [ State_111121111211( x1.1, $la.2, lock.2, pk.3, $s.4 ) ]
  --[ Unlock_2( '2', lock.2, 'log' ), Unlock( '2', lock.2, 'log' ) ]->
   [ ]

  /*
  rule (modulo AC) unlocklog_0_111121111211[color=#408067,
                                            process="unlock 'log';"]:
     [ State_111121111211( x1, $la, lock, pk, $s ) ]
    --[ Unlock_2( '2', lock, 'log' ), Unlock( '2', lock, 'log' ) ]->
     [ ]
  */

rule (modulo E) lookuplalogspkcasx_1_11112111[color=#408067,
                                              process="lookup <$la.2, 'log', $s.4, pk.3, 'c1'> as x1.1"]:
   [ State_11112111( $la.2, lock.2, pk.3, $s.4 ) ]
  --[ IsNotSet( <$la.2, 'log', $s.4, pk.3, 'c1'> ) ]->
   [ State_111121112( $la.2, lock.2, pk.3, $s.4 ) ]

  /*
  rule (modulo AC) lookuplalogspkcasx_1_11112111[color=#408067,
                                                 process="lookup <$la.2, 'log', $s.4, pk.3, 'c1'> as x1.1"]:
     [ State_11112111( $la, lock, pk, $s ) ]
    --[ IsNotSet( <$la, 'log', $s, pk, 'c1'> ) ]->
     [ State_111121112( $la, lock, pk, $s ) ]
  */

rule (modulo E) lookuplalogspksasx_0_111121112[color=#408067,
                                               process="lookup <$la.2, 'log', $s.4, pk.3, 's1'> as x2.2"]:
   [ State_111121112( $la.2, lock.2, pk.3, $s.4 ) ]
  --[ IsIn( <$la.2, 'log', $s.4, pk.3, 's1'>, x2.2 ) ]->
   [ State_1111211121( $la.2, lock.2, x2.2, pk.3, $s.4 ) ]

  /*
  rule (modulo AC) lookuplalogspksasx_0_111121112[color=#408067,
                                                  process="lookup <$la.2, 'log', $s.4, pk.3, 's1'> as x2.2"]:
     [ State_111121112( $la, lock, pk, $s ) ]
    --[ IsIn( <$la, 'log', $s, pk, 's1'>, x2 ) ]->
     [ State_1111211121( $la, lock, x2, pk, $s ) ]
  */

rule (modulo E) eventDishonestLAla_0_1111211121[color=#408067,
                                                process="event DishonestLA( $la.2 );"]:
   [ State_1111211121( $la.2, lock.2, x2.2, pk.3, $s.4 ) ]
  --[ DishonestLA( $la.2 ) ]->
   [ State_11112111211( $la.2, lock.2, x2.2, pk.3, $s.4 ) ]

  /*
  rule (modulo AC) eventDishonestLAla_0_1111211121[color=#408067,
                                                   process="event DishonestLA( $la.2 );"]:
     [ State_1111211121( $la, lock, x2, pk, $s ) ]
    --[ DishonestLA( $la ) ]->
     [ State_11112111211( $la, lock, x2, pk, $s ) ]
  */

rule (modulo E) eventTestLAlaspk_0_11112111211[color=#408067,
                                               process="event TestLA( $la.2, $s.4, pk.3 );"]:
   [ State_11112111211( $la.2, lock.2, x2.2, pk.3, $s.4 ) ]
  --[ TestLA( $la.2, $s.4, pk.3 ) ]->
   [ State_111121112111( $la.2, lock.2, x2.2, pk.3, $s.4 ) ]

  /*
  rule (modulo AC) eventTestLAlaspk_0_11112111211[color=#408067,
                                                  process="event TestLA( $la.2, $s.4, pk.3 );"]:
     [ State_11112111211( $la, lock, x2, pk, $s ) ]
    --[ TestLA( $la, $s, pk ) ]->
     [ State_111121112111( $la, lock, x2, pk, $s ) ]
  */

rule (modulo E) unlocklog_0_111121112111[color=#408067,
                                         process="unlock 'log';"]:
   [ State_111121112111( $la.2, lock.2, x2.2, pk.3, $s.4 ) ]
  --[ Unlock_2( '2', lock.2, 'log' ), Unlock( '2', lock.2, 'log' ) ]->
   [ ]

  /*
  rule (modulo AC) unlocklog_0_111121112111[color=#408067,
                                            process="unlock 'log';"]:
     [ State_111121112111( $la, lock, x2, pk, $s ) ]
    --[ Unlock_2( '2', lock, 'log' ), Unlock( '2', lock, 'log' ) ]->
     [ ]
  */

rule (modulo E) lookuplalogspksasx_1_111121112[color=#408067,
                                               process="lookup <$la.2, 'log', $s.4, pk.3, 's1'> as x2.2"]:
   [ State_111121112( $la.2, lock.2, pk.3, $s.4 ) ]
  --[ IsNotSet( <$la.2, 'log', $s.4, pk.3, 's1'> ) ]->
   [ ]

  /*
  rule (modulo AC) lookuplalogspksasx_1_111121112[color=#408067,
                                                  process="lookup <$la.2, 'log', $s.4, pk.3, 's1'> as x2.2"]:
     [ State_111121112( $la, lock, pk, $s ) ]
    --[ IsNotSet( <$la, 'log', $s, pk, 's1'> ) ]->
     [ ]
  */

rule (modulo E) p_1_11[color=#408053, process="!"]:
   [ !Semistate_111( ) ]
  -->
   [
   State_11121( ), State_111121( ), State_1111121( ), State_1111111( ),
   State_1111112( )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) locktestCA_0_11121[color=#408068,
                                   process="lock 'testCA';"]:
   [ State_11121( ), Fr( lock.3 ) ]
  --[ Lock_3( '3', lock.3, 'testCA' ), Lock( '3', lock.3, 'testCA' ) ]->
   [ State_111211( lock.3 ) ]

  /*
  rule (modulo AC) locktestCA_0_11121[color=#408068,
                                      process="lock 'testCA';"]:
     [ State_11121( ), Fr( lock ) ]
    --[ Lock_3( '3', lock, 'testCA' ), Lock( '3', lock, 'testCA' ) ]->
     [ State_111211( lock ) ]
  */

rule (modulo E) locklog_0_111211[color=#40807d, process="lock 'log';"]:
   [ State_111211( lock.3 ), Fr( lock.4 ) ]
  --[ Lock_4( '4', lock.4, 'log' ), Lock( '4', lock.4, 'log' ) ]->
   [ State_1112111( lock.3, lock.4 ) ]

  /*
  rule (modulo AC) locklog_0_111211[color=#40807d, process="lock 'log';"]:
     [ State_111211( lock ), Fr( lock.1 ) ]
    --[ Lock_4( '4', lock.1, 'log' ), Lock( '4', lock.1, 'log' ) ]->
     [ State_1112111( lock, lock.1 ) ]
  */

rule (modulo E) eventTerminate_0_1112111[color=#40807d,
                                         process="event Terminate( );"]:
   [ State_1112111( lock.3, lock.4 ) ] --[ Terminate( ) ]-> [ ]

  /*
  rule (modulo AC) eventTerminate_0_1112111[color=#40807d,
                                            process="event Terminate( );"]:
     [ State_1112111( lock, lock.1 ) ] --[ Terminate( ) ]-> [ ]
  */

rule (modulo E) Init[color=#ffffff, process="|"]:
   [ ] --[ Init( ) ]-> [ !Semistate_21( ), !Semistate_111( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) incCAcorruptca_0_211[color=#ffffff,
                                     process="in('c',<'CAcorrupt', $ca.5>);"]:
   [ State_211( ), Message( 'c', x ) ] --> [ Let_2111( x ), Ack( 'c', x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) incCAcorruptca_2_211[color=#ffffff,
                                     process="in('c',<'CAcorrupt', $ca.5>);"]:
   [ State_211( ), In( <'c', x> ) ] --> [ Let_2111( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) incCAcorruptca_1_211[color=#ffffff,
                                     process="in('c',<'CAcorrupt', $ca.5>);"]:
   [ Let_2111( <'CAcorrupt', $ca.5> ) ] --> [ State_2111( $ca.5 ) ]

  /*
  rule (modulo AC) incCAcorruptca_1_211[color=#ffffff,
                                        process="in('c',<'CAcorrupt', $ca.5>);"]:
     [ Let_2111( <'CAcorrupt', $ca> ) ] --> [ State_2111( $ca ) ]
  */

rule (modulo E) incCAcorruptca_3_211[color=#ffffff,
                                     process="in('c',<'CAcorrupt', $ca.5>);"]:
   [ Let_2111( <'CAcorrupt', $ca.5> ) ] --> [ State_2111( $ca.5 ) ]

  /*
  rule (modulo AC) incCAcorruptca_3_211[color=#ffffff,
                                        process="in('c',<'CAcorrupt', $ca.5>);"]:
     [ Let_2111( <'CAcorrupt', $ca> ) ] --> [ State_2111( $ca ) ]
  */

rule (modulo E) eventCorruptedca_0_2111[color=#ffffff,
                                        process="event Corrupted( $ca.5 );"]:
   [ State_2111( $ca.5 ) ]
  --[ Corrupted( $ca.5 ) ]->
   [ State_21111( $ca.5 ) ]

  // loop breaker: [0]
  /*
  rule (modulo AC) eventCorruptedca_0_2111[color=#ffffff,
                                           process="event Corrupted( $ca.5 );"]:
     [ State_2111( $ca ) ] --[ Corrupted( $ca ) ]-> [ State_21111( $ca ) ]
    // loop breaker: [0]
  */

rule (modulo E) outcskcaca_1_21111[color=#ffffff,
                                   process="out('c',skca($ca.5));"]:
   [ State_21111( $ca.5 ) ]
  -->
   [ Message( 'c', skca($ca.5) ), Semistate_211111( $ca.5 ) ]

  /*
  rule (modulo AC) outcskcaca_1_21111[color=#ffffff,
                                      process="out('c',skca($ca.5));"]:
     [ State_21111( $ca ) ]
    -->
     [ Message( 'c', skca($ca) ), Semistate_211111( $ca ) ]
  */

rule (modulo E) outcskcaca_0_21111[color=#ffffff,
                                   process="out('c',skca($ca.5));"]:
   [ State_21111( $ca.5 ), In( 'c' ) ]
  -->
   [ Out( skca($ca.5) ), State_211111( $ca.5 ) ]

  /*
  rule (modulo AC) outcskcaca_0_21111[color=#ffffff,
                                      process="out('c',skca($ca.5));"]:
     [ State_21111( $ca ), In( 'c' ) ]
    -->
     [ Out( skca($ca) ), State_211111( $ca ) ]
  */

rule (modulo E) outcskcaca_2_21111[color=#ffffff,
                                   process="out('c',skca($ca.5));"]:
   [ Semistate_211111( $ca.5 ), Ack( 'c', skca($ca.5) ) ]
  -->
   [ State_211111( $ca.5 ) ]

  /*
  rule (modulo AC) outcskcaca_2_21111[color=#ffffff,
                                      process="out('c',skca($ca.5));"]:
     [ Semistate_211111( $ca ), Ack( 'c', skca($ca) ) ]
    -->
     [ State_211111( $ca ) ]
  */

rule (modulo E) p_1_2[color=#ffffff, process="!"]:
   [ !Semistate_21( ) ] --> [ !Semistate_2121( ), State_211( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_212[color=#ffffff, process="!"]:
   [ !Semistate_2121( ) ] --> [ State_2121( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inclaLAcorruptid_0_2121[color=#ffffff,
                                        process="in('c',<$la.3, 'LAcorrupt', $id.1>);"]:
   [ State_2121( ), Message( 'c', x ) ]
  -->
   [ Let_21211( x ), Ack( 'c', x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inclaLAcorruptid_2_2121[color=#ffffff,
                                        process="in('c',<$la.3, 'LAcorrupt', $id.1>);"]:
   [ State_2121( ), In( <'c', x> ) ] --> [ Let_21211( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inclaLAcorruptid_1_2121[color=#ffffff,
                                        process="in('c',<$la.3, 'LAcorrupt', $id.1>);"]:
   [ Let_21211( <$la.3, 'LAcorrupt', $id.1> ) ]
  -->
   [ State_21211( $id.1, $la.3 ) ]

  /*
  rule (modulo AC) inclaLAcorruptid_1_2121[color=#ffffff,
                                           process="in('c',<$la.3, 'LAcorrupt', $id.1>);"]:
     [ Let_21211( <$la, 'LAcorrupt', $id> ) ] --> [ State_21211( $id, $la ) ]
  */

rule (modulo E) inclaLAcorruptid_3_2121[color=#ffffff,
                                        process="in('c',<$la.3, 'LAcorrupt', $id.1>);"]:
   [ Let_21211( <$la.3, 'LAcorrupt', $id.1> ) ]
  -->
   [ State_21211( $id.1, $la.3 ) ]

  /*
  rule (modulo AC) inclaLAcorruptid_3_2121[color=#ffffff,
                                           process="in('c',<$la.3, 'LAcorrupt', $id.1>);"]:
     [ Let_21211( <$la, 'LAcorrupt', $id> ) ] --> [ State_21211( $id, $la ) ]
  */

rule (modulo E) eventCorruptedla_0_21211[color=#ffffff,
                                         process="event Corrupted( $la.3 );"]:
   [ State_21211( $id.1, $la.3 ) ]
  --[ Corrupted( $la.3 ) ]->
   [ !Semistate_2121111( $id.1, $la.3 ) ]

  /*
  rule (modulo AC) eventCorruptedla_0_21211[color=#ffffff,
                                            process="event Corrupted( $la.3 );"]:
     [ State_21211( $id, $la ) ]
    --[ Corrupted( $la ) ]->
     [ !Semistate_2121111( $id, $la ) ]
  */

rule (modulo E) p_1_212111[color=#ffffff, process="!"]:
   [ !Semistate_2121111( $id.1, $la.3 ) ]
  -->
   [ State_2121111( $id.1, $la.3 ) ]

  /*
  rule (modulo AC) p_1_212111[color=#ffffff, process="!"]:
     [ !Semistate_2121111( $id, $la ) ] --> [ State_2121111( $id, $la ) ]
  */

rule (modulo E) incSpkentity_0_2121111[color=#ffffff,
                                       process="in('c',<S.1, pk.4, entity.1>);"]:
   [ State_2121111( $id.1, $la.3 ), Message( 'c', x.4 ) ]
  -->
   [ Let_21211111( x.4, $id.1, $la.3 ), Ack( 'c', x.4 ) ]

  /*
  rule (modulo AC) incSpkentity_0_2121111[color=#ffffff,
                                          process="in('c',<S.1, pk.4, entity.1>);"]:
     [ State_2121111( $id, $la ), Message( 'c', x ) ]
    -->
     [ Let_21211111( x, $id, $la ), Ack( 'c', x ) ]
  */

rule (modulo E) incSpkentity_2_2121111[color=#ffffff,
                                       process="in('c',<S.1, pk.4, entity.1>);"]:
   [ State_2121111( $id.1, $la.3 ), In( <'c', x.4> ) ]
  -->
   [ Let_21211111( x.4, $id.1, $la.3 ) ]

  /*
  rule (modulo AC) incSpkentity_2_2121111[color=#ffffff,
                                          process="in('c',<S.1, pk.4, entity.1>);"]:
     [ State_2121111( $id, $la ), In( <'c', x> ) ]
    -->
     [ Let_21211111( x, $id, $la ) ]
  */

rule (modulo E) incSpkentity_1_2121111[color=#ffffff,
                                       process="in('c',<S.1, pk.4, entity.1>);"]:
   [ Let_21211111( <S.1, pk.4, entity.1>, $id.1, $la.3 ) ]
  -->
   [ State_21211111( $id.1, S.1, entity.1, $la.3, pk.4 ) ]

  /*
  rule (modulo AC) incSpkentity_1_2121111[color=#ffffff,
                                          process="in('c',<S.1, pk.4, entity.1>);"]:
     [ Let_21211111( <S, pk, entity>, $id, $la ) ]
    -->
     [ State_21211111( $id, S, entity, $la, pk ) ]
  */

rule (modulo E) incSpkentity_3_2121111[color=#ffffff,
                                       process="in('c',<S.1, pk.4, entity.1>);"]:
   [ Let_21211111( <S.1, pk.4, entity.1>, $id.1, $la.3 ) ]
  -->
   [ State_21211111( $id.1, S.1, entity.1, $la.3, pk.4 ) ]

  /*
  rule (modulo AC) incSpkentity_3_2121111[color=#ffffff,
                                          process="in('c',<S.1, pk.4, entity.1>);"]:
     [ Let_21211111( <S, pk, entity>, $id, $la ) ]
    -->
     [ State_21211111( $id, S, entity, $la, pk ) ]
  */

rule (modulo E) locklog_0_21211111[color=#ffffff, process="lock 'log';"]:
   [ State_21211111( $id.1, S.1, entity.1, $la.3, pk.4 ), Fr( lock.5 ) ]
  --[ Lock_5( '5', lock.5, 'log' ), Lock( '5', lock.5, 'log' ) ]->
   [ State_212111111( $id.1, S.1, entity.1, $la.3, pk.4, lock.5 ) ]

  /*
  rule (modulo AC) locklog_0_21211111[color=#ffffff,
                                      process="lock 'log';"]:
     [ State_21211111( $id, S, entity, $la, pk ), Fr( lock ) ]
    --[ Lock_5( '5', lock, 'log' ), Lock( '5', lock, 'log' ) ]->
     [ State_212111111( $id, S, entity, $la, pk, lock ) ]
  */

rule (modulo E) insertlalogSpkentityyes_0_212111111[color=#ffffff,
                                                    process="insert <$la.3, 'log', S.1, pk.4, entity.1>,'yes';"]:
   [ State_212111111( $id.1, S.1, entity.1, $la.3, pk.4, lock.5 ) ]
  --[ Insert( <$la.3, 'log', S.1, pk.4, entity.1>, 'yes' ) ]->
   [ State_2121111111( $id.1, S.1, entity.1, $la.3, pk.4, lock.5 ) ]

  /*
  rule (modulo AC) insertlalogSpkentityyes_0_212111111[color=#ffffff,
                                                       process="insert <$la.3, 'log', S.1, pk.4, entity.1>,'yes';"]:
     [ State_212111111( $id, S, entity, $la, pk, lock ) ]
    --[ Insert( <$la, 'log', S, pk, entity>, 'yes' ) ]->
     [ State_2121111111( $id, S, entity, $la, pk, lock ) ]
  */

rule (modulo E) unlocklog_0_2121111111[color=#ffffff,
                                       process="unlock 'log';"]:
   [ State_2121111111( $id.1, S.1, entity.1, $la.3, pk.4, lock.5 ) ]
  --[ Unlock_5( '5', lock.5, 'log' ), Unlock( '5', lock.5, 'log' ) ]->
   [ ]

  /*
  rule (modulo AC) unlocklog_0_2121111111[color=#ffffff,
                                          process="unlock 'log';"]:
     [ State_2121111111( $id, S, entity, $la, pk, lock ) ]
    --[ Unlock_5( '5', lock, 'log' ), Unlock( '5', lock, 'log' ) ]->
     [ ]
  */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒ (∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction locking_0:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_0( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_1:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_1( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_2:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_2( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_5:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_5( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_3:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((#t3 < #t1) ∨ (#t1 = #t3))"
  // safety formula

restriction locking_4:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((#t3 < #t1) ∨ (#t1 = #t3))"
  // safety formula

lemma accCA_tCA_suff:
  exists-trace
  "∃ ca #i.
    ((DishonestCA( ca ) @ #i) ∧
     (∀ ca.1 #i.1. (DishonestCA( ca.1 ) @ #i.1) ⇒ (ca.1 = ca))) ∧
    (∀ a #i.1. (Corrupted( a ) @ #i.1) ⇒ (a = ca))"
/*
guarded formula characterizing all satisfying traces:
"∃ ca #i.
  (DishonestCA( ca ) @ #i)
 ∧
  (∀ ca.1 #i.1. (DishonestCA( ca.1 ) @ #i.1) ⇒ ca.1 = ca) ∧
  (∀ a #i.1. (Corrupted( a ) @ #i.1) ⇒ a = ca)"
*/
simplify
solve( State_1111121112( lock, pk, $s, $ca ) ▶₀ #i )
  case lookupcaproofOfIDspkasignored_1_111112111
  solve( State_1112111( lock, lock.1 ) ▶₀ #t )
    case locklog_0_111211
    solve( Unlock_1( '1', ~n, 'testCA' ) @ #t2 )
      case unlocktestCA_0_111112111211
      solve( State_111112111211( ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
        case eventTestCAcaspk_0_11111211121
        solve( !KU( sign(skca($ca), <pk, $s>) ) @ #vk )
          case c_sign
          solve( !KU( skca($ca) ) @ #vk.1 )
            case outcskcaca_0_21111
            solve( State_2111( $ca ) ▶₀ #vr.9 )
              case incCAcorruptca_1_211
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma accCA_verif_empty:
  all-traces
  "(¬(∃ ca #i. DishonestCA( ca ) @ #i)) ⇒
   (∀ ca s pk #i.
     (TestCA( ca, s, pk ) @ #i) ⇒ (∃ #j. HonestRegister( s, ca, pk ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"(∀ ca #i. (DishonestCA( ca ) @ #i) ⇒ ⊥) ∧
 (∃ ca s pk #i.
   (TestCA( ca, s, pk ) @ #i)
  ∧
   ∀ #j. (HonestRegister( s, ca, pk ) @ #j) ⇒ ⊥)"
*/
simplify
solve( State_1112111( lock, lock.1 ) ▶₀ #t )
  case locklog_0_111211
  solve( TestCA( ca, s, pk ) @ #i )
    case eventTestCAcaspk_0_11111211111
    solve( State_11111211111( ignored, lock, pk, $s, $ca ) ▶₀ #i )
      case eventHonestCAca_0_1111121111
      solve( Unlock_1( '1', ~n, 'testCA' ) @ #t2 )
        case unlocktestCA_0_111112111111
        solve( State_111112111111( ignored.1, ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
          case eventTestCAcaspk_0_11111211111
          solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( !KU( sign(skca($ca), <pk, $s>) ) @ #vk )
              case c_sign
              solve( !KU( skca($ca) ) @ #vk.1 )
                case outcskcaca_0_21111
                solve( State_2111( $ca ) ▶₀ #vr.9 )
                  case incCAcorruptca_1_211
                  solve( Insert( <$ca, 'proofOfID', $s, pk>, ignored ) @ #t2.1 )
                    case insertcaproofOfIDspkskSyes_0_11111111111111
                    solve( State_11111111111111( $ca.1, $s, skS, $ca ) ▶₀ #t2.1 )
                      case p_1_1111111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case incCAcorruptca_3_211
                  solve( Insert( <$ca, 'proofOfID', $s, pk>, ignored ) @ #t2.1 )
                    case insertcaproofOfIDspkskSyes_0_11111111111111
                    solve( State_11111111111111( $ca.1, $s, skS, $ca ) ▶₀ #t2.1 )
                      case p_1_1111111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case outsignskcacapkskSs_0_1111111111111111
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case unlocktestCA_0_111112111211
        by solve( State_111112111211( ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
      qed
    qed
  next
    case eventTestCAcaspk_0_11111211121
    solve( State_11111211121( lock, pk, $s, $ca ) ▶₀ #i )
      case eventDishonestCAca_0_1111121112
      by contradiction /* from formulas */
    qed
  qed
qed

lemma accCA_tCA_verif_nonempty:
  all-traces
  "∀ ca #i.
    (DishonestCA( ca ) @ #i) ⇒
    (¬(∀ ca.1 s pk #i.1.
        (TestCA( ca.1, s, pk ) @ #i.1) ⇒
        (∃ #j. HonestRegister( s, ca.1, pk ) @ #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ ca #i.
  (DishonestCA( ca ) @ #i)
 ∧
  ∀ ca.1 s pk #i.1.
   (TestCA( ca.1, s, pk ) @ #i.1)
  ⇒
   ∃ #j. (HonestRegister( s, ca.1, pk ) @ #j)"
*/
simplify
solve( State_1111121112( lock, pk, $s, $ca ) ▶₀ #i )
  case lookupcaproofOfIDspkasignored_1_111112111
  solve( State_1112111( lock, lock.1 ) ▶₀ #t )
    case locklog_0_111211
    solve( Unlock_1( '1', ~n, 'testCA' ) @ #t2 )
      case unlocktestCA_0_111112111111
      by solve( State_111112111111( ignored, ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
    next
      case unlocktestCA_0_111112111211
      solve( State_111112111211( ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
        case eventTestCAcaspk_0_11111211121
        solve( !Semistate_11111111111( $ca.1 ) ▶₀ #j )
          case inca_0_1111111
          solve( !KU( sign(skca($ca), <pk(~n.1), $s>) ) @ #vk )
            case c_sign
            solve( !KU( skca($ca) ) @ #vk.6 )
              case outcskcaca_0_21111
              solve( State_2111( $ca ) ▶₀ #vr.11 )
                case incCAcorruptca_1_211
                solve( !KU( pk(~n.1) ) @ #vk.8 )
                  case c_pk
                  by solve( !KU( ~n.1 ) @ #vk.12 )
                next
                  case insertcaproofOfIDspkskSyes_0_11111111111111
                  by contradiction /* cyclic */
                next
                  case outsignskcacapkskSs_0_1111111111111111
                  by contradiction /* cyclic */
                qed
              next
                case incCAcorruptca_3_211
                solve( !KU( pk(~n.1) ) @ #vk.8 )
                  case c_pk
                  by solve( !KU( ~n.1 ) @ #vk.12 )
                next
                  case insertcaproofOfIDspkskSyes_0_11111111111111
                  by contradiction /* cyclic */
                next
                  case outsignskcacapkskSs_0_1111111111111111
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case outsignskcacapkskSs_0_1111111111111111
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
qed

lemma accCA_tCA_min:
  all-traces
  "∀ ca #i.
    (DishonestCA( ca ) @ #i) ⇒
    (¬(∃ ca.1 #i.1.
        (DishonestCA( ca.1 ) @ #i.1) ∧ ((ca.1 = ca) ∧ (¬(ca = ca.1)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca #i.
  (DishonestCA( ca ) @ #i)
 ∧
  ∃ ca.1 #i.1. (DishonestCA( ca.1 ) @ #i.1) ∧ (ca.1 = ca) ∧ ¬(ca = ca.1)"
*/
simplify
by contradiction /* from formulas */

lemma accCA_tCA_uniq:
  all-traces
  "∀ ca #i. (DishonestCA( ca ) @ #i) ⇒ (∃ #i.1. Corrupted( ca ) @ #i.1)"
/*
guarded formula characterizing all counter-examples:
"∃ ca #i.
  (DishonestCA( ca ) @ #i) ∧ ∀ #i.1. (Corrupted( ca ) @ #i.1) ⇒ ⊥"
*/
simplify
solve( State_1111121112( lock, pk, $s, $ca ) ▶₀ #i )
  case lookupcaproofOfIDspkasignored_1_111112111
  solve( State_1112111( lock, lock.1 ) ▶₀ #t )
    case locklog_0_111211
    solve( Unlock_1( '1', ~n, 'testCA' ) @ #t2 )
      case unlocktestCA_0_111112111111
      by solve( State_111112111111( ignored, ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
    next
      case unlocktestCA_0_111112111211
      solve( State_111112111211( ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
        case eventTestCAcaspk_0_11111211121
        solve( !KU( sign(skca($ca), <pk, $s>) ) @ #vk )
          case c_sign
          solve( !KU( skca($ca) ) @ #vk.1 )
            case outcskcaca_0_21111
            by contradiction /* from formulas */
          qed
        next
          case outsignskcacapkskSs_0_1111111111111111
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
qed

lemma accCA_tCA_inj:
  all-traces "⊤"
/*
guarded formula characterizing all counter-examples:
"⊥"
*/
by contradiction /* from formulas */

lemma accCA_tCA_single:
  exists-trace
  "∃ ca #i.
    (DishonestCA( ca ) @ #i) ∧
    (∀ ca.1 #i.1. (DishonestCA( ca.1 ) @ #i.1) ⇒ (ca.1 = ca))"
/*
guarded formula characterizing all satisfying traces:
"∃ ca #i.
  (DishonestCA( ca ) @ #i)
 ∧
  ∀ ca.1 #i.1. (DishonestCA( ca.1 ) @ #i.1) ⇒ ca.1 = ca"
*/
simplify
solve( State_1111121112( lock, pk, $s, $ca ) ▶₀ #i )
  case lookupcaproofOfIDspkasignored_1_111112111
  solve( State_1112111( lock, lock.1 ) ▶₀ #t )
    case locklog_0_111211
    solve( Unlock_1( '1', ~n, 'testCA' ) @ #t2 )
      case unlocktestCA_0_111112111211
      solve( State_111112111211( ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
        case eventTestCAcaspk_0_11111211121
        solve( !KU( sign(skca($ca), <pk, $s>) ) @ #vk )
          case c_sign
          solve( !KU( skca($ca) ) @ #vk.1 )
            case outcskcaca_0_21111
            solve( State_2111( $ca ) ▶₀ #vr.9 )
              case incCAcorruptca_1_211
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma accLA_tLA_suff:
  exists-trace
  "∃ la #i.
    ((DishonestLA( la ) @ #i) ∧
     (∀ la.1 #i.1. (DishonestLA( la.1 ) @ #i.1) ⇒ (la.1 = la))) ∧
    (∀ a #i.1. (Corrupted( a ) @ #i.1) ⇒ (a = la))"
/*
guarded formula characterizing all satisfying traces:
"∃ la #i.
  (DishonestLA( la ) @ #i)
 ∧
  (∀ la.1 #i.1. (DishonestLA( la.1 ) @ #i.1) ⇒ la.1 = la) ∧
  (∀ a #i.1. (Corrupted( a ) @ #i.1) ⇒ a = la)"
*/
simplify
solve( State_1112111( lock, lock.1 ) ▶₀ #t )
  case locklog_0_111211
  solve( DishonestLA( la ) @ #i )
    case eventDishonestLAla_0_1111211112
    solve( State_1111211112( x1, $la, lock, pk, $s ) ▶₀ #i )
      case lookuplalogspksasx_1_111121111
      solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
        case unlocklog_0_111121111211
        solve( State_111121111211( x1.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
          case eventTestLAlaspk_0_11112111121
          solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
            case case_2
            solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.1 )
              case insertlalogSpkentityyes_0_212111111
              solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #t2.1 )
                case locklog_0_21211111_case_1
                solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                  case insertlalogSpkentityyes_0_212111111
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma accLA_verif_empty:
  all-traces
  "(¬(∃ la #i. DishonestLA( la ) @ #i)) ⇒
   (∀ la s pk #i.
     (TestLA( la, s, pk ) @ #i) ⇒
     ((∃ #j. (Insert( <la, 'log', s, pk, 'c1'>, 'yes' ) @ #j) ∧ (#j < #i)) ∧
      (∃ #j. (Insert( <la, 'log', s, pk, 's1'>, 'yes' ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"(∀ la #i. (DishonestLA( la ) @ #i) ⇒ ⊥) ∧
 (∃ la s pk #i.
   (TestLA( la, s, pk ) @ #i)
  ∧
   ((∀ #j. (Insert( <la, 'log', s, pk, 'c1'>, 'yes' ) @ #j) ⇒ ¬(#j < #i)) ∨
    (∀ #j. (Insert( <la, 'log', s, pk, 's1'>, 'yes' ) @ #j) ⇒ ¬(#j < #i))))"
*/
simplify
solve( (∀ #j.
         (Insert( <la, 'log', s, pk, 'c1'>, 'yes' ) @ #j) ⇒ ¬(#j < #i))  ∥
       (∀ #j. (Insert( <la, 'log', s, pk, 's1'>, 'yes' ) @ #j) ⇒ ¬(#j < #i)) )
  case case_1
  solve( State_1112111( lock, lock.1 ) ▶₀ #t )
    case locklog_0_111211
    solve( TestLA( la, s, pk ) @ #i )
      case eventTestLAlaspk_0_11112111111
      solve( State_11112111111( x1, x2, $la, lock, pk, $s ) ▶₀ #i )
        case eventHonestLA_0_1111211111
        solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
          case unlocklog_0_111121111111
          solve( State_111121111111( x1.1, x2.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
            case eventTestLAlaspk_0_11112111111
            solve( (#t2.2 < #t2.4)  ∥ (#t2.2 = #t2.4) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( Insert( <$la, 'log', $s, pk, 's1'>, x2 ) @ #t2.1 )
                  case insertlalogSpkentityyes_0_212111111
                  solve( State_212111111( $id, $s, 's1', $la, pk, lock ) ▶₀ #t2.1 )
                    case locklog_0_21211111_case_1
                    solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.3 )
                        case insertlalogSpkentityyes_0_212111111
                        by contradiction /* from formulas */
                      next
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case locklog_0_21211111_case_2
                    solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.3 )
                        case insertlalogSpkentityyes_0_212111111
                        by contradiction /* from formulas */
                      next
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case locklog_0_21211111_case_3
                    solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.3 )
                        case insertlalogSpkentityyes_0_212111111
                        by contradiction /* from formulas */
                      next
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case locklog_0_21211111_case_4
                    solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.3 )
                        case insertlalogSpkentityyes_0_212111111
                        by contradiction /* from formulas */
                      next
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case insertlalogspksyes_0_1111112111111
                  solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #t2.1 )
                    case insertlalogspkcyes_0_111111211111
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case unlocklog_0_111121111211
          by solve( State_111121111211( x1.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
        next
          case unlocklog_0_111121112111
          by solve( State_111121112111( $la.1, ~n, x2.1, pk.1, $s.1 ) ▶₀ #t2 )
        qed
      qed
    next
      case eventTestLAlaspk_0_11112111121
      solve( State_11112111121( x1, $la, lock, pk, $s ) ▶₀ #i )
        case eventDishonestLAla_0_1111211112
        by contradiction /* from formulas */
      qed
    next
      case eventTestLAlaspk_0_11112111211
      solve( State_11112111211( $la, lock, x2, pk, $s ) ▶₀ #i )
        case eventDishonestLAla_0_1111211121
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case case_2
  solve( State_1112111( lock, lock.1 ) ▶₀ #t )
    case locklog_0_111211
    solve( TestLA( la, s, pk ) @ #i )
      case eventTestLAlaspk_0_11112111111
      solve( State_11112111111( x1, x2, $la, lock, pk, $s ) ▶₀ #i )
        case eventHonestLA_0_1111211111
        solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
          case unlocklog_0_111121111111
          solve( State_111121111111( x1.1, x2.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
            case eventTestLAlaspk_0_11112111111
            solve( (#t2.2 < #t2.4)  ∥ (#t2.2 = #t2.4) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( Insert( <$la, 'log', $s, pk, 's1'>, x2 ) @ #t2.1 )
                  case insertlalogSpkentityyes_0_212111111
                  by contradiction /* from formulas */
                next
                  case insertlalogspksyes_0_1111112111111
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case unlocklog_0_111121111211
          by solve( State_111121111211( x1.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
        next
          case unlocklog_0_111121112111
          by solve( State_111121112111( $la.1, ~n, x2.1, pk.1, $s.1 ) ▶₀ #t2 )
        qed
      qed
    next
      case eventTestLAlaspk_0_11112111121
      solve( State_11112111121( x1, $la, lock, pk, $s ) ▶₀ #i )
        case eventDishonestLAla_0_1111211112
        by contradiction /* from formulas */
      qed
    next
      case eventTestLAlaspk_0_11112111211
      solve( State_11112111211( $la, lock, x2, pk, $s ) ▶₀ #i )
        case eventDishonestLAla_0_1111211121
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma accLA_tLA_verif_nonempty:
  all-traces
  "∀ la #i.
    (DishonestLA( la ) @ #i) ⇒
    (¬(∀ la.1 s pk #i.1.
        (TestLA( la.1, s, pk ) @ #i.1) ⇒
        ((∃ #j.
           (Insert( <la.1, 'log', s, pk, 'c1'>, 'yes' ) @ #j) ∧ (#j < #i.1)) ∧
         (∃ #j.
           (Insert( <la.1, 'log', s, pk, 's1'>, 'yes' ) @ #j) ∧ (#j < #i.1)))))"
/*
guarded formula characterizing all counter-examples:
"∃ la #i.
  (DishonestLA( la ) @ #i)
 ∧
  ∀ la.1 s pk #i.1.
   (TestLA( la.1, s, pk ) @ #i.1)
  ⇒
   (∃ #j. (Insert( <la.1, 'log', s, pk, 'c1'>, 'yes' ) @ #j) ∧ #j < #i.1) ∧
   (∃ #j. (Insert( <la.1, 'log', s, pk, 's1'>, 'yes' ) @ #j) ∧ #j < #i.1)"
*/
simplify
solve( State_1112111( lock, lock.1 ) ▶₀ #t )
  case locklog_0_111211
  solve( DishonestLA( la ) @ #i )
    case eventDishonestLAla_0_1111211112
    solve( State_1111211112( x1, $la, lock, pk, $s ) ▶₀ #i )
      case lookuplalogspksasx_1_111121111
      solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
        case unlocklog_0_111121111111
        by solve( State_111121111111( x1.1, x2, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
      next
        case unlocklog_0_111121111211
        solve( State_111121111211( x1.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
          case eventTestLAlaspk_0_11112111121
          solve( (#j.1 < #t2.2)  ∥ (#j.1 = #t2.2)  ∥ (#vr.5 < #j.1) )
            case case_1
            solve( (#t2.2 < #t2.1)  ∥ (#t2.2 = #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.1 )
                case insertlalogSpkentityyes_0_212111111
                solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #t2.1 )
                  case locklog_0_21211111_case_1
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case locklog_0_21211111_case_2
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_3
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_4
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        solve( State_111111211111111( ~n.1, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.3 )
                          case insertlalogspkiyes_0_11111121111111
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_2
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_2
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case locklog_0_21211111_case_3
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_4
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        solve( State_111111211111111( ~n.1, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.3 )
                          case insertlalogspkiyes_0_11111121111111
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_3
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_2
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_3
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case locklog_0_21211111_case_4
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        solve( State_111111211111111( ~n.1, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.3 )
                          case insertlalogspkiyes_0_11111121111111
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_4
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_2
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_3
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_4
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case case_3
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        solve( State_111111211111111( ~n.1, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.3 )
                          case insertlalogspkiyes_0_11111121111111
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case insertlalogspkcyes_0_111111211111
                solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #t2.1 )
                  case p_1_1111112111
                  solve( State_111111211111111( ~n.3, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.2 )
                    case insertlalogspkiyes_0_11111121111111
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (#t2.1 < #j.1)  ∥ (#t2.1 = #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #j.1 )
                case insertlalogSpkentityyes_0_212111111
                solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                  case locklog_0_21211111_case_1
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspksyes_0_1111112111111
                      solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_2
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspksyes_0_1111112111111
                      solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_3
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspksyes_0_1111112111111
                      solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_4
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #j.1 )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspksyes_0_1111112111111
                      solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case insertlalogspkcyes_0_111111211111
                solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                  case p_1_1111112111
                  solve( State_111111211111111( ~n.1, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.1 )
                    case insertlalogspkiyes_0_11111121111111
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.1 )
                case insertlalogSpkentityyes_0_212111111
                solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #t2.1 )
                  case locklog_0_21211111_case_1
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_2
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_3
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_4
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case insertlalogspkcyes_0_111111211111
                solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #t2.1 )
                  case p_1_1111112111
                  solve( State_111111211111111( ~n.3, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.2 )
                    case insertlalogspkiyes_0_11111121111111
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case unlocklog_0_111121112111
        by solve( State_111121112111( $la.1, ~n, x2, pk.1, $s.1 ) ▶₀ #t2 )
      qed
    qed
  next
    case eventDishonestLAla_0_1111211121
    solve( State_1111211121( $la, lock, x2, pk, $s ) ▶₀ #i )
      case lookuplalogspksasx_0_111121112
      solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
        case unlocklog_0_111121111111
        by solve( State_111121111111( x1, x2.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
      next
        case unlocklog_0_111121111211
        by solve( State_111121111211( x1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
      next
        case unlocklog_0_111121112111
        solve( State_111121112111( $la.1, ~n, x2.1, pk.1, $s.1 ) ▶₀ #t2 )
          case eventTestLAlaspk_0_11112111211
          solve( (#j.1 < #t2.2)  ∥ (#j.1 = #t2.2)  ∥ (#vr.4 < #j.1) )
            case case_1
            solve( (#t2.2 < #t2.1)  ∥ (#t2.2 = #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Insert( <$la, 'log', $s, pk, 's1'>, x2 ) @ #t2.1 )
                case insertlalogSpkentityyes_0_212111111
                solve( State_212111111( $id, $s, 's1', $la, pk, lock ) ▶₀ #t2.1 )
                  case locklog_0_21211111_case_1
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_2
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_3
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_4
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case insertlalogspksyes_0_1111112111111
                solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #t2.1 )
                  case insertlalogspkcyes_0_111111211111
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case case_2
            solve( (#t2.1 < #j.1)  ∥ (#t2.1 = #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Insert( <$la, 'log', $s, pk, 's1'>, x2 ) @ #j.1 )
                case insertlalogSpkentityyes_0_212111111
                solve( State_212111111( $id, $s, 's1', $la, pk, lock ) ▶₀ #j )
                  case locklog_0_21211111_case_1
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id.1, $s, 'c1', $la, pk, lock ) ▶₀ #j.1 )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_2
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id.1, $s, 'c1', $la, pk, lock ) ▶₀ #j.1 )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_3
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id.1, $s, 'c1', $la, pk, lock ) ▶₀ #j.1 )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_4
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j.1 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id.1, $s, 'c1', $la, pk, lock ) ▶₀ #j.1 )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j.1 )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case insertlalogspksyes_0_1111112111111
                solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                  case insertlalogspkcyes_0_111111211111
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case case_3
            solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Insert( <$la, 'log', $s, pk, 's1'>, x2 ) @ #t2.1 )
                case insertlalogSpkentityyes_0_212111111
                solve( State_212111111( $id, $s, 's1', $la, pk, lock ) ▶₀ #t2.1 )
                  case locklog_0_21211111_case_1
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_2
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_3
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_4
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case insertlalogspksyes_0_1111112111111
                solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #t2.1 )
                  case insertlalogspkcyes_0_111111211111
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma accLA_tLA_min:
  all-traces
  "∀ la #i.
    (DishonestLA( la ) @ #i) ⇒
    (¬(∃ la.1 #i.1.
        (DishonestLA( la.1 ) @ #i.1) ∧ ((la.1 = la) ∧ (¬(la = la.1)))))"
/*
guarded formula characterizing all counter-examples:
"∃ la #i.
  (DishonestLA( la ) @ #i)
 ∧
  ∃ la.1 #i.1. (DishonestLA( la.1 ) @ #i.1) ∧ (la.1 = la) ∧ ¬(la = la.1)"
*/
simplify
by contradiction /* from formulas */

lemma accLA_tLA_uniq:
  all-traces
  "∀ la #i. (DishonestLA( la ) @ #i) ⇒ (∃ #i.1. Corrupted( la ) @ #i.1)"
/*
guarded formula characterizing all counter-examples:
"∃ la #i.
  (DishonestLA( la ) @ #i) ∧ ∀ #i.1. (Corrupted( la ) @ #i.1) ⇒ ⊥"
*/
simplify
solve( State_1112111( lock, lock.1 ) ▶₀ #t )
  case locklog_0_111211
  solve( DishonestLA( la ) @ #i )
    case eventDishonestLAla_0_1111211112
    solve( State_1111211112( x1, $la, lock, pk, $s ) ▶₀ #i )
      case lookuplalogspksasx_1_111121111
      solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
        case unlocklog_0_111121111111
        by solve( State_111121111111( x1.1, x2, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
      next
        case unlocklog_0_111121111211
        solve( State_111121111211( x1.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
          case eventTestLAlaspk_0_11112111121
          solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.1 )
              case insertlalogSpkentityyes_0_212111111
              solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #t2.1 )
                case locklog_0_21211111_case_1
                by contradiction /* from formulas */
              next
                case locklog_0_21211111_case_2
                by contradiction /* from formulas */
              next
                case locklog_0_21211111_case_3
                by contradiction /* from formulas */
              next
                case locklog_0_21211111_case_4
                by contradiction /* from formulas */
              qed
            next
              case insertlalogspkcyes_0_111111211111
              solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #t2.1 )
                case p_1_1111112111
                solve( State_111111211111111( ~n.3, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.2 )
                  case insertlalogspkiyes_0_11111121111111
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case unlocklog_0_111121112111
        by solve( State_111121112111( $la.1, ~n, x2, pk.1, $s.1 ) ▶₀ #t2 )
      qed
    qed
  next
    case eventDishonestLAla_0_1111211121
    solve( State_1111211121( $la, lock, x2, pk, $s ) ▶₀ #i )
      case lookuplalogspksasx_0_111121112
      solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
        case unlocklog_0_111121111111
        by solve( State_111121111111( x1, x2.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
      next
        case unlocklog_0_111121111211
        by solve( State_111121111211( x1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
      next
        case unlocklog_0_111121112111
        solve( State_111121112111( $la.1, ~n, x2.1, pk.1, $s.1 ) ▶₀ #t2 )
          case eventTestLAlaspk_0_11112111211
          solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( Insert( <$la, 'log', $s, pk, 's1'>, x2 ) @ #t2.1 )
              case insertlalogSpkentityyes_0_212111111
              solve( State_212111111( $id, $s, 's1', $la, pk, lock ) ▶₀ #t2.1 )
                case locklog_0_21211111_case_1
                by contradiction /* from formulas */
              next
                case locklog_0_21211111_case_2
                by contradiction /* from formulas */
              next
                case locklog_0_21211111_case_3
                by contradiction /* from formulas */
              next
                case locklog_0_21211111_case_4
                by contradiction /* from formulas */
              qed
            next
              case insertlalogspksyes_0_1111112111111
              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #t2.1 )
                case insertlalogspkcyes_0_111111211111
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma accLA_tLA_inj:
  all-traces "⊤"
/*
guarded formula characterizing all counter-examples:
"⊥"
*/
by contradiction /* from formulas */

lemma accLA_tLA_single:
  exists-trace
  "∃ la #i.
    (DishonestLA( la ) @ #i) ∧
    (∀ la.1 #i.1. (DishonestLA( la.1 ) @ #i.1) ⇒ (la.1 = la))"
/*
guarded formula characterizing all satisfying traces:
"∃ la #i.
  (DishonestLA( la ) @ #i)
 ∧
  ∀ la.1 #i.1. (DishonestLA( la.1 ) @ #i.1) ⇒ la.1 = la"
*/
simplify
solve( State_1112111( lock, lock.1 ) ▶₀ #t )
  case locklog_0_111211
  solve( DishonestLA( la ) @ #i )
    case eventDishonestLAla_0_1111211112
    solve( State_1111211112( x1, $la, lock, pk, $s ) ▶₀ #i )
      case lookuplalogspksasx_1_111121111
      solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
        case unlocklog_0_111121111211
        solve( State_111121111211( x1.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
          case eventTestLAlaspk_0_11112111121
          solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
            case case_2
            solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.1 )
              case insertlalogSpkentityyes_0_212111111
              solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #t2.1 )
                case locklog_0_21211111_case_1
                solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                  case insertlalogSpkentityyes_0_212111111
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma acc_tCA_suff:
  exists-trace
  "∃ ca #i.
    ((DishonestCA( ca ) @ #i) ∧
     (∀ ca.1 #i.1. (DishonestCA( ca.1 ) @ #i.1) ⇒ (ca.1 = ca))) ∧
    ((∀ a #i.1. (Corrupted( a ) @ #i.1) ⇒ (a = ca)) ∧
     (¬(∃ la #i.1. DishonestLA( la ) @ #i.1)))"
/*
guarded formula characterizing all satisfying traces:
"∃ ca #i.
  (DishonestCA( ca ) @ #i)
 ∧
  (∀ ca.1 #i.1. (DishonestCA( ca.1 ) @ #i.1) ⇒ ca.1 = ca) ∧
  (∀ a #i.1. (Corrupted( a ) @ #i.1) ⇒ a = ca) ∧
  (∀ la #i.1. (DishonestLA( la ) @ #i.1) ⇒ ⊥)"
*/
simplify
solve( State_1111121112( lock, pk, $s, $ca ) ▶₀ #i )
  case lookupcaproofOfIDspkasignored_1_111112111
  solve( State_1112111( lock, lock.1 ) ▶₀ #t )
    case locklog_0_111211
    solve( Unlock_1( '1', ~n, 'testCA' ) @ #t2 )
      case unlocktestCA_0_111112111211
      solve( State_111112111211( ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
        case eventTestCAcaspk_0_11111211121
        solve( !KU( sign(skca($ca), <pk, $s>) ) @ #vk )
          case c_sign
          solve( !KU( skca($ca) ) @ #vk.1 )
            case outcskcaca_0_21111
            solve( State_2111( $ca ) ▶₀ #vr.9 )
              case incCAcorruptca_1_211
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma acc_tLA_suff:
  exists-trace
  "∃ la #i.
    ((DishonestLA( la ) @ #i) ∧
     (∀ la.1 #i.1. (DishonestLA( la.1 ) @ #i.1) ⇒ (la.1 = la))) ∧
    ((∀ a #i.1. (Corrupted( a ) @ #i.1) ⇒ (a = la)) ∧
     (¬(∃ ca #i.1. DishonestCA( ca ) @ #i.1)))"
/*
guarded formula characterizing all satisfying traces:
"∃ la #i.
  (DishonestLA( la ) @ #i)
 ∧
  (∀ la.1 #i.1. (DishonestLA( la.1 ) @ #i.1) ⇒ la.1 = la) ∧
  (∀ a #i.1. (Corrupted( a ) @ #i.1) ⇒ a = la) ∧
  (∀ ca #i.1. (DishonestCA( ca ) @ #i.1) ⇒ ⊥)"
*/
simplify
solve( State_1112111( lock, lock.1 ) ▶₀ #t )
  case locklog_0_111211
  solve( DishonestLA( la ) @ #i )
    case eventDishonestLAla_0_1111211112
    solve( State_1111211112( x1, $la, lock, pk, $s ) ▶₀ #i )
      case lookuplalogspksasx_1_111121111
      solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
        case unlocklog_0_111121111211
        solve( State_111121111211( x1.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
          case eventTestLAlaspk_0_11112111121
          solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
            case case_2
            solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.1 )
              case insertlalogSpkentityyes_0_212111111
              solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #t2.1 )
                case locklog_0_21211111_case_1
                solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                  case insertlalogSpkentityyes_0_212111111
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma acc_verif_empty:
  all-traces
  "(¬((∃ ca #i. DishonestCA( ca ) @ #i) ∨
      (∃ la #i. DishonestLA( la ) @ #i))) ⇒
   ((¬(∃ la s pk #i.
        (TestLA( la, s, pk ) @ #i) ∧
        (¬(∃ #j #k.
            (((Insert( <la, 'log', s, pk, 'c1'>, 'yes' ) @ #j) ∧ (#j < #i)) ∧
             (Insert( <la, 'log', s, pk, 's1'>, 'yes' ) @ #k)) ∧
            (#k < #i))))) ∧
    (¬(∃ ca s pk #i.
        (TestCA( ca, s, pk ) @ #i) ∧
        (¬(∃ #j. HonestRegister( s, ca, pk ) @ #j)))))"
/*
guarded formula characterizing all counter-examples:
"(∀ ca #i. (DishonestCA( ca ) @ #i) ⇒ ⊥) ∧
 (∀ la #i. (DishonestLA( la ) @ #i) ⇒ ⊥) ∧
 (((∃ la s pk #i.
     (TestLA( la, s, pk ) @ #i)
    ∧
     ∀ #j #k.
      (Insert( <la, 'log', s, pk, 'c1'>, 'yes' ) @ #j) ∧
      (Insert( <la, 'log', s, pk, 's1'>, 'yes' ) @ #k)
     ⇒
      ((¬(#j < #i)) ∨ (¬(#k < #i)))) ∨
   (∃ ca s pk #i.
     (TestCA( ca, s, pk ) @ #i)
    ∧
     ∀ #j. (HonestRegister( s, ca, pk ) @ #j) ⇒ ⊥)))"
*/
simplify
solve( (∃ la s pk #i.
         (TestLA( la, s, pk ) @ #i)
        ∧
         ∀ #j #k.
          (Insert( <la, 'log', s, pk, 'c1'>, 'yes' ) @ #j) ∧
          (Insert( <la, 'log', s, pk, 's1'>, 'yes' ) @ #k)
         ⇒
          ((¬(#j < #i)) ∨ (¬(#k < #i))))  ∥
       (∃ ca s pk #i.
         (TestCA( ca, s, pk ) @ #i)
        ∧
         ∀ #j. (HonestRegister( s, ca, pk ) @ #j) ⇒ ⊥) )
  case case_1
  solve( State_1112111( lock, lock.1 ) ▶₀ #t )
    case locklog_0_111211
    solve( TestLA( la, s, pk ) @ #i )
      case eventTestLAlaspk_0_11112111111
      solve( State_11112111111( x1, x2, $la, lock, pk, $s ) ▶₀ #i )
        case eventHonestLA_0_1111211111
        solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
          case unlocklog_0_111121111111
          solve( State_111121111111( x1.1, x2.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
            case eventTestLAlaspk_0_11112111111
            solve( (#t2.2 < #t2.4)  ∥ (#t2.2 = #t2.4) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( Insert( <$la, 'log', $s, pk, 's1'>, x2 ) @ #t2.1 )
                  case insertlalogSpkentityyes_0_212111111
                  solve( State_212111111( $id, $s, 's1', $la, pk, lock ) ▶₀ #t2.1 )
                    case locklog_0_21211111_case_1
                    solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.3 )
                        case insertlalogSpkentityyes_0_212111111
                        by contradiction /* from formulas */
                      next
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case locklog_0_21211111_case_2
                    solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.3 )
                        case insertlalogSpkentityyes_0_212111111
                        by contradiction /* from formulas */
                      next
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case locklog_0_21211111_case_3
                    solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.3 )
                        case insertlalogSpkentityyes_0_212111111
                        by contradiction /* from formulas */
                      next
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case locklog_0_21211111_case_4
                    solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                      case insertlalogSpkentityyes_0_212111111
                      solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.3 )
                        case insertlalogSpkentityyes_0_212111111
                        by contradiction /* from formulas */
                      next
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case insertlalogspksyes_0_1111112111111
                  solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #t2.1 )
                    case insertlalogspkcyes_0_111111211111
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case unlocklog_0_111121111211
          by solve( State_111121111211( x1.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
        next
          case unlocklog_0_111121112111
          by solve( State_111121112111( $la.1, ~n, x2.1, pk.1, $s.1 ) ▶₀ #t2 )
        qed
      qed
    next
      case eventTestLAlaspk_0_11112111121
      solve( State_11112111121( x1, $la, lock, pk, $s ) ▶₀ #i )
        case eventDishonestLAla_0_1111211112
        by contradiction /* from formulas */
      qed
    next
      case eventTestLAlaspk_0_11112111211
      solve( State_11112111211( $la, lock, x2, pk, $s ) ▶₀ #i )
        case eventDishonestLAla_0_1111211121
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case case_2
  solve( State_1112111( lock, lock.1 ) ▶₀ #t )
    case locklog_0_111211
    solve( TestCA( ca, s, pk ) @ #i )
      case eventTestCAcaspk_0_11111211111
      solve( State_11111211111( ignored, lock, pk, $s, $ca ) ▶₀ #i )
        case eventHonestCAca_0_1111121111
        solve( Unlock_1( '1', ~n, 'testCA' ) @ #t2 )
          case unlocktestCA_0_111112111111
          solve( State_111112111111( ignored.1, ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
            case eventTestCAcaspk_0_11111211111
            solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( !KU( sign(skca($ca), <pk, $s>) ) @ #vk )
                case c_sign
                solve( !KU( skca($ca) ) @ #vk.1 )
                  case outcskcaca_0_21111
                  solve( State_2111( $ca ) ▶₀ #vr.9 )
                    case incCAcorruptca_1_211
                    solve( Insert( <$ca, 'proofOfID', $s, pk>, ignored ) @ #t2.1 )
                      case insertcaproofOfIDspkskSyes_0_11111111111111
                      solve( State_11111111111111( $ca.1, $s, skS, $ca ) ▶₀ #t2.1 )
                        case p_1_1111111111
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case incCAcorruptca_3_211
                    solve( Insert( <$ca, 'proofOfID', $s, pk>, ignored ) @ #t2.1 )
                      case insertcaproofOfIDspkskSyes_0_11111111111111
                      solve( State_11111111111111( $ca.1, $s, skS, $ca ) ▶₀ #t2.1 )
                        case p_1_1111111111
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case outsignskcacapkskSs_0_1111111111111111
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case unlocktestCA_0_111112111211
          by solve( State_111112111211( ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
        qed
      qed
    next
      case eventTestCAcaspk_0_11111211121
      solve( State_11111211121( lock, pk, $s, $ca ) ▶₀ #i )
        case eventDishonestCAca_0_1111121112
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma acc_tCA_verif_nonempty:
  all-traces
  "∀ ca #i.
    (DishonestCA( ca ) @ #i) ⇒
    (¬((¬(∃ la s pk #i.1.
           (TestLA( la, s, pk ) @ #i.1) ∧
           (¬(∃ #j #k.
               (((Insert( <la, 'log', s, pk, 'c1'>, 'yes' ) @ #j) ∧ (#j < #i.1)) ∧
                (Insert( <la, 'log', s, pk, 's1'>, 'yes' ) @ #k)) ∧
               (#k < #i.1))))) ∧
       (¬(∃ ca.1 s pk #i.1.
           (TestCA( ca.1, s, pk ) @ #i.1) ∧
           (¬(∃ #j. HonestRegister( s, ca.1, pk ) @ #j))))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca #i.
  (DishonestCA( ca ) @ #i)
 ∧
  (∀ la s pk #i.1.
    (TestLA( la, s, pk ) @ #i.1)
   ⇒
    ∃ #j #k.
     (Insert( <la, 'log', s, pk, 'c1'>, 'yes' ) @ #j) ∧
     (Insert( <la, 'log', s, pk, 's1'>, 'yes' ) @ #k)
    ∧
     (#j < #i.1) ∧ (#k < #i.1)) ∧
  (∀ ca.1 s pk #i.1.
    (TestCA( ca.1, s, pk ) @ #i.1)
   ⇒
    ∃ #j. (HonestRegister( s, ca.1, pk ) @ #j))"
*/
simplify
solve( State_1111121112( lock, pk, $s, $ca ) ▶₀ #i )
  case lookupcaproofOfIDspkasignored_1_111112111
  solve( State_1112111( lock, lock.1 ) ▶₀ #t )
    case locklog_0_111211
    solve( Unlock_1( '1', ~n, 'testCA' ) @ #t2 )
      case unlocktestCA_0_111112111111
      by solve( State_111112111111( ignored, ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
    next
      case unlocktestCA_0_111112111211
      solve( State_111112111211( ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
        case eventTestCAcaspk_0_11111211121
        solve( !Semistate_11111111111( $ca.1 ) ▶₀ #j )
          case inca_0_1111111
          solve( !KU( sign(skca($ca), <pk(~n.1), $s>) ) @ #vk )
            case c_sign
            solve( !KU( skca($ca) ) @ #vk.6 )
              case outcskcaca_0_21111
              solve( State_2111( $ca ) ▶₀ #vr.11 )
                case incCAcorruptca_1_211
                solve( !KU( pk(~n.1) ) @ #vk.8 )
                  case c_pk
                  by solve( !KU( ~n.1 ) @ #vk.12 )
                next
                  case insertcaproofOfIDspkskSyes_0_11111111111111
                  by contradiction /* cyclic */
                next
                  case outsignskcacapkskSs_0_1111111111111111
                  by contradiction /* cyclic */
                qed
              next
                case incCAcorruptca_3_211
                solve( !KU( pk(~n.1) ) @ #vk.8 )
                  case c_pk
                  by solve( !KU( ~n.1 ) @ #vk.12 )
                next
                  case insertcaproofOfIDspkskSyes_0_11111111111111
                  by contradiction /* cyclic */
                next
                  case outsignskcacapkskSs_0_1111111111111111
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case outsignskcacapkskSs_0_1111111111111111
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
qed

lemma acc_tLA_verif_nonempty:
  all-traces
  "∀ la #i.
    (DishonestLA( la ) @ #i) ⇒
    (¬((¬(∃ la.1 s pk #i.1.
           (TestLA( la.1, s, pk ) @ #i.1) ∧
           (¬(∃ #j #k.
               (((Insert( <la.1, 'log', s, pk, 'c1'>, 'yes' ) @ #j) ∧ (#j < #i.1)) ∧
                (Insert( <la.1, 'log', s, pk, 's1'>, 'yes' ) @ #k)) ∧
               (#k < #i.1))))) ∧
       (¬(∃ ca s pk #i.1.
           (TestCA( ca, s, pk ) @ #i.1) ∧
           (¬(∃ #j. HonestRegister( s, ca, pk ) @ #j))))))"
/*
guarded formula characterizing all counter-examples:
"∃ la #i.
  (DishonestLA( la ) @ #i)
 ∧
  (∀ la.1 s pk #i.1.
    (TestLA( la.1, s, pk ) @ #i.1)
   ⇒
    ∃ #j #k.
     (Insert( <la.1, 'log', s, pk, 'c1'>, 'yes' ) @ #j) ∧
     (Insert( <la.1, 'log', s, pk, 's1'>, 'yes' ) @ #k)
    ∧
     (#j < #i.1) ∧ (#k < #i.1)) ∧
  (∀ ca s pk #i.1.
    (TestCA( ca, s, pk ) @ #i.1) ⇒ ∃ #j. (HonestRegister( s, ca, pk ) @ #j))"
*/
simplify
solve( State_1112111( lock, lock.1 ) ▶₀ #t )
  case locklog_0_111211
  solve( DishonestLA( la ) @ #i )
    case eventDishonestLAla_0_1111211112
    solve( State_1111211112( x1, $la, lock, pk, $s ) ▶₀ #i )
      case lookuplalogspksasx_1_111121111
      solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
        case unlocklog_0_111121111111
        by solve( State_111121111111( x1.1, x2, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
      next
        case unlocklog_0_111121111211
        solve( State_111121111211( x1.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
          case eventTestLAlaspk_0_11112111121
          solve( (#j < #t2.2)  ∥ (#j = #t2.2)  ∥ (#vr.5 < #j) )
            case case_1
            solve( (#t2.2 < #t2.1)  ∥ (#t2.2 = #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.1 )
                case insertlalogSpkentityyes_0_212111111
                solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #t2.1 )
                  case locklog_0_21211111_case_1
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case locklog_0_21211111_case_2
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_3
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_4
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        solve( State_111111211111111( ~n.1, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.3 )
                          case insertlalogspkiyes_0_11111121111111
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_2
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_2
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case locklog_0_21211111_case_3
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_4
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        solve( State_111111211111111( ~n.1, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.3 )
                          case insertlalogspkiyes_0_11111121111111
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_3
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_2
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_3
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case locklog_0_21211111_case_4
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        solve( State_111111211111111( ~n.1, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.3 )
                          case insertlalogspkiyes_0_11111121111111
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_4
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_2
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_3
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case locklog_0_21211111_case_4
                        solve( ((#vr.9 < #vr.18) ∧
                                (∃ #t2.
                                  (Unlock_5( '5', ~n.4, 'log' ) @ #t2)
                                 ∧
                                  (#vr.9 < #t2) ∧
                                  (#t2 < #vr.18) ∧
                                  (∀ #t0 pp. (Unlock( pp, ~n.4, 'log' ) @ #t0) ⇒ #t0 = #t2) ∧
                                  (∀ pp lpp #t0.
                                    (Lock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                  (∀ pp lpp #t0.
                                    (Unlock( pp, lpp, 'log' ) @ #t0)
                                   ⇒
                                    ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                               (#vr.18 < #vr.9)  ∥ (#vr.9 = #vr.18) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( State_2121111111( $id.2, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.3 )
                            case insertlalogSpkentityyes_0_212111111
                            solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                              case insertlalogSpkentityyes_0_212111111
                              solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                                case locklog_0_21211111_case_1
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_2
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_3
                                by contradiction /* cyclic */
                              next
                                case locklog_0_21211111_case_4
                                by contradiction /* cyclic */
                              qed
                            next
                              case insertlalogspksyes_0_1111112111111
                              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                                case insertlalogspkcyes_0_111111211111
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case case_3
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        solve( State_111111211111111( ~n.1, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.3 )
                          case insertlalogspkiyes_0_11111121111111
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case insertlalogspkcyes_0_111111211111
                solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #t2.1 )
                  case p_1_1111112111
                  solve( State_111111211111111( ~n.3, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.2 )
                    case insertlalogspkiyes_0_11111121111111
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (#t2.1 < #j)  ∥ (#t2.1 = #j) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #j )
                case insertlalogSpkentityyes_0_212111111
                solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                  case locklog_0_21211111_case_1
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspksyes_0_1111112111111
                      solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_2
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspksyes_0_1111112111111
                      solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_3
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspksyes_0_1111112111111
                      solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_4
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 's1'>, 'yes' ) @ #k )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id.1, $s, 's1', $la, pk, lock ) ▶₀ #k )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspksyes_0_1111112111111
                      solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                        case insertlalogspkcyes_0_111111211111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case insertlalogspkcyes_0_111111211111
                solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                  case p_1_1111112111
                  solve( State_111111211111111( ~n.1, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.1 )
                    case insertlalogspkiyes_0_11111121111111
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.1 )
                case insertlalogSpkentityyes_0_212111111
                solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #t2.1 )
                  case locklog_0_21211111_case_1
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_2
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_3
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_4
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case insertlalogspkcyes_0_111111211111
                solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #t2.1 )
                  case p_1_1111112111
                  solve( State_111111211111111( ~n.3, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.2 )
                    case insertlalogspkiyes_0_11111121111111
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case unlocklog_0_111121112111
        by solve( State_111121112111( $la.1, ~n, x2, pk.1, $s.1 ) ▶₀ #t2 )
      qed
    qed
  next
    case eventDishonestLAla_0_1111211121
    solve( State_1111211121( $la, lock, x2, pk, $s ) ▶₀ #i )
      case lookuplalogspksasx_0_111121112
      solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
        case unlocklog_0_111121111111
        by solve( State_111121111111( x1, x2.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
      next
        case unlocklog_0_111121111211
        by solve( State_111121111211( x1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
      next
        case unlocklog_0_111121112111
        solve( State_111121112111( $la.1, ~n, x2.1, pk.1, $s.1 ) ▶₀ #t2 )
          case eventTestLAlaspk_0_11112111211
          solve( (#k < #t2.2)  ∥ (#k = #t2.2)  ∥ (#vr.4 < #k) )
            case case_1
            solve( (#t2.2 < #t2.1)  ∥ (#t2.2 = #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Insert( <$la, 'log', $s, pk, 's1'>, x2 ) @ #t2.1 )
                case insertlalogSpkentityyes_0_212111111
                solve( State_212111111( $id, $s, 's1', $la, pk, lock ) ▶₀ #t2.1 )
                  case locklog_0_21211111_case_1
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_2
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_3
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_4
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case insertlalogspksyes_0_1111112111111
                solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #t2.1 )
                  case insertlalogspkcyes_0_111111211111
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case case_2
            solve( (#t2.1 < #k)  ∥ (#t2.1 = #k) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Insert( <$la, 'log', $s, pk, 's1'>, x2 ) @ #k )
                case insertlalogSpkentityyes_0_212111111
                solve( State_212111111( $id, $s, 's1', $la, pk, lock ) ▶₀ #k )
                  case locklog_0_21211111_case_1
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_2
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_3
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_4
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.1 ) ▶₀ #t2.1 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case insertlalogspksyes_0_1111112111111
                solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #k )
                  case insertlalogspkcyes_0_111111211111
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case case_3
            solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( Insert( <$la, 'log', $s, pk, 's1'>, x2 ) @ #t2.1 )
                case insertlalogSpkentityyes_0_212111111
                solve( State_212111111( $id, $s, 's1', $la, pk, lock ) ▶₀ #t2.1 )
                  case locklog_0_21211111_case_1
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_2
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_3
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case locklog_0_21211111_case_4
                  solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                    case insertlalogSpkentityyes_0_212111111
                    solve( Insert( <$la, 'log', $s, pk, 'c1'>, 'yes' ) @ #j )
                      case insertlalogSpkentityyes_0_212111111
                      solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #j )
                        case locklog_0_21211111_case_1
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_2
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_3
                        by contradiction /* cyclic */
                      next
                        case locklog_0_21211111_case_4
                        by contradiction /* cyclic */
                      qed
                    next
                      case insertlalogspkcyes_0_111111211111
                      solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #j )
                        case p_1_1111112111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case insertlalogspksyes_0_1111112111111
                solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #t2.1 )
                  case insertlalogspkcyes_0_111111211111
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma acc_tCA_min:
  all-traces
  "∀ ca #i.
    (DishonestCA( ca ) @ #i) ⇒
    ((¬(∃ ca.1 #i.1.
         (DishonestCA( ca.1 ) @ #i.1) ∧ ((ca.1 = ca) ∧ (¬(ca = ca.1))))) ∧
     (¬(∃ la #i.1. (DishonestLA( la ) @ #i.1) ∧ ((la = ca) ∧ (¬(ca = la))))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca #i.
  (DishonestCA( ca ) @ #i)
 ∧
  ((∃ ca.1 #i.1.
     (DishonestCA( ca.1 ) @ #i.1) ∧ (ca.1 = ca) ∧ ¬(ca = ca.1)) ∨
   (∃ la #i.1. (DishonestLA( la ) @ #i.1) ∧ (la = ca) ∧ ¬(ca = la)))"
*/
simplify
solve( (∃ ca.1 #i.
         (DishonestCA( ca.1 ) @ #i) ∧ (ca.1 = $ca) ∧ ¬($ca = ca.1))  ∥
       (∃ la #i. (DishonestLA( la ) @ #i) ∧ (la = $ca) ∧ ¬($ca = la)) )
  case case_1
  by contradiction /* from formulas */
next
  case case_2
  by contradiction /* from formulas */
qed

lemma acc_tLA_min:
  all-traces
  "∀ la #i.
    (DishonestLA( la ) @ #i) ⇒
    ((¬(∃ ca #i.1.
         (DishonestCA( ca ) @ #i.1) ∧ ((ca = la) ∧ (¬(la = ca))))) ∧
     (¬(∃ la.1 #i.1.
         (DishonestLA( la.1 ) @ #i.1) ∧ ((la.1 = la) ∧ (¬(la = la.1))))))"
/*
guarded formula characterizing all counter-examples:
"∃ la #i.
  (DishonestLA( la ) @ #i)
 ∧
  ((∃ ca #i.1. (DishonestCA( ca ) @ #i.1) ∧ (ca = la) ∧ ¬(la = ca)) ∨
   (∃ la.1 #i.1.
     (DishonestLA( la.1 ) @ #i.1) ∧ (la.1 = la) ∧ ¬(la = la.1)))"
*/
simplify
solve( (∃ ca #i. (DishonestCA( ca ) @ #i) ∧ (ca = la) ∧ ¬(la = ca))  ∥
       (∃ la.1 #i. (DishonestLA( la.1 ) @ #i) ∧ (la.1 = la) ∧ ¬(la = la.1)) )
  case case_1
  by contradiction /* from formulas */
next
  case case_2
  by contradiction /* from formulas */
qed

lemma acc_tCA_uniq:
  all-traces
  "∀ ca #i. (DishonestCA( ca ) @ #i) ⇒ (∃ #i.1. Corrupted( ca ) @ #i.1)"
/*
guarded formula characterizing all counter-examples:
"∃ ca #i.
  (DishonestCA( ca ) @ #i) ∧ ∀ #i.1. (Corrupted( ca ) @ #i.1) ⇒ ⊥"
*/
simplify
solve( State_1111121112( lock, pk, $s, $ca ) ▶₀ #i )
  case lookupcaproofOfIDspkasignored_1_111112111
  solve( State_1112111( lock, lock.1 ) ▶₀ #t )
    case locklog_0_111211
    solve( Unlock_1( '1', ~n, 'testCA' ) @ #t2 )
      case unlocktestCA_0_111112111111
      by solve( State_111112111111( ignored, ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
    next
      case unlocktestCA_0_111112111211
      solve( State_111112111211( ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
        case eventTestCAcaspk_0_11111211121
        solve( !KU( sign(skca($ca), <pk, $s>) ) @ #vk )
          case c_sign
          solve( !KU( skca($ca) ) @ #vk.1 )
            case outcskcaca_0_21111
            by contradiction /* from formulas */
          qed
        next
          case outsignskcacapkskSs_0_1111111111111111
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
qed

lemma acc_tLA_uniq:
  all-traces
  "∀ la #i. (DishonestLA( la ) @ #i) ⇒ (∃ #i.1. Corrupted( la ) @ #i.1)"
/*
guarded formula characterizing all counter-examples:
"∃ la #i.
  (DishonestLA( la ) @ #i) ∧ ∀ #i.1. (Corrupted( la ) @ #i.1) ⇒ ⊥"
*/
simplify
solve( State_1112111( lock, lock.1 ) ▶₀ #t )
  case locklog_0_111211
  solve( DishonestLA( la ) @ #i )
    case eventDishonestLAla_0_1111211112
    solve( State_1111211112( x1, $la, lock, pk, $s ) ▶₀ #i )
      case lookuplalogspksasx_1_111121111
      solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
        case unlocklog_0_111121111111
        by solve( State_111121111111( x1.1, x2, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
      next
        case unlocklog_0_111121111211
        solve( State_111121111211( x1.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
          case eventTestLAlaspk_0_11112111121
          solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.1 )
              case insertlalogSpkentityyes_0_212111111
              solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #t2.1 )
                case locklog_0_21211111_case_1
                by contradiction /* from formulas */
              next
                case locklog_0_21211111_case_2
                by contradiction /* from formulas */
              next
                case locklog_0_21211111_case_3
                by contradiction /* from formulas */
              next
                case locklog_0_21211111_case_4
                by contradiction /* from formulas */
              qed
            next
              case insertlalogspkcyes_0_111111211111
              solve( State_111111211111( lock, $la, pk, $s, $ca ) ▶₀ #t2.1 )
                case p_1_1111112111
                solve( State_111111211111111( ~n.3, $la.1, pk.1, $s.1, $ca.1 ) ▶₀ #t2.2 )
                  case insertlalogspkiyes_0_11111121111111
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case unlocklog_0_111121112111
        by solve( State_111121112111( $la.1, ~n, x2, pk.1, $s.1 ) ▶₀ #t2 )
      qed
    qed
  next
    case eventDishonestLAla_0_1111211121
    solve( State_1111211121( $la, lock, x2, pk, $s ) ▶₀ #i )
      case lookuplalogspksasx_0_111121112
      solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
        case unlocklog_0_111121111111
        by solve( State_111121111111( x1, x2.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
      next
        case unlocklog_0_111121111211
        by solve( State_111121111211( x1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
      next
        case unlocklog_0_111121112111
        solve( State_111121112111( $la.1, ~n, x2.1, pk.1, $s.1 ) ▶₀ #t2 )
          case eventTestLAlaspk_0_11112111211
          solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( Insert( <$la, 'log', $s, pk, 's1'>, x2 ) @ #t2.1 )
              case insertlalogSpkentityyes_0_212111111
              solve( State_212111111( $id, $s, 's1', $la, pk, lock ) ▶₀ #t2.1 )
                case locklog_0_21211111_case_1
                by contradiction /* from formulas */
              next
                case locklog_0_21211111_case_2
                by contradiction /* from formulas */
              next
                case locklog_0_21211111_case_3
                by contradiction /* from formulas */
              next
                case locklog_0_21211111_case_4
                by contradiction /* from formulas */
              qed
            next
              case insertlalogspksyes_0_1111112111111
              solve( State_1111112111111( lock, $la, pk, $s, $ca ) ▶₀ #t2.1 )
                case insertlalogspkcyes_0_111111211111
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma acc_tCA_inj:
  all-traces "⊤"
/*
guarded formula characterizing all counter-examples:
"⊥"
*/
by contradiction /* from formulas */

lemma acc_tLA_inj:
  all-traces "⊤"
/*
guarded formula characterizing all counter-examples:
"⊥"
*/
by contradiction /* from formulas */

lemma acc_tCA_single:
  exists-trace
  "∃ ca #i.
    ((DishonestCA( ca ) @ #i) ∧
     (∀ ca.1 #i.1. (DishonestCA( ca.1 ) @ #i.1) ⇒ (ca.1 = ca))) ∧
    (¬(∃ la #i.1. DishonestLA( la ) @ #i.1))"
/*
guarded formula characterizing all satisfying traces:
"∃ ca #i.
  (DishonestCA( ca ) @ #i)
 ∧
  (∀ ca.1 #i.1. (DishonestCA( ca.1 ) @ #i.1) ⇒ ca.1 = ca) ∧
  (∀ la #i.1. (DishonestLA( la ) @ #i.1) ⇒ ⊥)"
*/
simplify
solve( State_1111121112( lock, pk, $s, $ca ) ▶₀ #i )
  case lookupcaproofOfIDspkasignored_1_111112111
  solve( State_1112111( lock, lock.1 ) ▶₀ #t )
    case locklog_0_111211
    solve( Unlock_1( '1', ~n, 'testCA' ) @ #t2 )
      case unlocktestCA_0_111112111211
      solve( State_111112111211( ~n, pk.1, $s.1, $ca.1 ) ▶₀ #t2 )
        case eventTestCAcaspk_0_11111211121
        solve( !KU( sign(skca($ca), <pk, $s>) ) @ #vk )
          case c_sign
          solve( !KU( skca($ca) ) @ #vk.1 )
            case outcskcaca_0_21111
            solve( State_2111( $ca ) ▶₀ #vr.9 )
              case incCAcorruptca_1_211
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma acc_tLA_single:
  exists-trace
  "∃ la #i.
    ((DishonestLA( la ) @ #i) ∧
     (∀ la.1 #i.1. (DishonestLA( la.1 ) @ #i.1) ⇒ (la.1 = la))) ∧
    (¬(∃ ca #i.1. DishonestCA( ca ) @ #i.1))"
/*
guarded formula characterizing all satisfying traces:
"∃ la #i.
  (DishonestLA( la ) @ #i)
 ∧
  (∀ la.1 #i.1. (DishonestLA( la.1 ) @ #i.1) ⇒ la.1 = la) ∧
  (∀ ca #i.1. (DishonestCA( ca ) @ #i.1) ⇒ ⊥)"
*/
simplify
solve( State_1112111( lock, lock.1 ) ▶₀ #t )
  case locklog_0_111211
  solve( DishonestLA( la ) @ #i )
    case eventDishonestLAla_0_1111211112
    solve( State_1111211112( x1, $la, lock, pk, $s ) ▶₀ #i )
      case lookuplalogspksasx_1_111121111
      solve( Unlock_2( '2', ~n, 'log' ) @ #t2 )
        case unlocklog_0_111121111211
        solve( State_111121111211( x1.1, $la.1, ~n, pk.1, $s.1 ) ▶₀ #t2 )
          case eventTestLAlaspk_0_11112111121
          solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
            case case_2
            solve( Insert( <$la, 'log', $s, pk, 'c1'>, x1 ) @ #t2.1 )
              case insertlalogSpkentityyes_0_212111111
              solve( State_212111111( $id, $s, 'c1', $la, pk, lock ) ▶₀ #t2.1 )
                case locklog_0_21211111_case_1
                solve( State_2121111111( $id.1, S, entity, $la.1, pk.1, ~n.3 ) ▶₀ #t2.2 )
                  case insertlalogSpkentityyes_0_212111111
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

predicate: tCA( ca )<=>∃ #i. DishonestCA( ca ) @ #i

predicate: tLA( la )<=>∃ #i. DishonestLA( la ) @ #i

/*
WARNING: the following wellformedness checks failed!

Wellformedness-error in Process
  Variable bound twice: $ca.

Accountability (RP check)
  The specification contains at least one restriction.
  
  Please verify manually that your protocol fulfills the following condition:
  
  For each case test τ, traces t, t’, and instantiations ρ, ρ’:
  If τ holds on t with ρ, and τ single-matches with ρ’ on t’, then
  there exists a trace t’’ such that τ single-matches with ρ on t’’
  and the parties corrupted in t’’ are the same as the parties
  corrupted in t’ renamed from rng(ρ’) to rng(ρ).

Message Derivation Checks
=========================

  The variables of the follwing rule(s) are not derivable from their premises, you may be performing unintended pattern matching.

Rule inca_0_1111111: 
Failed to derive Variable(s): $ca.1

Rule p_1_1111111111: 
Failed to derive Variable(s): $ca.1, $s.1, skS.1, $ca.2

Rule insertcaproofOfIDspkskSyes_0_11111111111111: 
Failed to derive Variable(s): $ca.1, $s.1, skS.1, $ca.2

Rule outsignskcacapkskSs_0_1111111111111111: 
Failed to derive Variable(s): $ca.1, $s.1, skS.1, $ca.2

Rule inla_0_1111112: 
Failed to derive Variable(s): $la.1, pk.1, $s.2, $ca.3

Rule p_1_1111112111: 
Failed to derive Variable(s): lock, $la.1, pk.1, $s.2, $ca.3

Rule insertlalogspkcyes_0_111111211111: 
Failed to derive Variable(s): lock, $la.1, pk.1, $s.2, $ca.3

Rule insertlalogspksyes_0_1111112111111: 
Failed to derive Variable(s): lock, $la.1, pk.1, $s.2, $ca.3

Rule insertlalogspkiyes_0_11111121111111: 
Failed to derive Variable(s): lock, $la.1, pk.1, $s.2, $ca.3

Rule unlocklog_0_111111211111111: 
Failed to derive Variable(s): lock, $la.1, pk.1, $s.2, $ca.3

Rule locktestCA_0_1111121: 
Failed to derive Variable(s): lock.1, pk.2, $s.3, $ca.4

Rule lookupcaproofOfIDspkasignored_0_111112111: 
Failed to derive Variable(s): ignored.1, lock.1, pk.2, $s.3, $ca.4

Rule eventHonestCAca_0_1111121111: 
Failed to derive Variable(s): ignored.1, lock.1, pk.2, $s.3, $ca.4

Rule eventTestCAcaspk_0_11111211111: 
Failed to derive Variable(s): ignored.1, lock.1, pk.2, $s.3, $ca.4

Rule unlocktestCA_0_111112111111: 
Failed to derive Variable(s): ignored.1, lock.1, pk.2, $s.3, $ca.4

Rule lookupcaproofOfIDspkasignored_1_111112111: 
Failed to derive Variable(s): lock.1, pk.2, $s.3, $ca.4

Rule eventDishonestCAca_0_1111121112: 
Failed to derive Variable(s): lock.1, pk.2, $s.3, $ca.4

Rule eventTestCAcaspk_0_11111211121: 
Failed to derive Variable(s): lock.1, pk.2, $s.3, $ca.4

Rule unlocktestCA_0_111112111211: 
Failed to derive Variable(s): lock.1, pk.2, $s.3, $ca.4

Rule locklog_0_111121: 
Failed to derive Variable(s): $la.2, lock.2, pk.3, $s.4

Rule lookuplalogspkcasx_0_11112111: 
Failed to derive Variable(s): x1.1, $la.2, lock.2, pk.3, $s.4

Rule lookuplalogspksasx_0_111121111: 
Failed to derive Variable(s): x1.1, x2.1, $la.2, lock.2, pk.3, $s.4

Rule eventHonestLA_0_1111211111: 
Failed to derive Variable(s): x1.1, x2.1, $la.2, lock.2, pk.3, $s.4

Rule eventTestLAlaspk_0_11112111111: 
Failed to derive Variable(s): x1.1, x2.1, $la.2, lock.2, pk.3, $s.4

Rule unlocklog_0_111121111111: 
Failed to derive Variable(s): x1.1, x2.1, $la.2, lock.2, pk.3, $s.4

Rule lookuplalogspksasx_1_111121111: 
Failed to derive Variable(s): x1.1, $la.2, lock.2, pk.3, $s.4

Rule eventDishonestLAla_0_1111211112: 
Failed to derive Variable(s): x1.1, $la.2, lock.2, pk.3, $s.4

Rule eventTestLAlaspk_0_11112111121: 
Failed to derive Variable(s): x1.1, $la.2, lock.2, pk.3, $s.4

Rule unlocklog_0_111121111211: 
Failed to derive Variable(s): x1.1, $la.2, lock.2, pk.3, $s.4

Rule lookuplalogspkcasx_1_11112111: 
Failed to derive Variable(s): $la.2, lock.2, pk.3, $s.4

Rule lookuplalogspksasx_0_111121112: 
Failed to derive Variable(s): $la.2, lock.2, x2.2, pk.3, $s.4

Rule eventDishonestLAla_0_1111211121: 
Failed to derive Variable(s): $la.2, lock.2, x2.2, pk.3, $s.4

Rule eventTestLAlaspk_0_11112111211: 
Failed to derive Variable(s): $la.2, lock.2, x2.2, pk.3, $s.4

Rule unlocklog_0_111121112111: 
Failed to derive Variable(s): $la.2, lock.2, x2.2, pk.3, $s.4

Rule lookuplalogspksasx_1_111121112: 
Failed to derive Variable(s): $la.2, lock.2, pk.3, $s.4

Rule locktestCA_0_11121: 
Failed to derive Variable(s): lock.3

Rule locklog_0_111211: 
Failed to derive Variable(s): lock.3, lock.4

Rule eventTerminate_0_1112111: 
Failed to derive Variable(s): lock.3, lock.4

Rule incCAcorruptca_0_211: 
Failed to derive Variable(s): x

Rule incCAcorruptca_2_211: 
Failed to derive Variable(s): x

Rule incCAcorruptca_1_211: 
Failed to derive Variable(s): $ca.5

Rule incCAcorruptca_3_211: 
Failed to derive Variable(s): $ca.5

Rule eventCorruptedca_0_2111: 
Failed to derive Variable(s): $ca.5

Rule outcskcaca_1_21111: 
Failed to derive Variable(s): $ca.5

Rule outcskcaca_0_21111: 
Failed to derive Variable(s): $ca.5

Rule outcskcaca_2_21111: 
Failed to derive Variable(s): $ca.5

Rule inclaLAcorruptid_0_2121: 
Failed to derive Variable(s): x

Rule inclaLAcorruptid_2_2121: 
Failed to derive Variable(s): x

Rule inclaLAcorruptid_1_2121: 
Failed to derive Variable(s): $id.1, $la.3

Rule inclaLAcorruptid_3_2121: 
Failed to derive Variable(s): $id.1, $la.3

Rule eventCorruptedla_0_21211: 
Failed to derive Variable(s): $id.1, $la.3

Rule p_1_212111: 
Failed to derive Variable(s): $id.1, $la.3

Rule incSpkentity_0_2121111: 
Failed to derive Variable(s): $id.1, $la.3, x.4

Rule incSpkentity_2_2121111: 
Failed to derive Variable(s): $id.1, $la.3, x.4

Rule incSpkentity_1_2121111: 
Failed to derive Variable(s): $id.1, S.1, entity.1, $la.3, pk.4

Rule incSpkentity_3_2121111: 
Failed to derive Variable(s): $id.1, S.1, entity.1, $la.3, pk.4

Rule locklog_0_21211111: 
Failed to derive Variable(s): $id.1, S.1, entity.1, $la.3, pk.4, lock.5

Rule insertlalogSpkentityyes_0_212111111: 
Failed to derive Variable(s): $id.1, S.1, entity.1, $la.3, pk.4, lock.5

Rule unlocklog_0_2121111111: 
Failed to derive Variable(s): $id.1, S.1, entity.1, $la.3, pk.4, lock.5
*/

/*
Generated from:
Tamarin version 1.9.0
Maude version 3.2.2
Git revision: c838686f5a3d41b6a355eafd32cc2104ca41809c (with uncommited changes), branch: HEAD
Compiled at: 2023-10-25 11:27:38.363683988 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/accountability/csf21-acc-unbounded/previous/ct.spthy

  output:          examples/accountability/csf21-acc-unbounded/previous/ct.spthy.tmp
  processing time: 28.80s
  
  WARNING: 3 wellformedness check failed!
           The analysis results might be wrong!
  
  accCA_tCA_suff (exists-trace): verified (9 steps)
  accCA_verif_empty (all-traces): verified (21 steps)
  accCA_tCA_verif_nonempty (all-traces): verified (19 steps)
  accCA_tCA_min (all-traces): verified (2 steps)
  accCA_tCA_uniq (all-traces): verified (10 steps)
  accCA_tCA_inj (all-traces): verified (1 steps)
  accCA_tCA_single (exists-trace): verified (9 steps)
  accLA_tLA_suff (exists-trace): verified (11 steps)
  accLA_verif_empty (all-traces): verified (55 steps)
  accLA_tLA_verif_nonempty (all-traces): verified (438 steps)
  accLA_tLA_min (all-traces): verified (2 steps)
  accLA_tLA_uniq (all-traces): verified (34 steps)
  accLA_tLA_inj (all-traces): verified (1 steps)
  accLA_tLA_single (exists-trace): verified (11 steps)
  acc_tCA_suff (exists-trace): verified (9 steps)
  acc_tLA_suff (exists-trace): verified (11 steps)
  acc_verif_empty (all-traces): verified (57 steps)
  acc_tCA_verif_nonempty (all-traces): verified (19 steps)
  acc_tLA_verif_nonempty (all-traces): verified (438 steps)
  acc_tCA_min (all-traces): verified (4 steps)
  acc_tLA_min (all-traces): verified (4 steps)
  acc_tCA_uniq (all-traces): verified (10 steps)
  acc_tLA_uniq (all-traces): verified (34 steps)
  acc_tCA_inj (all-traces): verified (1 steps)
  acc_tLA_inj (all-traces): verified (1 steps)
  acc_tCA_single (exists-trace): verified (9 steps)
  acc_tLA_single (exists-trace): verified (11 steps)

==============================================================================
*/
