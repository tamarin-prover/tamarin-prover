theory OCSPS_MSR begin

// Function signature and definition of the equational theory E

functions: extract/1, fst/1, id/1, pair/2, pk/1, sig/2,
           sk/1[private,destructor], snd/1, true/0, verify/3
equations:
    extract(sig(m, sk(i))) = m,
    fst(<x.1, x.2>) = x.1,
    id(pk(sk(x))) = x,
    snd(<x.1, x.2>) = x.2,
    verify(sig(m, sk(i)), m, pk(sk(i))) = true





rule (modulo E) Init:
   [ ]
  --[ Responder( $rs ), CA( $ca ) ]->
   [
   !RS( $rs, sk($rs), pk(sk($ca)) ), Out( pk(sk($rs)) ),
   !RSpk( pk(sk($rs)) ), !CApk( pk(sk($ca)) ), !CAsk( sk($ca) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) RS_resp:
   [ !RS( $rs, skRS, pkCA ), In( cert ), CertStatus( $s, cert, status ) ]
  --[
  IsTrue( verify(cert, extract(cert), pkCA) ), Time( $tn ),
  ValidStatus( <pk(sk($rs)), cert, status, $tn> )
  ]->
   [
   Out( <<pk(sk($rs)), cert, status, $tn>, 
         sig(<pk(sk($rs)), cert, status, $tn>, skRS)>
   )
   ]

  /*
  rule (modulo AC) RS_resp:
     [ !RS( $rs, skRS, pkCA ), In( cert ), CertStatus( $s, cert, status ) ]
    --[
    IsTrue( z ), Time( $tn ), ValidStatus( <pk(sk($rs)), cert, status, $tn> )
    ]->
     [
     Out( <<pk(sk($rs)), cert, status, $tn>, 
           sig(<pk(sk($rs)), cert, status, $tn>, skRS)>
     )
     ]
    variants (modulo AC)
    1. cert  = cert.9
       pkCA  = pkCA.9
       z     = verify(cert.9, extract(cert.9), pkCA.9)
    
    2. cert  = sig(x.9, sk(x.10))
       pkCA  = pkCA.11
       z     = verify(sig(x.9, sk(x.10)), x.9, pkCA.11)
    
    3. cert  = sig(x.9, sk(x.10))
       pkCA  = pk(sk(x.10))
       z     = true
  */

rule (modulo E) C_receive:
   [ In( <<pkRS, cert, status, ts>, resp_sig, server_sig> ), !RSpk( pkRS ) ]
  --[
  IsTrue( verify(resp_sig, <pkRS, cert, status, ts>, pkRS) ),
  IsTrue( verify(server_sig, <pkRS, cert, status, ts>, extract(cert)) )
  ]->
   [ C( ts, cert, status ) ]

  /*
  rule (modulo AC) C_receive:
     [ In( <<pkRS, cert, status, ts>, resp_sig, server_sig> ), !RSpk( pkRS ) ]
    --[ IsTrue( z ), IsTrue( z.1 ) ]->
     [ C( ts, cert, status ) ]
    variants (modulo AC)
    1. cert  = cert.9
       pkRS  = pkRS.9
       resp_sig
             = resp_sig.9
       server_sig
             = server_sig.9
       status
             = status.9
       ts    = ts.9
       z     = verify(resp_sig.9, <pkRS.9, cert.9, status.9, ts.9>, pkRS.9)
       z.1   = verify(server_sig.9, <pkRS.9, cert.9, status.9, ts.9>,
                      extract(cert.9))
    
    2. cert  = x.9
       pkRS  = pk(sk(x.10))
       resp_sig
             = sig(<pk(sk(x.10)), x.9, x.11, x.12>, sk(x.10))
       server_sig
             = server_sig.13
       status
             = x.11
       ts    = x.12
       z     = true
       z.1   = verify(server_sig.13, <pk(sk(x.10)), x.9, x.11, x.12>,
                      extract(x.9))
    
    3. cert  = sig(x.9, sk(x.10))
       pkRS  = pkRS.11
       resp_sig
             = resp_sig.11
       server_sig
             = server_sig.11
       status
             = status.11
       ts    = ts.11
       z     = verify(resp_sig.11,
                      <pkRS.11, sig(x.9, sk(x.10)), status.11, ts.11>, pkRS.11)
       z.1   = verify(server_sig.11,
                      <pkRS.11, sig(x.9, sk(x.10)), status.11, ts.11>, x.9)
    
    4. cert  = sig(x.9, sk(x.10))
       pkRS  = pk(sk(x.11))
       resp_sig
             = sig(<pk(sk(x.11)), sig(x.9, sk(x.10)), x.12, x.13>, sk(x.11))
       server_sig
             = server_sig.14
       status
             = x.12
       ts    = x.13
       z     = true
       z.1   = verify(server_sig.14,
                      <pk(sk(x.11)), sig(x.9, sk(x.10)), x.12, x.13>, x.9)
    
    5. cert  = sig(pk(sk(x.9)), sk(x.10))
       pkRS  = x.11
       resp_sig
             = resp_sig.15
       server_sig
             = sig(<x.11, sig(pk(sk(x.9)), sk(x.10)), x.13, x.14>, sk(x.9))
       status
             = x.13
       ts    = x.14
       z     = verify(resp_sig.15,
                      <x.11, sig(pk(sk(x.9)), sk(x.10)), x.13, x.14>, x.11)
       z.1   = true
    
    6. cert  = sig(pk(sk(x.9)), sk(x.10))
       pkRS  = pk(sk(x.11))
       resp_sig
             = sig(<pk(sk(x.11)), sig(pk(sk(x.9)), sk(x.10)), x.12, x.13>, sk(x.11))
       server_sig
             = sig(<pk(sk(x.11)), sig(pk(sk(x.9)), sk(x.10)), x.12, x.13>, sk(x.9))
       status
             = x.12
       ts    = x.13
       z     = true
       z.1   = true
  */

rule (modulo E) C_judge_good:
   [ C( ts, cert, 'good' ) ] --[ Judged( ts, cert ) ]-> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_judge_revoked:
   [ C( ts, cert, 'revoked' ) ]
  --[ Blame( id(extract(cert)) ), Judged( ts, cert ) ]->
   [ ]

  /*
  rule (modulo AC) C_judge_revoked:
     [ C( ts, cert, 'revoked' ) ] --[ Blame( z ), Judged( ts, cert ) ]-> [ ]
    variants (modulo AC)
    1. cert  = cert.6
       z     = id(extract(cert.6))
    
    2. cert  = sig(x.7, sk(x.8))
       z     = id(x.7)
    
    3. cert  = sig(pk(sk(z.7)), sk(x.9))
       z     = z.7
  */

rule (modulo E) S_init:
   [ !CAsk( skCA ) ]
  --[ Server( $s ), Secret( sig(pk(sk($s)), skCA), sk($s) ) ]->
   [
   CertStatus( $s, sig(pk(sk($s)), skCA), 'good' ), Out( pk(sk($s)) ),
   Out( sig(pk(sk($s)), skCA) ), !S( $s, sig(pk(sk($s)), skCA) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_honest:
   [
   In( <<pkRS, cert, status, t>, resp_sig> ), !S( $s, cert ), !RSpk( pkRS )
   ]
  --[ IsTrue( verify(resp_sig, <pkRS, cert, status, t>, pkRS) ) ]->
   [
   Out( <<pkRS, cert, status, t>, resp_sig, 
         sig(<pkRS, cert, status, t>, sk($s))>
   )
   ]

  /*
  rule (modulo AC) S_honest:
     [
     In( <<pkRS, cert, status, t>, resp_sig> ), !S( $s, cert ), !RSpk( pkRS )
     ]
    --[ IsTrue( z ) ]->
     [
     Out( <<pkRS, cert, status, t>, resp_sig, 
           sig(<pkRS, cert, status, t>, sk($s))>
     )
     ]
    variants (modulo AC)
    1. cert  = cert.8
       pkRS  = pkRS.8
       resp_sig
             = resp_sig.8
       status
             = status.8
       t     = t.8
       z     = verify(resp_sig.8, <pkRS.8, cert.8, status.8, t.8>, pkRS.8)
    
    2. cert  = x.8
       pkRS  = pk(sk(x.9))
       resp_sig
             = sig(<pk(sk(x.9)), x.8, x.10, x.11>, sk(x.9))
       status
             = x.10
       t     = x.11
       z     = true
  */

rule (modulo E) S_corrupt:
   [ CertStatus( $s, cert, 'good' ) ]
  --[ Corrupted( $s ), Time( $tn ), NewTime( $tn ), Revealed( sk($s) ) ]->
   [ CertStatus( $s, cert, 'revoked' ), Out( sk($s) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RS_corrupt:
   [ !RS( $rs, skRS, pkCS ) ] --[ Corrupted( $rs ) ]-> [ Out( skRS ) ]

  /* has exactly the trivial AC variant */

restriction isTrue:
  "∀ #i t. (IsTrue( t ) @ #i) ⇒ (t = true)"
  // safety formula

restriction clockGuideTime:
  "∀ ts #t1 #t3.
    (((Time( ts ) @ #t1) ∧ (Time( ts ) @ #t3)) ∧ (#t1 < #t3)) ⇒
    (∀ ts2 #t2.
      (((Time( ts2 ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ⇒ (ts2 = ts))"
  // safety formula

restriction NewTime:
  "∀ ts #i #j.
    ((NewTime( ts ) @ #i) ∧ (Time( ts ) @ #j)) ⇒ ((#i < #j) ∨ (#i = #j))"
  // safety formula

restriction CA_single_registration:
  "∀ c cp skS #i #j.
    ((Secret( c, skS ) @ #i) ∧ (Secret( cp, skS ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction one_role:
  "¬(∃ x #i #j. (Responder( x ) @ #i) ∧ (Server( x ) @ #j))"
  // safety formula

























lemma acc_blamed_suff:
  exists-trace
  "∃ x #i.
    ((Blame( x ) @ #i) ∧ (∀ x.1 #i.1. (Blame( x.1 ) @ #i.1) ⇒ (x.1 = x))) ∧
    (∀ a #i.1. (Corrupted( a ) @ #i.1) ⇒ (a = x))"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i.
  (Blame( x ) @ #i)
 ∧
  (∀ x.1 #i.1. (Blame( x.1 ) @ #i.1) ⇒ x.1 = x) ∧
  (∀ a #i.1. (Corrupted( a ) @ #i.1) ⇒ a = x)"
*/
simplify
solve( C( ts, cert, 'revoked' ) ▶₀ #i )
  case C_receive
  solve( !KU( sig(pk(sk(x)), sk(x.1)) ) @ #vk.4 )
    case S_init
    solve( !KU( sig(<pk(sk($rs)), sig(pk(sk($s)), sk($ca)), 'revoked', ts>,
                    sk($rs))
           ) @ #vk.9 )
      case RS_resp
      solve( !KU( sig(<pk(sk($rs)), sig(pk(sk($s)), sk($ca)), 'revoked', $tn>,
                      sk($s))
             ) @ #vk.10 )
        case S_honest
        solve( !KU( pk(sk($rs)) ) @ #vk.8 )
          case Init
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma acc_verif_empty:
  all-traces
  "(¬(∃ x #i. Blame( x ) @ #i)) ⇒
   (¬(∃ c sk t #i #j #k #l.
       ((((Judged( t, c ) @ #i) ∧ (Secret( c, sk ) @ #j)) ∧
         (Revealed( sk ) @ #k)) ∧
        (Time( t ) @ #l)) ∧
       (#k < #l)))"
/*
guarded formula characterizing all counter-examples:
"(∀ x #i. (Blame( x ) @ #i) ⇒ ⊥) ∧
 (∃ c sk t #i #j #k #l.
   (Judged( t, c ) @ #i) ∧
   (Secret( c, sk ) @ #j) ∧
   (Revealed( sk ) @ #k) ∧
   (Time( t ) @ #l)
  ∧
   #k < #l)"
*/
simplify
solve( !CAsk( skCA ) ▶₀ #j )
  case Init
  solve( CertStatus( $s, cert, 'good' ) ▶₀ #k )
    case S_init
    solve( Judged( t, sig(pk(sk($s)), sk($ca)) ) @ #i )
      case C_judge_good
      solve( C( t, sig(pk(sk($s)), sk($ca)), 'good' ) ▶₀ #i )
        case C_receive
        solve( Time( t ) @ #l )
          case RS_resp
          solve( !RS( $rs, skRS, pk(sk(x)) ) ▶₀ #l )
            case Init
            solve( CertStatus( $s.1, sig(x, sk($ca.1)), status ) ▶₂ #l )
              case S_corrupt
              solve( !KU( sig(<pk(sk($rs.1)), sig(pk(sk($s)), sk($ca)), 'good', $tn>,
                              sk($rs.1))
                     ) @ #vk.9 )
                case c_sig
                solve( !KU( sk($rs.1) ) @ #vk.12 )
                  case RS_corrupt
                  solve( !KU( sig(<pk(sk($rs.1)), sig(pk(sk($s)), sk($ca)), 'good', $tn>,
                                  sk($s))
                         ) @ #vk.11 )
                    case S_honest
                    solve( !KU( pk(sk($rs.1)) ) @ #vk.7 )
                      case Init
                      solve( !KU( sig(pk(sk($s)), sk($ca)) ) @ #vk.9 )
                        case S_init
                        solve( !KU( sig(pk(sk($s.1)), sk($ca.1)) ) @ #vk.13 )
                          case S_init
                          SOLVED // trace found
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma acc_blamed_verif_nonempty:
  all-traces
  "∀ x #i.
    (Blame( x ) @ #i) ⇒
    (¬(¬(∃ c sk t #i.1 #j #k #l.
          ((((Judged( t, c ) @ #i.1) ∧ (Secret( c, sk ) @ #j)) ∧
            (Revealed( sk ) @ #k)) ∧
           (Time( t ) @ #l)) ∧
          (#k < #l))))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Blame( x ) @ #i)
 ∧
  ∀ c sk t #i.1 #j #k #l.
   (Judged( t, c ) @ #i.1) ∧
   (Secret( c, sk ) @ #j) ∧
   (Revealed( sk ) @ #k) ∧
   (Time( t ) @ #l)
  ⇒
   ¬(#k < #l)"
*/
simplify
solve( C( ts, cert, 'revoked' ) ▶₀ #i )
  case C_receive
  solve( !KU( sig(pk(sk(x)), sk(x.1)) ) @ #vk.4 )
    case S_init
    solve( !KU( sig(<pk(sk($rs)), sig(pk(sk($s)), sk($ca)), 'revoked', ts>,
                    sk($rs))
           ) @ #vk.9 )
      case c_sig
      solve( !KU( sk($rs) ) @ #vk.11 )
        case RS_corrupt
        solve( !KU( sig(<pk(sk($rs)), sig(pk(sk($s)), sk($ca)), 'revoked', ts>,
                        sk($s))
               ) @ #vk.11 )
          case S_honest
          solve( !KU( pk(sk($rs)) ) @ #vk.9 )
            case Init
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma acc_blamed_min:
  all-traces
  "∀ x #i.
    (Blame( x ) @ #i) ⇒
    (¬(∃ x.1 #i.1. (Blame( x.1 ) @ #i.1) ∧ ((x.1 = x) ∧ (¬(x = x.1)))))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Blame( x ) @ #i)
 ∧
  ∃ x.1 #i.1. (Blame( x.1 ) @ #i.1) ∧ (x.1 = x) ∧ ¬(x = x.1)"
*/
simplify
by contradiction /* from formulas */

lemma acc_blamed_uniq:
  all-traces "∀ x #i. (Blame( x ) @ #i) ⇒ (∃ #i.1. Corrupted( x ) @ #i.1)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (Blame( x ) @ #i) ∧ ∀ #i.1. (Corrupted( x ) @ #i.1) ⇒ ⊥"
*/
simplify
solve( C( ts, cert, 'revoked' ) ▶₀ #i )
  case C_receive
  solve( !KU( sig(pk(sk(x)), sk(x.1)) ) @ #vk.4 )
    case S_init
    solve( !KU( sig(<pk(sk($rs)), sig(pk(sk($s)), sk($ca)), 'revoked', ts>,
                    sk($rs))
           ) @ #vk.9 )
      case c_sig
      solve( !KU( sk($rs) ) @ #vk.11 )
        case RS_corrupt
        solve( !KU( sig(<pk(sk($rs)), sig(pk(sk($s)), sk($ca)), 'revoked', ts>,
                        sk($s))
               ) @ #vk.11 )
          case S_honest
          solve( !KU( pk(sk($rs)) ) @ #vk.9 )
            case Init
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma acc_blamed_inj:
  all-traces "⊤"
/*
guarded formula characterizing all counter-examples:
"⊥"
*/
by contradiction /* from formulas */

lemma acc_blamed_single:
  exists-trace
  "∃ x #i.
    (Blame( x ) @ #i) ∧ (∀ x.1 #i.1. (Blame( x.1 ) @ #i.1) ⇒ (x.1 = x))"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i. (Blame( x ) @ #i) ∧ ∀ x.1 #i.1. (Blame( x.1 ) @ #i.1) ⇒ x.1 = x"
*/
simplify
solve( C( ts, cert, 'revoked' ) ▶₀ #i )
  case C_receive
  solve( !KU( sig(pk(sk(x)), sk(x.1)) ) @ #vk.4 )
    case S_init
    solve( !KU( sig(<pk(sk($rs)), sig(pk(sk($s)), sk($ca)), 'revoked', ts>,
                    sk($rs))
           ) @ #vk.9 )
      case RS_resp
      solve( !KU( sig(<pk(sk($rs)), sig(pk(sk($s)), sk($ca)), 'revoked', $tn>,
                      sk($s))
             ) @ #vk.10 )
        case S_honest
        solve( !KU( pk(sk($rs)) ) @ #vk.8 )
          case Init
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

predicate: blamed( x )<=>∃ #i. Blame( x ) @ #i

/*
WARNING: the following wellformedness checks failed!

Accountability (RP check)
  The specification contains at least one restriction.
  The specification contains public names.
  At least one case test can be instantiated with non-public names.
  
  Please verify manually that your protocol fulfills the following condition:
  
  For each case test τ, traces t, t’, and instantiations ρ, ρ’:
  If τ holds on t with ρ, and τ single-matches with ρ’ on t’, then
  there exists a trace t’’ such that τ single-matches with ρ on t’’
  and the parties corrupted in t’’ are the same as the parties
  corrupted in t’ renamed from rng(ρ’) to rng(ρ).
*/

/*
Generated from:
Tamarin version 1.9.0
Maude version 3.2.2
Git revision: c838686f5a3d41b6a355eafd32cc2104ca41809c (with uncommited changes), branch: HEAD
Compiled at: 2023-10-25 11:27:38.363683988 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/accountability/csf21-acc-unbounded/previous/ocsps-msr-untrusted.spthy

  output:          examples/accountability/csf21-acc-unbounded/previous/ocsps-msr-untrusted.spthy.tmp
  processing time: 1.45s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  acc_blamed_suff (exists-trace): verified (7 steps)
  acc_verif_empty (all-traces): falsified - found trace (15 steps)
  acc_blamed_verif_nonempty (all-traces): falsified - found trace (8 steps)
  acc_blamed_min (all-traces): verified (2 steps)
  acc_blamed_uniq (all-traces): falsified - found trace (8 steps)
  acc_blamed_inj (all-traces): verified (1 steps)
  acc_blamed_single (exists-trace): verified (7 steps)

==============================================================================
*/
