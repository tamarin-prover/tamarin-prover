theory xorbasic begin

// Function signature and definition of the equational theory E

builtins: xor
functions: fst/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



rule (modulo E) testsend:
   [ Fr( ~x ), Fr( ~y ), Fr( ~a ), Fr( ~b ) ]
  --[ OnlyOnce( ), Secret( (~x⊕~y) ) ]->
   [ Out( <(~a⊕~x), (~b⊕~y), (~a⊕~b)> ) ]

  /*
  rule (modulo AC) testsend:
     [ Fr( ~x ), Fr( ~y ), Fr( ~a ), Fr( ~b ) ]
    --[ OnlyOnce( ), Secret( z.3 ) ]->
     [ Out( <z, z.1, z.2> ) ]
    variants (modulo AC)
     1. ~a    = ~a.9
        ~b    = ~b.9
        ~x    = ~x.9
        ~y    = ~y.9
        z     = (~a.9⊕~x.9)
        z.1   = (~b.9⊕~y.9)
        z.2   = (~a.9⊕~b.9)
        z.3   = (~x.9⊕~y.9)
    
     2. ~a    = ~x.9
        ~b    = ~x.9
        ~x    = ~x.9
        ~y    = ~x.9
        z     = zero
        z.1   = zero
        z.2   = zero
        z.3   = zero
    
     3. ~a    = ~x.9
        ~b    = ~x.9
        ~x    = ~x.9
        ~y    = ~y.10
        z     = zero
        z.1   = (~x.9⊕~y.10)
        z.2   = zero
        z.3   = (~x.9⊕~y.10)
    
     4. ~a    = ~x.9
        ~b    = ~x.9
        ~x    = ~x.10
        ~y    = ~x.9
        z     = (~x.9⊕~x.10)
        z.1   = zero
        z.2   = zero
        z.3   = (~x.9⊕~x.10)
    
     5. ~a    = ~x.9
        ~b    = ~x.9
        ~x    = ~x.10
        ~y    = ~x.10
        z     = (~x.9⊕~x.10)
        z.1   = (~x.9⊕~x.10)
        z.2   = zero
        z.3   = zero
    
     6. ~a    = ~x.9
        ~b    = ~x.9
        ~x    = ~x.10
        ~y    = ~y.10
        z     = (~x.9⊕~x.10)
        z.1   = (~x.9⊕~y.10)
        z.2   = zero
        z.3   = (~x.10⊕~y.10)
    
     7. ~a    = ~x.9
        ~b    = ~b.10
        ~x    = ~x.9
        ~y    = ~x.9
        z     = zero
        z.1   = (~x.9⊕~b.10)
        z.2   = (~x.9⊕~b.10)
        z.3   = zero
    
     8. ~a    = ~x.9
        ~b    = ~b.10
        ~x    = ~x.9
        ~y    = ~y.10
        z     = zero
        z.1   = (~b.10⊕~y.10)
        z.2   = (~x.9⊕~b.10)
        z.3   = (~x.9⊕~y.10)
    
     9. ~a    = ~x.9
        ~b    = ~x.10
        ~x    = ~x.9
        ~y    = ~x.10
        z     = zero
        z.1   = zero
        z.2   = (~x.9⊕~x.10)
        z.3   = (~x.9⊕~x.10)
    
    10. ~a    = ~a.10
        ~b    = ~x.9
        ~x    = ~x.9
        ~y    = ~x.9
        z     = (~x.9⊕~a.10)
        z.1   = zero
        z.2   = (~x.9⊕~a.10)
        z.3   = zero
    
    11. ~a    = ~a.10
        ~b    = ~x.9
        ~x    = ~x.10
        ~y    = ~x.9
        z     = (~a.10⊕~x.10)
        z.1   = zero
        z.2   = (~x.9⊕~a.10)
        z.3   = (~x.9⊕~x.10)
    
    12. ~a    = ~a.10
        ~b    = ~b.10
        ~x    = ~x.9
        ~y    = ~x.9
        z     = (~x.9⊕~a.10)
        z.1   = (~x.9⊕~b.10)
        z.2   = (~a.10⊕~b.10)
        z.3   = zero
  */

restriction unique:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma secrecybroken:
  all-traces "∀ x #i. (Secret( x ) @ #i) ⇒ (¬(∃ #j. K( x ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (Secret( x ) @ #i) ∧ ∃ #j. (K( x ) @ #j)"
*/
simplify
solve( splitEqs(0) )
  case split
  solve( !KU( (~x⊕~y) ) @ #vk )
    case coerce
    solve( !KD( (~x⊕~y) ) ▶₀ #vk )
      case testsend
      solve( (#vl, 0) ~~> (#vk, 0) )
        case d_0_fst
        solve( (#vr, 0) ~~> (#vk, 0) )
          case d_xor_case_2
          solve( (#vr.1, 0) ~~> (#vk, 0) )
            case Xor
            solve( !KU( (~a⊕~y) ) @ #vk.1 )
              case coerce
              solve( !KD( (~a⊕~y) ) ▶₀ #vk.1 )
                case testsend
                solve( (#vl, 0) ~~> (#vk.1, 0) )
                  case d_0_snd
                  solve( (#vr.2, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    solve( (#vr.3, 0) ~~> (#vk.1, 0) )
                      case d_xor_case_2
                      solve( (#vr.4, 0) ~~> (#vk.1, 0) )
                        case Xor
                        solve( !KU( (~a⊕~b) ) @ #vk.2 )
                          case coerce
                          solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                            case testsend
                            solve( (#vl, 0) ~~> (#vk.2, 0) )
                              case d_0_snd
                              solve( (#vr.2, 0) ~~> (#vk.2, 0) )
                                case d_0_snd
                                solve( (#vr.5, 0) ~~> (#vk.2, 0) )
                                  case Xor
                                  SOLVED // trace found
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/features/xor/basicfunctionality/xor-basic.spthy

------------------------------------------------------------------------------
analyzed: examples/features/xor/basicfunctionality/xor-basic.spthy

  output:          examples/features/xor/basicfunctionality/xor-basic.spthy.tmp
  processing time: 0.839934272s
  secrecybroken (all-traces): falsified - found trace (19 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/features/xor/basicfunctionality/xor-basic.spthy

  output:          examples/features/xor/basicfunctionality/xor-basic.spthy.tmp
  processing time: 0.839934272s
  secrecybroken (all-traces): falsified - found trace (19 steps)

==============================================================================
*/
