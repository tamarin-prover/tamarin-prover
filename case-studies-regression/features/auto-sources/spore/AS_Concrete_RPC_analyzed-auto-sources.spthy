theory BanConcreteAndrewSecureRPC begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, pred/1, sdec/2, senc/2, snd/1, succ/1
equations:
    fst(<x.1, x.2>) = x.1,
    pred(succ(x)) = x,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Create_Key:
   [ Fr( ~sk ) ]
  --[ Secret( $A, $B, ~sk ) ]->
   [ !Key( $A, $B, ~sk ), !Key( $B, $A, ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_sk:
   [ !Key( $A, $B, ~sk ) ]
  --[ Reveal( $A, $B ), Reveal( $B, $A ) ]->
   [ Out( ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_1:
   [ !Key( $A, $B, ~sk ), Fr( ~na ) ]
  --[ Running_A( $A, $B, <'A', 'B', ~sk, ~na> ) ]->
   [ Out( <'1', $A, ~na> ), StateASend( $A, $B, ~sk, ~na ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_1:
   [ In( <'1', x, na> ), !Key( x, $B, ~sk ), Fr( ~kabp ) ]
  --[ Secret( x, $B, ~kabp ), Running_B( x, $B, <'A', 'B', ~sk, ~kabp> )
  ]->
   [ Out( senc(<'2', na, ~kabp>, ~sk) ), StateB( x, $B, ~sk, na, ~kabp ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_2:
   [
   !Key( $A, $B, ~sk ), StateASend( $A, $B, ~sk, ~na ),
   In( senc(<'2', ~na, kabp>, ~sk) )
   ]
  --[ Secret( $A, $B, kabp ), Commit_A( $A, $B, <'A', 'B', ~sk, kabp> ) ]->
   [ Out( senc(<'3', ~na>, kabp) ), StateAReceive( $A, $B, ~sk, ~na, kabp )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_2:
   [
   StateB( x, $B, ~sk, na, ~kabp ), In( senc(<'3', na>, ~kabp) ), Fr( ~nb ),
   !Key( x, $B, ~sk )
   ]
  --[ Commit_B( x, $B, <'A', 'B', ~sk, na> ) ]->
   [ Out( <'4', ~nb> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_3:
   [
   !Key( $A, $B, ~sk ), In( <'4', nb> ),
   StateAReceive( $A, $B, ~sk, ~na, kabp )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

lemma secrecy:
  all-traces
  "¬(∃ A B sk #i #j.
      ((Secret( A, B, sk ) @ #i) ∧ (K( sk ) @ #j)) ∧
      (¬(∃ #r. Reveal( A, B ) @ #r)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B sk #i #j.
  (Secret( A, B, sk ) @ #i) ∧ (K( sk ) @ #j)
 ∧
  ∀ #r. (Reveal( A, B ) @ #r) ⇒ ⊥"
*/
simplify
solve( Secret( A, B, sk ) @ #i )
  case A_2
  solve( !Key( $A, $B, ~sk ) ▶₀ #i )
    case Create_Key_case_1
    solve( StateASend( $A, $B, ~sk, ~na ) ▶₁ #i )
      case A_1_case_1
      solve( !KU( senc(<'2', ~na, sk.1>, ~sk) ) @ #vk.1 )
        case B_1_case_1
        solve( !KU( ~kabp ) @ #vk.1 )
          case B_1
          solve( !KU( ~sk ) @ #vk.7 )
            case Reveal_sk_case_1
            by contradiction /* from formulas */
          next
            case Reveal_sk_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case B_1_case_2
        solve( !KU( ~kabp ) @ #vk.1 )
          case B_1
          solve( !KU( ~sk ) @ #vk.7 )
            case Reveal_sk_case_1
            by contradiction /* from formulas */
          next
            case Reveal_sk_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~sk ) @ #vk.4 )
          case Reveal_sk_case_1
          by contradiction /* from formulas */
        next
          case Reveal_sk_case_2
          by contradiction /* from formulas */
        qed
      qed
    next
      case A_1_case_2
      solve( !KU( senc(<'2', ~na, sk.1>, ~sk) ) @ #vk.1 )
        case B_1_case_1
        solve( !KU( ~kabp ) @ #vk.1 )
          case B_1
          solve( !KU( ~sk ) @ #vk.7 )
            case Reveal_sk_case_1
            by contradiction /* from formulas */
          next
            case Reveal_sk_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case B_1_case_2
        solve( !KU( ~kabp ) @ #vk.1 )
          case B_1
          solve( !KU( ~sk ) @ #vk.7 )
            case Reveal_sk_case_1
            by contradiction /* from formulas */
          next
            case Reveal_sk_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~sk ) @ #vk.4 )
          case Reveal_sk_case_1
          by contradiction /* from formulas */
        next
          case Reveal_sk_case_2
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case Create_Key_case_2
    solve( StateASend( $A, $B, ~sk, ~na ) ▶₁ #i )
      case A_1_case_1
      solve( !KU( senc(<'2', ~na, sk.1>, ~sk) ) @ #vk.1 )
        case B_1_case_1
        solve( !KU( ~kabp ) @ #vk.1 )
          case B_1
          solve( !KU( ~sk ) @ #vk.7 )
            case Reveal_sk_case_1
            by contradiction /* from formulas */
          next
            case Reveal_sk_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case B_1_case_2
        solve( !KU( ~kabp ) @ #vk.1 )
          case B_1
          solve( !KU( ~sk ) @ #vk.7 )
            case Reveal_sk_case_1
            by contradiction /* from formulas */
          next
            case Reveal_sk_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~sk ) @ #vk.4 )
          case Reveal_sk_case_1
          by contradiction /* from formulas */
        next
          case Reveal_sk_case_2
          by contradiction /* from formulas */
        qed
      qed
    next
      case A_1_case_2
      solve( !KU( senc(<'2', ~na, sk.1>, ~sk) ) @ #vk.1 )
        case B_1_case_1
        solve( !KU( ~kabp ) @ #vk.1 )
          case B_1
          solve( !KU( ~sk ) @ #vk.7 )
            case Reveal_sk_case_1
            by contradiction /* from formulas */
          next
            case Reveal_sk_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case B_1_case_2
        solve( !KU( ~kabp ) @ #vk.1 )
          case B_1
          solve( !KU( ~sk ) @ #vk.7 )
            case Reveal_sk_case_1
            by contradiction /* from formulas */
          next
            case Reveal_sk_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~sk ) @ #vk.4 )
          case Reveal_sk_case_1
          by contradiction /* from formulas */
        next
          case Reveal_sk_case_2
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case B_1
  solve( !Key( A, $B, ~sk ) ▶₁ #i )
    case Create_Key_case_1
    solve( !KU( ~kabp ) @ #vk )
      case B_1
      solve( !KU( ~sk ) @ #vk.6 )
        case Reveal_sk_case_1
        by contradiction /* from formulas */
      next
        case Reveal_sk_case_2
        by contradiction /* from formulas */
      qed
    qed
  next
    case Create_Key_case_2
    solve( !KU( ~kabp ) @ #vk )
      case B_1
      solve( !KU( ~sk ) @ #vk.6 )
        case Reveal_sk_case_1
        by contradiction /* from formulas */
      next
        case Reveal_sk_case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Create_Key
  solve( !KU( ~sk ) @ #vk )
    case Reveal_sk_case_1
    by contradiction /* from formulas */
  next
    case Reveal_sk_case_2
    by contradiction /* from formulas */
  qed
qed

lemma injectiveagreement_A:
  all-traces
  "∀ A B t #i.
    (Commit_A( A, B, t ) @ #i) ⇒
    ((∃ #j.
       ((Running_B( A, B, t ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ A2 B2 #i2. (Commit_A( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ #r. Reveal( A, B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_A( A, B, t ) @ #i)
 ∧
  (∀ #j.
    (Running_B( A, B, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ A2 B2 #i2. (Commit_A( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ #r. (Reveal( A, B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !Key( $A, $B, ~sk ) ▶₀ #i )
  case Create_Key_case_1
  solve( StateASend( $A, $B, ~sk, ~na ) ▶₁ #i )
    case A_1_case_1
    solve( !KU( senc(<'2', ~na, kabp>, ~sk) ) @ #vk )
      case B_1_case_2
      solve( !KU( ~na ) @ #vk.5 )
        case A_1
        SOLVED // trace found
      qed
    qed
  qed
qed

lemma injectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    ((∃ #j.
       ((Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ #r. Reveal( A, B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  (∀ #j.
    (Running_A( A, B, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ #r. (Reveal( A, B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateB( A, $B, ~sk, na, ~kabp ) ▶₀ #i )
  case B_1_case_1
  solve( !Key( $A, $B, ~sk ) ▶₃ #i )
    case Create_Key_case_1
    solve( !KU( senc(<'3', na>, ~kabp) ) @ #vk )
      case A_2_case_4
      solve( !KU( senc(<'2', ~na, ~kabp>, ~sk.1) ) @ #vk.6 )
        case B_1
        solve( !KU( ~na ) @ #vk.6 )
          case A_1
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreement_A:
  all-traces
  "∀ A B t #i.
    (Commit_A( A, B, t ) @ #i) ⇒
    ((∃ #j. (Running_B( A, B, t ) @ #j) ∧ (#j < #i)) ∨
     (∃ #r. Reveal( A, B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_A( A, B, t ) @ #i)
 ∧
  (∀ #j. (Running_B( A, B, t ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (Reveal( A, B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !Key( $A, $B, ~sk ) ▶₀ #i )
  case Create_Key_case_1
  solve( StateASend( $A, $B, ~sk, ~na ) ▶₁ #i )
    case A_1_case_1
    solve( !KU( senc(<'2', ~na, kabp>, ~sk) ) @ #vk )
      case B_1_case_2
      solve( !KU( ~na ) @ #vk.5 )
        case A_1
        SOLVED // trace found
      qed
    qed
  qed
qed

lemma noninjectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    ((∃ #j. (Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∨
     (∃ #r. Reveal( A, B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  (∀ #j. (Running_A( A, B, t ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (Reveal( A, B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateB( A, $B, ~sk, na, ~kabp ) ▶₀ #i )
  case B_1_case_1
  solve( !Key( $A, $B, ~sk ) ▶₃ #i )
    case Create_Key_case_1
    solve( !KU( senc(<'3', na>, ~kabp) ) @ #vk )
      case A_2_case_4
      solve( !KU( senc(<'2', ~na, ~kabp>, ~sk.1) ) @ #vk.6 )
        case B_1
        solve( !KU( ~na ) @ #vk.6 )
          case A_1
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma Session_key_honest_setup:
  exists-trace
  "∃ A B t s #i #j.
    (((Commit_B( A, B, t ) @ #i) ∧ (Commit_A( A, B, s ) @ #j)) ∧ (#i < #j)) ∧
    (¬(∃ #r. Reveal( A, B ) @ #r))"
/*
guarded formula characterizing all satisfying traces:
"∃ A B t s #i #j.
  (Commit_B( A, B, t ) @ #i) ∧ (Commit_A( A, B, s ) @ #j)
 ∧
  (#i < #j) ∧ (∀ #r. (Reveal( A, B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateB( $A, $B, ~sk, na, ~kabp ) ▶₀ #i )
  case B_1_case_1
  solve( !Key( $A, $B, ~sk ) ▶₃ #i )
    case Create_Key_case_1
    solve( !Key( $A, $B, ~sk.1 ) ▶₀ #j )
      case Create_Key_case_1
      solve( StateASend( $A, $B, ~sk.1, ~na.1 ) ▶₁ #j )
        case A_1_case_1
        solve( !KU( senc(<'3', na>, ~kabp) ) @ #vk )
          case A_2_case_1
          solve( !KU( senc(<'2', ~na.1, kabp.1>, ~sk.1) ) @ #vk.1 )
            case B_1_case_1
            solve( !KU( senc(<'2', ~na, ~kabp>, ~sk.2) ) @ #vk.9 )
              case B_1
              solve( !KU( ~na ) @ #vk.9 )
                case A_1
                solve( !KU( ~na.1 ) @ #vk.10 )
                  case A_1
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/features/auto-sources/spore/AS_Concrete_RPC.spthy

------------------------------------------------------------------------------
analyzed: examples/features/auto-sources/spore/AS_Concrete_RPC.spthy

  output:          examples/features/auto-sources/spore/AS_Concrete_RPC.spthy.tmp
  processing time: 9.894984613s
  secrecy (all-traces): verified (65 steps)
  injectiveagreement_A (all-traces): falsified - found trace (6 steps)
  injectiveagreement_B (all-traces): falsified - found trace (7 steps)
  noninjectiveagreement_A (all-traces): falsified - found trace (6 steps)
  noninjectiveagreement_B (all-traces): falsified - found trace (7 steps)
  Session_key_honest_setup (exists-trace): verified (11 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/features/auto-sources/spore/AS_Concrete_RPC.spthy

  output:          examples/features/auto-sources/spore/AS_Concrete_RPC.spthy.tmp
  processing time: 9.894984613s
  secrecy (all-traces): verified (65 steps)
  injectiveagreement_A (all-traces): falsified - found trace (6 steps)
  injectiveagreement_B (all-traces): falsified - found trace (7 steps)
  noninjectiveagreement_A (all-traces): falsified - found trace (6 steps)
  noninjectiveagreement_B (all-traces): falsified - found trace (7 steps)
  Session_key_honest_setup (exists-trace): verified (11 steps)

==============================================================================
*/
