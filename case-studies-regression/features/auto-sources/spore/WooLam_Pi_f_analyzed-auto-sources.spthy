theory WooLamPi_f begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Init:
   [ Fr( ~kxs ) ] --[ KeyGen( $X ) ]-> [ !Ltk( ~kxs, $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_Longterm_Key:
   [ !Ltk( ~sk, $A ) ] --[ Reveal( $A ) ]-> [ Out( ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_to_B_1:
   [ !Ltk( ~kas, $A ) ] --> [ Out( $A ), StateA1( $A, $B, ~kas ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_to_A:
   [ In( a ), Fr( ~nb ), !Ltk( ~kbs, $B ) ]
  --[ Running_B( a, $B, <'A', 'B', ~nb> ) ]->
   [ Out( ~nb ), StateB1( a, $B, ~kbs, ~nb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_to_B_2:
   [ In( nb ), StateA1( $A, $B, ~kas ), !Ltk( ~kas, $A ) ]
  --[
  AUTO_OUT_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( senc(<'1', $A, $B, nb>,
                                                    ~kas)
  ),
  Running_A( $A, $B, <'A', 'B', nb> ), Secret( $A, $B, ~kas )
  ]->
   [ Out( senc(<'1', $A, $B, nb>, ~kas) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_to_S:
   [ In( msg ), StateB1( a, $B, ~kbs, ~nb ), !Ltk( ~kbs, $B ) ]
  --[
  AUTO_OUT_TERM_0_0_0_1_1_1_0__S_to_B( senc(<'2', a, $B, ~nb, msg>, ~kbs)
  ),
  Secret( a, $B, ~kbs )
  ]->
   [
   Out( senc(<'2', a, $B, ~nb, msg>, ~kbs) ),
   StateB2( a, $B, ~kbs, ~nb, msg )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_to_B:
   [
   In( senc(<'2', a, b, nb, senc(<'1', a, b, nb>, ~kas)>, ~kbs) ),
   !Ltk( ~kas, a ), !Ltk( ~kbs, b )
   ]
  --[
  AUTO_IN_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( senc(<'1', a, b, nb>, ~kas),
                                              nb
  ),
  AUTO_IN_TERM_0_0_0_1_1_1_0__S_to_B( senc(<'2', a, b, nb, 
                                            senc(<'1', a, b, nb>, ~kas)>,
                                           ~kbs),
                                      nb
  )
  ]->
   [ Out( senc(<'3', a, b, nb>, ~kbs) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_from_S:
   [
   In( senc(<'3', a, $B, ~nb>, ~kbs) ), StateB2( a, $B, ~kbs, ~nb, msg ),
   !Ltk( ~kbs, $B )
   ]
  --[ Commit_B( a, $B, <'A', 'B', ~nb> ) ]->
   [ ]

  /* has exactly the trivial AC variant */

lemma executability:
  exists-trace
  "∃ A B t #i #j #k.
    ((((((Commit_B( A, B, t ) @ #i) ∧ (Running_A( A, B, t ) @ #j)) ∧
        (#j < #i)) ∧
       (Running_B( A, B, t ) @ #k)) ∧
      (#k < #j)) ∧
     (¬(∃ #r1. Reveal( A ) @ #r1))) ∧
    (¬(∃ #r2. Reveal( B ) @ #r2))"
/*
guarded formula characterizing all satisfying traces:
"∃ A B t #i #j #k.
  (Commit_B( A, B, t ) @ #i) ∧
  (Running_A( A, B, t ) @ #j) ∧
  (Running_B( A, B, t ) @ #k)
 ∧
  (#j < #i) ∧
  (#k < #j) ∧
  (∀ #r1. (Reveal( A ) @ #r1) ⇒ ⊥) ∧
  (∀ #r2. (Reveal( B ) @ #r2) ⇒ ⊥)"
*/
simplify
solve( StateB2( $A, $B, ~kbs, ~nb, msg ) ▶₁ #i )
  case B_to_S
  solve( !Ltk( ~kbs, $B ) ▶₂ #i )
    case Init
    solve( StateA1( $A, $B, ~kas ) ▶₁ #j )
      case A_to_B_1
      solve( !Ltk( ~kas, $A ) ▶₂ #j )
        case Init
        solve( !KU( senc(<'3', $A, $B, ~nb>, ~kbs) ) @ #vk )
          case S_to_B
          solve( !KU( senc(<'2', $A, $B, ~nb, senc(<'1', $A, $B, ~nb>, ~kas.1)>,
                           ~kbs)
                 ) @ #vk.4 )
            case B_to_S
            solve( !KU( senc(<'1', $A, $B, ~nb>, ~kas) ) @ #vk.4 )
              case A_to_B_2
              solve( !KU( ~nb ) @ #vk.3 )
                case B_to_A
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma Secrecy:
  all-traces
  "¬(∃ A B m #i.
      (((Secret( A, B, m ) @ #i) ∧ (∃ #r. K( m ) @ #r)) ∧
       (¬(∃ #r. Reveal( B ) @ #r))) ∧
      (¬(∃ #r. Reveal( A ) @ #r)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B m #i.
  (Secret( A, B, m ) @ #i)
 ∧
  (∃ #r. (K( m ) @ #r)) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Secret( A, B, m ) @ #i )
  case A_to_B_2
  solve( StateA1( $A, $B, ~kas ) ▶₁ #i )
    case A_to_B_1
    solve( !Ltk( ~kas, $A ) ▶₂ #i )
      case Init
      solve( !KU( ~kas ) @ #vk )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case B_to_S
  solve( StateB1( A, $B, ~kbs, ~nb ) ▶₁ #i )
    case B_to_A
    solve( !Ltk( ~kbs, $B ) ▶₂ #i )
      case Init
      solve( !KU( ~kbs ) @ #vk )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    (((∃ #j.
        ((Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
      (∃ #r. Reveal( A ) @ #r)) ∨
     (∃ #r. Reveal( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  (∀ #j.
    (Running_A( A, B, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateB2( A, $B, ~kbs, ~nb, msg ) ▶₁ #i )
  case B_to_S
  solve( !Ltk( ~kbs, $B ) ▶₂ #i )
    case Init
    solve( !KU( senc(<'3', A, $B, ~nb>, ~kbs) ) @ #vk )
      case S_to_B
      solve( !KU( senc(<'2', $X, $B, ~nb, senc(<'1', $X, $B, ~nb>, ~kas)>,
                       ~kbs)
             ) @ #vk.3 )
        case B_to_S
        solve( !KU( senc(<'1', $X, $B, ~nb>, ~kas) ) @ #vk.2 )
          case A_to_B_2
          solve( (#i2 < #i)  ∥ (#i < #i2) )
            case case_1
            solve( StateB2( A2, $B.1, ~kbs.1, ~nb, msg ) ▶₁ #i2 )
              case B_to_S
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( StateB2( A2, $B.1, ~kbs.1, ~nb, msg ) ▶₁ #i2 )
              case B_to_S
              by contradiction /* cyclic */
            qed
          qed
        next
          case c_senc
          solve( !KU( ~kas ) @ #vk.6 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~kbs ) @ #vk.6 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_senc
      solve( !KU( ~kbs ) @ #vk.5 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma agreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    (((∃ #j. (Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. Reveal( A ) @ #r)) ∨
     (∃ #r. Reveal( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  (∀ #j. (Running_A( A, B, t ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateB2( A, $B, ~kbs, ~nb, msg ) ▶₁ #i )
  case B_to_S
  solve( !Ltk( ~kbs, $B ) ▶₂ #i )
    case Init
    solve( !KU( senc(<'3', A, $B, ~nb>, ~kbs) ) @ #vk )
      case S_to_B
      solve( !KU( senc(<'2', $X, $B, ~nb, senc(<'1', $X, $B, ~nb>, ~kas)>,
                       ~kbs)
             ) @ #vk.3 )
        case B_to_S
        solve( !KU( senc(<'1', $X, $B, ~nb>, ~kas) ) @ #vk.2 )
          case A_to_B_2
          by contradiction /* from formulas */
        next
          case c_senc
          solve( !KU( ~kas ) @ #vk.6 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~kbs ) @ #vk.6 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_senc
      solve( !KU( ~kbs ) @ #vk.5 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

lemma AUTO_typing [sources]:
  all-traces
  "((⊤) ∧
    (∀ x m #i.
      (AUTO_IN_TERM_0_0_0_1_1_1_0__S_to_B( m, x ) @ #i) ⇒
      ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
       (∃ #j. (AUTO_OUT_TERM_0_0_0_1_1_1_0__S_to_B( m ) @ #j) ∧ (#j < #i))))) ∧
   (∀ x m #i.
     (AUTO_IN_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( m, x ) @ #i) ⇒
     ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j.
        (AUTO_OUT_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( m ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ x m #i.
    (AUTO_IN_TERM_0_0_0_1_1_1_0__S_to_B( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (AUTO_OUT_TERM_0_0_0_1_1_1_0__S_to_B( m ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ x m #i.
    (AUTO_IN_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j.
      (AUTO_OUT_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( m ) @ #j) ⇒ ¬(#j < #i))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ x m #i.
           (AUTO_IN_TERM_0_0_0_1_1_1_0__S_to_B( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (AUTO_OUT_TERM_0_0_0_1_1_1_0__S_to_B( m ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ x m #i.
           (AUTO_IN_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j.
             (AUTO_OUT_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( m ) @ #j) ⇒ ¬(#j < #i))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_TERM_0_0_0_1_1_1_0__S_to_B( senc(<'2', a, b, x, 
                                                         senc(<'1', a, b, x>, ~kas)>,
                                                        ~kbs)
              ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !Ltk( ~kas, a ) ▶₁ #i )
        case Init
        solve( !Ltk( ~kbs, b ) ▶₂ #i )
          case Init
          solve( !KU( senc(<'2', $X, $X.1, x, senc(<'1', $X, $X.1, x>, ~kas)>,
                           ~kbs)
                 ) @ #vk )
            case B_to_S
            by contradiction /* from formulas */
          next
            case S_to_B
            solve( (∃ #j. (!KU( nb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_0_0_0_1_1_1_0__S_to_B( senc(<'2', $X.2, $X.3, nb, 
                                                                 senc(<'1', $X.2, $X.3, nb>, ~kas.1)>,
                                                                ~kbs.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_TERM_0_0_0_1_1_1_0__S_to_B( senc(<'2', a, b, x, 
                                                         senc(<'1', a, b, x>, ~kas)>,
                                                        ~kbs)
              ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !Ltk( ~kas, a ) ▶₁ #i )
        case Init
        solve( !Ltk( ~kbs, b ) ▶₂ #i )
          case Init
          solve( !KU( senc(<'2', $X, $X.1, x, senc(<'1', $X, $X.1, x>, ~kas)>,
                           ~kbs)
                 ) @ #vk )
            case B_to_S
            solve( !KU( senc(<'1', $X, $X.1, ~nb>, ~kas) ) @ #vk.1 )
              case A_to_B_2
              by contradiction /* from formulas */
            next
              case S_to_B
              solve( (∃ #j. (!KU( nb.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                     (∃ #j.
                       (AUTO_OUT_TERM_0_0_0_1_1_1_0__S_to_B( senc(<'2', $X.2, $X.3, nb.1, 
                                                                   senc(<'1', $X.2, $X.3, nb.1>, ~kas.1)>,
                                                                  ~kbs.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.4)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case c_senc
              by contradiction /* from formulas */
            qed
          next
            case S_to_B
            solve( (∃ #j. (!KU( nb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_0_0_0_1_1_1_0__S_to_B( senc(<'2', $X.2, $X.3, nb, 
                                                                 senc(<'1', $X.2, $X.3, nb>, ~kas.1)>,
                                                                ~kbs.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (last(#i))  ∥
             (∃ #j. (!KU( ~nb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
             (∃ #j.
               (AUTO_OUT_TERM_0_0_0_1_1_1_1_0_1_1_1__S_to_B( senc(<'1', a, $B, ~nb>,
                                                                  ~kas)
                ) @ #j)
              ∧
               (¬(last(#j))) ∧ (#j < #i)) )
        case case_1
        solve( !Ltk( ~kas, a ) ▶₁ #i )
          case Init
          solve( !Ltk( ~kbs, $B ) ▶₂ #i )
            case Init
            solve( StateB1( $X, $B, ~kbs, ~nb ) ▶₁ #j )
              case B_to_A
              solve( !Ltk( ~kbs, $B ) ▶₂ #j )
                case Init
                solve( !KU( senc(<'2', $X, $B, ~nb, senc(<'1', $X, $B, ~nb>, ~kas)>,
                                 ~kbs)
                       ) @ #vk )
                  case B_to_S
                  solve( !KU( senc(<'1', $X, $B, ~nb>, ~kas) ) @ #vk.1 )
                    case A_to_B_2
                    by contradiction /* from formulas */
                  next
                    case S_to_B
                    solve( (∃ #j. (!KU( nb.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_0_0_0_1_1_1_0__S_to_B( senc(<'2', $X.1, $X.2, nb.1, 
                                                                         senc(<'1', $X.1, $X.2, nb.1>, ~kas.1)
                                                                        >,
                                                                        ~kbs.1)
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.3)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case c_senc
                    by contradiction /* from formulas */
                  qed
                next
                  case S_to_B
                  solve( (∃ #j. (!KU( nb.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                         (∃ #j.
                           (AUTO_OUT_TERM_0_0_0_1_1_1_0__S_to_B( senc(<'2', $X.1, $X.2, nb.1, 
                                                                       senc(<'1', $X.1, $X.2, nb.1>, ~kas.1)>,
                                                                      ~kbs.1)
                            ) @ #j)
                          ∧
                           (¬(last(#j))) ∧ (#j < #vr.3)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case c_senc
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/features/auto-sources/spore/WooLam_Pi_f.spthy

------------------------------------------------------------------------------
analyzed: examples/features/auto-sources/spore/WooLam_Pi_f.spthy

  output:          examples/features/auto-sources/spore/WooLam_Pi_f.spthy.tmp
  processing time: 0.653935637s
  executability (exists-trace): verified (10 steps)
  Secrecy (all-traces): verified (10 steps)
  injectiveagreement_B (all-traces): verified (17 steps)
  agreement_B (all-traces): verified (13 steps)
  AUTO_typing (all-traces): verified (48 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/features/auto-sources/spore/WooLam_Pi_f.spthy

  output:          examples/features/auto-sources/spore/WooLam_Pi_f.spthy.tmp
  processing time: 0.653935637s
  executability (exists-trace): verified (10 steps)
  Secrecy (all-traces): verified (10 steps)
  injectiveagreement_B (all-traces): verified (17 steps)
  agreement_B (all-traces): verified (13 steps)
  AUTO_typing (all-traces): verified (48 steps)

==============================================================================
*/
