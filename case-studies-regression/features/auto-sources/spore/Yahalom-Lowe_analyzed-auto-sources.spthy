theory YahalomLowe begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Init:
   [ Fr( ~kxs ) ] --[ KeyGen( $X ) ]-> [ !LongtermKey( ~kxs, $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_Longterm_Key:
   [ !LongtermKey( ~sk, $A ) ] --[ Compromise( $A ) ]-> [ Out( ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_Shortterm_Key:
   [ !ShorttermKey( ~kab, $B, $A ) ]
  --[ Compromise( $A ), Compromise( $B ) ]->
   [ Out( ~kab ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_1:
   [ Fr( ~na ) ] --> [ Out( <$A, ~na> ), StateA1( $A, $B, ~na ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_1:
   [ In( <yA, yna> ), !LongtermKey( ykbs, yB ), Fr( ~nb ) ]
  --[
  AUTO_OUT_TERM_1_0_0_1_1_1__S_1( senc(<'1', yA, yna, ~nb>, ykbs) ),
  AUTO_OUT_TERM_1_0_0_1_1_0__S_1( senc(<'1', yA, yna, ~nb>, ykbs) ),
  RunningB( yB, yA, <yna, ~nb> )
  ]->
   [ Out( senc(<'1', yA, yna, ~nb>, ykbs) ), StateB1( yB, yA, yna, ~nb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_1:
   [
   Fr( ~kab ), In( senc(<'1', zA, zna, znb>, zkbs) ),
   !LongtermKey( zkbs, zB ), !LongtermKey( zkas, zA )
   ]
  --[
  AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( senc(<'2', zB, ~kab, zna, znb>, zkas)
  ),
  AUTO_IN_TERM_1_0_0_1_1_1__S_1( senc(<'1', zA, zna, znb>, zkbs), znb ),
  AUTO_IN_TERM_1_0_0_1_1_0__S_1( senc(<'1', zA, zna, znb>, zkbs), zna )
  ]->
   [
   StateS1( zA, zB, zna, znb, ~kab ),
   Out( senc(<'2', zB, ~kab, zna, znb>, zkas) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_2:
   [ StateS1( zA, zB, zna, znb, zkab ), !LongtermKey( zkbs, zB ) ]
  --[ Serveur( zA, zB, <zkab, zna, znb> ) ]->
   [ Out( senc(<'3', zA, zkab>, zkbs) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_2:
   [
   StateA1( xA, xB, na ), !LongtermKey( xkas, xA ),
   In( senc(<'2', xB, xkab, na, xnb>, xkas) )
   ]
  --[
  AUTO_IN_TERM_2_0_0_1_1_1_1__A_2( senc(<'2', xB, xkab, na, xnb>, xkas),
                                   xnb
  ),
  CommitA( xA, xB, <na, xnb> ), RunningA( xA, xB, <xkab, na, xnb> ),
  Secret( xA, xB, xkab )
  ]->
   [ Out( senc(<'4', xA, xB, 'S', xnb>, xkab) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_2:
   [
   StateB1( yB, yA, yna, nb ), !LongtermKey( ykbs, yB ),
   In( <senc(<'3', yA, ykab>, ykbs), senc(<'4', yA, yB, 'S', nb>, ykab)> )
   ]
  --[ CommitB( yB, yA, <ykab, yna, nb> ), Secret( yB, yA, ykab ) ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction singlelongtermkeyperuser:
  "∀ A #i #j. ((KeyGen( A ) @ #i) ∧ (KeyGen( A ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma executability:
  exists-trace
  "∃ A B kab na nb #i #j #k.
    ((((((CommitB( B, A, <kab, na, nb> ) @ #i) ∧
         (CommitA( A, B, <na, nb> ) @ #j)) ∧
        (#j < #i)) ∧
       (Serveur( A, B, <kab, na, nb> ) @ #k)) ∧
      (#k < #j)) ∧
     (¬(∃ #r1. Compromise( A ) @ #r1))) ∧
    (¬(∃ #r2. Compromise( B ) @ #r2))"
/*
guarded formula characterizing all satisfying traces:
"∃ A B kab na nb #i #j #k.
  (CommitB( B, A, <kab, na, nb> ) @ #i) ∧
  (CommitA( A, B, <na, nb> ) @ #j) ∧
  (Serveur( A, B, <kab, na, nb> ) @ #k)
 ∧
  (#j < #i) ∧
  (#k < #j) ∧
  (∀ #r1. (Compromise( A ) @ #r1) ⇒ ⊥) ∧
  (∀ #r2. (Compromise( B ) @ #r2) ⇒ ⊥)"
*/
simplify
solve( StateB1( B, A, na, nb ) ▶₀ #i )
  case B_1
  solve( !LongtermKey( ykbs, $X ) ▶₁ #i )
    case Init
    solve( StateA1( A, $X, na ) ▶₀ #j )
      case A_1
      solve( !LongtermKey( xkas, $A ) ▶₁ #j )
        case Init
        solve( StateS1( $A, $X, ~na, ~nb, kab ) ▶₀ #k )
          case S_1
          solve( !LongtermKey( zkbs, $X ) ▶₁ #k )
            case Init
            solve( !KU( senc(<'4', $A, $X, 'S', ~nb>, ~kab) ) @ #vk.2 )
              case A_2
              solve( !KU( senc(<'2', $X, xkab, ~na, ~nb>, ~kxs.1) ) @ #vk.3 )
                case S_1
                solve( !KU( senc(<'2', $X, ~kab, ~na.1, ~nb>, ~kxs.1) ) @ #vk.8 )
                  case S_1
                  solve( !KU( ~na ) @ #vk.6 )
                    case A_1
                    solve( !KU( senc(<'3', $A, ~kab>, ~kxs) ) @ #vk.4 )
                      case S_2
                      solve( !KU( senc(<'1', $A, ~na, ~nb>, ~kxs) ) @ #vk.7 )
                        case B_1
                        SOLVED // trace found
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "∀ A B k #i.
    (Secret( A, B, k ) @ #i) ⇒
    (((¬(∃ #j. K( k ) @ #j)) ∨ (∃ #j. Compromise( B ) @ #j)) ∨
     (∃ #j. Compromise( A ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ A B k #i.
  (Secret( A, B, k ) @ #i)
 ∧
  (∃ #j. (K( k ) @ #j)) ∧
  (∀ #j. (Compromise( B ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Compromise( A ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Secret( A, B, k ) @ #i )
  case A_2
  solve( StateA1( A, B, na ) ▶₀ #i )
    case A_1
    solve( !LongtermKey( xkas, $A ) ▶₁ #i )
      case Init
      solve( !KU( senc(<'2', $B, k, ~na, xnb>, ~kxs) ) @ #vk.1 )
        case S_1
        solve( !KU( ~kab ) @ #vk.1 )
          case S_1
          solve( !KU( ~kxs ) @ #vk.3 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        next
          case S_2
          solve( !KU( ~kxs.1 ) @ #vk.3 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~kxs ) @ #vk.4 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case B_2
  solve( StateB1( A, B, yna, nb ) ▶₀ #i )
    case B_1
    solve( !LongtermKey( ykbs, $X ) ▶₁ #i )
      case Init
      solve( !KU( senc(<'3', B, k>, ~kxs) ) @ #vk.2 )
        case S_2
        solve( !KU( ~kab ) @ #vk.1 )
          case S_1
          solve( !KU( ~kxs.1 ) @ #vk.8 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        next
          case S_2
          solve( !KU( ~kxs ) @ #vk.8 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~kxs ) @ #vk.9 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (CommitB( B, A, t ) @ #i) ⇒
    (((∃ #j. (RunningA( A, B, t ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. Compromise( A ) @ #r)) ∨
     (∃ #r. Compromise( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (CommitB( B, A, t ) @ #i)
 ∧
  (∀ #j. (RunningA( A, B, t ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (Compromise( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Compromise( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateB1( B, A, yna, nb ) ▶₀ #i )
  case B_1
  solve( !LongtermKey( ykbs, $X ) ▶₁ #i )
    case Init
    solve( !KU( senc(<'3', A, ykab>, ~kxs) ) @ #vk.1 )
      case S_2
      solve( !KU( senc(<'4', $X.1, $X, 'S', ~nb>, ~kab) ) @ #vk.2 )
        case A_2
        solve( !KU( senc(<'1', $X.1, zna, znb>, ~kxs) ) @ #vk.6 )
          case B_1
          solve( !KU( senc(<'2', $X, ~kab, ~na, ~nb>, ~kxs.1) ) @ #vk.8 )
            case S_1
            by contradiction /* from formulas */
          next
            case c_senc
            solve( !KU( ~kxs.1 ) @ #vk.11 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_senc
          solve( !KU( ~kxs ) @ #vk.10 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~kab ) @ #vk.9 )
          case S_1
          solve( !KU( ~nb ) @ #vk.15 )
            case A_2
            solve( !KU( ~kxs.1 ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          next
            case B_1
            solve( !KU( ~kxs.1 ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          next
            case S_1_case_1
            solve( !KU( ~kxs.1 ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          next
            case S_1_case_2
            solve( !KU( ~kxs.1 ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          qed
        next
          case S_2
          solve( !KU( ~nb ) @ #vk.15 )
            case A_2
            solve( !KU( ~kxs ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          next
            case B_1
            solve( !KU( ~kxs ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          next
            case S_1_case_1
            solve( !KU( ~kxs ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          next
            case S_1_case_2
            solve( !KU( ~kxs ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( ~kxs ) @ #vk.8 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma noninjectiveagreement_A:
  all-traces
  "∀ A B t #i.
    (CommitA( A, B, t ) @ #i) ⇒
    (((∃ #j. (RunningB( B, A, t ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. Compromise( A ) @ #r)) ∨
     (∃ #r. Compromise( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (CommitA( A, B, t ) @ #i)
 ∧
  (∀ #j. (RunningB( B, A, t ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (Compromise( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Compromise( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateA1( A, B, na ) ▶₀ #i )
  case A_1
  solve( !LongtermKey( xkas, $A ) ▶₁ #i )
    case Init
    solve( !KU( senc(<'2', $B, xkab, ~na, xnb>, ~kxs) ) @ #vk )
      case S_1
      solve( !KU( senc(<'1', $A, ~na, xnb>, ~kxs.1) ) @ #vk.1 )
        case B_1
        by contradiction /* from formulas */
      next
        case c_senc
        solve( !KU( ~kxs.1 ) @ #vk.3 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_senc
      solve( !KU( ~kxs ) @ #vk.2 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (CommitB( B, A, t ) @ #i) ⇒
    (((∃ #j.
        ((RunningA( A, B, t ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ A2 B2 #i2. (CommitB( B2, A2, t ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
      (∃ #r. Compromise( A ) @ #r)) ∨
     (∃ #r. Compromise( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (CommitB( B, A, t ) @ #i)
 ∧
  (∀ #j.
    (RunningA( A, B, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ A2 B2 #i2. (CommitB( B2, A2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ #r. (Compromise( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Compromise( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateB1( B, A, yna, nb ) ▶₀ #i )
  case B_1
  solve( !LongtermKey( ykbs, $X ) ▶₁ #i )
    case Init
    solve( !KU( senc(<'3', A, ykab>, ~kxs) ) @ #vk.1 )
      case S_2
      solve( !KU( senc(<'4', $X.1, $X, 'S', ~nb>, ~kab) ) @ #vk.2 )
        case A_2
        solve( !KU( senc(<'1', $X.1, zna, znb>, ~kxs) ) @ #vk.6 )
          case B_1
          solve( !KU( senc(<'2', $X, ~kab, ~na, ~nb>, ~kxs.1) ) @ #vk.8 )
            case S_1
            solve( (#i2 < #i)  ∥ (#i < #i2) )
              case case_1
              solve( StateB1( B2, A2, ~na, ~nb ) ▶₀ #i2 )
                case B_1
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( StateB1( B2, A2, ~na, ~nb ) ▶₀ #i2 )
                case B_1
                by contradiction /* cyclic */
              qed
            qed
          next
            case c_senc
            solve( !KU( ~kxs.1 ) @ #vk.11 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_senc
          solve( !KU( ~kxs ) @ #vk.10 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~kab ) @ #vk.9 )
          case S_1
          solve( !KU( ~nb ) @ #vk.15 )
            case A_2
            solve( !KU( ~kxs.1 ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          next
            case B_1
            solve( !KU( ~kxs.1 ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          next
            case S_1_case_1
            solve( !KU( ~kxs.1 ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          next
            case S_1_case_2
            solve( !KU( ~kxs.1 ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          qed
        next
          case S_2
          solve( !KU( ~nb ) @ #vk.15 )
            case A_2
            solve( !KU( ~kxs ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          next
            case B_1
            solve( !KU( ~kxs ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          next
            case S_1_case_1
            solve( !KU( ~kxs ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          next
            case S_1_case_2
            solve( !KU( ~kxs ) @ #vk.16 )
              case Reveal_Longterm_Key
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( ~kxs ) @ #vk.8 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injectiveagreement_A:
  all-traces
  "∀ A B t #i.
    (CommitA( A, B, t ) @ #i) ⇒
    (((∃ #j.
        ((RunningB( B, A, t ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ A2 B2 #i2. (CommitA( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
      (∃ #r. Compromise( A ) @ #r)) ∨
     (∃ #r. Compromise( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (CommitA( A, B, t ) @ #i)
 ∧
  (∀ #j.
    (RunningB( B, A, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ A2 B2 #i2. (CommitA( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ #r. (Compromise( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Compromise( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateA1( A, B, na ) ▶₀ #i )
  case A_1
  solve( !LongtermKey( xkas, $A ) ▶₁ #i )
    case Init
    solve( !KU( senc(<'2', $B, xkab, ~na, xnb>, ~kxs) ) @ #vk )
      case S_1
      solve( !KU( senc(<'1', $A, ~na, xnb>, ~kxs.1) ) @ #vk.1 )
        case B_1
        solve( (#i2 < #i)  ∥ (#i < #i2) )
          case case_1
          solve( StateA1( A2, B2, ~na ) ▶₀ #i2 )
            case A_1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( StateA1( A2, B2, ~na ) ▶₀ #i2 )
            case A_1
            by contradiction /* cyclic */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~kxs.1 ) @ #vk.3 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_senc
      solve( !KU( ~kxs ) @ #vk.2 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

lemma AUTO_typing [sources]:
  all-traces
  "(((⊤) ∧
     (∀ x m #i.
       (AUTO_IN_TERM_1_0_0_1_1_0__S_1( m, x ) @ #i) ⇒
       ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
        (∃ #j. (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( m ) @ #j) ∧ (#j < #i))))) ∧
    (∀ x m #i.
      (AUTO_IN_TERM_1_0_0_1_1_1__S_1( m, x ) @ #i) ⇒
      ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
       (∃ #j. (AUTO_OUT_TERM_1_0_0_1_1_1__S_1( m ) @ #j) ∧ (#j < #i))))) ∧
   (∀ x m #i.
     (AUTO_IN_TERM_2_0_0_1_1_1_1__A_2( m, x ) @ #i) ⇒
     ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( m ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ x m #i.
    (AUTO_IN_TERM_1_0_0_1_1_0__S_1( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( m ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ x m #i.
    (AUTO_IN_TERM_1_0_0_1_1_1__S_1( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (AUTO_OUT_TERM_1_0_0_1_1_1__S_1( m ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ x m #i.
    (AUTO_IN_TERM_2_0_0_1_1_1_1__A_2( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( m ) @ #j) ⇒ ¬(#j < #i))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ x m #i.
           (AUTO_IN_TERM_1_0_0_1_1_0__S_1( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( m ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ x m #i.
           (AUTO_IN_TERM_1_0_0_1_1_1__S_1( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (AUTO_OUT_TERM_1_0_0_1_1_1__S_1( m ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ x m #i.
           (AUTO_IN_TERM_2_0_0_1_1_1_1__A_2( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( m ) @ #j) ⇒ ¬(#j < #i))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( senc(<'1', zA, x, znb>, zkbs) ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !LongtermKey( zkbs, zB ) ▶₂ #i )
        case Init
        solve( !LongtermKey( zkas, zA ) ▶₃ #i )
          case Init
          solve( !KU( senc(<'1', $X, x, znb>, ~kxs) ) @ #vk )
            case A_2
            solve( (∃ #j. (!KU( xnb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( senc(<'2', $B, xkab, ~na, xnb>,
                                                             ~kxs.2)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j.1. (!KU( ~na ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                     (∃ #j.1.
                       (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( senc(<'1', zA, ~na, xnb>, zkbs)
                        ) @ #j.1)
                      ∧
                       (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                case case_1
                solve( (∃ #j.1. (!KU( xnb ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_TERM_1_0_0_1_1_1__S_1( senc(<'1', zA, ~na, xnb>, zkbs)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          next
            case B_1
            by contradiction /* from formulas */
          next
            case S_1_case_1
            solve( (∃ #j. (!KU( zna ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( senc(<'1', $X.3, zna, znb.1>, ~kxs.3)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case S_1_case_2
            solve( (∃ #j. (!KU( zna ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( senc(<'1', $X.3, zna, znb.1>, ~kxs.3)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              solve( (∃ #j. (!KU( znb.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                     (∃ #j.
                       (AUTO_OUT_TERM_1_0_0_1_1_1__S_1( senc(<'1', $X.3, zna, znb.1>, ~kxs.3)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.2)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (last(#i))  ∥
           (∃ #j. (!KU( zna ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( senc(<'1', zA, zna, x>, zkbs) ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !LongtermKey( zkbs, zB ) ▶₂ #i )
        case Init
        solve( !LongtermKey( zkas, zA ) ▶₃ #i )
          case Init
          solve( !KU( senc(<'1', $X, zna, x>, ~kxs) ) @ #vk )
            case A_2
            solve( (∃ #j. (!KU( xnb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( senc(<'2', $B, xkab, ~na, xnb>,
                                                             ~kxs.2)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j.1. (!KU( ~na ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                     (∃ #j.1.
                       (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( senc(<'1', zA, ~na, xnb>, zkbs)
                        ) @ #j.1)
                      ∧
                       (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                case case_1
                solve( (∃ #j.1. (!KU( xnb ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_TERM_1_0_0_1_1_1__S_1( senc(<'1', zA, ~na, xnb>, zkbs)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          next
            case B_1
            by contradiction /* from formulas */
          next
            case S_1_case_1
            solve( (∃ #j. (!KU( zna.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( senc(<'1', $X.3, zna.1, znb>, ~kxs.3)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case S_1_case_2
            solve( (∃ #j. (!KU( zna.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( senc(<'1', $X.3, zna.1, znb>, ~kxs.3)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              solve( (∃ #j. (!KU( znb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                     (∃ #j.
                       (AUTO_OUT_TERM_1_0_0_1_1_1__S_1( senc(<'1', $X.3, zna.1, znb>, ~kxs.3)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.2)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      solve( (last(#i))  ∥
             (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
             (∃ #j.
               (AUTO_OUT_TERM_1_0_0_1_1_1__S_1( senc(<'1', zA, zna, x>, zkbs) ) @ #j)
              ∧
               (¬(last(#j))) ∧ (#j < #i)) )
        case case_1
        solve( !LongtermKey( zkbs, zB ) ▶₂ #i )
          case Init
          solve( !LongtermKey( zkas, zA ) ▶₃ #i )
            case Init
            solve( !KU( senc(<'1', $X, zna, x>, ~kxs) ) @ #vk )
              case A_2
              solve( (∃ #j. (!KU( xnb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                     (∃ #j.
                       (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( senc(<'2', $B, xkab, ~na, xnb>,
                                                               ~kxs.2)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.2)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                solve( (∃ #j.1. (!KU( ~na ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( senc(<'1', zA, ~na, xnb>, zkbs)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  solve( (∃ #j.1. (!KU( xnb ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                         (∃ #j.1.
                           (AUTO_OUT_TERM_1_0_0_1_1_1__S_1( senc(<'1', zA, ~na, xnb>, zkbs)
                            ) @ #j.1)
                          ∧
                           (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case B_1
              by contradiction /* from formulas */
            next
              case S_1_case_1
              solve( (∃ #j. (!KU( zna.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                     (∃ #j.
                       (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( senc(<'1', $X.3, zna.1, znb>, ~kxs.3)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.2)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case S_1_case_2
              solve( (∃ #j. (!KU( zna.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                     (∃ #j.
                       (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( senc(<'1', $X.3, zna.1, znb>, ~kxs.3)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.2)) )
                case case_1
                solve( (∃ #j. (!KU( znb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                       (∃ #j.
                         (AUTO_OUT_TERM_1_0_0_1_1_1__S_1( senc(<'1', $X.3, zna.1, znb>, ~kxs.3)
                          ) @ #j)
                        ∧
                         (¬(last(#j))) ∧ (#j < #vr.2)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case c_senc
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        by contradiction /* from formulas */
      qed
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( senc(<'2', xB, xkab, na, x>, xkas)
              ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( StateA1( xA, xB, na ) ▶₀ #i )
        case A_1
        solve( !LongtermKey( xkas, $A ) ▶₁ #i )
          case Init
          solve( !KU( senc(<'2', $B, xkab, ~na, x>, ~kxs) ) @ #vk )
            case A_2
            solve( (∃ #j. (!KU( xnb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( senc(<'2', $B.1, xkab.1, ~na.1, xnb>,
                                                             ~kxs.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j.1. (!KU( xnb ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                     (∃ #j.1.
                       (AUTO_OUT_TERM_1_0_0_1_1_1__S_1( senc(<'1', zA, ~na.1, xnb>, zkbs)
                        ) @ #j.1)
                      ∧
                       (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          next
            case S_1_case_1
            by contradiction /* from formulas */
          next
            case S_1_case_2
            solve( (∃ #j. (!KU( zna ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( senc(<'1', $X.1, zna, znb>, ~kxs.2)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case S_1_case_3
            solve( (∃ #j. (!KU( zna ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_1_0_0_1_1_0__S_1( senc(<'1', $X.1, zna, znb>, ~kxs.2)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              solve( (∃ #j. (!KU( znb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                     (∃ #j.
                       (AUTO_OUT_TERM_1_0_0_1_1_1__S_1( senc(<'1', $X.1, zna, znb>, ~kxs.2)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.2)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  qed
qed

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/features/auto-sources/spore/Yahalom-Lowe.spthy

------------------------------------------------------------------------------
analyzed: examples/features/auto-sources/spore/Yahalom-Lowe.spthy

  output:          examples/features/auto-sources/spore/Yahalom-Lowe.spthy.tmp
  processing time: 2.300310386s
  executability (exists-trace): verified (14 steps)
  secrecy (all-traces): verified (22 steps)
  noninjectiveagreement_B (all-traces): verified (33 steps)
  noninjectiveagreement_A (all-traces): verified (10 steps)
  injectiveagreement_B (all-traces): verified (37 steps)
  injectiveagreement_A (all-traces): verified (14 steps)
  AUTO_typing (all-traces): verified (93 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/features/auto-sources/spore/Yahalom-Lowe.spthy

  output:          examples/features/auto-sources/spore/Yahalom-Lowe.spthy.tmp
  processing time: 2.300310386s
  executability (exists-trace): verified (14 steps)
  secrecy (all-traces): verified (22 steps)
  noninjectiveagreement_B (all-traces): verified (33 steps)
  noninjectiveagreement_A (all-traces): verified (10 steps)
  injectiveagreement_B (all-traces): verified (37 steps)
  injectiveagreement_A (all-traces): verified (14 steps)
  AUTO_typing (all-traces): verified (93 steps)

==============================================================================
*/
