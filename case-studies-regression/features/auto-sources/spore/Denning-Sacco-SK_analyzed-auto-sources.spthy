theory Denning_Sacco_SK begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Init:
   [ Fr( ~kxs ) ] --[ KeyGen( $X ) ]-> [ !LongtermKey( ~kxs, $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_Longterm_Key:
   [ !LongtermKey( ~sk, $A ) ] --[ Compromise( $A ) ]-> [ Out( ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_Shortterm_Key:
   [ !ShorttermKey( ~kab, $B, $A ) ]
  --[ Compromise( $A ), Compromise( $B ) ]->
   [ Out( ~kab ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_1:
   [ ] --> [ Out( <$A, $B> ), StateA( $A, $B ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_1:
   [
   In( <x, y> ), !LongtermKey( kas, x ), !LongtermKey( kbs, y ), Fr( ~kab ),
   Fr( ~t )
   ]
  --[
  AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( senc(<'1', y, ~kab, ~t, 
                                          senc(<'2', ~kab, x, ~t>, kbs)>,
                                         kas)
  )
  ]->
   [
   Out( senc(<'1', y, ~kab, ~t, senc(<'2', ~kab, x, ~t>, kbs)>, kas) ),
   !ShorttermKey( ~kab, x, y )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_2:
   [
   StateA( A, B ), !LongtermKey( xkas, A ),
   In( senc(<'1', B, xkab, xt, xmb>, xkas) )
   ]
  --[
  AUTO_IN_TERM_2_0_0_1_1_1_1__A_2( senc(<'1', B, xkab, xt, xmb>, xkas), xmb
  ),
  CommitA( A, B, <xkab, xt> ), RunningA( A, B, <xkab, xt> ),
  Secret( A, B, xkab )
  ]->
   [ Out( xmb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_1:
   [ !LongtermKey( ykbs, B ), In( senc(<'2', ykab, yA, yt>, ykbs) ) ]
  --[ CommitB( B, yA, <ykab, yt> ), Secret( B, yA, ykab ) ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction singlelongtermkeyperuser:
  "∀ A #i #j. ((KeyGen( A ) @ #i) ∧ (KeyGen( A ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma executability:
  exists-trace
  "∃ A B t #i #j.
    ((((CommitB( B, A, t ) @ #i) ∧ (CommitA( A, B, t ) @ #j)) ∧ (#j < #i)) ∧
     (¬(∃ #r1. Compromise( A ) @ #r1))) ∧
    (¬(∃ #r2. Compromise( B ) @ #r2))"
/*
guarded formula characterizing all satisfying traces:
"∃ A B t #i #j.
  (CommitB( B, A, t ) @ #i) ∧ (CommitA( A, B, t ) @ #j)
 ∧
  (#j < #i) ∧
  (∀ #r1. (Compromise( A ) @ #r1) ⇒ ⊥) ∧
  (∀ #r2. (Compromise( B ) @ #r2) ⇒ ⊥)"
*/
simplify
solve( !LongtermKey( ykbs, B ) ▶₀ #i )
  case Init
  solve( StateA( A, $X ) ▶₀ #j )
    case A_1
    solve( !LongtermKey( xkas, $A ) ▶₁ #j )
      case Init
      solve( !KU( senc(<'2', ykab, $A, yt>, ~kxs) ) @ #vk )
        case A_2
        solve( !KU( senc(<'1', $X, ~kab, ~t, xmb>, ~kxs.1) ) @ #vk.1 )
          case S_1
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "∀ A B k #i.
    (Secret( A, B, k ) @ #i) ⇒
    (((¬(∃ #j. K( k ) @ #j)) ∨ (∃ #j. Compromise( B ) @ #j)) ∨
     (∃ #j. Compromise( A ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ A B k #i.
  (Secret( A, B, k ) @ #i)
 ∧
  (∃ #j. (K( k ) @ #j)) ∧
  (∀ #j. (Compromise( B ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Compromise( A ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Secret( A, B, k ) @ #i )
  case A_2
  solve( StateA( A, B ) ▶₀ #i )
    case A_1
    solve( !LongtermKey( xkas, $A ) ▶₁ #i )
      case Init
      solve( !KU( senc(<'1', $B, k, xt, xmb>, ~kxs) ) @ #vk.1 )
        case S_1
        solve( !KU( ~kab ) @ #vk.1 )
          case A_2
          solve( !KU( ~kxs.1 ) @ #vk.5 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        next
          case Reveal_Shortterm_Key
          by contradiction /* from formulas */
        next
          case S_1_case_1
          solve( !KU( ~kxs ) @ #vk.5 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        next
          case S_1_case_2
          solve( !KU( ~kxs ) @ #vk.5 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~kxs ) @ #vk.4 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case B_1
  solve( !LongtermKey( ykbs, A ) ▶₀ #i )
    case Init
    solve( !KU( senc(<'2', k, B, yt>, ~kxs) ) @ #vk.1 )
      case A_2
      solve( !KU( ~kab ) @ #vk.1 )
        case A_2
        solve( !KU( ~kxs ) @ #vk.6 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      next
        case Reveal_Shortterm_Key
        by contradiction /* from formulas */
      next
        case S_1
        solve( !KU( ~kxs.1 ) @ #vk.6 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      qed
    next
      case S_1
      solve( !KU( ~kxs.1 ) @ #vk.5 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    next
      case c_senc
      solve( !KU( ~kxs ) @ #vk.4 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma noninjectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (CommitB( B, A, t ) @ #i) ⇒
    (((∃ #j. (RunningA( A, B, t ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. Compromise( A ) @ #r)) ∨
     (∃ #r. Compromise( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (CommitB( B, A, t ) @ #i)
 ∧
  (∀ #j. (RunningA( A, B, t ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (Compromise( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Compromise( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !LongtermKey( ykbs, B ) ▶₀ #i )
  case Init
  solve( !KU( senc(<'2', ykab, A, yt>, ~kxs) ) @ #vk )
    case A_2
    by contradiction /* from formulas */
  next
    case S_1
    solve( !KU( ~kxs.1 ) @ #vk.4 )
      case Reveal_Longterm_Key
      by contradiction /* from formulas */
    qed
  next
    case c_senc
    solve( !KU( ~kxs ) @ #vk.2 )
      case Reveal_Longterm_Key
      by contradiction /* from formulas */
    qed
  qed
qed

lemma injectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (CommitB( B, A, t ) @ #i) ⇒
    (((∃ #j.
        ((RunningA( A, B, t ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ B2 A2 #i2. (CommitB( B2, A2, t ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
      (∃ #r. Compromise( A ) @ #r)) ∨
     (∃ #r. Compromise( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (CommitB( B, A, t ) @ #i)
 ∧
  (∀ #j.
    (RunningA( A, B, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ B2 A2 #i2. (CommitB( B2, A2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ #r. (Compromise( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Compromise( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !LongtermKey( ykbs, B ) ▶₀ #i )
  case Init
  solve( !KU( senc(<'2', ykab, A, yt>, ~kxs) ) @ #vk )
    case A_2
    solve( (#i2 < #i)  ∥ (#i < #i2) )
      case case_1
      solve( !LongtermKey( ykbs, B2 ) ▶₀ #i2 )
        case Init
        solve( !KU( senc(<'2', ~kab, A2, ~t>, ~kxs.1) ) @ #vk.5 )
          case A_2
          solve( !KU( senc(<'1', $X, ~kab, ~t, senc(<'2', ~kab, $A, ~t>, ~kxs)>,
                           ~kxs.1)
                 ) @ #vk.1 )
            case S_1
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

lemma AUTO_typing [sources]:
  all-traces
  "(⊤) ∧
   (∀ x m #i.
     (AUTO_IN_TERM_2_0_0_1_1_1_1__A_2( m, x ) @ #i) ⇒
     ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( m ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"∃ x m #i.
  (AUTO_IN_TERM_2_0_0_1_1_1_1__A_2( m, x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( m ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
         (∃ #j.
           (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( senc(<'1', B, xkab, xt, x>, xkas)
            ) @ #j)
          ∧
           (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    solve( StateA( A, B ) ▶₀ #i )
      case A_1
      solve( !LongtermKey( xkas, $A ) ▶₁ #i )
        case Init
        solve( !KU( senc(<'1', $B, xkab, xt, x>, ~kxs) ) @ #vk )
          case A_2
          solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_2( senc(<'1', $B.1, xkab.1, xt.1, t>,
                                                           ~kxs.1)
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.2)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( (#vl, 0) ~~> (#vk, 0) )
              case d_0_sdec
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                by contradiction /* forbidden KD-fact */
              next
                case d_0_snd
                solve( (#vr.6, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  solve( (#vr.7, 0) ~~> (#vk, 0) )
                    case d_0_fst
                    by contradiction /* cyclic */
                  next
                    case d_0_snd
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          qed
        next
          case S_1
          by contradiction /* from formulas */
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  next
    case case_3
    by contradiction /* from formulas */
  qed
qed

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/features/auto-sources/spore/Denning-Sacco-SK.spthy

------------------------------------------------------------------------------
analyzed: examples/features/auto-sources/spore/Denning-Sacco-SK.spthy

  output:          examples/features/auto-sources/spore/Denning-Sacco-SK.spthy.tmp
  processing time: 0.772209487s
  executability (exists-trace): verified (7 steps)
  secrecy (all-traces): verified (27 steps)
  noninjectiveagreement_B (all-traces): verified (8 steps)
  injectiveagreement_B (all-traces): falsified - found trace (8 steps)
  AUTO_typing (all-traces): verified (21 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/features/auto-sources/spore/Denning-Sacco-SK.spthy

  output:          examples/features/auto-sources/spore/Denning-Sacco-SK.spthy.tmp
  processing time: 0.772209487s
  executability (exists-trace): verified (7 steps)
  secrecy (all-traces): verified (27 steps)
  noninjectiveagreement_B (all-traces): verified (8 steps)
  injectiveagreement_B (all-traces): falsified - found trace (8 steps)
  AUTO_typing (all-traces): verified (21 steps)

==============================================================================
*/
