theory WmFrog begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Init:
   [ Fr( ~kxs ) ] --[ KeyGen( $X ) ]-> [ !Ltk( ~kxs, $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_Longterm_Key:
   [ !Ltk( ~sk, $A ) ] --[ Reveal( $A ) ]-> [ Out( ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_to_S:
   [ !Ltk( ~kas, $A ), Fr( ~ta ), Fr( ~kab ) ]
  --[
  AUTO_OUT_TERM_0_0_1_0_1_1_1__S_to_B( senc(<'1', ~ta, $B, ~kab>, ~kas) ),
  Secret( $A, $B, ~kab ), Running_A( $A, $B, <'A', 'B', ~kab> )
  ]->
   [ Out( <$A, senc(<'1', ~ta, $B, ~kab>, ~kas)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_to_B:
   [
   In( <a, senc(<'1', ta, b, kab>, ~kas)> ), !Ltk( ~kas, a ),
   !Ltk( ~kbs, b ), Fr( ~ts )
   ]
  --[
  AUTO_IN_TERM_0_0_1_0_1_1_1__S_to_B( senc(<'1', ta, b, kab>, ~kas), kab ),
  Secret( a, b, kab ), Running_S( a, b, <'A', 'B', kab> ),
  Commit_S( a, b, <'A', 'B', kab> )
  ]->
   [ Out( senc(<'2', ~ts, a, kab>, ~kbs) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_from_S:
   [ In( senc(<'2', ts, a, kab>, ~kbs) ), !Ltk( ~kbs, $B ) ]
  --[ Secret( a, $B, kab ), Commit_B( a, $B, <'A', 'B', kab> ) ]->
   [ ]

  /* has exactly the trivial AC variant */

lemma executability:
  exists-trace
  "∃ A B t #i #j #k.
    (((((((Commit_B( A, B, t ) @ #i) ∧ (Commit_S( A, B, t ) @ #j)) ∧
         (#j < #i)) ∧
        (Running_S( A, B, t ) @ #j)) ∧
       (Running_A( A, B, t ) @ #k)) ∧
      (#k < #j)) ∧
     (¬(∃ #r1. Reveal( A ) @ #r1))) ∧
    (¬(∃ #r2. Reveal( B ) @ #r2))"
/*
guarded formula characterizing all satisfying traces:
"∃ A B t #i #j #k.
  (Commit_B( A, B, t ) @ #i) ∧
  (Commit_S( A, B, t ) @ #j) ∧
  (Running_S( A, B, t ) @ #j) ∧
  (Running_A( A, B, t ) @ #k)
 ∧
  (#j < #i) ∧
  (#k < #j) ∧
  (∀ #r1. (Reveal( A ) @ #r1) ⇒ ⊥) ∧
  (∀ #r2. (Reveal( B ) @ #r2) ⇒ ⊥)"
*/
simplify
solve( !Ltk( ~kbs, $B ) ▶₁ #i )
  case Init
  solve( !Ltk( ~kas, $A ) ▶₁ #j )
    case Init
    solve( !Ltk( ~kbs.1, $B ) ▶₂ #j )
      case Init
      solve( !Ltk( ~kas.1, $A ) ▶₀ #k )
        case Init
        solve( !KU( senc(<'2', ts, $A, ~kab>, ~kbs) ) @ #vk )
          case S_to_B
          solve( !KU( senc(<'1', ta, $B, ~kab>, ~kas) ) @ #vk.4 )
            case A_to_S
            solve( !KU( senc(<'1', ta.1, $B, ~kab>, ~kas.1) ) @ #vk.5 )
              case A_to_S
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma Secrecy:
  all-traces
  "¬(∃ A B m #i.
      (((Secret( A, B, m ) @ #i) ∧ (∃ #r. K( m ) @ #r)) ∧
       (¬(∃ #r. Reveal( B ) @ #r))) ∧
      (¬(∃ #r. Reveal( A ) @ #r)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B m #i.
  (Secret( A, B, m ) @ #i)
 ∧
  (∃ #r. (K( m ) @ #r)) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Secret( A, B, m ) @ #i )
  case A_to_S
  solve( !Ltk( ~kas, $A ) ▶₀ #i )
    case Init
    solve( !KU( ~kab ) @ #vk )
      case A_to_S
      solve( !KU( ~kas ) @ #vk.1 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    next
      case S_to_B
      solve( !KU( ~kbs ) @ #vk.4 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case B_from_S
  solve( !Ltk( ~kbs, $B ) ▶₁ #i )
    case Init
    solve( !KU( senc(<'2', ts, A, m>, ~kbs) ) @ #vk.1 )
      case S_to_B
      solve( !KU( senc(<'1', ta, $B, m>, ~kas) ) @ #vk.4 )
        case A_to_S
        solve( !KU( ~kab ) @ #vk.2 )
          case A_to_S
          solve( !KU( ~kas ) @ #vk.5 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        next
          case S_to_B
          solve( !KU( ~kbs.1 ) @ #vk.5 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~kas ) @ #vk.7 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_senc
      solve( !KU( ~kbs ) @ #vk.4 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case S_to_B
  solve( !Ltk( ~kas, A ) ▶₁ #i )
    case Init
    solve( !Ltk( ~kbs, B ) ▶₂ #i )
      case Init
      solve( !KU( senc(<'1', ta, $X.1, m>, ~kas) ) @ #vk.3 )
        case A_to_S
        solve( !KU( ~kab ) @ #vk.1 )
          case A_to_S
          solve( !KU( ~kas ) @ #vk.4 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        next
          case S_to_B
          solve( !KU( ~kbs.1 ) @ #vk.4 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~kas ) @ #vk.6 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma injectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    (((∃ #j.
        ((Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
      (∃ #r. Reveal( A ) @ #r)) ∨
     (∃ #r. Reveal( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  (∀ #j.
    (Running_A( A, B, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !Ltk( ~kbs, $B ) ▶₁ #i )
  case Init
  solve( !KU( senc(<'2', ts, A, kab>, ~kbs) ) @ #vk )
    case S_to_B
    solve( !KU( senc(<'1', ta, $B, kab>, ~kas) ) @ #vk.3 )
      case A_to_S
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( !Ltk( ~kbs.1, $B.1 ) ▶₁ #i2 )
          case Init
          solve( !KU( senc(<'2', ts.1, A2, ~kab>, ~kbs.1) ) @ #vk.4 )
            case S_to_B
            solve( !KU( senc(<'1', ta.1, $B.1, ~kab>, ~kas.1) ) @ #vk.7 )
              case A_to_S
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma agreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    (((∃ #j. (Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. Reveal( A ) @ #r)) ∨
     (∃ #r. Reveal( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  (∀ #j. (Running_A( A, B, t ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !Ltk( ~kbs, $B ) ▶₁ #i )
  case Init
  solve( !KU( senc(<'2', ts, A, kab>, ~kbs) ) @ #vk )
    case S_to_B
    solve( !KU( senc(<'1', ta, $B, kab>, ~kas) ) @ #vk.3 )
      case A_to_S
      by contradiction /* from formulas */
    next
      case c_senc
      solve( !KU( ~kas ) @ #vk.5 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  next
    case c_senc
    solve( !KU( ~kbs ) @ #vk.2 )
      case Reveal_Longterm_Key
      by contradiction /* from formulas */
    qed
  qed
qed

lemma injectiveagreement_S:
  all-traces
  "∀ A B t #i.
    (Commit_S( A, B, t ) @ #i) ⇒
    (((∃ #j.
        ((Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ A2 B2 #i2. (Commit_S( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
      (∃ #r. Reveal( A ) @ #r)) ∨
     (∃ #r. Reveal( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_S( A, B, t ) @ #i)
 ∧
  (∀ #j.
    (Running_A( A, B, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ A2 B2 #i2. (Commit_S( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !Ltk( ~kas, A ) ▶₁ #i )
  case Init
  solve( !Ltk( ~kbs, B ) ▶₂ #i )
    case Init
    solve( !KU( senc(<'1', ta, $X.1, kab>, ~kas) ) @ #vk.2 )
      case A_to_S
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( !Ltk( ~kas.1, A2 ) ▶₁ #i2 )
          case Init
          solve( !Ltk( ~kbs.1, B2 ) ▶₂ #i2 )
            case Init
            solve( !KU( senc(<'1', ta.1, $X.3, ~kab>, ~kas.1) ) @ #vk.5 )
              case A_to_S
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma agreement_S:
  all-traces
  "∀ A B t #i.
    (Commit_S( A, B, t ) @ #i) ⇒
    (((∃ #j. (Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. Reveal( A ) @ #r)) ∨
     (∃ #r. Reveal( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_S( A, B, t ) @ #i)
 ∧
  (∀ #j. (Running_A( A, B, t ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !Ltk( ~kas, A ) ▶₁ #i )
  case Init
  solve( !Ltk( ~kbs, B ) ▶₂ #i )
    case Init
    solve( !KU( senc(<'1', ta, $X.1, kab>, ~kas) ) @ #vk.2 )
      case A_to_S
      by contradiction /* from formulas */
    next
      case c_senc
      solve( !KU( ~kas ) @ #vk.4 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

lemma AUTO_typing [sources]:
  all-traces
  "(⊤) ∧
   (∀ x m #i.
     (AUTO_IN_TERM_0_0_1_0_1_1_1__S_to_B( m, x ) @ #i) ⇒
     ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (AUTO_OUT_TERM_0_0_1_0_1_1_1__S_to_B( m ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"∃ x m #i.
  (AUTO_IN_TERM_0_0_1_0_1_1_1__S_to_B( m, x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (AUTO_OUT_TERM_0_0_1_0_1_1_1__S_to_B( m ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
         (∃ #j.
           (AUTO_OUT_TERM_0_0_1_0_1_1_1__S_to_B( senc(<'1', ta, b, x>, ~kas) ) @ #j)
          ∧
           (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    solve( !Ltk( ~kas, a ) ▶₁ #i )
      case Init
      solve( !Ltk( ~kbs, b ) ▶₂ #i )
        case Init
        solve( !KU( senc(<'1', ta, $X.1, x>, ~kas) ) @ #vk.2 )
          case A_to_S
          by contradiction /* from formulas */
        next
          case S_to_B
          solve( (∃ #j. (!KU( kab ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_0_0_1_0_1_1_1__S_to_B( senc(<'1', ta.1, $X.3, kab>,
                                                              ~kas.1)
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.2)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  next
    case case_3
    by contradiction /* from formulas */
  qed
qed

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/features/auto-sources/spore/Wide_Mouthed_Frog.spthy

------------------------------------------------------------------------------
analyzed: examples/features/auto-sources/spore/Wide_Mouthed_Frog.spthy

  output:          examples/features/auto-sources/spore/Wide_Mouthed_Frog.spthy.tmp
  processing time: 0.575962947s
  executability (exists-trace): verified (9 steps)
  Secrecy (all-traces): verified (30 steps)
  injectiveagreement_B (all-traces): falsified - found trace (9 steps)
  agreement_B (all-traces): verified (9 steps)
  injectiveagreement_S (all-traces): falsified - found trace (9 steps)
  agreement_S (all-traces): verified (7 steps)
  AUTO_typing (all-traces): verified (14 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/features/auto-sources/spore/Wide_Mouthed_Frog.spthy

  output:          examples/features/auto-sources/spore/Wide_Mouthed_Frog.spthy.tmp
  processing time: 0.575962947s
  executability (exists-trace): verified (9 steps)
  Secrecy (all-traces): verified (30 steps)
  injectiveagreement_B (all-traces): falsified - found trace (9 steps)
  agreement_B (all-traces): verified (9 steps)
  injectiveagreement_S (all-traces): falsified - found trace (9 steps)
  agreement_S (all-traces): verified (7 steps)
  AUTO_typing (all-traces): verified (14 steps)

==============================================================================
*/
