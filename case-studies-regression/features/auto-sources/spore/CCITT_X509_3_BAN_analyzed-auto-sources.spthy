theory CcittX509_3_BAN begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, fst/1, h/1, pair/2, pk/1, sign/2, snd/1,
           true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



rule (modulo E) Register_pk:
   [ Fr( ~ltk ) ]
  --[ Register( $X, ~ltk ) ]->
   [ !Ltk( $X, ~ltk ), !Pk( $X, pk(~ltk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Get_pk:
   [ !Pk( $X, pubkey ) ] --> [ Out( pubkey ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !Ltk( $U, ~ltk ) ] --[ Reveal( $U ) ]-> [ Out( ~ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_send_1:
   [
   !Pk( $B, pk(~ltkB) ), !Ltk( $A, ~ltkA ), Fr( ~na ), Fr( ~xa ), Fr( ~Ya )
   ]
  --[ Running_A( $A, $B, <'A', 'B', ~xa, ~Ya> ), Secret( $A, $B, ~Ya ) ]->
   [
   Out( <$A, ~na, $B, ~xa, aenc(~Ya, pk(~ltkB)), 
         h(<~na, $B, ~xa, aenc(~Ya, pk(~ltkB))>), 
         sign(h(<~na, $B, ~xa, aenc(~Ya, pk(~ltkB))>), ~ltkA)>
   ),
   StateA( $A, $B, ~na, ~xa, ~Ya, ~ltkA, ~ltkB )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_receive_1:
   [
   In( <x, na, $B, xa, aenc(Ya, pk(~ltkB)), 
        h(<na, $B, xa, aenc(Ya, pk(~ltkB))>), 
        sign(h(<na, $B, xa, aenc(Ya, pk(~ltkB))>), ~ltkA)>
   ),
   !Pk( x, pk(~ltkA) ), !Ltk( $B, ~ltkB ), Fr( ~nb ), Fr( ~xb ), Fr( ~Yb )
   ]
  --[
  Commit_B( x, $B, <'A', 'B', xa, Ya> ), Secret( x, $B, Ya ),
  Running_B( x, $B, <'A', 'B', ~xb, ~Yb> )
  ]->
   [
   Out( <$B, ~nb, x, na, ~xb, aenc(~Yb, pk(~ltkA)), 
         h(<$B, ~nb, x, na, ~xb, aenc(~Yb, pk(~ltkA))>), 
         sign(h(<$B, ~nb, x, na, ~xb, aenc(~Yb, pk(~ltkA))>), ~ltkB)>
   ),
   StateB( x, $B, na, xa, Ya, ~ltkA, ~ltkB, ~nb, ~xb, ~Yb )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_send_2:
   [
   !Pk( $B, pk(~ltkB) ), !Ltk( $A, ~ltkA ),
   StateA( $A, $B, ~na, ~xa, ~Ya, ~ltkA, ~ltkB ),
   In( <$B, nb, $A, ~na, xb, aenc(Yb, pk(~ltkA)), 
        h(<$B, nb, $A, ~na, xb, aenc(Yb, pk(~ltkA))>), 
        sign(h(<$B, nb, $A, ~na, xb, aenc(Yb, pk(~ltkA))>), ~ltkB)>
   )
   ]
  --[ Commit_A( $A, $B, <'A', 'B', xb, Yb> ), Secret( $A, $B, Yb ) ]->
   [ Out( <$A, $B, nb, sign(<$B, nb>, ~ltkA)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_receive_2:
   [
   In( <x, $B, ~nb, sign(<$B, ~nb>, ~ltkA)> ), !Pk( x, pk(~ltkA) ),
   !Ltk( $B, ~ltkB ),
   StateB( x, $B, na, xa, Ya, ~ltkA, ~ltkB, ~nb, ~xb, ~Yb )
   ]
  --[ End( x, $B ) ]->
   [ ]

  /* has exactly the trivial AC variant */

lemma Secrecy:
  all-traces
  "¬(∃ A B m #i.
      (((Secret( A, B, m ) @ #i) ∧ (∃ #r. K( m ) @ #r)) ∧
       (¬(∃ #r. Reveal( B ) @ #r))) ∧
      (¬(∃ #r. Reveal( A ) @ #r)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B m #i.
  (Secret( A, B, m ) @ #i)
 ∧
  (∃ #r. (K( m ) @ #r)) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Secret( A, B, m ) @ #i )
  case A_send_1
  solve( !Pk( $B, pk(~ltkB) ) ▶₀ #i )
    case Register_pk
    solve( !Ltk( $A, ~ltkA ) ▶₁ #i )
      case Register_pk
      solve( !KU( ~Ya ) @ #vk )
        case A_send_1
        solve( !KU( ~ltkB ) @ #vk.1 )
          case Reveal_ltk
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case A_send_2
  solve( !Pk( $B, pk(~ltkB) ) ▶₀ #i )
    case Register_pk
    solve( !Ltk( $A, ~ltkA ) ▶₁ #i )
      case Register_pk
      solve( StateA( $A, $B, ~na, ~xa, ~Ya, ~ltkA, ~ltkB ) ▶₂ #i )
        case A_send_1
        solve( !KU( sign(h(<$B, nb, $A, ~na, xb, aenc(m, pk(~ltkA))>), ~ltkB)
               ) @ #vk.15 )
          case B_receive_1
          solve( !KU( ~Yb ) @ #vk.1 )
            case B_receive_1
            solve( !KU( ~ltkA ) @ #vk.26 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~ltkB ) @ #vk.16 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
next
  case B_receive_1
  solve( !Pk( A, pk(~ltkA) ) ▶₁ #i )
    case Register_pk
    solve( !Ltk( $B, ~ltkB ) ▶₂ #i )
      case Register_pk
      solve( !KU( sign(h(<na, $B, xa, aenc(m, pk(~ltkB))>), ~ltkA) ) @ #vk.13 )
        case A_send_1
        solve( !KU( ~Ya ) @ #vk.1 )
          case A_send_1
          solve( !KU( ~ltkB ) @ #vk.14 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~ltkA ) @ #vk.14 )
          case Reveal_ltk
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma injectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    (((∃ #j.
        ((Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
      (∃ #r. Reveal( A ) @ #r)) ∨
     (∃ #r. Reveal( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  (∀ #j.
    (Running_A( A, B, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !Pk( A, pk(~ltkA) ) ▶₁ #i )
  case Register_pk
  solve( !Ltk( $B, ~ltkB ) ▶₂ #i )
    case Register_pk
    solve( !KU( sign(h(<na, $B, xa, aenc(Ya, pk(~ltkB))>), ~ltkA)
           ) @ #vk.12 )
      case A_send_1
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( !Pk( A2, pk(~ltkA.1) ) ▶₁ #i2 )
          case Register_pk
          solve( !Ltk( $B.1, ~ltkB.1 ) ▶₂ #i2 )
            case Register_pk
            solve( !KU( sign(h(<na.1, $B.1, ~xa, aenc(~Ya, pk(~ltkB.1))>), ~ltkA.1)
                   ) @ #vk.24 )
              case A_send_1
              solve( !KU( ~na ) @ #vk.8 )
                case A_send_1
                solve( !KU( ~xa ) @ #vk.10 )
                  case A_send_1
                  solve( !KU( aenc(~Ya, pk(~ltkB)) ) @ #vk.11 )
                    case A_send_1
                    solve( !KU( h(<~na, $B, ~xa, aenc(~Ya, pk(~ltkB))>) ) @ #vk.12 )
                      case A_send_1
                      SOLVED // trace found
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma agreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    (((∃ #j. (Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. Reveal( A ) @ #r)) ∨
     (∃ #r. Reveal( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  (∀ #j. (Running_A( A, B, t ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !Pk( A, pk(~ltkA) ) ▶₁ #i )
  case Register_pk
  solve( !Ltk( $B, ~ltkB ) ▶₂ #i )
    case Register_pk
    solve( !KU( sign(h(<na, $B, xa, aenc(Ya, pk(~ltkB))>), ~ltkA)
           ) @ #vk.12 )
      case A_send_1
      by contradiction /* from formulas */
    next
      case c_sign
      solve( !KU( ~ltkA ) @ #vk.13 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injectiveagreement_A:
  all-traces
  "∀ A B t #i.
    (Commit_A( A, B, t ) @ #i) ⇒
    (((∃ #j.
        ((Running_B( A, B, t ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ A2 B2 #i2. (Commit_A( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
      (∃ #r. Reveal( A ) @ #r)) ∨
     (∃ #r. Reveal( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_A( A, B, t ) @ #i)
 ∧
  (∀ #j.
    (Running_B( A, B, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ A2 B2 #i2. (Commit_A( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !Pk( $B, pk(~ltkB) ) ▶₀ #i )
  case Register_pk
  solve( !Ltk( $A, ~ltkA ) ▶₁ #i )
    case Register_pk
    solve( StateA( $A, $B, ~na, ~xa, ~Ya, ~ltkA, ~ltkB ) ▶₂ #i )
      case A_send_1
      solve( !KU( sign(h(<$B, nb, $A, ~na, xb, aenc(Yb, pk(~ltkA))>), ~ltkB)
             ) @ #vk.14 )
        case B_receive_1
        solve( (#i2 < #i)  ∥ (#i < #i2) )
          case case_1
          solve( !Pk( $B.1, pk(~ltkB.1) ) ▶₀ #i2 )
            case Register_pk
            solve( !Ltk( $A.1, ~ltkA.1 ) ▶₁ #i2 )
              case Register_pk
              solve( StateA( $A.1, $B.1, ~na.1, ~xa.1, ~Ya.1, ~ltkA.1, ~ltkB.1
                     ) ▶₂ #i2 )
                case A_send_1
                solve( !KU( sign(h(<~na, $B, xa.2, aenc(Ya.2, pk(~ltkB))>), ~ltkA)
                       ) @ #vk.29 )
                  case A_send_1
                  solve( !KU( sign(h(<$B.1, nb.1, $A.1, ~na.1, ~xb, aenc(~Yb, pk(~ltkA.1))
                                     >),
                                   ~ltkB.1)
                         ) @ #vk.38 )
                    case c_sign
                    solve( !KU( ~ltkB.1 ) @ #vk.39 )
                      case Reveal_ltk
                      solve( !KU( aenc(~Yb, pk(~ltkA.1)) ) @ #vk.38 )
                        case B_receive_1
                        solve( !KU( h(<$B.1, nb.1, $A, ~na.1, ~xb, aenc(~Yb, pk(~ltkA))>)
                               ) @ #vk.37 )
                          case c_h
                          solve( !KU( ~na ) @ #vk.29 )
                            case A_send_1
                            solve( !KU( ~nb ) @ #vk.27 )
                              case B_receive_1
                              solve( !KU( ~xb ) @ #vk.35 )
                                case B_receive_1
                                solve( !KU( ~na.1 ) @ #vk.42 )
                                  case A_send_1
                                  solve( !KU( ~xa ) @ #vk.38 )
                                    case A_send_1
                                    solve( !KU( h(<$B, ~nb, $A, ~na, ~xb, aenc(~Yb, pk(~ltkA))>) ) @ #vk.38 )
                                      case B_receive_1
                                      solve( !KU( aenc(~Ya, pk(~ltkB)) ) @ #vk.39 )
                                        case A_send_1
                                        solve( !KU( h(<~na, $B, ~xa, aenc(~Ya, pk(~ltkB))>) ) @ #vk.40 )
                                          case A_send_1
                                          SOLVED // trace found
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma agreement_A:
  all-traces
  "∀ A B t #i.
    (Commit_A( A, B, t ) @ #i) ⇒
    (((∃ #j. (Running_B( A, B, t ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. Reveal( A ) @ #r)) ∨
     (∃ #r. Reveal( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_A( A, B, t ) @ #i)
 ∧
  (∀ #j. (Running_B( A, B, t ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !Pk( $B, pk(~ltkB) ) ▶₀ #i )
  case Register_pk
  solve( !Ltk( $A, ~ltkA ) ▶₁ #i )
    case Register_pk
    solve( StateA( $A, $B, ~na, ~xa, ~Ya, ~ltkA, ~ltkB ) ▶₂ #i )
      case A_send_1
      solve( !KU( sign(h(<$B, nb, $A, ~na, xb, aenc(Yb, pk(~ltkA))>), ~ltkB)
             ) @ #vk.14 )
        case B_receive_1
        by contradiction /* from formulas */
      next
        case c_sign
        solve( !KU( ~ltkB ) @ #vk.15 )
          case Reveal_ltk
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma Session_key_honest_setup:
  exists-trace
  "((((∀ A A2 B B2 t t2 #i #j.
        ((Running_A( A, B, t ) @ #i) ∧ (Running_A( A2, B2, t2 ) @ #j)) ⇒
        (#i = #j)) ∧
      (∀ A A2 B B2 t t2 #i #j.
        ((Running_B( A, B, t ) @ #i) ∧ (Running_B( A2, B2, t2 ) @ #j)) ⇒
        (#i = #j))) ∧
     (∀ A A2 B B2 t t2 #i #j.
       ((Commit_A( A, B, t ) @ #i) ∧ (Commit_A( A2, B2, t2 ) @ #j)) ⇒
       (#i = #j))) ∧
    (∀ A A2 B B2 t t2 #i #j.
      ((Commit_B( A, B, t ) @ #i) ∧ (Commit_B( A2, B2, t2 ) @ #j)) ⇒
      (#i = #j))) ∧
   (∃ A B t t2 #i #j #l #m.
     ((((((Running_A( A, B, t ) @ #i) ∧ (Commit_B( A, B, t ) @ #j)) ∧
         (Running_B( A, B, t2 ) @ #j)) ∧
        (Commit_A( A, B, t2 ) @ #l)) ∧
       (End( A, B ) @ #m)) ∧
      (¬(∃ #r. Reveal( B ) @ #r))) ∧
     (¬(∃ #s. Reveal( A ) @ #s)))"
/*
guarded formula characterizing all satisfying traces:
"(∀ A A2 B B2 t t2 #i #j.
   (Running_A( A, B, t ) @ #i) ∧ (Running_A( A2, B2, t2 ) @ #j) ⇒ #i = #j) ∧
 (∀ A A2 B B2 t t2 #i #j.
   (Running_B( A, B, t ) @ #i) ∧ (Running_B( A2, B2, t2 ) @ #j) ⇒ #i = #j) ∧
 (∀ A A2 B B2 t t2 #i #j.
   (Commit_A( A, B, t ) @ #i) ∧ (Commit_A( A2, B2, t2 ) @ #j) ⇒ #i = #j) ∧
 (∀ A A2 B B2 t t2 #i #j.
   (Commit_B( A, B, t ) @ #i) ∧ (Commit_B( A2, B2, t2 ) @ #j) ⇒ #i = #j) ∧
 (∃ A B t t2 #i #j #l #m.
   (Running_A( A, B, t ) @ #i) ∧
   (Commit_B( A, B, t ) @ #j) ∧
   (Running_B( A, B, t2 ) @ #j) ∧
   (Commit_A( A, B, t2 ) @ #l) ∧
   (End( A, B ) @ #m)
  ∧
   (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥) ∧ (∀ #s. (Reveal( A ) @ #s) ⇒ ⊥))"
*/
simplify
solve( !Pk( $B, pk(~ltkB) ) ▶₀ #i )
  case Register_pk
  solve( !Ltk( $A, ~ltkA ) ▶₁ #i )
    case Register_pk
    solve( !Pk( $A, pk(~ltkA.1) ) ▶₁ #j )
      case Register_pk
      solve( !Ltk( $B, ~ltkB.1 ) ▶₂ #j )
        case Register_pk
        solve( !Pk( $B, pk(~ltkB.2) ) ▶₀ #l )
          case Register_pk
          solve( !Ltk( $A, ~ltkA.2 ) ▶₁ #l )
            case Register_pk
            solve( StateA( $A, $B, ~na.2, ~xa.1, ~Ya.1, ~ltkA.2, ~ltkB.2 ) ▶₂ #l )
              case A_send_1
              solve( !Pk( $A, pk(~ltkA.2) ) ▶₁ #m )
                case Register_pk
                solve( !Ltk( $B, ~ltkB.2 ) ▶₂ #m )
                  case Register_pk
                  solve( StateB( $A, $B, na.2, xa.1, Ya.1, ~ltkA.2, ~ltkB.2, ~nb.2, ~xb.1,
                                 ~Yb.1
                         ) ▶₃ #m )
                    case B_receive_1
                    solve( !KU( sign(h(<na.1, $B, ~xa, aenc(~Ya, pk(~ltkB.1))>), ~ltkA.1)
                           ) @ #vk.17 )
                      case A_send_1
                      solve( !KU( sign(h(<$B, nb.1, $A, ~na, ~xb, aenc(~Yb, pk(~ltkA))>),
                                       ~ltkB)
                             ) @ #vk.26 )
                        case B_receive_1
                        solve( !KU( ~na ) @ #vk.13 )
                          case A_send_1
                          solve( !KU( ~nb ) @ #vk.23 )
                            case B_receive_1
                            solve( !KU( ~xa ) @ #vk.21 )
                              case A_send_1
                              solve( !KU( ~xb ) @ #vk.25 )
                                case B_receive_1
                                solve( !KU( sign(<$B, ~nb>, ~ltkA) ) @ #vk.28 )
                                  case A_send_2
                                  solve( !KU( aenc(~Ya, pk(~ltkB)) ) @ #vk.25 )
                                    case A_send_1
                                    solve( !KU( h(<~na, $B, ~xa, aenc(~Ya, pk(~ltkB))>) ) @ #vk.26 )
                                      case A_send_1
                                      solve( !KU( aenc(~Yb, pk(~ltkA)) ) @ #vk.27 )
                                        case B_receive_1
                                        solve( !KU( h(<$B, ~nb, $A, ~na, ~xb, aenc(~Yb, pk(~ltkA))>)
                                               ) @ #vk.28 )
                                          case B_receive_1
                                          SOLVED // trace found
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/features/auto-sources/spore/CCITT_X509_3_BAN.spthy

------------------------------------------------------------------------------
analyzed: examples/features/auto-sources/spore/CCITT_X509_3_BAN.spthy

  output:          examples/features/auto-sources/spore/CCITT_X509_3_BAN.spthy.tmp
  processing time: 4.433134401s
  Secrecy (all-traces): verified (24 steps)
  injectiveagreement_B (all-traces): falsified - found trace (13 steps)
  agreement_B (all-traces): verified (7 steps)
  injectiveagreement_A (all-traces): falsified - found trace (23 steps)
  agreement_A (all-traces): verified (8 steps)
  Session_key_honest_setup (exists-trace): verified (23 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/features/auto-sources/spore/CCITT_X509_3_BAN.spthy

  output:          examples/features/auto-sources/spore/CCITT_X509_3_BAN.spthy.tmp
  processing time: 4.433134401s
  Secrecy (all-traces): verified (24 steps)
  injectiveagreement_B (all-traces): falsified - found trace (13 steps)
  agreement_B (all-traces): verified (7 steps)
  injectiveagreement_A (all-traces): falsified - found trace (23 steps)
  agreement_A (all-traces): verified (8 steps)
  Session_key_honest_setup (exists-trace): verified (23 steps)

==============================================================================
*/
