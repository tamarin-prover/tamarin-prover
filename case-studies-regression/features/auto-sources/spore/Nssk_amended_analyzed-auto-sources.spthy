theory Nssk_amended begin

// Function signature and definition of the equational theory E

functions: dec/1, fst/1, inc/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    inc(dec(x)) = x,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Init:
   [ Fr( ~kxs ) ] --[ KeyGen( $X ) ]-> [ !LongtermKey( ~kxs, $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_Longterm_Key:
   [ !LongtermKey( ~sk, $A ) ] --[ Reveal( $A ) ]-> [ Out( ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_to_B1:
   [ !LongtermKey( ~kas, $A ) ]
  -->
   [ Out( <'1', $A> ), StateA1( $A, $B, ~kas ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_to_A1:
   [ In( <'1', x> ), !LongtermKey( ~kbs, $B ), Fr( ~nb ) ]
  --[ AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', x, ~nb>, ~kbs) )
  ]->
   [ Out( senc(<'2', x, ~nb>, ~kbs) ), StateB1( x, $B, ~kbs, ~nb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_to_S:
   [ StateA1( $A, $B, ~kas ), !LongtermKey( ~kas, $A ), Fr( ~na ), In( mb )
   ]
  -->
   [ Out( <'3', $A, $B, ~na, mb> ), StateA2( $A, $B, ~kas, ~na, mb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_to_A:
   [
   !LongtermKey( ~kbs, b ), !LongtermKey( ~kas, a ),
   In( <'3', a, b, na, senc(<'2', a, nb>, ~kbs)> ), Fr( ~kab )
   ]
  --[
  AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( senc(<'4', na, b, ~kab, 
                                              senc(<'5', ~kab, nb, a>, ~kbs)>,
                                             ~kas)
  ),
  AUTO_IN_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', a, nb>, ~kbs), nb ),
  Secret( a, b, ~kab )
  ]->
   [ Out( senc(<'4', na, b, ~kab, senc(<'5', ~kab, nb, a>, ~kbs)>, ~kas) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_to_B2:
   [
   StateA2( $A, $B, ~kas, ~na, mb ), !LongtermKey( ~kas, $A ),
   In( senc(<'4', ~na, $B, kab, mb2>, ~kas) )
   ]
  --[
  AUTO_IN_TERM_2_0_0_1_1_1_1__A_to_B2( senc(<'4', ~na, $B, kab, mb2>,
                                            ~kas),
                                       mb2
  )
  ]->
   [ Out( mb2 ), StateA3( $A, $B, ~kas, ~na, mb, kab, mb2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_to_A2:
   [
   StateB1( x, $B, ~kbs, ~nb ), !LongtermKey( ~kbs, $B ),
   In( senc(<'5', kab, ~nb, x>, ~kbs) )
   ]
  --[
  AUTO_OUT_TERM_2_0_0_1__A_to_B3( senc(<'6', ~nb>, kab) ),
  Running_B( x, $B, <'A', 'B', ~nb, kab> )
  ]->
   [ Out( senc(<'6', ~nb>, kab) ), StateB2( x, $B, ~kbs, ~nb, kab ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_to_B3:
   [
   StateA3( $A, $B, ~kas, ~na, mb, kab, mb2 ), !LongtermKey( ~kas, $A ),
   In( senc(<'6', nb>, kab) )
   ]
  --[
  AUTO_IN_TERM_2_0_0_1__A_to_B3( senc(<'6', nb>, kab), nb ),
  Commit_A( $A, $B, <'A', 'B', nb, kab> ),
  Running_A( $A, $B, <'A', 'B', dec(nb), kab> )
  ]->
   [ Out( senc(<'7', dec(nb)>, kab) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_from_A:
   [
   StateB2( x, $B, ~kbs, ~nb, kab ), !LongtermKey( ~kbs, $B ),
   In( senc(<'7', dec(~nb)>, kab) )
   ]
  --[ Commit_B( x, $B, <'A', 'B', dec(~nb), kab> ) ]->
   [ ]

  /* has exactly the trivial AC variant */

lemma executability:
  exists-trace
  "∃ A B nb kab #i #j #k.
    (((((((Commit_B( A, B, <'A', 'B', dec(nb), kab> ) @ #i) ∧
          (Commit_A( A, B, <'A', 'B', nb, kab> ) @ #j)) ∧
         (#j < #i)) ∧
        (Running_A( A, B, <'A', 'B', dec(nb), kab> ) @ #j)) ∧
       (Running_B( A, B, <'A', 'B', nb, kab> ) @ #k)) ∧
      (#k < #j)) ∧
     (¬(∃ #r1. Reveal( A ) @ #r1))) ∧
    (¬(∃ #r2. Reveal( B ) @ #r2))"
/*
guarded formula characterizing all satisfying traces:
"∃ A B nb kab #i #j #k.
  (Commit_B( A, B, <'A', 'B', dec(nb), kab> ) @ #i) ∧
  (Commit_A( A, B, <'A', 'B', nb, kab> ) @ #j) ∧
  (Running_A( A, B, <'A', 'B', dec(nb), kab> ) @ #j) ∧
  (Running_B( A, B, <'A', 'B', nb, kab> ) @ #k)
 ∧
  (#j < #i) ∧
  (#k < #j) ∧
  (∀ #r1. (Reveal( A ) @ #r1) ⇒ ⊥) ∧
  (∀ #r2. (Reveal( B ) @ #r2) ⇒ ⊥)"
*/
simplify
solve( StateB2( $A, $B, ~kbs, ~nb, kab ) ▶₀ #i )
  case B_to_A2
  solve( !LongtermKey( ~kbs, $B ) ▶₁ #i )
    case Init
    solve( StateA3( $A, $B, ~kas, ~na, mb, kab, mb2 ) ▶₀ #j )
      case A_to_B2
      solve( !LongtermKey( ~kas, $A ) ▶₁ #j )
        case Init
        solve( StateB1( $A, $B, ~kbs.1, ~nb ) ▶₀ #k )
          case B_to_A1
          solve( !KU( senc(<'5', kab, ~nb, $A>, ~kbs) ) @ #vk.2 )
            case A_to_B2
            solve( !KU( senc(<'4', ~na, $B, ~kab, mb2>, ~kas) ) @ #vk.7 )
              case S_to_A
              solve( !KU( ~na ) @ #vk.14 )
                case A_to_S
                solve( !KU( senc(<'7', dec(~nb)>, ~kab) ) @ #vk.3 )
                  case A_to_B3
                  solve( !KU( senc(<'4', ~na.1, $B.1, ~kab, mb2>, ~kas.1) ) @ #vk.16 )
                    case S_to_A
                    solve( !KU( senc(<'6', ~nb>, ~kab) ) @ #vk.6 )
                      case B_to_A2
                      solve( !KU( senc(<'2', $A, ~nb>, ~kbs) ) @ #vk.15 )
                        case B_to_A1
                        SOLVED // trace found
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma Secrecy:
  all-traces
  "¬(∃ A B m #i.
      (((Secret( A, B, m ) @ #i) ∧ (∃ #r. K( m ) @ #r)) ∧
       (¬(∃ #r. Reveal( B ) @ #r))) ∧
      (¬(∃ #r. Reveal( A ) @ #r)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B m #i.
  (Secret( A, B, m ) @ #i)
 ∧
  (∃ #r. (K( m ) @ #r)) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥)"
*/
simplify
solve( !LongtermKey( ~kbs, B ) ▶₀ #i )
  case Init
  solve( !LongtermKey( ~kas, A ) ▶₁ #i )
    case Init
    solve( !KU( ~kab ) @ #vk.9 )
      case A_to_B2
      solve( !KU( ~kbs ) @ #vk.12 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    next
      case S_to_A_case_1
      solve( !KU( ~kas ) @ #vk.10 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    next
      case S_to_A_case_2
      solve( !KU( ~kas ) @ #vk.10 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    (((∃ #j.
        ((Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
      (∃ #r. Reveal( A ) @ #r)) ∨
     (∃ #r. Reveal( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  (∀ #j.
    (Running_A( A, B, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateB2( A, $B, ~kbs, ~nb, kab ) ▶₀ #i )
  case B_to_A2
  solve( !LongtermKey( ~kbs, $B ) ▶₁ #i )
    case Init
    solve( !KU( senc(<'7', dec(~nb)>, kab) ) @ #vk )
      case A_to_B3
      solve( !KU( senc(<'5', kab, ~nb, A>, ~kbs) ) @ #vk.1 )
        case A_to_B2
        solve( !KU( senc(<'4', ~na, $B.1, ~kab, mb2>, ~kas) ) @ #vk.7 )
          case S_to_A
          solve( (#i2 < #i)  ∥ (#i < #i2) )
            case case_1
            solve( StateB2( A2, $B.1, ~kbs.1, ~nb, ~kab ) ▶₀ #i2 )
              case B_to_A2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( StateB2( A2, $B.1, ~kbs.1, ~nb, ~kab ) ▶₀ #i2 )
              case B_to_A2
              by contradiction /* cyclic */
            qed
          qed
        next
          case c_senc
          solve( !KU( ~kas.1 ) @ #vk.19 )
            case Reveal_Longterm_Key
            solve( !KU( ~kab ) @ #vk.26 )
              case A_to_B2
              solve( !KU( ~kbs ) @ #vk.28 )
                case Reveal_Longterm_Key
                by contradiction /* from formulas */
              qed
            next
              case S_to_A
              solve( !KU( ~kas ) @ #vk.28 )
                case Reveal_Longterm_Key
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case S_to_A
        solve( !KU( ~kas.1 ) @ #vk.16 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      next
        case c_senc
        solve( !KU( ~kbs ) @ #vk.10 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_senc
      solve( !KU( senc(<'5', kab, ~nb, A>, ~kbs) ) @ #vk.1 )
        case A_to_B2
        solve( !KU( ~kab ) @ #vk.7 )
          case A_to_B2
          solve( !KU( ~kbs ) @ #vk.19 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        next
          case S_to_A
          solve( !KU( ~kas ) @ #vk.19 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case S_to_A
        solve( !KU( ~kas ) @ #vk.17 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      next
        case c_senc
        solve( !KU( ~kbs ) @ #vk.12 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma agreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    (((∃ #j. (Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. Reveal( A ) @ #r)) ∨
     (∃ #r. Reveal( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  (∀ #j. (Running_A( A, B, t ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateB2( A, $B, ~kbs, ~nb, kab ) ▶₀ #i )
  case B_to_A2
  solve( !LongtermKey( ~kbs, $B ) ▶₁ #i )
    case Init
    solve( !KU( senc(<'7', dec(~nb)>, kab) ) @ #vk )
      case A_to_B3
      solve( !KU( senc(<'5', kab, ~nb, A>, ~kbs) ) @ #vk.1 )
        case A_to_B2
        solve( !KU( senc(<'4', ~na, $B.1, ~kab, mb2>, ~kas) ) @ #vk.7 )
          case S_to_A
          by contradiction /* from formulas */
        next
          case c_senc
          solve( !KU( ~kas.1 ) @ #vk.19 )
            case Reveal_Longterm_Key
            solve( !KU( ~kab ) @ #vk.26 )
              case A_to_B2
              solve( !KU( ~kbs ) @ #vk.28 )
                case Reveal_Longterm_Key
                by contradiction /* from formulas */
              qed
            next
              case S_to_A
              solve( !KU( ~kas ) @ #vk.28 )
                case Reveal_Longterm_Key
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case S_to_A
        solve( !KU( ~kas.1 ) @ #vk.16 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      next
        case c_senc
        solve( !KU( ~kbs ) @ #vk.10 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_senc
      solve( !KU( senc(<'5', kab, ~nb, A>, ~kbs) ) @ #vk.1 )
        case A_to_B2
        solve( !KU( ~kab ) @ #vk.7 )
          case A_to_B2
          solve( !KU( ~kbs ) @ #vk.19 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        next
          case S_to_A
          solve( !KU( ~kas ) @ #vk.19 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case S_to_A
        solve( !KU( ~kas ) @ #vk.17 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      next
        case c_senc
        solve( !KU( ~kbs ) @ #vk.12 )
          case Reveal_Longterm_Key
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma injectiveagreement_A:
  all-traces
  "∀ A B t #i.
    (Commit_A( A, B, t ) @ #i) ⇒
    (((∃ #j.
        ((Running_B( A, B, t ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ A2 B2 #i2. (Commit_A( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
      (∃ #r. Reveal( A ) @ #r)) ∨
     (∃ #r. Reveal( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_A( A, B, t ) @ #i)
 ∧
  (∀ #j.
    (Running_B( A, B, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ A2 B2 #i2. (Commit_A( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateA3( $A, $B, ~kas, ~na, mb, kab, mb2 ) ▶₀ #i )
  case A_to_B2
  solve( !LongtermKey( ~kas, $A ) ▶₁ #i )
    case Init
    solve( !KU( senc(<'4', ~na, $B, kab, mb2>, ~kas) ) @ #vk.1 )
      case S_to_A
      solve( !KU( senc(<'6', nb.1>, ~kab) ) @ #vk.1 )
        case B_to_A2
        solve( !KU( senc(<'2', $A, nb>, ~kbs) ) @ #vk.11 )
          case B_to_A1
          solve( !KU( senc(<'5', ~kab, ~nb.1, x>, ~kbs.1) ) @ #vk.13 )
            case A_to_B2
            solve( (#i2 < #i)  ∥ (#i < #i2) )
              case case_1
              solve( StateA3( $A.1, $B.1, ~kas.1, ~na.1, mb.1, ~kab, mb2 ) ▶₀ #i2 )
                case A_to_B2
                solve( !LongtermKey( ~kas.1, $A.1 ) ▶₁ #i2 )
                  case Init
                  solve( !KU( senc(<'4', ~na.1, $B.1, ~kab, mb2>, ~kas.1) ) @ #vk.15 )
                    case S_to_A
                    by contradiction /* cyclic */
                  next
                    case c_senc
                    solve( !KU( ~kas.1 ) @ #vk.18 )
                      case Reveal_Longterm_Key
                      solve( !KU( ~kab ) @ #vk.25 )
                        case A_to_B2
                        solve( !KU( ~kbs ) @ #vk.27 )
                          case Reveal_Longterm_Key
                          by contradiction /* from formulas */
                        qed
                      next
                        case S_to_A
                        solve( !KU( ~kas ) @ #vk.27 )
                          case Reveal_Longterm_Key
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( StateA3( $A.1, $B.1, ~kas.1, ~na.1, mb.1, ~kab, mb2 ) ▶₀ #i2 )
                case A_to_B2
                solve( !LongtermKey( ~kas.1, $A.1 ) ▶₁ #i2 )
                  case Init
                  solve( !KU( senc(<'4', ~na.1, $B.1, ~kab, mb2>, ~kas.1) ) @ #vk.15 )
                    case S_to_A
                    by contradiction /* cyclic */
                  next
                    case c_senc
                    solve( !KU( ~kas.1 ) @ #vk.18 )
                      case Reveal_Longterm_Key
                      solve( !KU( ~kab ) @ #vk.25 )
                        case A_to_B2
                        solve( !KU( ~kbs ) @ #vk.27 )
                          case Reveal_Longterm_Key
                          by contradiction /* from formulas */
                        qed
                      next
                        case S_to_A
                        solve( !KU( ~kas ) @ #vk.27 )
                          case Reveal_Longterm_Key
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case S_to_A
            solve( (#i2 < #i)  ∥ (#i < #i2) )
              case case_1
              solve( StateA3( $A.1, $B.1, ~kas.1, ~na.1, mb.1, ~kab, mb2 ) ▶₀ #i2 )
                case A_to_B2
                solve( !LongtermKey( ~kas.1, $A.1 ) ▶₁ #i2 )
                  case Init
                  solve( !KU( ~kas ) @ #vk.15 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case case_2
              solve( StateA3( $A.1, $B.1, ~kas.1, ~na.1, mb.1, ~kab, mb2 ) ▶₀ #i2 )
                case A_to_B2
                solve( !LongtermKey( ~kas.1, $A.1 ) ▶₁ #i2 )
                  case Init
                  solve( !KU( ~kas ) @ #vk.15 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_senc
            solve( !KU( ~kbs.1 ) @ #vk.19 )
              case Reveal_Longterm_Key
              solve( !KU( ~kab ) @ #vk.22 )
                case A_to_B2
                solve( !KU( ~nb.1 ) @ #vk.23 )
                  case A_to_B2
                  solve( !KU( ~kbs ) @ #vk.26 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                next
                  case A_to_B3_case_1
                  by contradiction /* cyclic */
                next
                  case A_to_B3_case_2
                  by contradiction /* cyclic */
                next
                  case B_to_A1
                  solve( !KU( ~kbs ) @ #vk.24 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                next
                  case B_to_A2
                  by contradiction /* cyclic */
                next
                  case S_to_A
                  solve( !KU( ~kbs ) @ #vk.26 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case S_to_A_case_1
                solve( !KU( ~nb.1 ) @ #vk.23 )
                  case A_to_B2
                  solve( !KU( ~kas ) @ #vk.26 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                next
                  case A_to_B3_case_1
                  by contradiction /* cyclic */
                next
                  case A_to_B3_case_2
                  by contradiction /* cyclic */
                next
                  case B_to_A1
                  solve( !KU( ~kas ) @ #vk.24 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                next
                  case B_to_A2
                  by contradiction /* cyclic */
                next
                  case S_to_A
                  solve( !KU( ~kas ) @ #vk.26 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case S_to_A_case_2
                solve( !KU( ~nb.1 ) @ #vk.23 )
                  case A_to_B2
                  solve( !KU( ~kas ) @ #vk.26 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                next
                  case A_to_B3_case_1
                  by contradiction /* cyclic */
                next
                  case A_to_B3_case_2
                  by contradiction /* cyclic */
                next
                  case B_to_A1
                  solve( !KU( ~kas ) @ #vk.24 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                next
                  case B_to_A2
                  by contradiction /* cyclic */
                next
                  case S_to_A
                  solve( !KU( ~kas ) @ #vk.26 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( ~kbs ) @ #vk.18 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~kab ) @ #vk.13 )
          case A_to_B2
          solve( !KU( ~kbs ) @ #vk.16 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        next
          case S_to_A_case_1
          solve( !KU( ~kas ) @ #vk.16 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        next
          case S_to_A_case_2
          solve( !KU( ~kas ) @ #vk.16 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( ~kas ) @ #vk.4 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma agreement_A:
  all-traces
  "∀ A B t #i.
    (Commit_A( A, B, t ) @ #i) ⇒
    (((∃ #j. (Running_B( A, B, t ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. Reveal( A ) @ #r)) ∨
     (∃ #r. Reveal( B ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_A( A, B, t ) @ #i)
 ∧
  (∀ #j. (Running_B( A, B, t ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateA3( $A, $B, ~kas, ~na, mb, kab, mb2 ) ▶₀ #i )
  case A_to_B2
  solve( !LongtermKey( ~kas, $A ) ▶₁ #i )
    case Init
    solve( !KU( senc(<'4', ~na, $B, kab, mb2>, ~kas) ) @ #vk.1 )
      case S_to_A
      solve( !KU( senc(<'6', nb.1>, ~kab) ) @ #vk.1 )
        case B_to_A2
        solve( !KU( senc(<'2', $A, nb>, ~kbs) ) @ #vk.11 )
          case B_to_A1
          solve( !KU( senc(<'5', ~kab, ~nb.1, x>, ~kbs.1) ) @ #vk.13 )
            case A_to_B2
            by contradiction /* from formulas */
          next
            case S_to_A
            by contradiction /* from formulas */
          next
            case c_senc
            solve( !KU( ~kbs.1 ) @ #vk.19 )
              case Reveal_Longterm_Key
              solve( !KU( ~kab ) @ #vk.22 )
                case A_to_B2
                solve( !KU( ~nb.1 ) @ #vk.23 )
                  case A_to_B2
                  solve( !KU( ~kbs ) @ #vk.26 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                next
                  case A_to_B3_case_1
                  by contradiction /* cyclic */
                next
                  case A_to_B3_case_2
                  by contradiction /* cyclic */
                next
                  case B_to_A1
                  solve( !KU( ~kbs ) @ #vk.24 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                next
                  case B_to_A2
                  by contradiction /* cyclic */
                next
                  case S_to_A
                  solve( !KU( ~kbs ) @ #vk.26 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case S_to_A_case_1
                solve( !KU( ~nb.1 ) @ #vk.23 )
                  case A_to_B2
                  solve( !KU( ~kas ) @ #vk.26 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                next
                  case A_to_B3_case_1
                  by contradiction /* cyclic */
                next
                  case A_to_B3_case_2
                  by contradiction /* cyclic */
                next
                  case B_to_A1
                  solve( !KU( ~kas ) @ #vk.24 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                next
                  case B_to_A2
                  by contradiction /* cyclic */
                next
                  case S_to_A
                  solve( !KU( ~kas ) @ #vk.26 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case S_to_A_case_2
                solve( !KU( ~nb.1 ) @ #vk.23 )
                  case A_to_B2
                  solve( !KU( ~kas ) @ #vk.26 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                next
                  case A_to_B3_case_1
                  by contradiction /* cyclic */
                next
                  case A_to_B3_case_2
                  by contradiction /* cyclic */
                next
                  case B_to_A1
                  solve( !KU( ~kas ) @ #vk.24 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                next
                  case B_to_A2
                  by contradiction /* cyclic */
                next
                  case S_to_A
                  solve( !KU( ~kas ) @ #vk.26 )
                    case Reveal_Longterm_Key
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( ~kbs ) @ #vk.18 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~kab ) @ #vk.13 )
          case A_to_B2
          solve( !KU( ~kbs ) @ #vk.16 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        next
          case S_to_A_case_1
          solve( !KU( ~kas ) @ #vk.16 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        next
          case S_to_A_case_2
          solve( !KU( ~kas ) @ #vk.16 )
            case Reveal_Longterm_Key
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( ~kas ) @ #vk.4 )
        case Reveal_Longterm_Key
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

lemma AUTO_typing [sources]:
  all-traces
  "(((⊤) ∧
     (∀ x m #i.
       (AUTO_IN_TERM_2_0_1_1_1_1_0_1_1__S_to_A( m, x ) @ #i) ⇒
       ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
        (∃ #j.
          (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( m ) @ #j) ∧ (#j < #i))))) ∧
    (∀ x m #i.
      (AUTO_IN_TERM_2_0_0_1_1_1_1__A_to_B2( m, x ) @ #i) ⇒
      ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
       (∃ #j. (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( m ) @ #j) ∧ (#j < #i))))) ∧
   (∀ x m #i.
     (AUTO_IN_TERM_2_0_0_1__A_to_B3( m, x ) @ #i) ⇒
     ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (AUTO_OUT_TERM_2_0_0_1__A_to_B3( m ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ x m #i.
    (AUTO_IN_TERM_2_0_1_1_1_1_0_1_1__S_to_A( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j.
      (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( m ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ x m #i.
    (AUTO_IN_TERM_2_0_0_1_1_1_1__A_to_B2( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( m ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ x m #i.
    (AUTO_IN_TERM_2_0_0_1__A_to_B3( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (AUTO_OUT_TERM_2_0_0_1__A_to_B3( m ) @ #j) ⇒ ¬(#j < #i))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ x m #i.
           (AUTO_IN_TERM_2_0_1_1_1_1_0_1_1__S_to_A( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j.
             (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( m ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ x m #i.
           (AUTO_IN_TERM_2_0_0_1_1_1_1__A_to_B2( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( m ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ x m #i.
           (AUTO_IN_TERM_2_0_0_1__A_to_B3( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (AUTO_OUT_TERM_2_0_0_1__A_to_B3( m ) @ #j) ⇒ ¬(#j < #i))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', a, x>, ~kbs) ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !LongtermKey( ~kbs, b ) ▶₀ #i )
        case Init
        solve( !LongtermKey( ~kas, a ) ▶₁ #i )
          case Init
          solve( !KU( senc(<'2', $X.1, x>, ~kbs) ) @ #vk.8 )
            case A_to_B2
            solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( senc(<'4', ~na.1, $B, kab.1, t>,
                                                                 ~kas.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (#vl, 0) ~~> (#vk, 0) )
                case d_0_sdec
                solve( (#vr.6, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( (#vr.7, 0) ~~> (#vk, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    solve( (#vr.8, 0) ~~> (#vk, 0) )
                      case d_0_fst
                      solve( (∃ #j.1. (!KU( nb ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                             (∃ #j.1.
                               (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', a, nb>, ~kbs.1)
                                ) @ #j.1)
                              ∧
                               (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case d_0_snd
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          next
            case A_to_B3
            solve( (∃ #j. (!KU( nb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_2_0_0_1__A_to_B3( senc(<'6', nb>, kab.1) ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case B_to_A1
            by contradiction /* from formulas */
          next
            case S_to_A
            solve( (∃ #j. (!KU( nb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', $X.3, nb>, ~kbs.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( senc(<'4', ~na, $B, kab, x>, ~kas)
              ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( StateA2( $A, $B, ~kas, ~na, mb ) ▶₀ #i )
        case A_to_S
        solve( !LongtermKey( ~kas, $A ) ▶₁ #i )
          case Init
          solve( !KU( senc(<'4', ~na, $B, kab, x>, ~kas) ) @ #vk )
            case A_to_B2
            solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( senc(<'4', ~na.1, $B.1, kab.1, t>,
                                                                 ~kas.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (#vl, 0) ~~> (#vk, 0) )
                case d_0_sdec
                solve( (#vr.7, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( (#vr.8, 0) ~~> (#vk, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    solve( (#vr.9, 0) ~~> (#vk, 0) )
                      case d_0_fst
                      solve( (∃ #j.1. (!KU( nb ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                             (∃ #j.1.
                               (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', a, nb>, ~kbs)
                                ) @ #j.1)
                              ∧
                               (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case d_0_snd
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          next
            case A_to_B3
            solve( (∃ #j. (!KU( nb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_2_0_0_1__A_to_B3( senc(<'6', nb>, kab.1) ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case S_to_A_case_1
            by contradiction /* from formulas */
          next
            case S_to_A_case_2
            solve( (∃ #j. (!KU( nb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', $X.1, nb>, ~kbs)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_TERM_2_0_0_1__A_to_B3( senc(<'6', x>, kab) ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( StateA3( $A, $B, ~kas, ~na, mb, kab, mb2 ) ▶₀ #i )
        case A_to_B2
        solve( (∃ #j. (!KU( mb2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
               (∃ #j.
                 (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( senc(<'4', ~na, $B, kab, mb2>,
                                                             ~kas)
                  ) @ #j)
                ∧
                 (¬(last(#j))) ∧ (#j < #vr)) )
          case case_1
          solve( !LongtermKey( ~kas, $A ) ▶₁ #i )
            case Init
            solve( !KU( senc(<'6', x>, kab) ) @ #vk )
              case A_to_B2
              solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                     (∃ #j.
                       (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( senc(<'4', ~na.1, $B.1, kab.1, t>,
                                                                   ~kas.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.4)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                solve( (#vl, 0) ~~> (#vk, 0) )
                  case d_0_sdec
                  solve( (#vr.8, 0) ~~> (#vk, 0) )
                    case d_0_fst
                    by contradiction /* forbidden KD-fact */
                  next
                    case d_0_snd
                    solve( (#vr.9, 0) ~~> (#vk, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      solve( (#vr.10, 0) ~~> (#vk, 0) )
                        case d_0_fst
                        solve( (∃ #j.1. (!KU( nb ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                               (∃ #j.1.
                                 (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', a, nb>, ~kbs)
                                  ) @ #j.1)
                                ∧
                                 (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case d_0_snd
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case A_to_B3
              solve( (∃ #j. (!KU( nb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                     (∃ #j.
                       (AUTO_OUT_TERM_2_0_0_1__A_to_B3( senc(<'6', nb>, kab.1) ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.4)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case B_to_A2
              by contradiction /* from formulas */
            next
              case S_to_A
              solve( (∃ #j. (!KU( nb ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                     (∃ #j.
                       (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', $X.1, nb>, ~kbs)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.4)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case c_senc
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          solve( (∃ #j.1. (!KU( nb ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                 (∃ #j.1.
                   (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', a, nb>, ~kbs)
                    ) @ #j.1)
                  ∧
                   (¬(last(#j.1))) ∧ (#j.1 < #j)) )
            case case_1
            solve( !LongtermKey( ~kas, $A ) ▶₁ #i )
              case Init
              solve( !LongtermKey( ~kbs, $B ) ▶₀ #j )
                case Init
                solve( !LongtermKey( ~kas, a ) ▶₁ #j )
                  case Init
                  solve( !KU( ~na ) @ #vk.10 )
                    case A_to_B2
                    solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( senc(<'4', ~na.1, $B.1, kab.1, t>,
                                                                         ~kas.1)
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.5)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      solve( (#vl, 0) ~~> (#vk, 0) )
                        case d_0_sdec
                        solve( (#vr.9, 0) ~~> (#vk, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.10, 0) ~~> (#vk, 0) )
                            case d_0_fst
                            by solve( (#vr.11, 0) ~~> (#vk, 0) )
                          next
                            case d_0_snd
                            solve( (#vr.11, 0) ~~> (#vk, 0) )
                              case d_0_fst
                              solve( (∃ #j.2.
                                       (!KU( nb.1 ) @ #j.2) ∧ (¬(last(#j.2))) ∧ (#j.2 < #j.1))  ∥
                                     (∃ #j.2.
                                       (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', a, nb.1>, ~kbs.1)
                                        ) @ #j.2)
                                      ∧
                                       (¬(last(#j.2))) ∧ (#j.2 < #j.1)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.12, 0) ~~> (#vk, 0) )
                              qed
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case A_to_B3
                    solve( (∃ #j. (!KU( nb.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_2_0_0_1__A_to_B3( senc(<'6', nb.1>, kab.1) ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.5)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      solve( (#vr.8, 0) ~~> (#vk, 0) )
                        case Var_fresh_1_nb
                        solve( (∃ #j. (!KU( mb2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                               (∃ #j.
                                 (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( senc(<'4', ~na.1, $B.2, kab.1, mb2
                                                                             >,
                                                                             ~kas.1)
                                  ) @ #j)
                                ∧
                                 (¬(last(#j))) ∧ (#j < #vr.9)) )
                          case case_1
                          by solve( StateB1( x.1, $B.1, ~kbs.1, ~na ) ▶₀ #j.1 )
                        next
                          case case_2
                          solve( (∃ #j.3.
                                   (!KU( nb.1 ) @ #j.3) ∧ (¬(last(#j.3))) ∧ (#j.3 < #j.2))  ∥
                                 (∃ #j.3.
                                   (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', a, nb.1>, ~kbs.2)
                                    ) @ #j.3)
                                  ∧
                                   (¬(last(#j.3))) ∧ (#j.3 < #j.2)) )
                            case case_1
                            by solve( StateB1( x.1, $B.1, ~kbs.1, ~na ) ▶₀ #j.1 )
                          next
                            case case_2
                            by solve( StateB1( x.1, $B.1, ~kbs.1, ~na ) ▶₀ #j.1 )
                          qed
                        qed
                      qed
                    qed
                  next
                    case A_to_S
                    solve( !KU( senc(<'6', x>, ~kab) ) @ #vk.1 )
                      case A_to_B2
                      solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                             (∃ #j.
                               (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( senc(<'4', ~na.1, $B.1, kab.1, t>,
                                                                           ~kas.1)
                                ) @ #j)
                              ∧
                               (¬(last(#j))) ∧ (#j < #vr.9)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                          case d_0_sdec
                          solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              solve( (#vr.15, 0) ~~> (#vk.1, 0) )
                                case d_0_fst
                                solve( (∃ #j.2.
                                         (!KU( nb.1 ) @ #j.2) ∧ (¬(last(#j.2))) ∧ (#j.2 < #j.1))  ∥
                                       (∃ #j.2.
                                         (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', a, nb.1>,
                                                                                        ~kbs.1)
                                          ) @ #j.2)
                                        ∧
                                         (¬(last(#j.2))) ∧ (#j.2 < #j.1)) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case A_to_B3
                      solve( (∃ #j. (!KU( nb.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                             (∃ #j.
                               (AUTO_OUT_TERM_2_0_0_1__A_to_B3( senc(<'6', nb.1>, kab.1) ) @ #j)
                              ∧
                               (¬(last(#j))) ∧ (#j < #vr.9)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case B_to_A2
                      by contradiction /* from formulas */
                    next
                      case S_to_A
                      solve( (∃ #j. (!KU( nb.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                             (∃ #j.
                               (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', $X.1, nb.1>, ~kbs.1)
                                ) @ #j)
                              ∧
                               (¬(last(#j))) ∧ (#j < #vr.9)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case c_senc
                      by contradiction /* from formulas */
                    qed
                  next
                    case S_to_A
                    solve( (∃ #j. (!KU( nb.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', $X.1, nb.1>, ~kbs.1)
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.5)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.14, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( !LongtermKey( ~kas, $A ) ▶₁ #i )
              case Init
              solve( !LongtermKey( ~kbs, $B ) ▶₀ #j )
                case Init
                solve( !LongtermKey( ~kas, a ) ▶₁ #j )
                  case Init
                  solve( !LongtermKey( ~kbs, $B.1 ) ▶₁ #j.1 )
                    case Init
                    solve( !KU( ~na ) @ #vk.11 )
                      case A_to_B2
                      solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                             (∃ #j.
                               (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( senc(<'4', ~na.1, $B.1, kab.1, t>,
                                                                           ~kas.1)
                                ) @ #j)
                              ∧
                               (¬(last(#j))) ∧ (#j < #vr.5)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        solve( (#vl, 0) ~~> (#vk, 0) )
                          case d_0_sdec
                          solve( (#vr.9, 0) ~~> (#vk, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.10, 0) ~~> (#vk, 0) )
                              case d_0_fst
                              by solve( (#vr.11, 0) ~~> (#vk, 0) )
                            next
                              case d_0_snd
                              solve( (#vr.11, 0) ~~> (#vk, 0) )
                                case d_0_fst
                                solve( (∃ #j.3.
                                         (!KU( nb.1 ) @ #j.3) ∧ (¬(last(#j.3))) ∧ (#j.3 < #j.2))  ∥
                                       (∃ #j.3.
                                         (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', a, nb.1>,
                                                                                        ~kbs.1)
                                          ) @ #j.3)
                                        ∧
                                         (¬(last(#j.3))) ∧ (#j.3 < #j.2)) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.12, 0) ~~> (#vk, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case A_to_B3
                      solve( (∃ #j. (!KU( nb.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                             (∃ #j.
                               (AUTO_OUT_TERM_2_0_0_1__A_to_B3( senc(<'6', nb.1>, kab.1) ) @ #j)
                              ∧
                               (¬(last(#j))) ∧ (#j < #vr.5)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        solve( (#vr.8, 0) ~~> (#vk, 0) )
                          case Var_fresh_1_nb
                          solve( (∃ #j. (!KU( mb2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                                 (∃ #j.
                                   (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( senc(<'4', ~na.1, $B.2, kab.1, mb2
                                                                               >,
                                                                               ~kas.1)
                                    ) @ #j)
                                  ∧
                                   (¬(last(#j))) ∧ (#j < #vr.9)) )
                            case case_1
                            by solve( StateB1( x.1, $B.1, ~kbs.1, ~na ) ▶₀ #j.2 )
                          next
                            case case_2
                            solve( (∃ #j.4.
                                     (!KU( nb.1 ) @ #j.4) ∧ (¬(last(#j.4))) ∧ (#j.4 < #j.3))  ∥
                                   (∃ #j.4.
                                     (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', a, nb.1>, ~kbs.2)
                                      ) @ #j.4)
                                    ∧
                                     (¬(last(#j.4))) ∧ (#j.4 < #j.3)) )
                              case case_1
                              by solve( StateB1( x.1, $B.1, ~kbs.1, ~na ) ▶₀ #j.2 )
                            next
                              case case_2
                              by solve( StateB1( x.1, $B.1, ~kbs.1, ~na ) ▶₀ #j.2 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case A_to_S
                      solve( !KU( senc(<'6', x>, ~kab) ) @ #vk.1 )
                        case A_to_B2
                        solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                               (∃ #j.
                                 (AUTO_OUT_TERM_2_0_0_1_1_1_1__A_to_B2( senc(<'4', ~na.1, $B.1, kab.1, t>,
                                                                             ~kas.1)
                                  ) @ #j)
                                ∧
                                 (¬(last(#j))) ∧ (#j < #vr.9)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                            case d_0_sdec
                            solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.15, 0) ~~> (#vk.1, 0) )
                                  case d_0_fst
                                  solve( (∃ #j.3.
                                           (!KU( nb.1 ) @ #j.3) ∧ (¬(last(#j.3))) ∧ (#j.3 < #j.2))  ∥
                                         (∃ #j.3.
                                           (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', a, nb.1>,
                                                                                          ~kbs.1)
                                            ) @ #j.3)
                                          ∧
                                           (¬(last(#j.3))) ∧ (#j.3 < #j.2)) )
                                    case case_1
                                    by contradiction /* cyclic */
                                  next
                                    case case_2
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case A_to_B3
                        solve( (∃ #j. (!KU( nb.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                               (∃ #j.
                                 (AUTO_OUT_TERM_2_0_0_1__A_to_B3( senc(<'6', nb.1>, kab.1) ) @ #j)
                                ∧
                                 (¬(last(#j))) ∧ (#j < #vr.9)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case B_to_A2
                        by contradiction /* from formulas */
                      next
                        case S_to_A
                        solve( (∃ #j. (!KU( nb.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                               (∃ #j.
                                 (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', $X.1, nb.1>, ~kbs.1)
                                  ) @ #j)
                                ∧
                                 (¬(last(#j))) ∧ (#j < #vr.9)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case c_senc
                        by contradiction /* from formulas */
                      qed
                    next
                      case S_to_A
                      solve( (∃ #j. (!KU( nb.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                             (∃ #j.
                               (AUTO_OUT_TERM_2_0_1_1_1_1_0_1_1__S_to_A( senc(<'2', $X.1, nb.1>, ~kbs.1)
                                ) @ #j)
                              ∧
                               (¬(last(#j))) ∧ (#j < #vr.5)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.14, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  qed
qed

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/features/auto-sources/spore/Nssk_amended.spthy

------------------------------------------------------------------------------
analyzed: examples/features/auto-sources/spore/Nssk_amended.spthy

  output:          examples/features/auto-sources/spore/Nssk_amended.spthy.tmp
  processing time: 7.099586123s
  executability (exists-trace): verified (14 steps)
  Secrecy (all-traces): verified (10 steps)
  injectiveagreement_B (all-traces): verified (31 steps)
  agreement_B (all-traces): verified (27 steps)
  injectiveagreement_A (all-traces): verified (80 steps)
  agreement_A (all-traces): verified (52 steps)
  AUTO_typing (all-traces): verified (181 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/features/auto-sources/spore/Nssk_amended.spthy

  output:          examples/features/auto-sources/spore/Nssk_amended.spthy.tmp
  processing time: 7.099586123s
  executability (exists-trace): verified (14 steps)
  Secrecy (all-traces): verified (10 steps)
  injectiveagreement_B (all-traces): verified (31 steps)
  agreement_B (all-traces): verified (27 steps)
  injectiveagreement_A (all-traces): verified (80 steps)
  agreement_A (all-traces): verified (52 steps)
  AUTO_typing (all-traces): verified (181 steps)

==============================================================================
*/
