theory SpliceAS_3 begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, dec/1, fst/1, inc/1, pair/2, pk/1, sign/2,
           snd/1, true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    dec(inc(x)) = x,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



rule (modulo E) Register_pk:
   [ Fr( ~ltk ) ]
  --[ Register( $U, ~ltk ), OnlyOnce( $U ) ]->
   [ !Ltk( $U, ~ltk ), !Pk( $U, pk(~ltk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Get_pk:
   [ !Pk( $U, pubkey ) ] --> [ Out( pubkey ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !Ltk( $U, ~ltk ) ] --[ Reveal( $U ) ]-> [ Out( ~ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_to_AS:
   [ !Ltk( $C, ~ltkC ), Fr( ~n1 ) ]
  -->
   [ Out( <'Req', $C, $S, ~n1> ), StateC1( $C, 'AS', $S, ~ltkC, ~n1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) AS_send_key:
   [ In( <'Req', x, y, n> ), !Ltk( 'AS', ~ltkAS ), !Pk( y, pk(~ltkY) ) ]
  -->
   [
   Out( <'AS', x, n, y, pk(~ltkY), 
         sign(<'Key', 'AS', x, n, y, pk(~ltkY)>, ~ltkAS)>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_to_S:
   [
   In( <'AS', $C, ~n1, $S, pkS, 
        sign(<'Key', 'AS', $C, ~n1, $S, pkS>, ~ltkAS)>
   ),
   StateC1( $C, 'AS', $S, ~ltkC, ~n1 ), !Pk( 'AS', pk(~ltkAS) ),
   !Ltk( $C, ~ltkC ), Fr( ~t ), Fr( ~l ), Fr( ~n2 )
   ]
  --[
  AUTO_OUT_TERM_0_0_1_1_1_1_1_0_1_1_1_0_1_1__S_to_AS( aenc(<'4', $C, ~n2>,
                                                           pkS)
  ),
  AUTO_OUT_TERM_0_0_1_1_1_1_0_0_1_1__S_to_AS( aenc(<'4', $C, ~n2>, pkS) ),
  Secret( $C, $S, ~n2 ), Running_A( $C, $S, <'C', 'S', ~n2> )
  ]->
   [
   Out( <$C, $S, ~t, ~l, aenc(<'4', $C, ~n2>, pkS), 
         sign(<'3', ~t, ~l, aenc(<'4', $C, ~n2>, pkS)>, ~ltkC)>
   ),
   StateC2( $C, 'AS', $S, ~ltkC, ~n1, ~n2, ~t, ~l, pkS )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_to_AS:
   [
   In( <c, $S, t, l, aenc(<'4', c, n2>, pk(~ltkS)), 
        sign(<'3', t, l, aenc(<'4', c, n2>, pk(~ltkS))>, ltkC)>
   ),
   !Ltk( $S, ~ltkS ), Fr( ~n3 )
   ]
  --[
  AUTO_IN_TERM_0_0_1_1_1_1_1_0_1_1_1_0_1_1__S_to_AS( aenc(<'4', c, n2>,
                                                          pk(~ltkS)),
                                                     n2
  ),
  AUTO_IN_TERM_0_0_1_1_1_1_0_0_1_1__S_to_AS( aenc(<'4', c, n2>, pk(~ltkS)),
                                             n2
  )
  ]->
   [
   Out( <'Req', $S, c, ~n3> ),
   StateS( c, 'AS', $S, ~ltkS, t, l, n2, ltkC, ~n3 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_to_C:
   [
   In( <AS, $S, ~n3, c, pk(ltkC), 
        sign(<'Key', AS, $S, ~n3, c, pk(ltkC)>, ~ltkAS)>
   ),
   StateS( c, AS, $S, ~ltkS, t, l, n2, ltkC, ~n3 ), !Pk( AS, pk(~ltkAS) ),
   !Ltk( $S, ~ltkS )
   ]
  --[
  Secret( c, $S, n2 ), Commit_B( c, $S, <'C', 'S', n2> ),
  Running_B( c, $S, <'C', 'S', n2> )
  ]->
   [ Out( <$S, c, aenc(<'5', inc(n2)>, pk(ltkC))> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_from_S:
   [
   In( <$S, $C, aenc(<'5', inc(~n2)>, pk(~ltkC))> ),
   StateC2( $C, AS, $S, ~ltkC, ~n1, ~n2, ~t, ~l, pkS ), !Ltk( $C, ~ltkC )
   ]
  --[ Commit_A( $C, $S, <'C', 'S', ~n2> ) ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction OnlyOnce:
  "∀ A B #i #j.
    (((OnlyOnce( A ) @ #i) ∧ (OnlyOnce( B ) @ #j)) ∧ (A = B)) ⇒ (#i = #j)"
  // safety formula

lemma executability:
  exists-trace
  "((((∀ A A2 B B2 t t2 #i #j.
        ((Running_A( A, B, t ) @ #i) ∧ (Running_A( A2, B2, t2 ) @ #j)) ⇒
        (#i = #j)) ∧
      (∀ A A2 B B2 t t2 #i #j.
        ((Running_B( A, B, t ) @ #i) ∧ (Running_B( A2, B2, t2 ) @ #j)) ⇒
        (#i = #j))) ∧
     (∀ A A2 B B2 t t2 #i #j.
       ((Commit_A( A, B, t ) @ #i) ∧ (Commit_A( A2, B2, t2 ) @ #j)) ⇒
       (#i = #j))) ∧
    (∀ A A2 B B2 t t2 #i #j.
      ((Commit_B( A, B, t ) @ #i) ∧ (Commit_B( A2, B2, t2 ) @ #j)) ⇒
      (#i = #j))) ∧
   (∃ A B t #i #j #k.
     (((((((((Running_A( A, B, t ) @ #i) ∧ (Running_B( A, B, t ) @ #j)) ∧
            (#i < #j)) ∧
           (Commit_B( A, B, t ) @ #j)) ∧
          (Commit_A( A, B, t ) @ #k)) ∧
         (#j < #k)) ∧
        (¬(∃ #r1. Reveal( A ) @ #r1))) ∧
       (¬(∃ #r2. Reveal( B ) @ #r2))) ∧
      (¬(∃ #r3. Reveal( 'AS' ) @ #r3))) ∧
     (¬(A = B)))"
/*
guarded formula characterizing all satisfying traces:
"(∀ A A2 B B2 t t2 #i #j.
   (Running_A( A, B, t ) @ #i) ∧ (Running_A( A2, B2, t2 ) @ #j) ⇒ #i = #j) ∧
 (∀ A A2 B B2 t t2 #i #j.
   (Running_B( A, B, t ) @ #i) ∧ (Running_B( A2, B2, t2 ) @ #j) ⇒ #i = #j) ∧
 (∀ A A2 B B2 t t2 #i #j.
   (Commit_A( A, B, t ) @ #i) ∧ (Commit_A( A2, B2, t2 ) @ #j) ⇒ #i = #j) ∧
 (∀ A A2 B B2 t t2 #i #j.
   (Commit_B( A, B, t ) @ #i) ∧ (Commit_B( A2, B2, t2 ) @ #j) ⇒ #i = #j) ∧
 (∃ A B t #i #j #k.
   (Running_A( A, B, t ) @ #i) ∧
   (Running_B( A, B, t ) @ #j) ∧
   (Commit_B( A, B, t ) @ #j) ∧
   (Commit_A( A, B, t ) @ #k)
  ∧
   (#i < #j) ∧
   (#j < #k) ∧
   (∀ #r1. (Reveal( A ) @ #r1) ⇒ ⊥) ∧
   (∀ #r2. (Reveal( B ) @ #r2) ⇒ ⊥) ∧
   (∀ #r3. (Reveal( 'AS' ) @ #r3) ⇒ ⊥) ∧
   (¬(A = B)))"
*/
simplify
solve( StateC1( $C, 'AS', $S, ~ltkC, ~n1 ) ▶₁ #i )
  case C_to_AS
  solve( !Pk( 'AS', pk(~ltkAS) ) ▶₂ #i )
    case Register_pk
    solve( !Ltk( $C, ~ltkC ) ▶₃ #i )
      case Register_pk
      solve( StateS( $C, AS, $S, ~ltkS, t.1, l.1, ~n2, ltkC.1, ~n3 ) ▶₁ #j )
        case S_to_AS
        solve( !Pk( 'AS', pk(~ltkAS.1) ) ▶₂ #j )
          case Register_pk
          solve( !Ltk( $S, ~ltkS ) ▶₃ #j )
            case Register_pk
            solve( StateC2( $C, AS, $S, ~ltkC.2, ~n1.1, ~n2, ~t.2, ~l.2, pkS.1
                   ) ▶₁ #k )
              case C_to_S
              solve( !Ltk( $C, ~ltkC ) ▶₂ #k )
                case Register_pk
                solve( !KU( sign(<'Key', 'AS', $C, ~n1, $S, pkS>, ~ltkAS) ) @ #vk.18 )
                  case AS_send_key
                  solve( !KU( sign(<'Key', 'AS', $S, ~n3, $C, pk(ltkC.1)>, ~ltkAS)
                         ) @ #vk.24 )
                    case AS_send_key
                    solve( !KU( sign(<'3', t.1, l.1, aenc(<'4', $C, ~n2>, pk(~ltkS))>, ~ltkC)
                           ) @ #vk.35 )
                      case C_to_S
                      solve( !KU( ~n1 ) @ #vk.22 )
                        case C_to_AS
                        solve( !KU( ~n3 ) @ #vk.31 )
                          case S_to_AS
                          solve( !KU( ~t ) @ #vk.34 )
                            case C_to_S
                            solve( !KU( ~l ) @ #vk.35 )
                              case C_to_S
                              solve( !KU( pk(~ltkC) ) @ #vk.34 )
                                case AS_send_key
                                solve( !KU( aenc(<'5', inc(~n2)>, pk(~ltkC)) ) @ #vk.36 )
                                  case S_to_C
                                  solve( !KU( aenc(<'4', $C, ~n2>, pk(~ltkS)) ) @ #vk.38 )
                                    case C_to_S
                                    solve( !KU( pk(~ltkS) ) @ #vk.39 )
                                      case AS_send_key
                                      SOLVED // trace found
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma Secrecy:
  all-traces
  "¬(∃ A B m #i.
      ((((Secret( A, B, m ) @ #i) ∧ (∃ #r. K( m ) @ #r)) ∧
        (¬(∃ #r. Reveal( B ) @ #r))) ∧
       (¬(∃ #r. Reveal( A ) @ #r))) ∧
      (¬(∃ #r. Reveal( 'AS' ) @ #r)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B m #i.
  (Secret( A, B, m ) @ #i)
 ∧
  (∃ #r. (K( m ) @ #r)) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'AS' ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Secret( A, B, m ) @ #i )
  case C_to_S
  solve( StateC1( $C, 'AS', $S, ~ltkC, ~n1 ) ▶₁ #i )
    case C_to_AS
    solve( !Pk( 'AS', pk(~ltkAS) ) ▶₂ #i )
      case Register_pk
      solve( !Ltk( $C, ~ltkC ) ▶₃ #i )
        case Register_pk
        solve( !KU( ~n2 ) @ #vk )
          case C_to_S
          solve( !KU( sign(<'Key', 'AS', $C, ~n1, $S, pk(x)>, ~ltkAS) ) @ #vk.11 )
            case AS_send_key
            solve( !KU( ~ltkY ) @ #vk.14 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          next
            case c_sign
            solve( !KU( ~ltkAS ) @ #vk.18 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        next
          case S_to_C
          solve( !KU( sign(<'Key', 'AS', $C, ~n1, $S, pk(~ltkS)>, ~ltkAS)
                 ) @ #vk.14 )
            case AS_send_key
            solve( !KU( sign(<'Key', 'AS', $S, ~n3, $C, pk(ltkC.1)>, ~ltkAS)
                   ) @ #vk.23 )
              case AS_send_key
              solve( !KU( ~ltkC ) @ #vk.27 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            next
              case c_sign
              solve( !KU( ~ltkAS ) @ #vk.39 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_sign
            solve( !KU( ~ltkAS ) @ #vk.36 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
next
  case S_to_C
  solve( StateS( A, AS, $S, ~ltkS, t, l, m, ltkC, ~n3 ) ▶₁ #i )
    case S_to_AS
    solve( !Pk( 'AS', pk(~ltkAS) ) ▶₂ #i )
      case Register_pk
      solve( !Ltk( $S, ~ltkS ) ▶₃ #i )
        case Register_pk
        solve( !KU( sign(<'Key', 'AS', $S, ~n3, A, pk(ltkC)>, ~ltkAS)
               ) @ #vk.13 )
          case AS_send_key
          solve( !KU( sign(<'3', t, l, aenc(<'4', $U, m>, pk(~ltkS))>, ~ltkY)
                 ) @ #vk.22 )
            case C_to_S
            solve( !KU( ~n2 ) @ #vk.4 )
              case C_to_S
              solve( !KU( ~ltkS ) @ #vk.34 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            next
              case S_to_C
              solve( !KU( sign(<'Key', 'AS', $U, ~n1, $S.1, pk(~ltkS)>, ~ltkAS)
                     ) @ #vk.39 )
                case AS_send_key
                solve( !KU( sign(<'Key', 'AS', $S, ~n3.1, $U, pk(ltkC)>, ~ltkAS)
                       ) @ #vk.47 )
                  case AS_send_key
                  solve( !KU( ~ltkY ) @ #vk.51 )
                    case Reveal_ltk
                    by contradiction /* from formulas */
                  qed
                next
                  case c_sign
                  solve( !KU( ~ltkAS ) @ #vk.58 )
                    case Reveal_ltk
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~ltkAS ) @ #vk.56 )
                  case Reveal_ltk
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~ltkY ) @ #vk.28 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~ltkAS ) @ #vk.26 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    ((((∃ #j.
         ((Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∧
         (¬(∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
       (∃ #r. Reveal( A ) @ #r)) ∨
      (∃ #r. Reveal( B ) @ #r)) ∨
     (∃ #r. Reveal( 'AS' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  (∀ #j.
    (Running_A( A, B, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ A2 B2 #i2. (Commit_B( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'AS' ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateS( A, AS, $S, ~ltkS, t, l, n2, ltkC, ~n3 ) ▶₁ #i )
  case S_to_AS
  solve( !Pk( 'AS', pk(~ltkAS) ) ▶₂ #i )
    case Register_pk
    solve( !Ltk( $S, ~ltkS ) ▶₃ #i )
      case Register_pk
      solve( !KU( sign(<'Key', 'AS', $S, ~n3, A, pk(ltkC)>, ~ltkAS)
             ) @ #vk.12 )
        case AS_send_key
        solve( !KU( sign(<'3', t, l, aenc(<'4', $U, n2>, pk(~ltkS))>, ~ltkY)
               ) @ #vk.21 )
          case C_to_S
          solve( !KU( sign(<'Key', 'AS', $U, ~n1, $S.1, pk(~ltkS)>, ~ltkAS)
                 ) @ #vk.32 )
            case AS_send_key
            solve( (#i2 < #i)  ∥ (#i < #i2) )
              case case_1
              solve( StateS( A2, AS, $S.1, ~ltkS.1, t.1, l.1, ~n2, ltkC, ~n3.1
                     ) ▶₁ #i2 )
                case S_to_AS
                solve( !Pk( 'AS', pk(~ltkAS.1) ) ▶₂ #i2 )
                  case Register_pk
                  solve( !Ltk( $S.1, ~ltkS.1 ) ▶₃ #i2 )
                    case Register_pk
                    solve( !KU( sign(<'Key', 'AS', $S.1, ~n3.1, A2, pk(ltkC)>, ~ltkAS)
                           ) @ #vk.46 )
                      case AS_send_key
                      solve( !KU( sign(<'3', t.1, l.1, aenc(<'4', $U.1, ~n2>, pk(~ltkS.1))>,
                                       ~ltkY.1)
                             ) @ #vk.56 )
                        case C_to_S
                        solve( !KU( ~n3 ) @ #vk.30 )
                          case S_to_AS
                          solve( !KU( ~n1 ) @ #vk.42 )
                            case C_to_AS
                            solve( !KU( ~t ) @ #vk.39 )
                              case C_to_S
                              solve( !KU( ~l ) @ #vk.40 )
                                case C_to_S
                                solve( !KU( ~n3.1 ) @ #vk.44 )
                                  case S_to_AS
                                  solve( !KU( pk(~ltkY) ) @ #vk.41 )
                                    case AS_send_key
                                    solve( !KU( aenc(<'4', $U, ~n2>, pk(~ltkS)) ) @ #vk.43 )
                                      case C_to_S
                                      solve( !KU( pk(~ltkS) ) @ #vk.47 )
                                        case AS_send_key
                                        SOLVED // trace found
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma agreement_B:
  all-traces
  "∀ A B t #i.
    (Commit_B( A, B, t ) @ #i) ⇒
    ((((∃ #j. (Running_A( A, B, t ) @ #j) ∧ (#j < #i)) ∨
       (∃ #r. Reveal( A ) @ #r)) ∨
      (∃ #r. Reveal( B ) @ #r)) ∨
     (∃ #r. Reveal( 'AS' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_B( A, B, t ) @ #i)
 ∧
  (∀ #j. (Running_A( A, B, t ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'AS' ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateS( A, AS, $S, ~ltkS, t, l, n2, ltkC, ~n3 ) ▶₁ #i )
  case S_to_AS
  solve( !Pk( 'AS', pk(~ltkAS) ) ▶₂ #i )
    case Register_pk
    solve( !Ltk( $S, ~ltkS ) ▶₃ #i )
      case Register_pk
      solve( !KU( sign(<'Key', 'AS', $S, ~n3, A, pk(ltkC)>, ~ltkAS)
             ) @ #vk.12 )
        case AS_send_key
        solve( !KU( sign(<'3', t, l, aenc(<'4', $U, n2>, pk(~ltkS))>, ~ltkY)
               ) @ #vk.21 )
          case C_to_S
          solve( !KU( sign(<'Key', 'AS', $U, ~n1, $S.1, pk(~ltkS)>, ~ltkAS)
                 ) @ #vk.32 )
            case AS_send_key
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~ltkAS ) @ #vk.38 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~ltkY ) @ #vk.27 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~ltkAS ) @ #vk.25 )
          case Reveal_ltk
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma injectiveagreement_A:
  all-traces
  "∀ A B t #i.
    (Commit_A( A, B, t ) @ #i) ⇒
    ((((∃ #j.
         ((Running_B( A, B, t ) @ #j) ∧ (#j < #i)) ∧
         (¬(∃ A2 B2 #i2. (Commit_A( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
       (∃ #r. Reveal( A ) @ #r)) ∨
      (∃ #r. Reveal( B ) @ #r)) ∨
     (∃ #r. Reveal( 'AS' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_A( A, B, t ) @ #i)
 ∧
  (∀ #j.
    (Running_B( A, B, t ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ A2 B2 #i2. (Commit_A( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'AS' ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateC2( $C, AS, $S, ~ltkC, ~n1, ~n2, ~t, ~l, pkS ) ▶₁ #i )
  case C_to_S
  solve( !Ltk( $C, ~ltkC ) ▶₂ #i )
    case Register_pk
    solve( !KU( sign(<'Key', 'AS', $C, ~n1, $S, pkS>, ~ltkAS) ) @ #vk.13 )
      case AS_send_key
      solve( !KU( aenc(<'5', inc(~n2)>, pk(~ltkC)) ) @ #vk.11 )
        case S_to_C
        solve( !KU( sign(<'Key', 'AS', $S.1, ~n3, c, pk(~ltkC)>, ~ltkAS)
               ) @ #vk.29 )
          case AS_send_key
          solve( !KU( sign(<'3', t.1, l.1, aenc(<'4', $C, ~n2>, pk(~ltkS))>, ~ltkC)
                 ) @ #vk.38 )
            case C_to_S
            solve( (#i2 < #i)  ∥ (#i < #i2) )
              case case_1
              solve( StateC2( $C.1, AS, $S.1, ~ltkC.1, ~n1.1, ~n2, ~t.1, ~l.1, pkS
                     ) ▶₁ #i2 )
                case C_to_S
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( StateC2( $C.1, AS, $S.1, ~ltkC.1, ~n1.1, ~n2, ~t.1, ~l.1, pkS
                     ) ▶₁ #i2 )
                case C_to_S
                by contradiction /* cyclic */
              qed
            qed
          next
            case c_sign
            solve( !KU( ~ltkC ) @ #vk.42 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~ltkAS ) @ #vk.42 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_aenc
        solve( !KU( pk(~ltkC) ) @ #vk.19 )
          case AS_send_key
          solve( !KU( inc(~n2) ) @ #vk.23 )
            case S_to_C
            solve( !KU( sign(<'Key', 'AS', $S.1, ~n3, c, pk(ltkC.1)>, ~ltkAS)
                   ) @ #vk.38 )
              case AS_send_key
              solve( !KU( ~ltkY.1 ) @ #vk.42 )
                case Reveal_ltk
                solve( !KU( sign(<'3', t.1, l.1, aenc(<'4', $U, ~n2>, pk(~ltkS))>,
                                 ~ltkY.1)
                       ) @ #vk.49 )
                  case C_to_S
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( aenc(<'4', $U, ~n2>, pk(~ltkS)) ) @ #vk.51 )
                    case C_to_S
                    by contradiction /* from formulas */
                  next
                    case c_aenc
                    solve( !KU( ~n2 ) @ #vk.58 )
                      case C_to_S
                      solve( !KU( ~ltkY ) @ #vk.59 )
                        case Reveal_ltk
                        by contradiction /* from formulas */
                      qed
                    next
                      case S_to_C
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case c_sign
              solve( !KU( ~ltkAS ) @ #vk.52 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_inc
            solve( !KU( ~n2 ) @ #vk.27 )
              case C_to_S
              solve( !KU( ~ltkY ) @ #vk.28 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            next
              case S_to_C
              solve( (#i2 < #i)  ∥ (#i < #i2) )
                case case_1
                solve( StateC2( $C.1, AS, $S.1, ~ltkC.1, ~n1.1, ~n2, ~t.1, ~l.1, pkS
                       ) ▶₁ #i2 )
                  case C_to_S
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( StateC2( $C.1, AS, $S.1, ~ltkC.1, ~n1.1, ~n2, ~t.1, ~l.1, pkS
                       ) ▶₁ #i2 )
                  case C_to_S
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Get_pk
          solve( !KU( inc(~n2) ) @ #vk.21 )
            case S_to_C
            solve( !KU( sign(<'Key', 'AS', $S.1, ~n3, c, pk(ltkC.1)>, ~ltkAS)
                   ) @ #vk.33 )
              case AS_send_key
              solve( !KU( ~ltkY.1 ) @ #vk.37 )
                case Reveal_ltk
                solve( !KU( sign(<'3', t.1, l.1, aenc(<'4', $U, ~n2>, pk(~ltkS))>,
                                 ~ltkY.1)
                       ) @ #vk.44 )
                  case C_to_S
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( aenc(<'4', $U, ~n2>, pk(~ltkS)) ) @ #vk.46 )
                    case C_to_S
                    by contradiction /* from formulas */
                  next
                    case c_aenc
                    solve( !KU( ~n2 ) @ #vk.53 )
                      case C_to_S
                      solve( !KU( ~ltkY ) @ #vk.54 )
                        case Reveal_ltk
                        by contradiction /* from formulas */
                      qed
                    next
                      case S_to_C
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case c_sign
              solve( !KU( ~ltkAS ) @ #vk.47 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_inc
            solve( !KU( ~n2 ) @ #vk.22 )
              case C_to_S
              solve( !KU( ~ltkY ) @ #vk.23 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            next
              case S_to_C
              solve( (#i2 < #i)  ∥ (#i < #i2) )
                case case_1
                solve( StateC2( $C.1, AS, $S.1, ~ltkC.1, ~n1.1, ~n2, ~t.1, ~l.1, pkS
                       ) ▶₁ #i2 )
                  case C_to_S
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( StateC2( $C.1, AS, $S.1, ~ltkC.1, ~n1.1, ~n2, ~t.1, ~l.1, pkS
                       ) ▶₁ #i2 )
                  case C_to_S
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case c_pk
          solve( !KU( ~ltkC ) @ #vk.22 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( ~ltkAS ) @ #vk.19 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma agreement_A:
  all-traces
  "∀ A B t #i.
    (Commit_A( A, B, t ) @ #i) ⇒
    ((((∃ #j. (Running_B( A, B, t ) @ #j) ∧ (#j < #i)) ∨
       (∃ #r. Reveal( A ) @ #r)) ∨
      (∃ #r. Reveal( B ) @ #r)) ∨
     (∃ #r. Reveal( 'AS' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit_A( A, B, t ) @ #i)
 ∧
  (∀ #j. (Running_B( A, B, t ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (Reveal( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( B ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'AS' ) @ #r) ⇒ ⊥)"
*/
simplify
solve( StateC2( $C, AS, $S, ~ltkC, ~n1, ~n2, ~t, ~l, pkS ) ▶₁ #i )
  case C_to_S
  solve( !Ltk( $C, ~ltkC ) ▶₂ #i )
    case Register_pk
    solve( !KU( sign(<'Key', 'AS', $C, ~n1, $S, pkS>, ~ltkAS) ) @ #vk.13 )
      case AS_send_key
      solve( !KU( aenc(<'5', inc(~n2)>, pk(~ltkC)) ) @ #vk.11 )
        case S_to_C
        solve( !KU( sign(<'Key', 'AS', $S.1, ~n3, c, pk(~ltkC)>, ~ltkAS)
               ) @ #vk.29 )
          case AS_send_key
          solve( !KU( sign(<'3', t.1, l.1, aenc(<'4', $C, ~n2>, pk(~ltkS))>, ~ltkC)
                 ) @ #vk.38 )
            case C_to_S
            by contradiction /* from formulas */
          next
            case c_sign
            solve( !KU( ~ltkC ) @ #vk.42 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~ltkAS ) @ #vk.42 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_aenc
        solve( !KU( pk(~ltkC) ) @ #vk.19 )
          case AS_send_key
          solve( !KU( inc(~n2) ) @ #vk.23 )
            case S_to_C
            solve( !KU( sign(<'Key', 'AS', $S.1, ~n3, c, pk(ltkC.1)>, ~ltkAS)
                   ) @ #vk.38 )
              case AS_send_key
              solve( !KU( ~ltkY.1 ) @ #vk.42 )
                case Reveal_ltk
                solve( !KU( sign(<'3', t.1, l.1, aenc(<'4', $U, ~n2>, pk(~ltkS))>,
                                 ~ltkY.1)
                       ) @ #vk.49 )
                  case C_to_S
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( aenc(<'4', $U, ~n2>, pk(~ltkS)) ) @ #vk.51 )
                    case C_to_S
                    by contradiction /* from formulas */
                  next
                    case c_aenc
                    solve( !KU( ~n2 ) @ #vk.58 )
                      case C_to_S
                      solve( !KU( ~ltkY ) @ #vk.59 )
                        case Reveal_ltk
                        by contradiction /* from formulas */
                      qed
                    next
                      case S_to_C
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case c_sign
              solve( !KU( ~ltkAS ) @ #vk.52 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_inc
            solve( !KU( ~n2 ) @ #vk.27 )
              case C_to_S
              solve( !KU( ~ltkY ) @ #vk.28 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            next
              case S_to_C
              by contradiction /* from formulas */
            qed
          qed
        next
          case Get_pk
          solve( !KU( inc(~n2) ) @ #vk.21 )
            case S_to_C
            solve( !KU( sign(<'Key', 'AS', $S.1, ~n3, c, pk(ltkC.1)>, ~ltkAS)
                   ) @ #vk.33 )
              case AS_send_key
              solve( !KU( ~ltkY.1 ) @ #vk.37 )
                case Reveal_ltk
                solve( !KU( sign(<'3', t.1, l.1, aenc(<'4', $U, ~n2>, pk(~ltkS))>,
                                 ~ltkY.1)
                       ) @ #vk.44 )
                  case C_to_S
                  by contradiction /* from formulas */
                next
                  case c_sign
                  solve( !KU( aenc(<'4', $U, ~n2>, pk(~ltkS)) ) @ #vk.46 )
                    case C_to_S
                    by contradiction /* from formulas */
                  next
                    case c_aenc
                    solve( !KU( ~n2 ) @ #vk.53 )
                      case C_to_S
                      solve( !KU( ~ltkY ) @ #vk.54 )
                        case Reveal_ltk
                        by contradiction /* from formulas */
                      qed
                    next
                      case S_to_C
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case c_sign
              solve( !KU( ~ltkAS ) @ #vk.47 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_inc
            solve( !KU( ~n2 ) @ #vk.22 )
              case C_to_S
              solve( !KU( ~ltkY ) @ #vk.23 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            next
              case S_to_C
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_pk
          solve( !KU( ~ltkC ) @ #vk.22 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( ~ltkAS ) @ #vk.19 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

lemma AUTO_typing [sources]:
  all-traces
  "((⊤) ∧
    (∀ x m #i.
      (AUTO_IN_TERM_0_0_1_1_1_1_0_0_1_1__S_to_AS( m, x ) @ #i) ⇒
      ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
       (∃ #j.
         (AUTO_OUT_TERM_0_0_1_1_1_1_0_0_1_1__S_to_AS( m ) @ #j) ∧ (#j < #i))))) ∧
   (∀ x m #i.
     (AUTO_IN_TERM_0_0_1_1_1_1_1_0_1_1_1_0_1_1__S_to_AS( m, x ) @ #i) ⇒
     ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j.
        (AUTO_OUT_TERM_0_0_1_1_1_1_1_0_1_1_1_0_1_1__S_to_AS( m ) @ #j) ∧
        (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ x m #i.
    (AUTO_IN_TERM_0_0_1_1_1_1_0_0_1_1__S_to_AS( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j.
      (AUTO_OUT_TERM_0_0_1_1_1_1_0_0_1_1__S_to_AS( m ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ x m #i.
    (AUTO_IN_TERM_0_0_1_1_1_1_1_0_1_1_1_0_1_1__S_to_AS( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j.
      (AUTO_OUT_TERM_0_0_1_1_1_1_1_0_1_1_1_0_1_1__S_to_AS( m ) @ #j)
     ⇒
      ¬(#j < #i))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ x m #i.
           (AUTO_IN_TERM_0_0_1_1_1_1_0_0_1_1__S_to_AS( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j.
             (AUTO_OUT_TERM_0_0_1_1_1_1_0_0_1_1__S_to_AS( m ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ x m #i.
           (AUTO_IN_TERM_0_0_1_1_1_1_1_0_1_1_1_0_1_1__S_to_AS( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j.
             (AUTO_OUT_TERM_0_0_1_1_1_1_1_0_1_1_1_0_1_1__S_to_AS( m ) @ #j)
            ⇒
             ¬(#j < #i))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_TERM_0_0_1_1_1_1_0_0_1_1__S_to_AS( aenc(<'4', c, x>, pk(~ltkS))
              ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !Ltk( $S, ~ltkS ) ▶₁ #i )
        case Register_pk
        solve( !KU( sign(<'3', t, l, aenc(<'4', c, x>, pk(~ltkS))>, ltkC)
               ) @ #vk.10 )
          case C_to_S
          by contradiction /* from formulas */
        next
          case S_to_C
          solve( (∃ #j. (!KU( n2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_0_0_1_1_1_1_0_0_1_1__S_to_AS( aenc(<'4', c.1, n2>,
                                                                     pk(~ltkS.1))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case c_sign
          solve( !KU( aenc(<'4', c, x>, pk(~ltkS)) ) @ #vk.12 )
            case C_to_S
            by contradiction /* from formulas */
          next
            case S_to_C
            solve( (∃ #j. (!KU( n2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_0_0_1_1_1_1_0_0_1_1__S_to_AS( aenc(<'4', c.1, n2>,
                                                                       pk(~ltkS.1))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.7)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case c_aenc
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_TERM_0_0_1_1_1_1_0_0_1_1__S_to_AS( aenc(<'4', c, x>, pk(~ltkS))
              ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !Ltk( $S, ~ltkS ) ▶₁ #i )
        case Register_pk
        solve( !KU( sign(<'3', t, l, aenc(<'4', c, x>, pk(~ltkS))>, ltkC)
               ) @ #vk.10 )
          case C_to_S
          by contradiction /* from formulas */
        next
          case S_to_C
          solve( (∃ #j. (!KU( n2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_0_0_1_1_1_1_0_0_1_1__S_to_AS( aenc(<'4', c.1, n2>,
                                                                     pk(~ltkS.1))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case c_sign
          solve( !KU( aenc(<'4', c, x>, pk(~ltkS)) ) @ #vk.12 )
            case C_to_S
            by contradiction /* from formulas */
          next
            case S_to_C
            solve( (∃ #j. (!KU( n2 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                   (∃ #j.
                     (AUTO_OUT_TERM_0_0_1_1_1_1_0_0_1_1__S_to_AS( aenc(<'4', c.1, n2>,
                                                                       pk(~ltkS.1))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.7)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case c_aenc
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  qed
qed

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/features/auto-sources/spore/SpliceAS_3.spthy

------------------------------------------------------------------------------
analyzed: examples/features/auto-sources/spore/SpliceAS_3.spthy

  output:          examples/features/auto-sources/spore/SpliceAS_3.spthy.tmp
  processing time: 7.22502624s
  executability (exists-trace): verified (21 steps)
  Secrecy (all-traces): verified (39 steps)
  injectiveagreement_B (all-traces): falsified - found trace (22 steps)
  agreement_B (all-traces): verified (14 steps)
  injectiveagreement_A (all-traces): verified (63 steps)
  agreement_A (all-traces): verified (51 steps)
  AUTO_typing (all-traces): verified (34 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/features/auto-sources/spore/SpliceAS_3.spthy

  output:          examples/features/auto-sources/spore/SpliceAS_3.spthy.tmp
  processing time: 7.22502624s
  executability (exists-trace): verified (21 steps)
  Secrecy (all-traces): verified (39 steps)
  injectiveagreement_B (all-traces): falsified - found trace (22 steps)
  agreement_B (all-traces): verified (14 steps)
  injectiveagreement_A (all-traces): verified (63 steps)
  agreement_A (all-traces): verified (51 steps)
  AUTO_typing (all-traces): verified (34 steps)

==============================================================================
*/
