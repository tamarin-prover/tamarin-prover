theory PKCS11_siv begin

// Function signature and definition of the equational theory E

builtins: multiset
functions: epsilon/0, fst/1, getIV/1, getTag/1, kdf/2, pair/2, sdec/4,
           sdecSuc/4, senc/4, snd/1, true/0
equations:
    fst(<x.1, x.2>) = x.1,
    getIV(senc(k, iv, t, m)) = iv,
    getTag(senc(k, iv, t, m)) = t,
    sdec(k, iv, t, senc(k, iv, t, m)) = m,
    sdecSuc(k, iv, t, senc(k, iv, t, m)) = true,
    snd(<x.1, x.2>) = x.2



/* looping facts with injective instances: DCtr/2 */

restriction UniqueInteger:
  "∀ n #i #j. ((IsInteger( n ) @ #i) ∧ (IsInteger( n ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction Lesser:
  "∀ x y #i. (LessThan( x, y ) @ #i) ⇒ (∃ z. (x+z) = y)"

restriction TrueIsTrue:
  "∀ x #i. (IsTrue( x ) @ #i) ⇒ (x = true)"
  // safety formula

restriction Equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction Inequality:
  "∀ x #i. (Neq( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

rule (modulo E) One[color=#aaaaee]:
   [ ] --[ IsInteger( '1' ) ]-> [ !Integer( '1' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Suc[color=#ccccff]:
   [ !Integer( n ), In( n ) ]
  --[ IsInteger( ('1'+n) ) ]->
   [ !Integer( ('1'+n) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Device[color=#ffccff]:
   [ Fr( ~device ), !Integer( '1' ) ]
  --[ CreateDevice( ~device ), DCtrIs( ~device, '1' ) ]->
   [ !Device( ~device ), DCtr( ~device, '1' ), Out( <~device, '1'> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Key[color=#ccff99]:
   [ !Device( device ), !Integer( lvl ), Fr( ~key ), Fr( ~handle ) ]
  --[
  CreateKey( ~key, ~handle, lvl ), InitKey( device, ~key, ~handle, lvl )
  ]->
   [ !Store( device, ~handle, ~key, lvl ), Out( <~handle, lvl> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SharedKey[color=#ccff99]:
   [
   !Integer( lvl ), !Device( ~device ), !Device( ~ecived ), Fr( ~key ),
   Fr( ~h )
   ]
  --[
  CreateKey( ~key, ~h, lvl ), ShareKey( ~key, lvl ),
  InitKey( ~device, ~key, ~h, lvl ), InitKey( ~ecived, ~key, ~h, lvl ),
  LessThan( ('1'+'1'+'1'), lvl )
  ]->
   [
   !Store( ~device, ~h, ~key, lvl ), !Store( ~ecived, ~h, ~key, lvl ),
   Out( <~h, lvl> ), Out( <~h, lvl> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Encrypt[color=#ffcc99]:
   [
   !Integer( ('1'+ctr) ), !Device( device ), !Store( device, H, key, lvl ),
   DCtr( device, ctr ), In( msg )
   ]
  --[
  UseKey( device, key, H, lvl ), DCtrIs( device, ('1'+ctr) ),
  IV( <'1', 'none', device, ctr> )
  ]->
   [
   DCtr( device, ('1'+ctr) ),
   Out( senc(key, <'1', 'none', device, ctr>, epsilon, msg) )
   ]

  // loop breaker: [3]
  /* has exactly the trivial AC variant */

rule (modulo E) Wrap[color=#ff9999]:
   [
   !Integer( ('1'+ctr) ), !Device( device ), !Store( device, h, wk, wl ),
   !Store( device, ~eh, ek, el ), DCtr( device, ctr )
   ]
  --[
  UseKey( device, wk, h, wl ), DCtrIs( device, ('1'+ctr) ),
  IV( <el, ~eh, device, ctr> ), LessThan( el, wl )
  ]->
   [
   DCtr( device, ('1'+ctr) ),
   Out( senc(wk, <el, ~eh, device, ctr>, epsilon, ek) )
   ]

  // loop breaker: [4]
  /* has exactly the trivial AC variant */

rule (modulo E) Decrypt[color=#ffcc99]:
   [ !Device( device ), !Store( device, H, key, lvl ), In( c ) ]
  --[
  UseKey( device, key, H, lvl ),
  Decrypt( sdec(key, getIV(c), epsilon, c) ),
  IsTrue( sdecSuc(key, getIV(c), epsilon, c) ), Eq( fst(getIV(c)), '1' ),
  Eq( fst(snd(getIV(c))), 'none' )
  ]->
   [ Out( sdec(key, getIV(c), epsilon, c) ) ]

  /*
  rule (modulo AC) Decrypt[color=#ffcc99]:
     [ !Device( device ), !Store( device, H, key, lvl ), In( c ) ]
    --[
    UseKey( device, key, H, lvl ), Decrypt( z ), IsTrue( z.1 ),
    Eq( z.2, '1' ), Eq( z.3, 'none' )
    ]->
     [ Out( z ) ]
    variants (modulo AC)
    1. c     = c.14
       key   = key.16
       z     = sdec(key.16, getIV(c.14), epsilon, c.14)
       z.1   = sdecSuc(key.16, getIV(c.14), epsilon, c.14)
       z.2   = fst(getIV(c.14))
       z.3   = fst(snd(getIV(c.14)))
    
    2. c     = senc(key.21, x.37, epsilon, z.23)
       key   = key.21
       z     = z.23
       z.1   = true
       z.2   = fst(x.37)
       z.3   = fst(snd(x.37))
    
    3. c     = senc(key.22, <z.26, x.39>, epsilon, z.24)
       key   = key.22
       z     = z.24
       z.1   = true
       z.2   = z.26
       z.3   = fst(x.39)
    
    4. c     = senc(key.23, <z.27, z.29, x.41>, epsilon, z.25)
       key   = key.23
       z     = z.25
       z.1   = true
       z.2   = z.27
       z.3   = z.29
    
    5. c     = senc(x.38, x.39, x.40, x.41)
       key   = key.23
       z     = sdec(key.23, x.39, epsilon, senc(x.38, x.39, x.40, x.41))
       z.1   = sdecSuc(key.23, x.39, epsilon, senc(x.38, x.39, x.40, x.41))
       z.2   = fst(x.39)
       z.3   = fst(snd(x.39))
    
    6. c     = senc(x.39, <z.28, x.41>, x.42, x.43)
       key   = key.24
       z     = sdec(key.24, <z.28, x.41>, epsilon,
                    senc(x.39, <z.28, x.41>, x.42, x.43))
       z.1   = sdecSuc(key.24, <z.28, x.41>, epsilon,
                       senc(x.39, <z.28, x.41>, x.42, x.43))
       z.2   = z.28
       z.3   = fst(x.41)
    
    7. c     = senc(x.40, <z.29, z.31, x.43>, x.44, x.45)
       key   = key.25
       z     = sdec(key.25, <z.29, z.31, x.43>, epsilon,
                    senc(x.40, <z.29, z.31, x.43>, x.44, x.45))
       z.1   = sdecSuc(key.25, <z.29, z.31, x.43>, epsilon,
                       senc(x.40, <z.29, z.31, x.43>, x.44, x.45))
       z.2   = z.29
       z.3   = z.31
  */

rule (modulo E) Unwrap[color=#ff9999]:
   [
   !Integer( fst(getIV(c)) ), !Device( device ),
   !Store( device, h, wk, wl ), In( c )
   ]
  --[
  UseKey( device, wk, h, wl ),
  ImportKey( device, sdec(wk, getIV(c), epsilon, c), fst(getIV(c)),
             fst(snd(getIV(c)))
  ),
  InitKey( device, sdec(wk, getIV(c), epsilon, c), fst(snd(getIV(c))),
           fst(getIV(c))
  ),
  IsTrue( sdecSuc(wk, getIV(c), epsilon, c) ), Neq( fst(getIV(c)), '1' )
  ]->
   [
   !Store( device, fst(snd(getIV(c))), sdec(wk, getIV(c), epsilon, c),
           fst(getIV(c))
   )
   ]

  // loop breaker: [2]
  /*
  rule (modulo AC) Unwrap[color=#ff9999]:
     [ !Integer( z ), !Device( device ), !Store( device, h, wk, wl ), In( c )
     ]
    --[
    UseKey( device, wk, h, wl ), ImportKey( device, z.2, z, z.1 ),
    InitKey( device, z.2, z.1, z ), IsTrue( z.3 ), Neq( z, '1' )
    ]->
     [ !Store( device, z.1, z.2, z ) ]
    variants (modulo AC)
    1. c     = c.11
       wk    = wk.14
       z     = fst(getIV(c.11))
       z.1   = fst(snd(getIV(c.11)))
       z.2   = sdec(wk.14, getIV(c.11), epsilon, c.11)
       z.3   = sdecSuc(wk.14, getIV(c.11), epsilon, c.11)
    
    2. c     = senc(wk.13, x.20, epsilon, z.17)
       wk    = wk.13
       z     = fst(x.20)
       z.1   = fst(snd(x.20))
       z.2   = z.17
       z.3   = true
    
    3. c     = senc(wk.14, <z.16, x.22>, epsilon, z.18)
       wk    = wk.14
       z     = z.16
       z.1   = fst(x.22)
       z.2   = z.18
       z.3   = true
    
    4. c     = senc(wk.15, <z.17, z.18, x.24>, epsilon, z.19)
       wk    = wk.15
       z     = z.17
       z.1   = z.18
       z.2   = z.19
       z.3   = true
    
    5. c     = senc(x.21, x.22, x.23, x.24)
       wk    = wk.15
       z     = fst(x.22)
       z.1   = fst(snd(x.22))
       z.2   = sdec(wk.15, x.22, epsilon, senc(x.21, x.22, x.23, x.24))
       z.3   = sdecSuc(wk.15, x.22, epsilon, senc(x.21, x.22, x.23, x.24))
    
    6. c     = senc(x.22, <z.18, x.24>, x.25, x.26)
       wk    = wk.16
       z     = z.18
       z.1   = fst(x.24)
       z.2   = sdec(wk.16, <z.18, x.24>, epsilon,
                    senc(x.22, <z.18, x.24>, x.25, x.26))
       z.3   = sdecSuc(wk.16, <z.18, x.24>, epsilon,
                       senc(x.22, <z.18, x.24>, x.25, x.26))
    
    7. c     = senc(x.23, <z.19, z.20, x.26>, x.27, x.28)
       wk    = wk.17
       z     = z.19
       z.1   = z.20
       z.2   = sdec(wk.17, <z.19, z.20, x.26>, epsilon,
                    senc(x.23, <z.19, z.20, x.26>, x.27, x.28))
       z.3   = sdecSuc(wk.17, <z.19, z.20, x.26>, epsilon,
                       senc(x.23, <z.19, z.20, x.26>, x.27, x.28))
    // loop breaker: [2]
  */

rule (modulo E) Derive[color=#ff9990]:
   [ !Device( device ), !Store( device, h, k, ('1'+'1') ), Fr( r ), Fr( nh )
   ]
  --[
  UseKey( device, k, h, ('1'+'1') ),
  InitKey( device, kdf(k, r), nh, ('1'+'1') ),
  CreateKey( kdf(k, r), nh, ('1'+'1') )
  ]->
   [ !Store( device, nh, kdf(k, r), ('1'+'1') ), Out( nh ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

lemma origin [sources]:
  all-traces
  "(∀ m #decrypt.
     (Decrypt( m ) @ #decrypt) ⇒
     (∃ #mKU. (!KU( m ) @ #mKU) ∧ (#mKU < #decrypt))) ∧
   (∀ d k l h #keyImport.
     (ImportKey( d, k, l, h ) @ #keyImport) ⇒
     ((∃ #keyCreate.
        (CreateKey( k, h, l ) @ #keyCreate) ∧ (#keyCreate < #keyImport)) ∨
      (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (#keyKU < #keyImport))))"
/*
guarded formula characterizing all counter-examples:
"((∃ m #decrypt.
    (Decrypt( m ) @ #decrypt)
   ∧
    ∀ #mKU. (!KU( m ) @ #mKU) ⇒ ¬(#mKU < #decrypt)) ∨
  (∃ d k l h #keyImport.
    (ImportKey( d, k, l, h ) @ #keyImport)
   ∧
    (∀ #keyCreate.
      (CreateKey( k, h, l ) @ #keyCreate) ⇒ ¬(#keyCreate < #keyImport)) ∧
    (∀ #keyKU. (!KU( k ) @ #keyKU) ⇒ ¬(#keyKU < #keyImport))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ m #decrypt.
           (Decrypt( m ) @ #decrypt)
          ∧
           ∀ #mKU. (!KU( m ) @ #mKU) ⇒ ¬(#mKU < #decrypt))  ∥
         (∃ d k l h #keyImport.
           (ImportKey( d, k, l, h ) @ #keyImport)
          ∧
           (∀ #keyCreate.
             (CreateKey( k, h, l ) @ #keyCreate) ⇒ ¬(#keyCreate < #keyImport)) ∧
           (∀ #keyKU. (!KU( k ) @ #keyKU) ⇒ ¬(#keyKU < #keyImport))) )
    case case_1
    solve( ((∀ m #decrypt.
              (Decrypt( m ) @ #decrypt)
             ⇒
              ((last(#decrypt)) ∨
               (∃ #mKU. (!KU( m ) @ #mKU) ∧ (¬(last(#mKU))) ∧ (#mKU < #decrypt)))) ∧
            (∀ d k l h #keyImport.
              (ImportKey( d, k, l, h ) @ #keyImport)
             ⇒
              ((last(#keyImport)) ∨
               (∃ #keyCreate.
                 (CreateKey( k, h, l ) @ #keyCreate)
                ∧
                 (¬(last(#keyCreate))) ∧ (#keyCreate < #keyImport)) ∨
               (∃ #keyKU.
                 (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #keyImport)))))  ∥
           (∃ x y #i.
             (LessThan( x, y ) @ #i) ∧ (¬(last(#i))) ∧ (∀ z. ((x+z) = y) ⇒ ⊥)) )
      case case_1
      solve( (last(#decrypt))  ∥
             (∃ #mKU. (!KU( m ) @ #mKU) ∧ (¬(last(#mKU))) ∧ (#mKU < #decrypt)) )
        case case_1
        solve( !Device( device ) ▶₀ #decrypt )
          case Device
          solve( !Store( ~device, H, key, lvl ) ▶₁ #decrypt )
            case Derive
            solve( !KU( senc(kdf(k, ~n.1), <'1', 'none', x>, epsilon, m) ) @ #vk )
              case Decrypt_case_1
              by contradiction /* cyclic */
            next
              case Decrypt_case_2
              by contradiction /* cyclic */
            next
              case Decrypt_case_3
              by contradiction /* cyclic */
            next
              case Decrypt_case_4
              by contradiction /* cyclic */
            next
              case Decrypt_case_5
              by contradiction /* cyclic */
            next
              case Decrypt_case_6
              by contradiction /* cyclic */
            next
              case Decrypt_case_7
              by contradiction /* cyclic */
            next
              case Encrypt_case_1
              by contradiction /* from formulas */
            next
              case Encrypt_case_2
              by contradiction /* from formulas */
            next
              case Wrap_case_01
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.4, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_02
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.4, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_03
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.4, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_04
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.4, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_05
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_06
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_07
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_08
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_09
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.4, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_10
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.4, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_11
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.4, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_12
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_13
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_14
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_15
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_16
              solve( (∃ #keyCreate.
                       (CreateKey( wk, h.1, ('1'+z+n.2) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                     (∃ #keyKU. (!KU( wk ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                case case_1
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( wk, h.1, ('1'+z+n.2) ) @ #keyCreate )
                    case Key
                    solve( !Device( device.1 ) ▶₀ #keyCreate )
                      case Device
                      solve( !Integer( ('1'+z+n.2) ) ▶₁ #keyCreate )
                        case Suc
                        solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate.1 )
                          case Derive
                          by solve( (#vr.4, 0) ~~> (#vk, 0) )
                        next
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_1
                    solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_2
                    solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_3
                    solve( !Integer( ('1'+'1'+'1'+z+x.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_4
                    solve( !Integer( ('1'+'1'+'1'+n.2) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.4, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_5
                    solve( !Integer( ('1'+'1'+'1'+x.1+n.2) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.4, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_6
                    solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.4, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_7
                    solve( !Integer( ('1'+'1'+'1'+x.1+x.2) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case Wrap_case_17
              solve( (∃ #keyCreate.
                       (CreateKey( wk, fst(x.1), ('1'+z+n.2) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                     (∃ #keyKU. (!KU( wk ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                case case_1
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  by solve( CreateKey( wk, fst(x.1), ('1'+z+n.2) ) @ #keyCreate )
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case c_senc
              by contradiction /* from formulas */
            qed
          next
            case Key_case_1
            solve( !KU( senc(~key, <'1', 'none', x>, epsilon, m) ) @ #vk )
              case Decrypt_case_1
              by contradiction /* cyclic */
            next
              case Decrypt_case_2
              by contradiction /* cyclic */
            next
              case Decrypt_case_3
              by contradiction /* cyclic */
            next
              case Decrypt_case_4
              by contradiction /* cyclic */
            next
              case Decrypt_case_5
              by contradiction /* cyclic */
            next
              case Decrypt_case_6
              by contradiction /* cyclic */
            next
              case Decrypt_case_7
              by contradiction /* cyclic */
            next
              case Encrypt_case_1
              by contradiction /* from formulas */
            next
              case Encrypt_case_2
              by contradiction /* from formulas */
            next
              case Wrap_case_01
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.4, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_02
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.4, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_03
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.4, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_04
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.4, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_05
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_06
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_07
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_08
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_09
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.4, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_10
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.4, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_11
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.4, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_12
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_13
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_14
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_15
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_16
              solve( (∃ #keyCreate.
                       (CreateKey( wk, h, ('1'+n+z) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                     (∃ #keyKU. (!KU( wk ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                case case_1
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( wk, h, ('1'+n+z) ) @ #keyCreate )
                    case Key
                    solve( !Device( device.1 ) ▶₀ #keyCreate )
                      case Device
                      solve( !Integer( ('1'+n+z) ) ▶₁ #keyCreate )
                        case Suc
                        solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                          case Derive
                          by solve( (#vr.4, 0) ~~> (#vk, 0) )
                        next
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_1
                    solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.4, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_2
                    solve( !Integer( ('1'+'1'+'1'+n) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.4, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_3
                    solve( !Integer( ('1'+'1'+'1'+n+x.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.4, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_4
                    solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_5
                    solve( !Integer( ('1'+'1'+'1'+z+x.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_6
                    solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_7
                    solve( !Integer( ('1'+'1'+'1'+x.1+x.2) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case Wrap_case_17
              solve( (∃ #keyCreate.
                       (CreateKey( wk, fst(x.1), ('1'+n+z) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                     (∃ #keyKU. (!KU( wk ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                case case_1
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  by solve( CreateKey( wk, fst(x.1), ('1'+n+z) ) @ #keyCreate )
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case c_senc
              by contradiction /* from formulas */
            qed
          next
            case Key_case_2
            solve( !KU( senc(~key, <'1', 'none', x>, epsilon, m) ) @ #vk )
              case Decrypt_case_1
              by contradiction /* cyclic */
            next
              case Decrypt_case_2
              by contradiction /* cyclic */
            next
              case Decrypt_case_3
              by contradiction /* cyclic */
            next
              case Decrypt_case_4
              by contradiction /* cyclic */
            next
              case Decrypt_case_5
              by contradiction /* cyclic */
            next
              case Decrypt_case_6
              by contradiction /* cyclic */
            next
              case Decrypt_case_7
              by contradiction /* cyclic */
            next
              case Encrypt_case_1
              by contradiction /* from formulas */
            next
              case Encrypt_case_2
              by contradiction /* from formulas */
            next
              case Wrap_case_01
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.5, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_02
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.5, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_03
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.5, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_04
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.5, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_05
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_06
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_07
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_08
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_09
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.5, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_10
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.5, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_11
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.5, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_12
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_13
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_14
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_15
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_16
              solve( (∃ #keyCreate.
                       (CreateKey( wk, h, ('1'+z+n.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( wk ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                  case case_1
                  solve( CreateKey( wk, h, ('1'+z+n.1) ) @ #keyCreate )
                    case Key
                    solve( !Device( device.1 ) ▶₀ #keyCreate )
                      case Device
                      solve( !Integer( ('1'+z+n.1) ) ▶₁ #keyCreate )
                        case Suc
                        solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                          case Derive
                          by solve( (#vr.5, 0) ~~> (#vk, 0) )
                        next
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_1
                    solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_2
                    solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_3
                    solve( !Integer( ('1'+'1'+'1'+z+x.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_4
                    solve( !Integer( ('1'+'1'+'1'+n.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.5, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_5
                    solve( !Integer( ('1'+'1'+'1'+n.1+x.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.5, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_6
                    solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.5, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_7
                    solve( !Integer( ('1'+'1'+'1'+x.1+x.2) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.5, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case Wrap_case_17
              solve( (∃ #keyCreate.
                       (CreateKey( wk, fst(x.1), ('1'+z+n.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                     (∃ #keyKU. (!KU( wk ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                case case_1
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                  case case_1
                  by solve( CreateKey( wk, fst(x.1), ('1'+z+n.1) ) @ #keyCreate )
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.5, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case c_senc
              by contradiction /* from formulas */
            qed
          next
            case SharedKey_case_1
            solve( !KU( senc(~key, <'1', 'none', x>, epsilon, m) ) @ #vk )
              case Decrypt_case_1
              by contradiction /* cyclic */
            next
              case Decrypt_case_2
              by contradiction /* cyclic */
            next
              case Decrypt_case_3
              by contradiction /* cyclic */
            next
              case Decrypt_case_4
              by contradiction /* cyclic */
            next
              case Decrypt_case_5
              by contradiction /* cyclic */
            next
              case Decrypt_case_6
              by contradiction /* cyclic */
            next
              case Decrypt_case_7
              by contradiction /* cyclic */
            next
              case Encrypt_case_1
              by contradiction /* from formulas */
            next
              case Encrypt_case_2
              by contradiction /* from formulas */
            next
              case Encrypt_case_3
              by contradiction /* from formulas */
            next
              case Wrap_case_01
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_02
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_03
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_04
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_05
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_06
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_07
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_08
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_09
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_10
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_11
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_12
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_13
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_14
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_15
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_16
              solve( (∃ #keyCreate.
                       (CreateKey( wk, h.1, ('1'+n+z.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( wk ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                       (∃ #keyKU.
                         (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                  case case_1
                  solve( CreateKey( wk, h.1, ('1'+n+z.1) ) @ #keyCreate )
                    case Key
                    solve( !Device( device.1 ) ▶₀ #keyCreate )
                      case Device
                      solve( !Integer( ('1'+n+z.1) ) ▶₁ #keyCreate )
                        case Suc
                        solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                          case Derive
                          by solve( (#vr.6, 0) ~~> (#vk, 0) )
                        next
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_1
                    solve( !Integer( ('1'+'1'+'1'+z.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.6, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_2
                    solve( !Integer( ('1'+'1'+'1'+n) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.6, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_3
                    solve( !Integer( ('1'+'1'+'1'+n+x.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.6, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_4
                    solve( !Integer( ('1'+'1'+'1'+z.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_5
                    solve( !Integer( ('1'+'1'+'1'+x.1+z.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_6
                    solve( !Integer( ('1'+'1'+'1'+z.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_7
                    solve( !Integer( ('1'+'1'+'1'+x.1+x.2) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                       (∃ #keyKU.
                         (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.6, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case Wrap_case_17
              solve( (∃ #keyCreate.
                       (CreateKey( wk, fst(x.1), ('1'+n+z.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( wk ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                       (∃ #keyKU.
                         (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                  case case_1
                  by solve( CreateKey( wk, fst(x.1), ('1'+n+z.1) ) @ #keyCreate )
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                       (∃ #keyKU.
                         (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.6, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case c_senc
              by contradiction /* from formulas */
            qed
          next
            case SharedKey_case_2
            solve( !KU( senc(~key, <'1', 'none', x>, epsilon, m) ) @ #vk )
              case Decrypt_case_1
              by contradiction /* cyclic */
            next
              case Decrypt_case_2
              by contradiction /* cyclic */
            next
              case Decrypt_case_3
              by contradiction /* cyclic */
            next
              case Decrypt_case_4
              by contradiction /* cyclic */
            next
              case Decrypt_case_5
              by contradiction /* cyclic */
            next
              case Decrypt_case_6
              by contradiction /* cyclic */
            next
              case Decrypt_case_7
              by contradiction /* cyclic */
            next
              case Encrypt_case_1
              by contradiction /* from formulas */
            next
              case Encrypt_case_2
              by contradiction /* from formulas */
            next
              case Encrypt_case_3
              by contradiction /* from formulas */
            next
              case Wrap_case_01
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_02
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_03
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_04
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_05
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_06
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_07
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_08
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_09
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_10
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_11
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                  case Derive
                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                next
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_12
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_13
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_14
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_15
              solve( (∃ #keyCreate.
                       (CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                     (∃ #keyKU.
                       (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                case case_1
                solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                  case Key
                  by contradiction /* impossible chain */
                next
                  case SharedKey
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case Wrap_case_16
              solve( (∃ #keyCreate.
                       (CreateKey( wk, h.1, ('1'+n+z.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( wk ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                       (∃ #keyKU.
                         (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                  case case_1
                  solve( CreateKey( wk, h.1, ('1'+n+z.1) ) @ #keyCreate )
                    case Key
                    solve( !Device( device.1 ) ▶₀ #keyCreate )
                      case Device
                      solve( !Integer( ('1'+n+z.1) ) ▶₁ #keyCreate )
                        case Suc
                        solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                          case Derive
                          by solve( (#vr.6, 0) ~~> (#vk, 0) )
                        next
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_1
                    solve( !Integer( ('1'+'1'+'1'+z.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.6, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_2
                    solve( !Integer( ('1'+'1'+'1'+n) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.6, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_3
                    solve( !Integer( ('1'+'1'+'1'+n+x.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.6, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_4
                    solve( !Integer( ('1'+'1'+'1'+z.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_5
                    solve( !Integer( ('1'+'1'+'1'+x.1+z.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_6
                    solve( !Integer( ('1'+'1'+'1'+z.1) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case SharedKey_case_7
                    solve( !Integer( ('1'+'1'+'1'+x.1+x.2) ) ▶₀ #keyCreate )
                      case Suc
                      solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                        case Device
                        solve( !Device( ~ecived ) ▶₂ #keyCreate )
                          case Device
                          solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                       (∃ #keyKU.
                         (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.6, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case Wrap_case_17
              solve( (∃ #keyCreate.
                       (CreateKey( wk, fst(x.1), ('1'+n+z.1) ) @ #keyCreate)
                      ∧
                       (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                     (∃ #keyKU. (!KU( wk ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                case case_1
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                       (∃ #keyKU.
                         (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                  case case_1
                  by solve( CreateKey( wk, fst(x.1), ('1'+n+z.1) ) @ #keyCreate )
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                       (∃ #keyKU.
                         (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.6, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case c_senc
              by contradiction /* from formulas */
            qed
          next
            case Unwrap
            solve( (∃ #keyCreate.
                     (CreateKey( key, H, ('1'+n) ) @ #keyCreate)
                    ∧
                     (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.2))  ∥
                   (∃ #keyKU.
                     (!KU( key ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.2)) )
              case case_1
              solve( CreateKey( key, H, ('1'+n) ) @ #keyCreate )
                case Derive
                solve( !Device( device.1 ) ▶₀ #keyCreate )
                  case Device
                  solve( !KU( senc(kdf(k, ~n.1), <'1', 'none', x>, epsilon, m) ) @ #vk )
                    case Decrypt_case_1
                    by contradiction /* cyclic */
                  next
                    case Decrypt_case_2
                    by contradiction /* cyclic */
                  next
                    case Decrypt_case_3
                    by contradiction /* cyclic */
                  next
                    case Decrypt_case_4
                    by contradiction /* cyclic */
                  next
                    case Decrypt_case_5
                    by contradiction /* cyclic */
                  next
                    case Decrypt_case_6
                    by contradiction /* cyclic */
                  next
                    case Decrypt_case_7
                    by contradiction /* cyclic */
                  next
                    case Encrypt_case_1
                    by contradiction /* from formulas */
                  next
                    case Encrypt_case_2
                    by contradiction /* from formulas */
                  next
                    case Wrap_case_01
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate.1 )
                        case Derive
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      next
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_02
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                        case Derive
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      next
                        case Key
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_03
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate.1 )
                        case Derive
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      next
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_04
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate.1 )
                        case Derive
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      next
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_05
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                        case Key
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_06
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.2) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.1 )
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_07
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate.1 )
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_08
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate.1 )
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_09
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                        case Derive
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      next
                        case Key
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_10
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate.1 )
                        case Derive
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      next
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_11
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate.1 )
                        case Derive
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      next
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_12
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                        case Key
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_13
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.2) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.1 )
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_14
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate.1 )
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_15
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                           (∃ #keyKU.
                             (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate.1 )
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Wrap_case_16
                    solve( (∃ #keyCreate.
                             (CreateKey( wk.1, h.2, ('1'+z+n.2) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                           (∃ #keyKU.
                             (!KU( wk.1 ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                      case case_1
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( wk, h.2, ('1'+z+n.2) ) @ #keyCreate.1 )
                          case Key
                          solve( !Device( device.3 ) ▶₀ #keyCreate.1 )
                            case Device
                            solve( !Integer( ('1'+z+n.2) ) ▶₁ #keyCreate.1 )
                              case Suc
                              solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate.2 )
                                case Derive
                                by solve( (#vr.6, 0) ~~> (#vk, 0) )
                              next
                                case Key
                                by contradiction /* impossible chain */
                              next
                                case SharedKey
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case SharedKey_case_1
                          solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate.1 )
                            case Suc
                            solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                              case Device
                              solve( !Device( ~ecived ) ▶₂ #keyCreate.1 )
                                case Device
                                solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate.2 )
                                  case Key
                                  by contradiction /* impossible chain */
                                next
                                  case SharedKey
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            qed
                          qed
                        next
                          case SharedKey_case_2
                          solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate.1 )
                            case Suc
                            solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                              case Device
                              solve( !Device( ~ecived ) ▶₂ #keyCreate.1 )
                                case Device
                                solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.2 )
                                  case Key
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            qed
                          qed
                        next
                          case SharedKey_case_3
                          solve( !Integer( ('1'+'1'+'1'+z+x.1) ) ▶₀ #keyCreate.1 )
                            case Suc
                            solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                              case Device
                              solve( !Device( ~ecived ) ▶₂ #keyCreate.1 )
                                case Device
                                solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.2 )
                                  case Key
                                  by contradiction /* impossible chain */
                                next
                                  case SharedKey
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            qed
                          qed
                        next
                          case SharedKey_case_4
                          solve( !Integer( ('1'+'1'+'1'+n.2) ) ▶₀ #keyCreate.1 )
                            case Suc
                            solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                              case Device
                              solve( !Device( ~ecived ) ▶₂ #keyCreate.1 )
                                case Device
                                solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate.2 )
                                  case Derive
                                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                                next
                                  case Key
                                  by contradiction /* impossible chain */
                                next
                                  case SharedKey
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            qed
                          qed
                        next
                          case SharedKey_case_5
                          solve( !Integer( ('1'+'1'+'1'+x.1+n.2) ) ▶₀ #keyCreate.1 )
                            case Suc
                            solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                              case Device
                              solve( !Device( ~ecived ) ▶₂ #keyCreate.1 )
                                case Device
                                solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate.2 )
                                  case Derive
                                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                                next
                                  case Key
                                  by contradiction /* impossible chain */
                                next
                                  case SharedKey
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            qed
                          qed
                        next
                          case SharedKey_case_6
                          solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate.1 )
                            case Suc
                            solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                              case Device
                              solve( !Device( ~ecived ) ▶₂ #keyCreate.1 )
                                case Device
                                solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.2 )
                                  case Derive
                                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                                next
                                  case Key
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            qed
                          qed
                        next
                          case SharedKey_case_7
                          solve( !Integer( ('1'+'1'+'1'+x.1+x.2) ) ▶₀ #keyCreate.1 )
                            case Suc
                            solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                              case Device
                              solve( !Device( ~ecived ) ▶₂ #keyCreate.1 )
                                case Device
                                solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate.2 )
                                  case Key
                                  by contradiction /* impossible chain */
                                next
                                  case SharedKey
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_2
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate.1 )
                          case Derive
                          by solve( (#vr.6, 0) ~~> (#vk, 0) )
                        next
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Wrap_case_17
                    solve( (∃ #keyCreate.
                             (CreateKey( wk.1, fst(x.2), ('1'+z+n.2) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                           (∃ #keyKU.
                             (!KU( wk.1 ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                      case case_1
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        by solve( CreateKey( wk, fst(x.2), ('1'+z+n.2) ) @ #keyCreate.1 )
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_2
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+n.2) ) @ #keyCreate.1 )
                          case Derive
                          by solve( (#vr.6, 0) ~~> (#vk, 0) )
                        next
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case c_senc
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Key
                solve( !Device( device.1 ) ▶₀ #keyCreate )
                  case Device
                  solve( !Integer( ('1'+n) ) ▶₁ #keyCreate )
                    case Suc
                    solve( !KU( senc(~key, <'1', 'none', x>, epsilon, m) ) @ #vk )
                      case Decrypt_case_1
                      by contradiction /* cyclic */
                    next
                      case Decrypt_case_2
                      by contradiction /* cyclic */
                    next
                      case Decrypt_case_3
                      by contradiction /* cyclic */
                    next
                      case Decrypt_case_4
                      by contradiction /* cyclic */
                    next
                      case Decrypt_case_5
                      by contradiction /* cyclic */
                    next
                      case Decrypt_case_6
                      by contradiction /* cyclic */
                    next
                      case Decrypt_case_7
                      by contradiction /* cyclic */
                    next
                      case Encrypt_case_1
                      by contradiction /* from formulas */
                    next
                      case Encrypt_case_2
                      by contradiction /* from formulas */
                    next
                      case Wrap_case_01
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                          case Derive
                          by solve( (#vr.6, 0) ~~> (#vk, 0) )
                        next
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_02
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                          case Derive
                          by solve( (#vr.6, 0) ~~> (#vk, 0) )
                        next
                          case Key
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_03
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                          case Derive
                          by solve( (#vr.6, 0) ~~> (#vk, 0) )
                        next
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_04
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                          case Derive
                          by solve( (#vr.6, 0) ~~> (#vk, 0) )
                        next
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_05
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                          case Key
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_06
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.2) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.1 )
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_07
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate.1 )
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_08
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate.1 )
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_09
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                          case Derive
                          by solve( (#vr.6, 0) ~~> (#vk, 0) )
                        next
                          case Key
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_10
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                          case Derive
                          by solve( (#vr.6, 0) ~~> (#vk, 0) )
                        next
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_11
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                          case Derive
                          by solve( (#vr.6, 0) ~~> (#vk, 0) )
                        next
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_12
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                          case Key
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_13
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.2) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.1 )
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_14
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate.1 )
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_15
                      solve( (∃ #keyCreate.
                               (CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                             (∃ #keyKU.
                               (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                        case case_1
                        solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate.1 )
                          case Key
                          by contradiction /* impossible chain */
                        next
                          case SharedKey
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Wrap_case_16
                      solve( (∃ #keyCreate.
                               (CreateKey( wk.1, h.1, ('1'+z+n.1) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                             (∃ #keyKU.
                               (!KU( wk.1 ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                        case case_1
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                          case case_1
                          solve( CreateKey( wk, h.1, ('1'+z+n.1) ) @ #keyCreate.1 )
                            case Key
                            solve( !Device( device.3 ) ▶₀ #keyCreate.1 )
                              case Device
                              solve( !Integer( ('1'+z+n.1) ) ▶₁ #keyCreate.1 )
                                case Suc
                                solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.2 )
                                  case Derive
                                  by solve( (#vr.6, 0) ~~> (#vk, 0) )
                                next
                                  case Key
                                  by contradiction /* impossible chain */
                                next
                                  case SharedKey
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            qed
                          next
                            case SharedKey_case_1
                            solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate.1 )
                              case Suc
                              solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                                case Device
                                solve( !Device( ~ecived ) ▶₂ #keyCreate.1 )
                                  case Device
                                  solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate.2 )
                                    case Key
                                    by contradiction /* impossible chain */
                                  next
                                    case SharedKey
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case SharedKey_case_2
                            solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate.1 )
                              case Suc
                              solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                                case Device
                                solve( !Device( ~ecived ) ▶₂ #keyCreate.1 )
                                  case Device
                                  solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.2 )
                                    case Key
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case SharedKey_case_3
                            solve( !Integer( ('1'+'1'+'1'+z+x.1) ) ▶₀ #keyCreate.1 )
                              case Suc
                              solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                                case Device
                                solve( !Device( ~ecived ) ▶₂ #keyCreate.1 )
                                  case Device
                                  solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.2 )
                                    case Key
                                    by contradiction /* impossible chain */
                                  next
                                    case SharedKey
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case SharedKey_case_4
                            solve( !Integer( ('1'+'1'+'1'+n.1) ) ▶₀ #keyCreate.1 )
                              case Suc
                              solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                                case Device
                                solve( !Device( ~ecived ) ▶₂ #keyCreate.1 )
                                  case Device
                                  solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.2 )
                                    case Derive
                                    by solve( (#vr.6, 0) ~~> (#vk, 0) )
                                  next
                                    case Key
                                    by contradiction /* impossible chain */
                                  next
                                    case SharedKey
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case SharedKey_case_5
                            solve( !Integer( ('1'+'1'+'1'+n.1+x.1) ) ▶₀ #keyCreate.1 )
                              case Suc
                              solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                                case Device
                                solve( !Device( ~ecived ) ▶₂ #keyCreate.1 )
                                  case Device
                                  solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.2 )
                                    case Derive
                                    by solve( (#vr.6, 0) ~~> (#vk, 0) )
                                  next
                                    case Key
                                    by contradiction /* impossible chain */
                                  next
                                    case SharedKey
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case SharedKey_case_6
                            solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate.1 )
                              case Suc
                              solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                                case Device
                                solve( !Device( ~ecived ) ▶₂ #keyCreate.1 )
                                  case Device
                                  solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.2 )
                                    case Derive
                                    by solve( (#vr.6, 0) ~~> (#vk, 0) )
                                  next
                                    case Key
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case SharedKey_case_7
                            solve( !Integer( ('1'+'1'+'1'+x.1+x.2) ) ▶₀ #keyCreate.1 )
                              case Suc
                              solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                                case Device
                                solve( !Device( ~ecived ) ▶₂ #keyCreate.1 )
                                  case Device
                                  solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate.2 )
                                    case Key
                                    by contradiction /* impossible chain */
                                  next
                                    case SharedKey
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case case_2
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.6, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Wrap_case_17
                      solve( (∃ #keyCreate.
                               (CreateKey( wk.1, fst(x.2), ('1'+z+n.1) ) @ #keyCreate)
                              ∧
                               (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                             (∃ #keyKU.
                               (!KU( wk.1 ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                        case case_1
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                          case case_1
                          by solve( CreateKey( wk, fst(x.2), ('1'+z+n.1) ) @ #keyCreate.1 )
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case case_2
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.6, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case c_senc
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case SharedKey
                solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                  case Suc
                  solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                    case Device
                    solve( !Device( ~ecived ) ▶₂ #keyCreate )
                      case Device
                      solve( !KU( senc(~key, <'1', 'none', x>, epsilon, m) ) @ #vk )
                        case Decrypt_case_1
                        by contradiction /* cyclic */
                      next
                        case Decrypt_case_2
                        by contradiction /* cyclic */
                      next
                        case Decrypt_case_3
                        by contradiction /* cyclic */
                      next
                        case Decrypt_case_4
                        by contradiction /* cyclic */
                      next
                        case Decrypt_case_5
                        by contradiction /* cyclic */
                      next
                        case Decrypt_case_6
                        by contradiction /* cyclic */
                      next
                        case Decrypt_case_7
                        by contradiction /* cyclic */
                      next
                        case Encrypt_case_1
                        by contradiction /* from formulas */
                      next
                        case Encrypt_case_2
                        by contradiction /* from formulas */
                      next
                        case Encrypt_case_3
                        by contradiction /* from formulas */
                      next
                        case Wrap_case_01
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.7, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_02
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.7, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_03
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.7, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_04
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.7, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_05
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_06
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.2) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_07
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_08
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_09
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.7, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_10
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.7, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_11
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.7, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_12
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_13
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.2) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_14
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_15
                        solve( (∃ #keyCreate.
                                 (CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                               (∃ #keyKU.
                                 (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                          case case_1
                          solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate.1 )
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Wrap_case_16
                        solve( (∃ #keyCreate.
                                 (CreateKey( wk.1, h.2, ('1'+n+z.1) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                               (∃ #keyKU.
                                 (!KU( wk.1 ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                          case case_1
                          solve( (∃ #keyCreate.
                                   (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                                  ∧
                                   (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                                 (∃ #keyKU.
                                   (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                            case case_1
                            solve( CreateKey( wk, h.2, ('1'+n+z.1) ) @ #keyCreate.1 )
                              case Key
                              solve( !Device( device.3 ) ▶₀ #keyCreate.1 )
                                case Device
                                solve( !Integer( ('1'+n+z.1) ) ▶₁ #keyCreate.1 )
                                  case Suc
                                  solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.2 )
                                    case Derive
                                    by solve( (#vr.7, 0) ~~> (#vk, 0) )
                                  next
                                    case Key
                                    by contradiction /* impossible chain */
                                  next
                                    case SharedKey
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            next
                              case SharedKey_case_1
                              solve( !Integer( ('1'+'1'+'1'+z.1) ) ▶₀ #keyCreate.1 )
                                case Suc
                                solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                                  case Device
                                  solve( !Device( ~ecived.1 ) ▶₂ #keyCreate.1 )
                                    case Device
                                    solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.2 )
                                      case Derive
                                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                                    next
                                      case Key
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case SharedKey_case_2
                              solve( !Integer( ('1'+'1'+'1'+n) ) ▶₀ #keyCreate.1 )
                                case Suc
                                solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                                  case Device
                                  solve( !Device( ~ecived.1 ) ▶₂ #keyCreate.1 )
                                    case Device
                                    solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.2 )
                                      case Derive
                                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                                    next
                                      case Key
                                      by contradiction /* impossible chain */
                                    next
                                      case SharedKey
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case SharedKey_case_3
                              solve( !Integer( ('1'+'1'+'1'+n+x.1) ) ▶₀ #keyCreate.1 )
                                case Suc
                                solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                                  case Device
                                  solve( !Device( ~ecived.1 ) ▶₂ #keyCreate.1 )
                                    case Device
                                    solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.2 )
                                      case Derive
                                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                                    next
                                      case Key
                                      by contradiction /* impossible chain */
                                    next
                                      case SharedKey
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case SharedKey_case_4
                              solve( !Integer( ('1'+'1'+'1'+z.1) ) ▶₀ #keyCreate.1 )
                                case Suc
                                solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                                  case Device
                                  solve( !Device( ~ecived.1 ) ▶₂ #keyCreate.1 )
                                    case Device
                                    solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.2 )
                                      case Key
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case SharedKey_case_5
                              solve( !Integer( ('1'+'1'+'1'+x.1+z.1) ) ▶₀ #keyCreate.1 )
                                case Suc
                                solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                                  case Device
                                  solve( !Device( ~ecived.1 ) ▶₂ #keyCreate.1 )
                                    case Device
                                    solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.2 )
                                      case Key
                                      by contradiction /* impossible chain */
                                    next
                                      case SharedKey
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case SharedKey_case_6
                              solve( !Integer( ('1'+'1'+'1'+z.1) ) ▶₀ #keyCreate.1 )
                                case Suc
                                solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                                  case Device
                                  solve( !Device( ~ecived.1 ) ▶₂ #keyCreate.1 )
                                    case Device
                                    solve( CreateKey( ek, ~eh, ('1'+'1'+z.1) ) @ #keyCreate.2 )
                                      case Key
                                      by contradiction /* impossible chain */
                                    next
                                      case SharedKey
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case SharedKey_case_7
                              solve( !Integer( ('1'+'1'+'1'+x.1+x.2) ) ▶₀ #keyCreate.1 )
                                case Suc
                                solve( !Device( ~device.3 ) ▶₁ #keyCreate.1 )
                                  case Device
                                  solve( !Device( ~ecived.1 ) ▶₂ #keyCreate.1 )
                                    case Device
                                    solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate.2 )
                                      case Key
                                      by contradiction /* impossible chain */
                                    next
                                      case SharedKey
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case case_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case case_2
                          solve( (∃ #keyCreate.
                                   (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                                  ∧
                                   (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                                 (∃ #keyKU.
                                   (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                            case case_1
                            solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                              case Derive
                              by solve( (#vr.7, 0) ~~> (#vk, 0) )
                            next
                              case Key
                              by contradiction /* impossible chain */
                            next
                              case SharedKey
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Wrap_case_17
                        solve( (∃ #keyCreate.
                                 (CreateKey( wk.1, fst(x.2), ('1'+n+z.1) ) @ #keyCreate)
                                ∧
                                 (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.10))  ∥
                               (∃ #keyKU.
                                 (!KU( wk.1 ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.10)) )
                          case case_1
                          solve( (∃ #keyCreate.
                                   (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                                  ∧
                                   (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                                 (∃ #keyKU.
                                   (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                            case case_1
                            by solve( CreateKey( wk, fst(x.2), ('1'+n+z.1) ) @ #keyCreate.1 )
                          next
                            case case_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case case_2
                          solve( (∃ #keyCreate.
                                   (CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate)
                                  ∧
                                   (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.11))  ∥
                                 (∃ #keyKU.
                                   (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.11)) )
                            case case_1
                            solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                              case Derive
                              by solve( (#vr.7, 0) ~~> (#vk, 0) )
                            next
                              case Key
                              by contradiction /* impossible chain */
                            next
                              case SharedKey
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case c_senc
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( senc(key, <'1', 'none', x>, epsilon, m) ) @ #vk )
                  case Decrypt_case_1
                  by contradiction /* cyclic */
                next
                  case Decrypt_case_2
                  by contradiction /* cyclic */
                next
                  case Decrypt_case_3
                  by contradiction /* cyclic */
                next
                  case Decrypt_case_4
                  by contradiction /* cyclic */
                next
                  case Decrypt_case_5
                  by contradiction /* cyclic */
                next
                  case Decrypt_case_6
                  by contradiction /* cyclic */
                next
                  case Decrypt_case_7
                  by contradiction /* cyclic */
                next
                  case Encrypt_case_1
                  by contradiction /* from formulas */
                next
                  case Encrypt_case_2
                  by contradiction /* from formulas */
                next
                  case Encrypt_case_3
                  by contradiction /* from formulas */
                next
                  case Encrypt_case_4
                  by contradiction /* from formulas */
                next
                  case Encrypt_case_5
                  by contradiction /* from formulas */
                next
                  case Encrypt_case_6
                  by contradiction /* from formulas */
                next
                  case Wrap_case_01
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.5, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_02
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.5, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_03
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.5, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_04
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.5, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_05
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_06
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.2) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_07
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_08
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_09
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.5, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_10
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.5, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_11
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.5, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_12
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_13
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.2) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_14
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_15
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_16
                  solve( (∃ #keyCreate.
                           (CreateKey( wk.1, h.1, ('1'+z+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                         (∃ #keyKU.
                           (!KU( wk.1 ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                    case case_1
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                           (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                      case case_1
                      solve( CreateKey( wk, h.1, ('1'+z+n.1) ) @ #keyCreate )
                        case Key
                        solve( !Device( device.1 ) ▶₀ #keyCreate )
                          case Device
                          solve( !Integer( ('1'+z+n.1) ) ▶₁ #keyCreate )
                            case Suc
                            solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                              case Derive
                              by solve( (#vr.5, 0) ~~> (#vk, 0) )
                            next
                              case Key
                              by contradiction /* impossible chain */
                            next
                              case SharedKey
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case SharedKey_case_1
                        solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                          case Suc
                          solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                            case Device
                            solve( !Device( ~ecived ) ▶₂ #keyCreate )
                              case Device
                              solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate.1 )
                                case Key
                                by contradiction /* impossible chain */
                              next
                                case SharedKey
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        qed
                      next
                        case SharedKey_case_2
                        solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                          case Suc
                          solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                            case Device
                            solve( !Device( ~ecived ) ▶₂ #keyCreate )
                              case Device
                              solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                                case Key
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        qed
                      next
                        case SharedKey_case_3
                        solve( !Integer( ('1'+'1'+'1'+z+x.1) ) ▶₀ #keyCreate )
                          case Suc
                          solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                            case Device
                            solve( !Device( ~ecived ) ▶₂ #keyCreate )
                              case Device
                              solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate.1 )
                                case Key
                                by contradiction /* impossible chain */
                              next
                                case SharedKey
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        qed
                      next
                        case SharedKey_case_4
                        solve( !Integer( ('1'+'1'+'1'+n.1) ) ▶₀ #keyCreate )
                          case Suc
                          solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                            case Device
                            solve( !Device( ~ecived ) ▶₂ #keyCreate )
                              case Device
                              solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                                case Derive
                                by solve( (#vr.5, 0) ~~> (#vk, 0) )
                              next
                                case Key
                                by contradiction /* impossible chain */
                              next
                                case SharedKey
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        qed
                      next
                        case SharedKey_case_5
                        solve( !Integer( ('1'+'1'+'1'+n.1+x.1) ) ▶₀ #keyCreate )
                          case Suc
                          solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                            case Device
                            solve( !Device( ~ecived ) ▶₂ #keyCreate )
                              case Device
                              solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                                case Derive
                                by solve( (#vr.5, 0) ~~> (#vk, 0) )
                              next
                                case Key
                                by contradiction /* impossible chain */
                              next
                                case SharedKey
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        qed
                      next
                        case SharedKey_case_6
                        solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                          case Suc
                          solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                            case Device
                            solve( !Device( ~ecived ) ▶₂ #keyCreate )
                              case Device
                              solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                                case Derive
                                by solve( (#vr.5, 0) ~~> (#vk, 0) )
                              next
                                case Key
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        qed
                      next
                        case SharedKey_case_7
                        solve( !Integer( ('1'+'1'+'1'+x.1+x.2) ) ▶₀ #keyCreate )
                          case Suc
                          solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                            case Device
                            solve( !Device( ~ecived ) ▶₂ #keyCreate )
                              case Device
                              solve( CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate.1 )
                                case Key
                                by contradiction /* impossible chain */
                              next
                                case SharedKey
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_2
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                           (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                        case Derive
                        by solve( (#vr.5, 0) ~~> (#vk, 0) )
                      next
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Wrap_case_17
                  solve( (∃ #keyCreate.
                           (CreateKey( wk.1, fst(x.2), ('1'+z+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                         (∃ #keyKU.
                           (!KU( wk.1 ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                    case case_1
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                           (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                      case case_1
                      by solve( CreateKey( wk, fst(x.2), ('1'+z+n.1) ) @ #keyCreate )
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_2
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                           (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                        case Derive
                        by solve( (#vr.5, 0) ~~> (#vk, 0) )
                      next
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case c_senc
                  by contradiction /* from formulas */
                qed
              next
                case split_case_2
                solve( !KU( senc(key, <'1', 'none', x.1>, epsilon, m) ) @ #vk )
                  case Decrypt_case_1
                  by contradiction /* cyclic */
                next
                  case Decrypt_case_2
                  by contradiction /* cyclic */
                next
                  case Decrypt_case_3
                  by contradiction /* cyclic */
                next
                  case Decrypt_case_4
                  by contradiction /* cyclic */
                next
                  case Decrypt_case_5
                  by contradiction /* cyclic */
                next
                  case Decrypt_case_6
                  by contradiction /* cyclic */
                next
                  case Decrypt_case_7
                  by contradiction /* cyclic */
                next
                  case Encrypt_case_1
                  by contradiction /* from formulas */
                next
                  case Encrypt_case_2
                  by contradiction /* from formulas */
                next
                  case Encrypt_case_3
                  by contradiction /* from formulas */
                next
                  case Encrypt_case_4
                  by contradiction /* from formulas */
                next
                  case Encrypt_case_5
                  by contradiction /* from formulas */
                next
                  case Encrypt_case_6
                  by contradiction /* from formulas */
                next
                  case Wrap_case_01
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.5, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_02
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.5, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_03
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.5, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_04
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.5, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_05
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_06
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.2) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.2) ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_07
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_08
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_09
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.5, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_10
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.5, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_11
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.5, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_12
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_13
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.2) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.2) ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_14
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_15
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+'1'+x.2) ) @ #keyCreate )
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Wrap_case_16
                  solve( (∃ #keyCreate.
                           (CreateKey( wk.1, h.1, ('1'+z+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                         (∃ #keyKU.
                           (!KU( wk.1 ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                    case case_1
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                           (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                      case case_1
                      solve( CreateKey( wk, h.1, ('1'+z+n.1) ) @ #keyCreate )
                        case Key
                        solve( !Device( device.1 ) ▶₀ #keyCreate )
                          case Device
                          solve( !Integer( ('1'+z+n.1) ) ▶₁ #keyCreate )
                            case Suc
                            solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                              case Derive
                              by solve( (#vr.5, 0) ~~> (#vk, 0) )
                            next
                              case Key
                              by contradiction /* impossible chain */
                            next
                              case SharedKey
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case SharedKey_case_1
                        solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                          case Suc
                          solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                            case Device
                            solve( !Device( ~ecived ) ▶₂ #keyCreate )
                              case Device
                              solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate.1 )
                                case Key
                                by contradiction /* impossible chain */
                              next
                                case SharedKey
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        qed
                      next
                        case SharedKey_case_2
                        solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                          case Suc
                          solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                            case Device
                            solve( !Device( ~ecived ) ▶₂ #keyCreate )
                              case Device
                              solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                                case Key
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        qed
                      next
                        case SharedKey_case_3
                        solve( !Integer( ('1'+'1'+'1'+z+x.2) ) ▶₀ #keyCreate )
                          case Suc
                          solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                            case Device
                            solve( !Device( ~ecived ) ▶₂ #keyCreate )
                              case Device
                              solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.2) ) @ #keyCreate.1 )
                                case Key
                                by contradiction /* impossible chain */
                              next
                                case SharedKey
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        qed
                      next
                        case SharedKey_case_4
                        solve( !Integer( ('1'+'1'+'1'+n.1) ) ▶₀ #keyCreate )
                          case Suc
                          solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                            case Device
                            solve( !Device( ~ecived ) ▶₂ #keyCreate )
                              case Device
                              solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                                case Derive
                                by solve( (#vr.5, 0) ~~> (#vk, 0) )
                              next
                                case Key
                                by contradiction /* impossible chain */
                              next
                                case SharedKey
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        qed
                      next
                        case SharedKey_case_5
                        solve( !Integer( ('1'+'1'+'1'+n.1+x.2) ) ▶₀ #keyCreate )
                          case Suc
                          solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                            case Device
                            solve( !Device( ~ecived ) ▶₂ #keyCreate )
                              case Device
                              solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate.1 )
                                case Derive
                                by solve( (#vr.5, 0) ~~> (#vk, 0) )
                              next
                                case Key
                                by contradiction /* impossible chain */
                              next
                                case SharedKey
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        qed
                      next
                        case SharedKey_case_6
                        solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                          case Suc
                          solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                            case Device
                            solve( !Device( ~ecived ) ▶₂ #keyCreate )
                              case Device
                              solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                                case Derive
                                by solve( (#vr.5, 0) ~~> (#vk, 0) )
                              next
                                case Key
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        qed
                      next
                        case SharedKey_case_7
                        solve( !Integer( ('1'+'1'+'1'+x.2+x.3) ) ▶₀ #keyCreate )
                          case Suc
                          solve( !Device( ~device.1 ) ▶₁ #keyCreate )
                            case Device
                            solve( !Device( ~ecived ) ▶₂ #keyCreate )
                              case Device
                              solve( CreateKey( ek, ~eh, ('1'+'1'+x.3) ) @ #keyCreate.1 )
                                case Key
                                by contradiction /* impossible chain */
                              next
                                case SharedKey
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_2
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                           (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                        case Derive
                        by solve( (#vr.5, 0) ~~> (#vk, 0) )
                      next
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Wrap_case_17
                  solve( (∃ #keyCreate.
                           (CreateKey( wk.1, fst(x.2), ('1'+z+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                         (∃ #keyKU.
                           (!KU( wk.1 ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                    case case_1
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                           (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                      case case_1
                      by solve( CreateKey( wk, fst(x.2), ('1'+z+n.1) ) @ #keyCreate )
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_2
                    solve( (∃ #keyCreate.
                             (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                            ∧
                             (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.9))  ∥
                           (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.9)) )
                      case case_1
                      solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                        case Derive
                        by solve( (#vr.5, 0) ~~> (#vk, 0) )
                      next
                        case Key
                        by contradiction /* impossible chain */
                      next
                        case SharedKey
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case c_senc
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( ((∀ m #decrypt.
              (Decrypt( m ) @ #decrypt)
             ⇒
              ((last(#decrypt)) ∨
               (∃ #mKU. (!KU( m ) @ #mKU) ∧ (¬(last(#mKU))) ∧ (#mKU < #decrypt)))) ∧
            (∀ d k l h #keyImport.
              (ImportKey( d, k, l, h ) @ #keyImport)
             ⇒
              ((last(#keyImport)) ∨
               (∃ #keyCreate.
                 (CreateKey( k, h, l ) @ #keyCreate)
                ∧
                 (¬(last(#keyCreate))) ∧ (#keyCreate < #keyImport)) ∨
               (∃ #keyKU.
                 (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #keyImport)))))  ∥
           (∃ x y #i.
             (LessThan( x, y ) @ #i) ∧ (¬(last(#i))) ∧ (∀ z. ((x+z) = y) ⇒ ⊥)) )
      case case_1
      solve( (last(#keyImport))  ∥
             (∃ #keyCreate.
               (CreateKey( k, h.1, l ) @ #keyCreate)
              ∧
               (¬(last(#keyCreate))) ∧ (#keyCreate < #keyImport))  ∥
             (∃ #keyKU.
               (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #keyImport)) )
        case case_1
        solve( !Integer( l ) ▶₀ #keyImport )
          case One
          by contradiction /* from formulas */
        next
          case Suc
          solve( !Device( d ) ▶₁ #keyImport )
            case Device
            solve( splitEqs(0) )
              case split_case_1
              solve( !KU( senc(wk, <('1'+n), x>, epsilon, k) ) @ #vk )
                case Decrypt_case_1
                by contradiction /* cyclic */
              next
                case Decrypt_case_2
                by contradiction /* cyclic */
              next
                case Decrypt_case_3
                by contradiction /* cyclic */
              next
                case Decrypt_case_4
                by contradiction /* cyclic */
              next
                case Decrypt_case_5
                by contradiction /* cyclic */
              next
                case Decrypt_case_6
                by contradiction /* cyclic */
              next
                case Decrypt_case_7
                by contradiction /* cyclic */
              next
                case Wrap_case_01
                by contradiction /* non-normal terms */
              next
                case Wrap_case_02
                by contradiction /* non-normal terms */
              next
                case Wrap_case_03
                by contradiction /* non-normal terms */
              next
                case Wrap_case_04
                by contradiction /* non-normal terms */
              next
                case Wrap_case_05
                by contradiction /* non-normal terms */
              next
                case Wrap_case_06
                by contradiction /* non-normal terms */
              next
                case Wrap_case_07
                by contradiction /* non-normal terms */
              next
                case Wrap_case_08
                by contradiction /* non-normal terms */
              next
                case Wrap_case_09
                by contradiction /* non-normal terms */
              next
                case Wrap_case_10
                by contradiction /* non-normal terms */
              next
                case Wrap_case_11
                by contradiction /* non-normal terms */
              next
                case Wrap_case_12
                by contradiction /* non-normal terms */
              next
                case Wrap_case_13
                by contradiction /* non-normal terms */
              next
                case Wrap_case_14
                by contradiction /* non-normal terms */
              next
                case Wrap_case_15
                by contradiction /* non-normal terms */
              next
                case Wrap_case_16
                by contradiction /* non-normal terms */
              next
                case Wrap_case_17
                by contradiction /* non-normal terms */
              next
                case Wrap_case_18
                by contradiction /* non-normal terms */
              next
                case Wrap_case_19
                by contradiction /* non-normal terms */
              next
                case Wrap_case_20
                by contradiction /* non-normal terms */
              next
                case Wrap_case_21
                by contradiction /* non-normal terms */
              next
                case Wrap_case_22
                by contradiction /* non-normal terms */
              next
                case Wrap_case_23
                by contradiction /* non-normal terms */
              next
                case Wrap_case_24
                by contradiction /* non-normal terms */
              next
                case Wrap_case_25
                by contradiction /* non-normal terms */
              next
                case Wrap_case_26
                by contradiction /* non-normal terms */
              next
                case Wrap_case_27
                by contradiction /* non-normal terms */
              next
                case Wrap_case_28
                by contradiction /* non-normal terms */
              next
                case Wrap_case_29
                by contradiction /* non-normal terms */
              next
                case Wrap_case_30
                by contradiction /* non-normal terms */
              next
                case Wrap_case_31
                by contradiction /* non-normal terms */
              next
                case Wrap_case_32
                by contradiction /* non-normal terms */
              next
                case Wrap_case_33
                by contradiction /* non-normal terms */
              next
                case Wrap_case_34
                by contradiction /* non-normal terms */
              next
                case Wrap_case_35
                by contradiction /* non-normal terms */
              next
                case Wrap_case_36
                by contradiction /* non-normal terms */
              next
                case Wrap_case_37
                by contradiction /* non-normal terms */
              next
                case Wrap_case_38
                by contradiction /* non-normal terms */
              next
                case Wrap_case_39
                by contradiction /* non-normal terms */
              next
                case Wrap_case_40
                by contradiction /* non-normal terms */
              next
                case Wrap_case_41
                by contradiction /* non-normal terms */
              next
                case Wrap_case_42
                by contradiction /* non-normal terms */
              next
                case Wrap_case_43
                by contradiction /* non-normal terms */
              next
                case Wrap_case_44
                by contradiction /* non-normal terms */
              next
                case Wrap_case_45
                by contradiction /* non-normal terms */
              next
                case Wrap_case_46
                by contradiction /* non-normal terms */
              next
                case Wrap_case_47
                by contradiction /* non-normal terms */
              next
                case Wrap_case_48
                by contradiction /* non-normal terms */
              next
                case Wrap_case_49
                by contradiction /* non-normal terms */
              next
                case Wrap_case_50
                by contradiction /* non-normal terms */
              next
                case Wrap_case_51
                by contradiction /* non-normal terms */
              next
                case Wrap_case_52
                by contradiction /* non-normal terms */
              next
                case Wrap_case_53
                by contradiction /* non-normal terms */
              next
                case Wrap_case_54
                by contradiction /* non-normal terms */
              next
                case Wrap_case_55
                by contradiction /* non-normal terms */
              next
                case Wrap_case_56
                by contradiction /* non-normal terms */
              next
                case Wrap_case_57
                by contradiction /* non-normal terms */
              next
                case Wrap_case_58
                by contradiction /* non-normal terms */
              next
                case Wrap_case_59
                by contradiction /* non-normal terms */
              next
                case Wrap_case_60
                by contradiction /* non-normal terms */
              next
                case Wrap_case_61
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_62
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_63
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_64
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_65
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_66
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_67
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_68
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_69
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_70
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_71
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_72
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_73
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_74
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_75
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_76
                solve( (∃ #keyCreate.
                         (CreateKey( wk.1, h.1, ('1'+z+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU.
                         (!KU( wk.1 ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                    case case_1
                    solve( CreateKey( wk.1, h.1, ('1'+z+n.1) ) @ #keyCreate )
                      case Key
                      solve( !Device( device ) ▶₀ #keyCreate )
                        case Device
                        solve( !Integer( ('1'+n+z) ) ▶₁ #keyCreate )
                          case Suc
                          solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.4, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case SharedKey_case_1
                      solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                        case Suc
                        solve( !Device( ~device ) ▶₁ #keyCreate )
                          case Device
                          solve( !Device( ~ecived ) ▶₂ #keyCreate )
                            case Device
                            solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate.1 )
                              case Key
                              by contradiction /* impossible chain */
                            next
                              case SharedKey
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case SharedKey_case_2
                      solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                        case Suc
                        solve( !Device( ~device ) ▶₁ #keyCreate )
                          case Device
                          solve( !Device( ~ecived ) ▶₂ #keyCreate )
                            case Device
                            solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                              case Key
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case SharedKey_case_3
                      solve( !Integer( ('1'+'1'+'1'+x+z) ) ▶₀ #keyCreate )
                        case Suc
                        solve( !Device( ~device ) ▶₁ #keyCreate )
                          case Device
                          solve( !Device( ~ecived ) ▶₂ #keyCreate )
                            case Device
                            solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x) ) @ #keyCreate.1 )
                              case Key
                              by contradiction /* impossible chain */
                            next
                              case SharedKey
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case SharedKey_case_4
                      solve( !Integer( ('1'+'1'+'1'+n) ) ▶₀ #keyCreate )
                        case Suc
                        solve( !Device( ~device ) ▶₁ #keyCreate )
                          case Device
                          solve( !Device( ~ecived ) ▶₂ #keyCreate )
                            case Device
                            solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                              case Derive
                              by solve( (#vr.4, 0) ~~> (#vk, 0) )
                            next
                              case Key
                              by contradiction /* impossible chain */
                            next
                              case SharedKey
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case SharedKey_case_5
                      solve( !Integer( ('1'+'1'+'1'+n+x) ) ▶₀ #keyCreate )
                        case Suc
                        solve( !Device( ~device ) ▶₁ #keyCreate )
                          case Device
                          solve( !Device( ~ecived ) ▶₂ #keyCreate )
                            case Device
                            solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                              case Derive
                              by solve( (#vr.4, 0) ~~> (#vk, 0) )
                            next
                              case Key
                              by contradiction /* impossible chain */
                            next
                              case SharedKey
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case SharedKey_case_6
                      solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                        case Suc
                        solve( !Device( ~device ) ▶₁ #keyCreate )
                          case Device
                          solve( !Device( ~ecived ) ▶₂ #keyCreate )
                            case Device
                            solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                              case Derive
                              by solve( (#vr.4, 0) ~~> (#vk, 0) )
                            next
                              case Key
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case SharedKey_case_7
                      solve( !Integer( ('1'+'1'+'1'+x+x.1) ) ▶₀ #keyCreate )
                        case Suc
                        solve( !Device( ~device ) ▶₁ #keyCreate )
                          case Device
                          solve( !Device( ~ecived ) ▶₂ #keyCreate )
                            case Device
                            solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate.1 )
                              case Key
                              by contradiction /* impossible chain */
                            next
                              case SharedKey
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.4, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Wrap_case_77
                solve( (∃ #keyCreate.
                         (CreateKey( wk.1, fst(x.1), ('1'+z+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU.
                         (!KU( wk.1 ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                    case case_1
                    by solve( CreateKey( wk.1, fst(x.1), ('1'+z+n.1) ) @ #keyCreate )
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.4, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case c_senc
                by contradiction /* from formulas */
              qed
            next
              case split_case_2
              solve( !KU( senc(wk, <('1'+n), h.1, x>, epsilon, k) ) @ #vk )
                case Decrypt_case_1
                by contradiction /* cyclic */
              next
                case Decrypt_case_2
                by contradiction /* cyclic */
              next
                case Decrypt_case_3
                by contradiction /* cyclic */
              next
                case Decrypt_case_4
                by contradiction /* cyclic */
              next
                case Decrypt_case_5
                by contradiction /* cyclic */
              next
                case Decrypt_case_6
                by contradiction /* cyclic */
              next
                case Decrypt_case_7
                by contradiction /* cyclic */
              next
                case Wrap_case_01
                by contradiction /* from formulas */
              next
                case Wrap_case_02
                by contradiction /* from formulas */
              next
                case Wrap_case_03
                by contradiction /* from formulas */
              next
                case Wrap_case_04
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_05
                by contradiction /* from formulas */
              next
                case Wrap_case_06
                by contradiction /* from formulas */
              next
                case Wrap_case_07
                by contradiction /* from formulas */
              next
                case Wrap_case_08
                by contradiction /* from formulas */
              next
                case Wrap_case_09
                by contradiction /* from formulas */
              next
                case Wrap_case_10
                by contradiction /* from formulas */
              next
                case Wrap_case_11
                by contradiction /* from formulas */
              next
                case Wrap_case_12
                by contradiction /* from formulas */
              next
                case Wrap_case_13
                by contradiction /* from formulas */
              next
                case Wrap_case_14
                by contradiction /* from formulas */
              next
                case Wrap_case_15
                by contradiction /* from formulas */
              next
                case Wrap_case_16
                by contradiction /* from formulas */
              next
                case Wrap_case_17
                by contradiction /* from formulas */
              next
                case Wrap_case_18
                by contradiction /* from formulas */
              next
                case Wrap_case_19
                by contradiction /* from formulas */
              next
                case Wrap_case_20
                by contradiction /* from formulas */
              next
                case Wrap_case_21
                by contradiction /* from formulas */
              next
                case Wrap_case_22
                by contradiction /* from formulas */
              next
                case Wrap_case_23
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+'1') ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_24
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_25
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_26
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_27
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+'1'+'1'+x) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_28
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_29
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+'1'+x) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_30
                by contradiction /* from formulas */
              next
                case Wrap_case_31
                by contradiction /* from formulas */
              next
                case Wrap_case_32
                by contradiction /* from formulas */
              next
                case Wrap_case_33
                by contradiction /* from formulas */
              next
                case Wrap_case_34
                by contradiction /* from formulas */
              next
                case Wrap_case_35
                by contradiction /* from formulas */
              next
                case Wrap_case_36
                by contradiction /* from formulas */
              next
                case Wrap_case_37
                by contradiction /* from formulas */
              next
                case Wrap_case_38
                by contradiction /* from formulas */
              next
                case Wrap_case_39
                by contradiction /* from formulas */
              next
                case Wrap_case_40
                by contradiction /* from formulas */
              next
                case Wrap_case_41
                by contradiction /* from formulas */
              next
                case Wrap_case_42
                by contradiction /* from formulas */
              next
                case Wrap_case_43
                by contradiction /* from formulas */
              next
                case Wrap_case_44
                by contradiction /* from formulas */
              next
                case Wrap_case_45
                by contradiction /* from formulas */
              next
                case Wrap_case_46
                by contradiction /* from formulas */
              next
                case Wrap_case_47
                by contradiction /* from formulas */
              next
                case Wrap_case_48
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+'1') ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_49
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_50
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+n) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_51
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_52
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+'1'+'1'+x) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_53
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_54
                solve( (∃ #keyCreate.
                         (CreateKey( k, ~eh, ('1'+'1'+x) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case Wrap_case_55
                by contradiction /* from formulas */
              next
                case Wrap_case_56
                by contradiction /* from formulas */
              next
                case Wrap_case_57
                by contradiction /* from formulas */
              next
                case Wrap_case_58
                by contradiction /* from formulas */
              next
                case Wrap_case_59
                solve( (∃ #keyCreate.
                         (CreateKey( wk, h.1, ('1'+n+z) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.6))  ∥
                       (∃ #keyKU. (!KU( wk ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.6)) )
                  case case_1
                  solve( (∃ #keyCreate.
                           (CreateKey( k, ~eh, ('1'+n) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                         (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case case_2
                  solve( (∃ #keyCreate.
                           (CreateKey( k, ~eh, ('1'+n) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                         (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Wrap_case_60
                by contradiction /* from formulas */
              next
                case Wrap_case_61
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_62
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_63
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_64
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_65
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_66
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_67
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_68
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_69
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_70
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_71
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                    case Derive
                    by solve( (#vr.4, 0) ~~> (#vk, 0) )
                  next
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_72
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_73
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x.1) ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_74
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_75
                solve( (∃ #keyCreate.
                         (CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                       (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                  case case_1
                  solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate )
                    case Key
                    by contradiction /* impossible chain */
                  next
                    case SharedKey
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  by contradiction /* cyclic */
                qed
              next
                case Wrap_case_76
                solve( (∃ #keyCreate.
                         (CreateKey( wk.1, h.2, ('1'+z+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU.
                         (!KU( wk.1 ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                    case case_1
                    solve( CreateKey( wk.1, h.2, ('1'+z+n.1) ) @ #keyCreate )
                      case Key
                      solve( !Device( device ) ▶₀ #keyCreate )
                        case Device
                        solve( !Integer( ('1'+n+z) ) ▶₁ #keyCreate )
                          case Suc
                          solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                            case Derive
                            by solve( (#vr.4, 0) ~~> (#vk, 0) )
                          next
                            case Key
                            by contradiction /* impossible chain */
                          next
                            case SharedKey
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case SharedKey_case_1
                      solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                        case Suc
                        solve( !Device( ~device ) ▶₁ #keyCreate )
                          case Device
                          solve( !Device( ~ecived ) ▶₂ #keyCreate )
                            case Device
                            solve( CreateKey( ek, ~eh, ('1'+'1'+z) ) @ #keyCreate.1 )
                              case Key
                              by contradiction /* impossible chain */
                            next
                              case SharedKey
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case SharedKey_case_2
                      solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                        case Suc
                        solve( !Device( ~device ) ▶₁ #keyCreate )
                          case Device
                          solve( !Device( ~ecived ) ▶₂ #keyCreate )
                            case Device
                            solve( CreateKey( ek, ~eh, ('1'+'1'+'1') ) @ #keyCreate.1 )
                              case Key
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case SharedKey_case_3
                      solve( !Integer( ('1'+'1'+'1'+x+z) ) ▶₀ #keyCreate )
                        case Suc
                        solve( !Device( ~device ) ▶₁ #keyCreate )
                          case Device
                          solve( !Device( ~ecived ) ▶₂ #keyCreate )
                            case Device
                            solve( CreateKey( ek, ~eh, ('1'+'1'+'1'+x) ) @ #keyCreate.1 )
                              case Key
                              by contradiction /* impossible chain */
                            next
                              case SharedKey
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case SharedKey_case_4
                      solve( !Integer( ('1'+'1'+'1'+n) ) ▶₀ #keyCreate )
                        case Suc
                        solve( !Device( ~device ) ▶₁ #keyCreate )
                          case Device
                          solve( !Device( ~ecived ) ▶₂ #keyCreate )
                            case Device
                            solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                              case Derive
                              by solve( (#vr.4, 0) ~~> (#vk, 0) )
                            next
                              case Key
                              by contradiction /* impossible chain */
                            next
                              case SharedKey
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case SharedKey_case_5
                      solve( !Integer( ('1'+'1'+'1'+n+x) ) ▶₀ #keyCreate )
                        case Suc
                        solve( !Device( ~device ) ▶₁ #keyCreate )
                          case Device
                          solve( !Device( ~ecived ) ▶₂ #keyCreate )
                            case Device
                            solve( CreateKey( ek, ~eh, ('1'+n) ) @ #keyCreate.1 )
                              case Derive
                              by solve( (#vr.4, 0) ~~> (#vk, 0) )
                            next
                              case Key
                              by contradiction /* impossible chain */
                            next
                              case SharedKey
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case SharedKey_case_6
                      solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                        case Suc
                        solve( !Device( ~device ) ▶₁ #keyCreate )
                          case Device
                          solve( !Device( ~ecived ) ▶₂ #keyCreate )
                            case Device
                            solve( CreateKey( ek, ~eh, ('1'+'1') ) @ #keyCreate.1 )
                              case Derive
                              by solve( (#vr.4, 0) ~~> (#vk, 0) )
                            next
                              case Key
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case SharedKey_case_7
                      solve( !Integer( ('1'+'1'+'1'+x+x.1) ) ▶₀ #keyCreate )
                        case Suc
                        solve( !Device( ~device ) ▶₁ #keyCreate )
                          case Device
                          solve( !Device( ~ecived ) ▶₂ #keyCreate )
                            case Device
                            solve( CreateKey( ek, ~eh, ('1'+'1'+x.1) ) @ #keyCreate.1 )
                              case Key
                              by contradiction /* impossible chain */
                            next
                              case SharedKey
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.4, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Wrap_case_77
                solve( (∃ #keyCreate.
                         (CreateKey( wk.1, fst(x.1), ('1'+z+n.1) ) @ #keyCreate)
                        ∧
                         (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.7))  ∥
                       (∃ #keyKU.
                         (!KU( wk.1 ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.7)) )
                  case case_1
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                    case case_1
                    by solve( CreateKey( wk.1, fst(x.1), ('1'+z+n.1) ) @ #keyCreate )
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( (∃ #keyCreate.
                           (CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate)
                          ∧
                           (¬(last(#keyCreate))) ∧ (#keyCreate < #vr.8))  ∥
                         (∃ #keyKU. (!KU( ek ) @ #keyKU) ∧ (¬(last(#keyKU))) ∧ (#keyKU < #vr.8)) )
                    case case_1
                    solve( CreateKey( ek, ~eh, ('1'+n.1) ) @ #keyCreate )
                      case Derive
                      by solve( (#vr.4, 0) ~~> (#vk, 0) )
                    next
                      case Key
                      by contradiction /* impossible chain */
                    next
                      case SharedKey
                      by contradiction /* impossible chain */
                    qed
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case c_senc
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        by contradiction /* from formulas */
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma Counter_Monotonicity [use_induction, reuse]:
  all-traces
  "∀ d c C #before #later.
    (((DCtrIs( d, c ) @ #before) ∧ (DCtrIs( d, C ) @ #later)) ∧
     (#before < #later)) ⇒
    (∃ z. C = (c+z))"
/*
guarded formula characterizing all counter-examples:
"∃ d c C #before #later.
  (DCtrIs( d, c ) @ #before) ∧ (DCtrIs( d, C ) @ #later)
 ∧
  (#before < #later) ∧ (∀ z. (C = (c+z)) ⇒ ⊥)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ d c C #before #later.
           (DCtrIs( d, c ) @ #before) ∧ (DCtrIs( d, C ) @ #later)
          ⇒
           ((last(#later)) ∨
            (last(#before)) ∨
            (#before = #later) ∨
            (#later < #before) ∨
            (∃ z. (C = (c+z)))))  ∥
         (∃ x y #i.
           (LessThan( x, y ) @ #i) ∧ (¬(last(#i))) ∧ (∀ z. ((x+z) = y) ⇒ ⊥)) )
    case case_1
    solve( (last(#later))  ∥ (∃ z. (C = (c+z))) )
      case case_1
      solve( DCtrIs( d, C ) @ #later )
        case Device
        solve( DCtrIs( ~device, c ) @ #before )
          case Device
          by contradiction /* cyclic */
        next
          case Encrypt
          by contradiction /* cyclic */
        next
          case Wrap
          by contradiction /* cyclic */
        qed
      next
        case Encrypt
        solve( DCtrIs( d, c ) @ #before )
          case Device
          by contradiction /* from formulas */
        next
          case Encrypt
          solve( DCtr( d, ctr.1 ) ▶₃ #later )
            case Device
            by contradiction /* non-injective facts (#vr,#before,#later) */
          next
            case Encrypt_case_1
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_2
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_3
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_4
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_5
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_6
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_01
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_02
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_03
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_04
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_05
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_06
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_07
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_08
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_09
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_10
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_11
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_12
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_13
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_14
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_15
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_16
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_17
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_18
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_19
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_20
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_21
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_22
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_23
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_24
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_25
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_26
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_27
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_28
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_29
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_30
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_31
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_32
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_33
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_34
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_35
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_36
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_37
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_38
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_39
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_40
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_41
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_42
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_43
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_44
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_45
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_46
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_47
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_48
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_49
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_50
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_51
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_52
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_53
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_54
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_55
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_56
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_57
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_58
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_59
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_60
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_61
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_62
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_63
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_64
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_65
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          qed
        next
          case Wrap
          solve( DCtr( d, ctr.1 ) ▶₃ #later )
            case Device
            by contradiction /* non-injective facts (#vr,#before,#later) */
          next
            case Encrypt_case_1
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_2
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_3
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_4
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_5
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_6
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_01
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_02
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_03
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_04
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_05
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_06
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_07
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_08
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_09
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_10
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_11
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_12
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_13
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_14
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_15
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_16
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_17
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_18
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_19
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_20
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_21
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_22
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_23
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_24
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_25
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_26
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_27
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_28
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_29
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_30
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_31
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_32
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_33
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_34
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_35
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_36
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_37
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_38
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_39
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_40
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_41
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_42
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_43
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_44
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_45
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_46
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_47
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_48
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_49
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_50
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_51
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_52
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_53
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_54
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_55
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_56
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_57
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_58
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_59
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_60
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_61
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_62
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_63
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_64
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_65
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          qed
        qed
      next
        case Wrap
        solve( DCtrIs( d, c ) @ #before )
          case Device
          by contradiction /* from formulas */
        next
          case Encrypt
          solve( DCtr( d, ctr.1 ) ▶₄ #later )
            case Device
            by contradiction /* non-injective facts (#vr,#before,#later) */
          next
            case Encrypt_case_1
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_2
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_3
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_4
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_5
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_6
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_01
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_02
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_03
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_04
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_05
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_06
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_07
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_08
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_09
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_10
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_11
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_12
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_13
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_14
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_15
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_16
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_17
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_18
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_19
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_20
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_21
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_22
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_23
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_24
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_25
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_26
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_27
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_28
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_29
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_30
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_31
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_32
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_33
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_34
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_35
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_36
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_37
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_38
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_39
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_40
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_41
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_42
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_43
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_44
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_45
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_46
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_47
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_48
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_49
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_50
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_51
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_52
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_53
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_54
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_55
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_56
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_57
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_58
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_59
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_60
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_61
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_62
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_63
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_64
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_65
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          qed
        next
          case Wrap
          solve( DCtr( d, ctr.1 ) ▶₄ #later )
            case Device
            by contradiction /* non-injective facts (#vr,#before,#later) */
          next
            case Encrypt_case_1
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_2
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_3
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_4
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_5
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Encrypt_case_6
            solve( (#before < #vr)  ∥ (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_01
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_02
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_03
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_04
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_05
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_06
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_07
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_08
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_09
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_10
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_11
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_12
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_13
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_14
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_15
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_16
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_17
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_18
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_19
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_20
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_21
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_22
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_23
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_24
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_25
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_26
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_27
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_28
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_29
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_30
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_31
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_32
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_33
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_34
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_35
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_36
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_37
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_38
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_39
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_40
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_41
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_42
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_43
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_44
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_45
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_46
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_47
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_48
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_49
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_50
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_51
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_52
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_53
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_54
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_55
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_56
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_57
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_58
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_59
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_60
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_61
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_62
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_63
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_64
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          next
            case Wrap_case_65
            solve( (#vr = #before)  ∥ (#before < #vr)  ∥
                   (∃ z. (('1'+ctr) = ('1'+z+ctr.1))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (#vr < #before)  ∥ (∃ z.1. (('1'+ctr) = ('1'+ctr+z+z.1))) )
                case case_1
                by contradiction /* non-injective facts (#vr,#before,#later) */
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma IV_Uniqueness:
  all-traces
  "∀ iv #before #later.
    ((IV( iv ) @ #before) ∧ (IV( iv ) @ #later)) ⇒ (#later = #before)"
/*
guarded formula characterizing all counter-examples:
"∃ iv #before #later.
  (IV( iv ) @ #before) ∧ (IV( iv ) @ #later) ∧ ¬(#later = #before)"
*/
simplify
solve( (#later < #before)  ∥ (#before < #later) )
  case case_1
  solve( IV( iv ) @ #before )
    case Encrypt
    by solve( IV( <'1', 'none', device, ctr> ) @ #later )
  next
    case Wrap
    by solve( IV( <el, ~eh, device, ctr> ) @ #later )
  qed
next
  case case_2
  solve( IV( iv ) @ #before )
    case Encrypt
    by solve( IV( <'1', 'none', device, ctr> ) @ #later )
  next
    case Wrap
    by solve( IV( <el, ~eh, device, ctr> ) @ #later )
  qed
qed

lemma Key_UsageImpliesInitialization:
  all-traces
  "∀ d k l h #keyUse.
    (UseKey( d, k, h, l ) @ #keyUse) ⇒
    (∃ #keyInit. (InitKey( d, k, h, l ) @ #keyInit) ∧ (#keyInit < #keyUse))"
/*
guarded formula characterizing all counter-examples:
"∃ d k l h #keyUse.
  (UseKey( d, k, h, l ) @ #keyUse)
 ∧
  ∀ #keyInit. (InitKey( d, k, h, l ) @ #keyInit) ⇒ ¬(#keyInit < #keyUse)"
*/
simplify
solve( UseKey( d, k, h, l ) @ #keyUse )
  case Decrypt
  solve( !Device( d ) ▶₀ #keyUse )
    case Device
    solve( !Store( ~device, h, k, l ) ▶₁ #keyUse )
      case Derive
      by contradiction /* from formulas */
    next
      case Key_case_1
      by contradiction /* from formulas */
    next
      case Key_case_2
      by contradiction /* from formulas */
    next
      case SharedKey_case_1
      by contradiction /* from formulas */
    next
      case SharedKey_case_2
      by contradiction /* from formulas */
    next
      case Unwrap
      by contradiction /* from formulas */
    qed
  qed
next
  case Derive
  solve( !Device( d ) ▶₀ #keyUse )
    case Device
    solve( !Store( ~device, h, k, ('1'+'1') ) ▶₁ #keyUse )
      case Derive
      by contradiction /* from formulas */
    next
      case Key
      by contradiction /* from formulas */
    next
      case Unwrap
      by contradiction /* from formulas */
    qed
  qed
next
  case Encrypt
  solve( !Integer( ('1'+ctr) ) ▶₀ #keyUse )
    case Suc
    solve( !Device( d ) ▶₁ #keyUse )
      case Device
      solve( !Store( ~device, h, k, l ) ▶₂ #keyUse )
        case Derive
        by contradiction /* from formulas */
      next
        case Key_case_1
        by contradiction /* from formulas */
      next
        case Key_case_2
        by contradiction /* from formulas */
      next
        case SharedKey_case_1
        by contradiction /* from formulas */
      next
        case SharedKey_case_2
        by contradiction /* from formulas */
      next
        case Unwrap
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Unwrap
  solve( !Integer( z ) ▶₀ #keyUse )
    case One
    by contradiction /* from formulas */
  next
    case Suc
    solve( !Device( d ) ▶₁ #keyUse )
      case Device
      solve( splitEqs(0) )
        case split_case_1
        solve( !Store( ~device, h, k, l ) ▶₂ #keyUse )
          case Derive
          by contradiction /* from formulas */
        next
          case Key_case_1
          by contradiction /* from formulas */
        next
          case Key_case_2
          by contradiction /* from formulas */
        next
          case SharedKey_case_1
          by contradiction /* from formulas */
        next
          case SharedKey_case_2
          by contradiction /* from formulas */
        next
          case Unwrap
          by contradiction /* from formulas */
        qed
      next
        case split_case_2
        solve( !Store( ~device, h, k, l ) ▶₂ #keyUse )
          case Derive
          by contradiction /* from formulas */
        next
          case Key_case_1
          by contradiction /* from formulas */
        next
          case Key_case_2
          by contradiction /* from formulas */
        next
          case SharedKey_case_1
          by contradiction /* from formulas */
        next
          case SharedKey_case_2
          by contradiction /* from formulas */
        next
          case Unwrap
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Wrap
  solve( !Integer( ('1'+ctr) ) ▶₀ #keyUse )
    case Suc
    solve( !Device( d ) ▶₁ #keyUse )
      case Device
      solve( !Store( ~device, h, k, (el+z) ) ▶₂ #keyUse )
        case Derive
        by contradiction /* from formulas */
      next
        case Key_case_1
        by contradiction /* from formulas */
      next
        case Key_case_2
        by contradiction /* from formulas */
      next
        case Key_case_3
        by contradiction /* from formulas */
      next
        case Key_case_4
        by contradiction /* from formulas */
      next
        case SharedKey_case_01
        by contradiction /* from formulas */
      next
        case SharedKey_case_02
        by contradiction /* from formulas */
      next
        case SharedKey_case_03
        by contradiction /* from formulas */
      next
        case SharedKey_case_04
        by contradiction /* from formulas */
      next
        case SharedKey_case_05
        by contradiction /* from formulas */
      next
        case SharedKey_case_06
        by contradiction /* from formulas */
      next
        case SharedKey_case_07
        by contradiction /* from formulas */
      next
        case SharedKey_case_08
        by contradiction /* from formulas */
      next
        case SharedKey_case_09
        by contradiction /* from formulas */
      next
        case SharedKey_case_10
        by contradiction /* from formulas */
      next
        case SharedKey_case_11
        by contradiction /* from formulas */
      next
        case SharedKey_case_12
        by contradiction /* from formulas */
      next
        case SharedKey_case_13
        by contradiction /* from formulas */
      next
        case SharedKey_case_14
        by contradiction /* from formulas */
      next
        case SharedKey_case_15
        by contradiction /* from formulas */
      next
        case SharedKey_case_16
        by contradiction /* from formulas */
      next
        case SharedKey_case_17
        by contradiction /* from formulas */
      next
        case SharedKey_case_18
        by contradiction /* from formulas */
      next
        case SharedKey_case_19
        by contradiction /* from formulas */
      next
        case SharedKey_case_20
        by contradiction /* from formulas */
      next
        case SharedKey_case_21
        by contradiction /* from formulas */
      next
        case SharedKey_case_22
        by contradiction /* from formulas */
      next
        case SharedKey_case_23
        by contradiction /* from formulas */
      next
        case SharedKey_case_24
        by contradiction /* from formulas */
      next
        case SharedKey_case_25
        by contradiction /* from formulas */
      next
        case SharedKey_case_26
        by contradiction /* from formulas */
      next
        case SharedKey_case_27
        by contradiction /* from formulas */
      next
        case SharedKey_case_28
        by contradiction /* from formulas */
      next
        case SharedKey_case_29
        by contradiction /* from formulas */
      next
        case SharedKey_case_30
        by contradiction /* from formulas */
      next
        case SharedKey_case_31
        by contradiction /* from formulas */
      next
        case SharedKey_case_32
        by contradiction /* from formulas */
      next
        case Unwrap_case_1
        by contradiction /* from formulas */
      next
        case Unwrap_case_2
        by contradiction /* from formulas */
      next
        case Unwrap_case_3
        by contradiction /* from formulas */
      next
        case Unwrap_case_4
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma Key_IntegrityAndConfidentiality [use_induction, reuse]:
  all-traces
  "(¬(∃ k l h #keyCreate #keyKU.
       (CreateKey( k, h, l ) @ #keyCreate) ∧ (!KU( k ) @ #keyKU))) ∧
   (∀ d k l h #keyImport.
     (ImportKey( d, k, l, h ) @ #keyImport) ⇒
     (∃ #keyCreate.
       (CreateKey( k, h, l ) @ #keyCreate) ∧ (#keyCreate < #keyImport)))"
/*
guarded formula characterizing all counter-examples:
"((∃ k l h #keyCreate #keyKU.
    (CreateKey( k, h, l ) @ #keyCreate) ∧ (!KU( k ) @ #keyKU)) ∨
  (∃ d k l h #keyImport.
    (ImportKey( d, k, l, h ) @ #keyImport)
   ∧
    ∀ #keyCreate.
     (CreateKey( k, h, l ) @ #keyCreate) ⇒ ¬(#keyCreate < #keyImport)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ k l h #keyCreate #keyKU.
           (CreateKey( k, h, l ) @ #keyCreate) ∧ (!KU( k ) @ #keyKU))  ∥
         (∃ d k l h #keyImport.
           (ImportKey( d, k, l, h ) @ #keyImport)
          ∧
           ∀ #keyCreate.
            (CreateKey( k, h, l ) @ #keyCreate) ⇒ ¬(#keyCreate < #keyImport)) )
    case case_1
    solve( ((∀ k l h #keyCreate #keyKU.
              (CreateKey( k, h, l ) @ #keyCreate) ∧ (!KU( k ) @ #keyKU)
             ⇒
              ((last(#keyKU)) ∨ (last(#keyCreate)))) ∧
            (∀ d k l h #keyImport.
              (ImportKey( d, k, l, h ) @ #keyImport)
             ⇒
              ((last(#keyImport)) ∨
               (∃ #keyCreate.
                 (CreateKey( k, h, l ) @ #keyCreate)
                ∧
                 (¬(last(#keyCreate))) ∧ (#keyCreate < #keyImport)))))  ∥
           (∃ x y #i.
             (LessThan( x, y ) @ #i) ∧ (¬(last(#i))) ∧ (∀ z. ((x+z) = y) ⇒ ⊥)) )
      case case_1
      solve( (last(#keyKU))  ∥ (last(#keyCreate)) )
        case case_1
        solve( CreateKey( k, h, l ) @ #keyCreate )
          case Derive
          solve( !Device( device ) ▶₀ #keyCreate )
            case Device
            solve( !KU( kdf(k, ~n) ) @ #keyKU )
              case Wrap_case_01
              by contradiction /* from formulas */
            next
              case Wrap_case_02
              by contradiction /* from formulas */
            next
              case Wrap_case_03
              by contradiction /* from formulas */
            next
              case Wrap_case_04
              by contradiction /* from formulas */
            next
              case Wrap_case_05
              by contradiction /* from formulas */
            next
              case Wrap_case_06
              by contradiction /* from formulas */
            next
              case Wrap_case_07
              by contradiction /* from formulas */
            next
              case Wrap_case_08
              by contradiction /* from formulas */
            next
              case Wrap_case_09
              by contradiction /* from formulas */
            next
              case Wrap_case_10
              by contradiction /* from formulas */
            next
              case Wrap_case_11
              by contradiction /* from formulas */
            next
              case c_kdf
              solve( !KU( ~n ) @ #vk.1 )
                case Wrap_case_01
                by solve( CreateKey( ek, ~n, ('1'+n.2) ) @ #keyCreate.1 )
              next
                case Wrap_case_02
                by solve( CreateKey( ek, ~n, ('1'+'1') ) @ #keyCreate.1 )
              next
                case Wrap_case_03
                by solve( CreateKey( ek, ~n, ('1'+n.2) ) @ #keyCreate.1 )
              next
                case Wrap_case_04
                by solve( CreateKey( ek, ~n, ('1'+n.2) ) @ #keyCreate.1 )
              next
                case Wrap_case_05
                by solve( CreateKey( ek, ~n, ('1'+'1'+'1') ) @ #keyCreate.1 )
              next
                case Wrap_case_06
                by solve( CreateKey( ek, ~n, ('1'+'1'+'1'+x) ) @ #keyCreate.1 )
              next
                case Wrap_case_07
                by solve( CreateKey( ek, ~n, ('1'+'1'+z) ) @ #keyCreate.1 )
              next
                case Wrap_case_08
                by solve( CreateKey( ek, ~n, ('1'+'1'+x) ) @ #keyCreate.1 )
              next
                case Wrap_case_09
                by solve( CreateKey( ek, ~n, ('1'+'1') ) @ #keyCreate.1 )
              next
                case Wrap_case_10
                by solve( CreateKey( ek, ~n, ('1'+n.2) ) @ #keyCreate.1 )
              next
                case Wrap_case_11
                by solve( CreateKey( ek, ~n, ('1'+n.2) ) @ #keyCreate.1 )
              next
                case Wrap_case_12
                by solve( CreateKey( ek, ~n, ('1'+'1'+'1') ) @ #keyCreate.1 )
              next
                case Wrap_case_13
                by solve( CreateKey( ek, ~n, ('1'+'1'+'1'+x) ) @ #keyCreate.1 )
              next
                case Wrap_case_14
                by solve( CreateKey( ek, ~n, ('1'+'1'+z) ) @ #keyCreate.1 )
              next
                case Wrap_case_15
                by solve( CreateKey( ek, ~n, ('1'+'1'+x) ) @ #keyCreate.1 )
              next
                case Wrap_case_16
                by solve( CreateKey( ek, ~n, ('1'+n.2) ) @ #keyCreate.2 )
              qed
            qed
          qed
        next
          case Key
          solve( !Device( device ) ▶₀ #keyCreate )
            case Device
            solve( !Integer( l ) ▶₁ #keyCreate )
              case One
              solve( !KU( ~key ) @ #keyKU )
                case Wrap_case_01
                by solve( CreateKey( ek, ~key, ('1'+n) ) @ #keyCreate.1 )
              next
                case Wrap_case_02
                by solve( CreateKey( ek, ~key, ('1'+'1') ) @ #keyCreate.1 )
              next
                case Wrap_case_03
                by solve( CreateKey( ek, ~key, ('1'+n) ) @ #keyCreate.1 )
              next
                case Wrap_case_04
                by solve( CreateKey( ek, ~key, ('1'+n) ) @ #keyCreate.1 )
              next
                case Wrap_case_05
                by solve( CreateKey( ek, ~key, ('1'+'1'+'1') ) @ #keyCreate.1 )
              next
                case Wrap_case_06
                by solve( CreateKey( ek, ~key, ('1'+'1'+'1'+x) ) @ #keyCreate.1 )
              next
                case Wrap_case_07
                by solve( CreateKey( ek, ~key, ('1'+'1'+z) ) @ #keyCreate.1 )
              next
                case Wrap_case_08
                by solve( CreateKey( ek, ~key, ('1'+'1'+x) ) @ #keyCreate.1 )
              next
                case Wrap_case_09
                by solve( CreateKey( ek, ~key, ('1'+'1') ) @ #keyCreate.1 )
              next
                case Wrap_case_10
                by solve( CreateKey( ek, ~key, ('1'+n) ) @ #keyCreate.1 )
              next
                case Wrap_case_11
                by solve( CreateKey( ek, ~key, ('1'+n) ) @ #keyCreate.1 )
              next
                case Wrap_case_12
                by solve( CreateKey( ek, ~key, ('1'+'1'+'1') ) @ #keyCreate.1 )
              next
                case Wrap_case_13
                by solve( CreateKey( ek, ~key, ('1'+'1'+'1'+x) ) @ #keyCreate.1 )
              next
                case Wrap_case_14
                by solve( CreateKey( ek, ~key, ('1'+'1'+z) ) @ #keyCreate.1 )
              next
                case Wrap_case_15
                by solve( CreateKey( ek, ~key, ('1'+'1'+x) ) @ #keyCreate.1 )
              next
                case Wrap_case_16
                by solve( CreateKey( ek, ~key, ('1'+n) ) @ #keyCreate.2 )
              next
                case Wrap_case_17
                by contradiction /* from formulas */
              next
                case Wrap_case_18
                by contradiction /* from formulas */
              next
                case Wrap_case_19
                by contradiction /* from formulas */
              next
                case Wrap_case_20
                by contradiction /* from formulas */
              next
                case Wrap_case_21
                by contradiction /* from formulas */
              qed
            next
              case Suc
              solve( !KU( ~key ) @ #keyKU )
                case Wrap_case_01
                by solve( CreateKey( ek, ~key, ('1'+n.1) ) @ #keyCreate.1 )
              next
                case Wrap_case_02
                by solve( CreateKey( ek, ~key, ('1'+'1') ) @ #keyCreate.1 )
              next
                case Wrap_case_03
                by solve( CreateKey( ek, ~key, ('1'+n.1) ) @ #keyCreate.1 )
              next
                case Wrap_case_04
                by solve( CreateKey( ek, ~key, ('1'+n.1) ) @ #keyCreate.1 )
              next
                case Wrap_case_05
                by solve( CreateKey( ek, ~key, ('1'+'1'+'1') ) @ #keyCreate.1 )
              next
                case Wrap_case_06
                by solve( CreateKey( ek, ~key, ('1'+'1'+'1'+x) ) @ #keyCreate.1 )
              next
                case Wrap_case_07
                by solve( CreateKey( ek, ~key, ('1'+'1'+z) ) @ #keyCreate.1 )
              next
                case Wrap_case_08
                by solve( CreateKey( ek, ~key, ('1'+'1'+x) ) @ #keyCreate.1 )
              next
                case Wrap_case_09
                by solve( CreateKey( ek, ~key, ('1'+'1') ) @ #keyCreate.1 )
              next
                case Wrap_case_10
                by solve( CreateKey( ek, ~key, ('1'+n.1) ) @ #keyCreate.1 )
              next
                case Wrap_case_11
                by solve( CreateKey( ek, ~key, ('1'+n.1) ) @ #keyCreate.1 )
              next
                case Wrap_case_12
                by solve( CreateKey( ek, ~key, ('1'+'1'+'1') ) @ #keyCreate.1 )
              next
                case Wrap_case_13
                by solve( CreateKey( ek, ~key, ('1'+'1'+'1'+x) ) @ #keyCreate.1 )
              next
                case Wrap_case_14
                by solve( CreateKey( ek, ~key, ('1'+'1'+z) ) @ #keyCreate.1 )
              next
                case Wrap_case_15
                by solve( CreateKey( ek, ~key, ('1'+'1'+x) ) @ #keyCreate.1 )
              next
                case Wrap_case_16
                by solve( CreateKey( ek, ~key, ('1'+n.1) ) @ #keyCreate.2 )
              next
                case Wrap_case_17
                by contradiction /* from formulas */
              next
                case Wrap_case_18
                by contradiction /* from formulas */
              next
                case Wrap_case_19
                by contradiction /* from formulas */
              next
                case Wrap_case_20
                by contradiction /* from formulas */
              next
                case Wrap_case_21
                by contradiction /* from formulas */
              next
                case Wrap_case_22
                by contradiction /* from formulas */
              next
                case Wrap_case_23
                by contradiction /* from formulas */
              next
                case Wrap_case_24
                by contradiction /* from formulas */
              next
                case Wrap_case_25
                by contradiction /* from formulas */
              next
                case Wrap_case_26
                by contradiction /* from formulas */
              next
                case Wrap_case_27
                by contradiction /* from formulas */
              next
                case Wrap_case_28
                by contradiction /* from formulas */
              next
                case Wrap_case_29
                by contradiction /* from formulas */
              next
                case Wrap_case_30
                by contradiction /* from formulas */
              next
                case Wrap_case_31
                by contradiction /* from formulas */
              next
                case Wrap_case_32
                by contradiction /* from formulas */
              next
                case Wrap_case_33
                by contradiction /* from formulas */
              next
                case Wrap_case_34
                by contradiction /* from formulas */
              next
                case Wrap_case_35
                by contradiction /* from formulas */
              next
                case Wrap_case_36
                by contradiction /* from formulas */
              next
                case Wrap_case_37
                by contradiction /* from formulas */
              next
                case Wrap_case_38
                by contradiction /* from formulas */
              next
                case Wrap_case_39
                by contradiction /* from formulas */
              next
                case Wrap_case_40
                by contradiction /* from formulas */
              next
                case Wrap_case_41
                by contradiction /* from formulas */
              next
                case Wrap_case_42
                by contradiction /* from formulas */
              next
                case Wrap_case_43
                by contradiction /* from formulas */
              next
                case Wrap_case_44
                by contradiction /* from formulas */
              next
                case Wrap_case_45
                by contradiction /* from formulas */
              next
                case Wrap_case_46
                by contradiction /* from formulas */
              next
                case Wrap_case_47
                by contradiction /* from formulas */
              next
                case Wrap_case_48
                by contradiction /* from formulas */
              next
                case Wrap_case_49
                by contradiction /* from formulas */
              next
                case Wrap_case_50
                by contradiction /* from formulas */
              next
                case Wrap_case_51
                by contradiction /* from formulas */
              next
                case Wrap_case_52
                by contradiction /* from formulas */
              next
                case Wrap_case_53
                by contradiction /* from formulas */
              next
                case Wrap_case_54
                by contradiction /* from formulas */
              next
                case Wrap_case_55
                by contradiction /* from formulas */
              next
                case Wrap_case_56
                by contradiction /* from formulas */
              next
                case Wrap_case_57
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case SharedKey
          solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
            case Suc
            solve( !Device( ~device ) ▶₁ #keyCreate )
              case Device
              solve( !Device( ~ecived ) ▶₂ #keyCreate )
                case Device
                solve( !KU( ~key ) @ #keyKU )
                  case Wrap_case_01
                  by solve( CreateKey( ek, ~key, ('1'+n) ) @ #keyCreate.1 )
                next
                  case Wrap_case_02
                  by solve( CreateKey( ek, ~key, ('1'+'1') ) @ #keyCreate.1 )
                next
                  case Wrap_case_03
                  by solve( CreateKey( ek, ~key, ('1'+n) ) @ #keyCreate.1 )
                next
                  case Wrap_case_04
                  by solve( CreateKey( ek, ~key, ('1'+n) ) @ #keyCreate.1 )
                next
                  case Wrap_case_05
                  by solve( CreateKey( ek, ~key, ('1'+'1'+'1') ) @ #keyCreate.1 )
                next
                  case Wrap_case_06
                  by solve( CreateKey( ek, ~key, ('1'+'1'+'1'+x) ) @ #keyCreate.1 )
                next
                  case Wrap_case_07
                  by solve( CreateKey( ek, ~key, ('1'+'1'+z.1) ) @ #keyCreate.1 )
                next
                  case Wrap_case_08
                  by solve( CreateKey( ek, ~key, ('1'+'1'+x) ) @ #keyCreate.1 )
                next
                  case Wrap_case_09
                  by solve( CreateKey( ek, ~key, ('1'+'1') ) @ #keyCreate.1 )
                next
                  case Wrap_case_10
                  by solve( CreateKey( ek, ~key, ('1'+n) ) @ #keyCreate.1 )
                next
                  case Wrap_case_11
                  by solve( CreateKey( ek, ~key, ('1'+n) ) @ #keyCreate.1 )
                next
                  case Wrap_case_12
                  by solve( CreateKey( ek, ~key, ('1'+'1'+'1') ) @ #keyCreate.1 )
                next
                  case Wrap_case_13
                  by solve( CreateKey( ek, ~key, ('1'+'1'+'1'+x) ) @ #keyCreate.1 )
                next
                  case Wrap_case_14
                  by solve( CreateKey( ek, ~key, ('1'+'1'+z.1) ) @ #keyCreate.1 )
                next
                  case Wrap_case_15
                  by solve( CreateKey( ek, ~key, ('1'+'1'+x) ) @ #keyCreate.1 )
                next
                  case Wrap_case_16
                  by solve( CreateKey( ek, ~key, ('1'+n) ) @ #keyCreate.2 )
                next
                  case Wrap_case_17
                  by contradiction /* from formulas */
                next
                  case Wrap_case_18
                  by contradiction /* from formulas */
                next
                  case Wrap_case_19
                  by contradiction /* from formulas */
                next
                  case Wrap_case_20
                  by contradiction /* from formulas */
                next
                  case Wrap_case_21
                  by contradiction /* from formulas */
                next
                  case Wrap_case_22
                  by contradiction /* from formulas */
                next
                  case Wrap_case_23
                  by contradiction /* from formulas */
                next
                  case Wrap_case_24
                  by contradiction /* from formulas */
                next
                  case Wrap_case_25
                  by contradiction /* from formulas */
                next
                  case Wrap_case_26
                  by contradiction /* from formulas */
                next
                  case Wrap_case_27
                  by contradiction /* from formulas */
                next
                  case Wrap_case_28
                  by contradiction /* from formulas */
                next
                  case Wrap_case_29
                  by contradiction /* from formulas */
                next
                  case Wrap_case_30
                  by contradiction /* from formulas */
                next
                  case Wrap_case_31
                  by contradiction /* from formulas */
                next
                  case Wrap_case_32
                  by contradiction /* from formulas */
                next
                  case Wrap_case_33
                  by contradiction /* from formulas */
                next
                  case Wrap_case_34
                  by contradiction /* from formulas */
                next
                  case Wrap_case_35
                  by contradiction /* from formulas */
                next
                  case Wrap_case_36
                  by contradiction /* from formulas */
                next
                  case Wrap_case_37
                  by contradiction /* from formulas */
                next
                  case Wrap_case_38
                  by contradiction /* from formulas */
                next
                  case Wrap_case_39
                  by contradiction /* from formulas */
                next
                  case Wrap_case_40
                  by contradiction /* from formulas */
                next
                  case Wrap_case_41
                  by contradiction /* from formulas */
                next
                  case Wrap_case_42
                  by contradiction /* from formulas */
                next
                  case Wrap_case_43
                  by contradiction /* from formulas */
                next
                  case Wrap_case_44
                  by contradiction /* from formulas */
                next
                  case Wrap_case_45
                  by contradiction /* from formulas */
                next
                  case Wrap_case_46
                  by contradiction /* from formulas */
                next
                  case Wrap_case_47
                  by contradiction /* from formulas */
                next
                  case Wrap_case_48
                  by contradiction /* from formulas */
                next
                  case Wrap_case_49
                  by contradiction /* from formulas */
                next
                  case Wrap_case_50
                  by contradiction /* from formulas */
                next
                  case Wrap_case_51
                  by contradiction /* from formulas */
                next
                  case Wrap_case_52
                  by contradiction /* from formulas */
                next
                  case Wrap_case_53
                  by contradiction /* from formulas */
                next
                  case Wrap_case_54
                  by contradiction /* from formulas */
                next
                  case Wrap_case_55
                  by contradiction /* from formulas */
                next
                  case Wrap_case_56
                  by contradiction /* from formulas */
                next
                  case Wrap_case_57
                  by contradiction /* from formulas */
                next
                  case Wrap_case_58
                  by contradiction /* from formulas */
                next
                  case Wrap_case_59
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        solve( CreateKey( k, h, l ) @ #keyCreate )
          case Derive
          solve( !Device( device ) ▶₀ #keyCreate )
            case Device
            solve( !KU( kdf(k, ~n) ) @ #keyKU )
              case Wrap_case_01
              by contradiction /* from formulas */
            next
              case Wrap_case_02
              by contradiction /* from formulas */
            next
              case Wrap_case_03
              by contradiction /* from formulas */
            next
              case Wrap_case_04
              by contradiction /* from formulas */
            next
              case Wrap_case_05
              by contradiction /* from formulas */
            next
              case Wrap_case_06
              by contradiction /* from formulas */
            next
              case Wrap_case_07
              by contradiction /* from formulas */
            next
              case Wrap_case_08
              by contradiction /* from formulas */
            next
              case Wrap_case_09
              by contradiction /* from formulas */
            next
              case Wrap_case_10
              by contradiction /* from formulas */
            next
              case Wrap_case_11
              by contradiction /* from formulas */
            next
              case c_kdf
              by contradiction /* node #keyKU after last node #keyCreate */
            qed
          qed
        next
          case Key
          solve( !Device( device ) ▶₀ #keyCreate )
            case Device
            solve( !Integer( l ) ▶₁ #keyCreate )
              case One
              solve( !KU( ~key ) @ #keyKU )
                case Wrap_case_01
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_02
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_03
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_04
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_05
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_06
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_07
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_08
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_09
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_10
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_11
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_12
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_13
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_14
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_15
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_16
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_17
                by contradiction /* from formulas */
              next
                case Wrap_case_18
                by contradiction /* from formulas */
              next
                case Wrap_case_19
                by contradiction /* from formulas */
              next
                case Wrap_case_20
                by contradiction /* from formulas */
              next
                case Wrap_case_21
                by contradiction /* from formulas */
              qed
            next
              case Suc
              solve( !KU( ~key ) @ #keyKU )
                case Wrap_case_01
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_02
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_03
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_04
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_05
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_06
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_07
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_08
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_09
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_10
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_11
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_12
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_13
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_14
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_15
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_16
                by contradiction /* node #keyKU after last node #keyCreate */
              next
                case Wrap_case_17
                by contradiction /* from formulas */
              next
                case Wrap_case_18
                by contradiction /* from formulas */
              next
                case Wrap_case_19
                by contradiction /* from formulas */
              next
                case Wrap_case_20
                by contradiction /* from formulas */
              next
                case Wrap_case_21
                by contradiction /* from formulas */
              next
                case Wrap_case_22
                by contradiction /* from formulas */
              next
                case Wrap_case_23
                by contradiction /* from formulas */
              next
                case Wrap_case_24
                by contradiction /* from formulas */
              next
                case Wrap_case_25
                by contradiction /* from formulas */
              next
                case Wrap_case_26
                by contradiction /* from formulas */
              next
                case Wrap_case_27
                by contradiction /* from formulas */
              next
                case Wrap_case_28
                by contradiction /* from formulas */
              next
                case Wrap_case_29
                by contradiction /* from formulas */
              next
                case Wrap_case_30
                by contradiction /* from formulas */
              next
                case Wrap_case_31
                by contradiction /* from formulas */
              next
                case Wrap_case_32
                by contradiction /* from formulas */
              next
                case Wrap_case_33
                by contradiction /* from formulas */
              next
                case Wrap_case_34
                by contradiction /* from formulas */
              next
                case Wrap_case_35
                by contradiction /* from formulas */
              next
                case Wrap_case_36
                by contradiction /* from formulas */
              next
                case Wrap_case_37
                by contradiction /* from formulas */
              next
                case Wrap_case_38
                by contradiction /* from formulas */
              next
                case Wrap_case_39
                by contradiction /* from formulas */
              next
                case Wrap_case_40
                by contradiction /* from formulas */
              next
                case Wrap_case_41
                by contradiction /* from formulas */
              next
                case Wrap_case_42
                by contradiction /* from formulas */
              next
                case Wrap_case_43
                by contradiction /* from formulas */
              next
                case Wrap_case_44
                by contradiction /* from formulas */
              next
                case Wrap_case_45
                by contradiction /* from formulas */
              next
                case Wrap_case_46
                by contradiction /* from formulas */
              next
                case Wrap_case_47
                by contradiction /* from formulas */
              next
                case Wrap_case_48
                by contradiction /* from formulas */
              next
                case Wrap_case_49
                by contradiction /* from formulas */
              next
                case Wrap_case_50
                by contradiction /* from formulas */
              next
                case Wrap_case_51
                by contradiction /* from formulas */
              next
                case Wrap_case_52
                by contradiction /* from formulas */
              next
                case Wrap_case_53
                by contradiction /* from formulas */
              next
                case Wrap_case_54
                by contradiction /* from formulas */
              next
                case Wrap_case_55
                by contradiction /* from formulas */
              next
                case Wrap_case_56
                by contradiction /* from formulas */
              next
                case Wrap_case_57
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case SharedKey
          solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
            case Suc
            solve( !Device( ~device ) ▶₁ #keyCreate )
              case Device
              solve( !Device( ~ecived ) ▶₂ #keyCreate )
                case Device
                solve( !KU( ~key ) @ #keyKU )
                  case Wrap_case_01
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_02
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_03
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_04
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_05
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_06
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_07
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_08
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_09
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_10
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_11
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_12
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_13
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_14
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_15
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_16
                  by contradiction /* node #keyKU after last node #keyCreate */
                next
                  case Wrap_case_17
                  by contradiction /* from formulas */
                next
                  case Wrap_case_18
                  by contradiction /* from formulas */
                next
                  case Wrap_case_19
                  by contradiction /* from formulas */
                next
                  case Wrap_case_20
                  by contradiction /* from formulas */
                next
                  case Wrap_case_21
                  by contradiction /* from formulas */
                next
                  case Wrap_case_22
                  by contradiction /* from formulas */
                next
                  case Wrap_case_23
                  by contradiction /* from formulas */
                next
                  case Wrap_case_24
                  by contradiction /* from formulas */
                next
                  case Wrap_case_25
                  by contradiction /* from formulas */
                next
                  case Wrap_case_26
                  by contradiction /* from formulas */
                next
                  case Wrap_case_27
                  by contradiction /* from formulas */
                next
                  case Wrap_case_28
                  by contradiction /* from formulas */
                next
                  case Wrap_case_29
                  by contradiction /* from formulas */
                next
                  case Wrap_case_30
                  by contradiction /* from formulas */
                next
                  case Wrap_case_31
                  by contradiction /* from formulas */
                next
                  case Wrap_case_32
                  by contradiction /* from formulas */
                next
                  case Wrap_case_33
                  by contradiction /* from formulas */
                next
                  case Wrap_case_34
                  by contradiction /* from formulas */
                next
                  case Wrap_case_35
                  by contradiction /* from formulas */
                next
                  case Wrap_case_36
                  by contradiction /* from formulas */
                next
                  case Wrap_case_37
                  by contradiction /* from formulas */
                next
                  case Wrap_case_38
                  by contradiction /* from formulas */
                next
                  case Wrap_case_39
                  by contradiction /* from formulas */
                next
                  case Wrap_case_40
                  by contradiction /* from formulas */
                next
                  case Wrap_case_41
                  by contradiction /* from formulas */
                next
                  case Wrap_case_42
                  by contradiction /* from formulas */
                next
                  case Wrap_case_43
                  by contradiction /* from formulas */
                next
                  case Wrap_case_44
                  by contradiction /* from formulas */
                next
                  case Wrap_case_45
                  by contradiction /* from formulas */
                next
                  case Wrap_case_46
                  by contradiction /* from formulas */
                next
                  case Wrap_case_47
                  by contradiction /* from formulas */
                next
                  case Wrap_case_48
                  by contradiction /* from formulas */
                next
                  case Wrap_case_49
                  by contradiction /* from formulas */
                next
                  case Wrap_case_50
                  by contradiction /* from formulas */
                next
                  case Wrap_case_51
                  by contradiction /* from formulas */
                next
                  case Wrap_case_52
                  by contradiction /* from formulas */
                next
                  case Wrap_case_53
                  by contradiction /* from formulas */
                next
                  case Wrap_case_54
                  by contradiction /* from formulas */
                next
                  case Wrap_case_55
                  by contradiction /* from formulas */
                next
                  case Wrap_case_56
                  by contradiction /* from formulas */
                next
                  case Wrap_case_57
                  by contradiction /* from formulas */
                next
                  case Wrap_case_58
                  by contradiction /* from formulas */
                next
                  case Wrap_case_59
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( ((∀ k l h #keyCreate #keyKU.
              (CreateKey( k, h, l ) @ #keyCreate) ∧ (!KU( k ) @ #keyKU)
             ⇒
              ((last(#keyKU)) ∨ (last(#keyCreate)))) ∧
            (∀ d k l h #keyImport.
              (ImportKey( d, k, l, h ) @ #keyImport)
             ⇒
              ((last(#keyImport)) ∨
               (∃ #keyCreate.
                 (CreateKey( k, h, l ) @ #keyCreate)
                ∧
                 (¬(last(#keyCreate))) ∧ (#keyCreate < #keyImport)))))  ∥
           (∃ x y #i.
             (LessThan( x, y ) @ #i) ∧ (¬(last(#i))) ∧ (∀ z. ((x+z) = y) ⇒ ⊥)) )
      case case_1
      solve( (last(#keyImport))  ∥
             (∃ #keyCreate.
               (CreateKey( k, h.1, l ) @ #keyCreate)
              ∧
               (¬(last(#keyCreate))) ∧ (#keyCreate < #keyImport)) )
        case case_1
        solve( !Integer( l ) ▶₀ #keyImport )
          case One
          by contradiction /* from formulas */
        next
          case Suc
          solve( !Device( d ) ▶₁ #keyImport )
            case Device
            solve( splitEqs(0) )
              case split_case_1
              solve( !KU( senc(wk, <('1'+n), x>, epsilon, k) ) @ #vk )
                case c_senc
                solve( !Store( ~device, h, wk, wl ) ▶₂ #keyImport )
                  case Derive
                  by contradiction /* from formulas */
                next
                  case Key_case_1
                  by contradiction /* from formulas */
                next
                  case Key_case_2
                  by contradiction /* from formulas */
                next
                  case SharedKey_case_1
                  by contradiction /* from formulas */
                next
                  case SharedKey_case_2
                  by contradiction /* from formulas */
                next
                  case Unwrap
                  by contradiction /* from formulas */
                qed
              qed
            next
              case split_case_2
              solve( !KU( senc(wk, <('1'+n), h.1, x>, epsilon, k) ) @ #vk )
                case Wrap_case_01
                by contradiction /* from formulas */
              next
                case Wrap_case_02
                by contradiction /* from formulas */
              next
                case Wrap_case_03
                by contradiction /* from formulas */
              next
                case Wrap_case_04
                by contradiction /* from formulas */
              next
                case Wrap_case_05
                by contradiction /* from formulas */
              next
                case Wrap_case_06
                by contradiction /* from formulas */
              next
                case Wrap_case_07
                by contradiction /* from formulas */
              next
                case Wrap_case_08
                by contradiction /* from formulas */
              next
                case Wrap_case_09
                by contradiction /* from formulas */
              next
                case Wrap_case_10
                by contradiction /* from formulas */
              next
                case Wrap_case_11
                by contradiction /* from formulas */
              next
                case Wrap_case_12
                by contradiction /* from formulas */
              next
                case Wrap_case_13
                by contradiction /* from formulas */
              next
                case Wrap_case_14
                by contradiction /* from formulas */
              next
                case Wrap_case_15
                by contradiction /* from formulas */
              next
                case Wrap_case_16
                by contradiction /* from formulas */
              next
                case Wrap_case_17
                by contradiction /* from formulas */
              next
                case Wrap_case_18
                by contradiction /* from formulas */
              next
                case Wrap_case_19
                by contradiction /* from formulas */
              next
                case Wrap_case_20
                by contradiction /* from formulas */
              next
                case Wrap_case_21
                by contradiction /* from formulas */
              next
                case Wrap_case_22
                by contradiction /* from formulas */
              next
                case Wrap_case_23
                by contradiction /* from formulas */
              next
                case Wrap_case_24
                by contradiction /* from formulas */
              next
                case Wrap_case_25
                by contradiction /* from formulas */
              next
                case Wrap_case_26
                by contradiction /* from formulas */
              next
                case Wrap_case_27
                by contradiction /* from formulas */
              next
                case Wrap_case_28
                by contradiction /* from formulas */
              next
                case Wrap_case_29
                by contradiction /* from formulas */
              next
                case Wrap_case_30
                by contradiction /* from formulas */
              next
                case Wrap_case_31
                by contradiction /* from formulas */
              next
                case Wrap_case_32
                by contradiction /* from formulas */
              next
                case Wrap_case_33
                by contradiction /* from formulas */
              next
                case Wrap_case_34
                by contradiction /* from formulas */
              next
                case Wrap_case_35
                by contradiction /* from formulas */
              next
                case Wrap_case_36
                by contradiction /* from formulas */
              next
                case Wrap_case_37
                by contradiction /* from formulas */
              next
                case Wrap_case_38
                by contradiction /* from formulas */
              next
                case Wrap_case_39
                by contradiction /* from formulas */
              next
                case Wrap_case_40
                by contradiction /* from formulas */
              next
                case Wrap_case_41
                by contradiction /* from formulas */
              next
                case Wrap_case_42
                by contradiction /* from formulas */
              next
                case Wrap_case_43
                by contradiction /* from formulas */
              next
                case Wrap_case_44
                by contradiction /* from formulas */
              next
                case Wrap_case_45
                by contradiction /* from formulas */
              next
                case Wrap_case_46
                by contradiction /* from formulas */
              next
                case Wrap_case_47
                by contradiction /* from formulas */
              next
                case Wrap_case_48
                by contradiction /* from formulas */
              next
                case Wrap_case_49
                by contradiction /* from formulas */
              next
                case Wrap_case_50
                by contradiction /* from formulas */
              next
                case Wrap_case_51
                by contradiction /* from formulas */
              next
                case Wrap_case_52
                by contradiction /* from formulas */
              next
                case Wrap_case_53
                by contradiction /* from formulas */
              next
                case Wrap_case_54
                by contradiction /* from formulas */
              next
                case Wrap_case_55
                by contradiction /* from formulas */
              next
                case Wrap_case_56
                by contradiction /* from formulas */
              next
                case Wrap_case_57
                by contradiction /* from formulas */
              next
                case Wrap_case_58
                by contradiction /* from formulas */
              next
                case Wrap_case_59
                by contradiction /* from formulas */
              next
                case Wrap_case_60
                by contradiction /* from formulas */
              next
                case c_senc
                solve( !Store( ~device, h, wk, wl ) ▶₂ #keyImport )
                  case Derive
                  by contradiction /* from formulas */
                next
                  case Key_case_1
                  by contradiction /* from formulas */
                next
                  case Key_case_2
                  by contradiction /* from formulas */
                next
                  case SharedKey_case_1
                  by contradiction /* from formulas */
                next
                  case SharedKey_case_2
                  by contradiction /* from formulas */
                next
                  case Unwrap
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma Key_UniqueLevelandHandle [reuse]:
  all-traces
  "∀ d D k l L h H #i #j.
    ((InitKey( d, k, h, l ) @ #i) ∧ (InitKey( D, k, H, L ) @ #j)) ⇒
    ((l = L) ∧ (h = H))"
/*
guarded formula characterizing all counter-examples:
"∃ d D k l L h H #i #j.
  (InitKey( d, k, h, l ) @ #i) ∧ (InitKey( D, k, H, L ) @ #j)
 ∧
  ((¬(l = L)) ∨ (¬(h = H)))"
*/
simplify
solve( (¬(l = L))  ∥ (¬(h = H)) )
  case case_1
  solve( InitKey( d, k, h, l ) @ #i )
    case Derive
    solve( !Device( d ) ▶₀ #i )
      case Device
      solve( InitKey( D, kdf(k, ~n), H, L ) @ #j )
        case Derive
        by contradiction /* from formulas */
      next
        case Unwrap
        solve( !Integer( L ) ▶₀ #j )
          case One
          by contradiction /* from formulas */
        next
          case Suc
          solve( !Device( D ) ▶₁ #j )
            case Device
            solve( CreateKey( kdf(k, ~n), H, ('1'+n.2) ) @ #keyCreate )
              case Derive
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Key
    solve( !Device( d ) ▶₀ #i )
      case Device
      solve( !Integer( l ) ▶₁ #i )
        case One
        solve( InitKey( D, ~key, H, L ) @ #j )
          case Key
          by contradiction /* from formulas */
        next
          case Unwrap
          solve( !Integer( L ) ▶₀ #j )
            case One
            by contradiction /* from formulas */
          next
            case Suc
            solve( !Device( D ) ▶₁ #j )
              case Device
              by solve( CreateKey( ~key, H, ('1'+n) ) @ #keyCreate )
            qed
          qed
        qed
      next
        case Suc
        solve( InitKey( D, ~key, H, L ) @ #j )
          case Key
          by contradiction /* from formulas */
        next
          case Unwrap
          solve( !Integer( L ) ▶₀ #j )
            case One
            by contradiction /* from formulas */
          next
            case Suc
            solve( !Device( D ) ▶₁ #j )
              case Device
              solve( CreateKey( ~key, H, ('1'+n.1) ) @ #keyCreate )
                case Key
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case SharedKey_case_1
    solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #i )
      case Suc
      solve( !Device( ~device ) ▶₁ #i )
        case Device
        solve( !Device( ~ecived ) ▶₂ #i )
          case Device
          solve( InitKey( D, ~key, H, L ) @ #j )
            case SharedKey_case_1
            by contradiction /* from formulas */
          next
            case SharedKey_case_2
            by contradiction /* from formulas */
          next
            case Unwrap
            solve( !Integer( L ) ▶₀ #j )
              case One
              by contradiction /* from formulas */
            next
              case Suc
              solve( !Device( D ) ▶₁ #j )
                case Device
                solve( CreateKey( ~key, H, ('1'+n) ) @ #keyCreate )
                  case SharedKey
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case SharedKey_case_2
    solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #i )
      case Suc
      solve( !Device( ~device ) ▶₁ #i )
        case Device
        solve( !Device( ~ecived ) ▶₂ #i )
          case Device
          solve( InitKey( D, ~key, H, L ) @ #j )
            case SharedKey_case_1
            by contradiction /* from formulas */
          next
            case SharedKey_case_2
            by contradiction /* from formulas */
          next
            case Unwrap
            solve( !Integer( L ) ▶₀ #j )
              case One
              by contradiction /* from formulas */
            next
              case Suc
              solve( !Device( D ) ▶₁ #j )
                case Device
                solve( CreateKey( ~key, H, ('1'+n) ) @ #keyCreate )
                  case SharedKey
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Unwrap
    solve( !Integer( l ) ▶₀ #i )
      case One
      by contradiction /* from formulas */
    next
      case Suc
      solve( !Device( d ) ▶₁ #i )
        case Device
        solve( InitKey( D, k, H, L ) @ #j )
          case Derive
          solve( !Device( D ) ▶₀ #j )
            case Device
            solve( CreateKey( kdf(k, ~n.1), h.1, ('1'+n) ) @ #keyCreate )
              case Derive
              by contradiction /* from formulas */
            qed
          qed
        next
          case Key
          solve( !Device( D ) ▶₀ #j )
            case Device
            solve( !Integer( L ) ▶₁ #j )
              case One
              by solve( CreateKey( ~key, h.1, ('1'+n) ) @ #keyCreate )
            next
              case Suc
              solve( CreateKey( ~key, h.1, ('1'+n) ) @ #keyCreate )
                case Key
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case SharedKey_case_1
          solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #j )
            case Suc
            solve( !Device( ~device.1 ) ▶₁ #j )
              case Device
              solve( !Device( ~ecived ) ▶₂ #j )
                case Device
                solve( CreateKey( ~key, h.1, ('1'+n) ) @ #keyCreate )
                  case SharedKey
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case SharedKey_case_2
          solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #j )
            case Suc
            solve( !Device( ~device.1 ) ▶₁ #j )
              case Device
              solve( !Device( ~ecived ) ▶₂ #j )
                case Device
                solve( CreateKey( ~key, h.1, ('1'+n) ) @ #keyCreate )
                  case SharedKey
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case Unwrap
          solve( !Integer( L ) ▶₀ #j )
            case One
            by contradiction /* from formulas */
          next
            case Suc
            solve( !Device( D ) ▶₁ #j )
              case Device
              solve( CreateKey( k, h.1, ('1'+n) ) @ #keyCreate )
                case Derive
                solve( !Device( device.2 ) ▶₀ #keyCreate )
                  case Device
                  solve( CreateKey( kdf(k, ~n.1), H, ('1'+n.2) ) @ #keyCreate.1 )
                    case Derive
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Key
                solve( !Device( device.2 ) ▶₀ #keyCreate )
                  case Device
                  solve( !Integer( ('1'+n) ) ▶₁ #keyCreate )
                    case Suc
                    solve( CreateKey( ~key, H, ('1'+n.1) ) @ #keyCreate.1 )
                      case Key
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case SharedKey
                solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                  case Suc
                  solve( !Device( ~device.2 ) ▶₁ #keyCreate )
                    case Device
                    solve( !Device( ~ecived ) ▶₂ #keyCreate )
                      case Device
                      solve( CreateKey( ~key, H, ('1'+n) ) @ #keyCreate.1 )
                        case SharedKey
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( InitKey( d, k, h, l ) @ #i )
    case Derive
    solve( !Device( d ) ▶₀ #i )
      case Device
      solve( InitKey( D, kdf(k, ~n), H, L ) @ #j )
        case Derive
        by contradiction /* from formulas */
      next
        case Unwrap
        solve( !Integer( L ) ▶₀ #j )
          case One
          by contradiction /* from formulas */
        next
          case Suc
          solve( !Device( D ) ▶₁ #j )
            case Device
            solve( CreateKey( kdf(k, ~n), H, ('1'+n.2) ) @ #keyCreate )
              case Derive
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Key
    solve( !Device( d ) ▶₀ #i )
      case Device
      solve( !Integer( l ) ▶₁ #i )
        case One
        solve( InitKey( D, ~key, H, L ) @ #j )
          case Key
          by contradiction /* from formulas */
        next
          case Unwrap
          solve( !Integer( L ) ▶₀ #j )
            case One
            by contradiction /* from formulas */
          next
            case Suc
            solve( !Device( D ) ▶₁ #j )
              case Device
              by solve( CreateKey( ~key, H, ('1'+n) ) @ #keyCreate )
            qed
          qed
        qed
      next
        case Suc
        solve( InitKey( D, ~key, H, L ) @ #j )
          case Key
          by contradiction /* from formulas */
        next
          case Unwrap
          solve( !Integer( L ) ▶₀ #j )
            case One
            by contradiction /* from formulas */
          next
            case Suc
            solve( !Device( D ) ▶₁ #j )
              case Device
              solve( CreateKey( ~key, H, ('1'+n.1) ) @ #keyCreate )
                case Key
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case SharedKey_case_1
    solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #i )
      case Suc
      solve( !Device( ~device ) ▶₁ #i )
        case Device
        solve( !Device( ~ecived ) ▶₂ #i )
          case Device
          solve( InitKey( D, ~key, H, L ) @ #j )
            case SharedKey_case_1
            by contradiction /* from formulas */
          next
            case SharedKey_case_2
            by contradiction /* from formulas */
          next
            case Unwrap
            solve( !Integer( L ) ▶₀ #j )
              case One
              by contradiction /* from formulas */
            next
              case Suc
              solve( !Device( D ) ▶₁ #j )
                case Device
                solve( CreateKey( ~key, H, ('1'+n) ) @ #keyCreate )
                  case SharedKey
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case SharedKey_case_2
    solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #i )
      case Suc
      solve( !Device( ~device ) ▶₁ #i )
        case Device
        solve( !Device( ~ecived ) ▶₂ #i )
          case Device
          solve( InitKey( D, ~key, H, L ) @ #j )
            case SharedKey_case_1
            by contradiction /* from formulas */
          next
            case SharedKey_case_2
            by contradiction /* from formulas */
          next
            case Unwrap
            solve( !Integer( L ) ▶₀ #j )
              case One
              by contradiction /* from formulas */
            next
              case Suc
              solve( !Device( D ) ▶₁ #j )
                case Device
                solve( CreateKey( ~key, H, ('1'+n) ) @ #keyCreate )
                  case SharedKey
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Unwrap
    solve( !Integer( l ) ▶₀ #i )
      case One
      by contradiction /* from formulas */
    next
      case Suc
      solve( !Device( d ) ▶₁ #i )
        case Device
        solve( InitKey( D, k, H, L ) @ #j )
          case Derive
          solve( !Device( D ) ▶₀ #j )
            case Device
            solve( CreateKey( kdf(k, ~n.1), h.1, ('1'+n) ) @ #keyCreate )
              case Derive
              by contradiction /* from formulas */
            qed
          qed
        next
          case Key
          solve( !Device( D ) ▶₀ #j )
            case Device
            solve( !Integer( L ) ▶₁ #j )
              case One
              by solve( CreateKey( ~key, h.1, ('1'+n) ) @ #keyCreate )
            next
              case Suc
              solve( CreateKey( ~key, h.1, ('1'+n) ) @ #keyCreate )
                case Key
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case SharedKey_case_1
          solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #j )
            case Suc
            solve( !Device( ~device.1 ) ▶₁ #j )
              case Device
              solve( !Device( ~ecived ) ▶₂ #j )
                case Device
                solve( CreateKey( ~key, h.1, ('1'+n) ) @ #keyCreate )
                  case SharedKey
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case SharedKey_case_2
          solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #j )
            case Suc
            solve( !Device( ~device.1 ) ▶₁ #j )
              case Device
              solve( !Device( ~ecived ) ▶₂ #j )
                case Device
                solve( CreateKey( ~key, h.1, ('1'+n) ) @ #keyCreate )
                  case SharedKey
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case Unwrap
          solve( !Integer( L ) ▶₀ #j )
            case One
            by contradiction /* from formulas */
          next
            case Suc
            solve( !Device( D ) ▶₁ #j )
              case Device
              solve( CreateKey( k, h.1, ('1'+n) ) @ #keyCreate )
                case Derive
                solve( !Device( device.2 ) ▶₀ #keyCreate )
                  case Device
                  solve( CreateKey( kdf(k, ~n.1), H, ('1'+n.2) ) @ #keyCreate.1 )
                    case Derive
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case Key
                solve( !Device( device.2 ) ▶₀ #keyCreate )
                  case Device
                  solve( !Integer( ('1'+n) ) ▶₁ #keyCreate )
                    case Suc
                    solve( CreateKey( ~key, H, ('1'+n.1) ) @ #keyCreate.1 )
                      case Key
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case SharedKey
                solve( !Integer( ('1'+'1'+'1'+z) ) ▶₀ #keyCreate )
                  case Suc
                  solve( !Device( ~device.2 ) ▶₁ #keyCreate )
                    case Device
                    solve( !Device( ~ecived ) ▶₂ #keyCreate )
                      case Device
                      solve( CreateKey( ~key, H, ('1'+n) ) @ #keyCreate.1 )
                        case SharedKey
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/csf19-wrapping/siv.spthy

------------------------------------------------------------------------------
analyzed: examples/csf19-wrapping/siv.spthy

  output:          examples/csf19-wrapping/siv.spthy.tmp
  processing time: 167.577212496s
  origin (all-traces): verified (2087 steps)
  Counter_Monotonicity (all-traces): verified (1302 steps)
  IV_Uniqueness (all-traces): verified (8 steps)
  Key_UsageImpliesInitialization (all-traces): verified (86 steps)
  Key_IntegrityAndConfidentiality (all-traces): verified (427 steps)
  Key_UniqueLevelandHandle (all-traces): verified (170 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/csf19-wrapping/siv.spthy

  output:          examples/csf19-wrapping/siv.spthy.tmp
  processing time: 167.577212496s
  origin (all-traces): verified (2087 steps)
  Counter_Monotonicity (all-traces): verified (1302 steps)
  IV_Uniqueness (all-traces): verified (8 steps)
  Key_UsageImpliesInitialization (all-traces): verified (86 steps)
  Key_IntegrityAndConfidentiality (all-traces): verified (427 steps)
  Key_UniqueLevelandHandle (all-traces): verified (170 steps)

==============================================================================
*/
