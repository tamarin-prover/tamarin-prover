theory PKCS11TemplatePolicy begin

// Function signature and definition of the equational theory E

functions: attdec/1, attenc/1, attextr/1, attsens/1, atttrus/1,
           attunwrap/1, attut/1, attwrap/1, attwt/1, attwwt/1, fst/1, key/1, pair/2,
           sdec/2, senc/2, snd/1, tem/1
equations:
    attdec(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>) = dec,
    attenc(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>) = enc,
    attextr(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>) = extr,
    attsens(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>) = sens,
    atttrus(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>) = trus,
    attunwrap(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)
  = unwrap,
    attut(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>) = ut,
    attwrap(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>) = wrap,
    attwt(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>) = wt,
    attwwt(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>) = wwt,
    fst(<x.1, x.2>) = x.1,
    key(<k, templ>) = k,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    tem(<k, templ>) = templ

heuristic: p

predicate: Can_encrypt( wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut
)<=>enc = 'on'

predicate: Can_decrypt( wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut
)<=>dec = 'on'

predicate: Can_wrap( wrap1, unwrap1, enc1, dec1, sens1, extr1, trus1, wwt1,
          wt1, ut1, wrap2, unwrap2, enc2, dec2, sens2, extr2, trus2, wwt2,
          wt2, ut2
)<=>((wrap1 = 'on') ∧ (extr2 = 'on')) ∧
((wwt2 = 'off') ∨ ((wwt2 = 'on') ∧ (trus1 = 'on')))

predicate: Can_unwrap( wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut )<=>unwrap = 'on'

predicate: Can_get_keyvalue( wrap, unwrap, enc, dec, sens, extr, trus, wwt,
                  wt, ut
)<=>sens = 'off'

predicate: Permits( t_wrap, t_unwrap, t_enc, t_dec, t_sens, t_extr, t_trus,
         t_wwt, t_wt, t_ut, wrap, unwrap, enc, dec, sens, extr, trus, wwt,
         wt, ut
)<=>(((((((((t_wrap = wrap) ∧ (t_unwrap = unwrap)) ∧ (t_enc = enc)) ∧
      (t_dec = dec)) ∧
     (t_sens = sens)) ∧
    (t_extr = extr)) ∧
   (t_trus = trus)) ∧
  (t_wwt = wwt)) ∧
 (t_wt = wt)) ∧
(t_ut = ut)

lemma dec_limits [use_induction, reuse]:
  all-traces
  "(((((∀ k m #t1.
         (DecUsing( k, m ) @ #t1) ⇒
         (((((∃ h2 k2 #t2 #t3.
               (((NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)) ∧ (#t2 < #t1)) ∧
               (#t3 < #t1)) ∨
             (∃ h2 #t2 #t3 #t4.
               (((((NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3)) ∧
                  (!KU( m ) @ #t4)) ∧
                 (#t2 < #t1)) ∧
                (#t3 < #t1)) ∧
               (#t4 < #t1))) ∨
            (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (#t2 < #t1))) ∨
           (∃ h2 k2 #t2 #t3 a.
             (((Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)) ∧ (#t2 < #t1)) ∧
             (#t3 < #t1))) ∨
          (∃ #t2 #t3 h1 h2 k2.
            (((WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)) ∧
             (#t2 < #t1)) ∧
            (#t3 < #t1)))) ∧
       (∀ k #t2.
         (GetKeyValue( k ) @ #t2) ⇒ (∃ L_h #t1. NewKey( L_h, k, 'off' ) @ #t1))) ∧
      (¬(∃ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
          Insert( <'obj', L_h>,
                  <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
          ) @ #t))) ∧
     (¬(∃ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
         Insert( <'obj', L_h>,
                 <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
         ) @ #t))) ∧
    (¬(∃ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
        Insert( <'obj', L_h>,
                <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
        ) @ #t))) ∧
   (¬(∃ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
       Insert( <'obj', L_h>,
               <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
       ) @ #t))"
/*
guarded formula characterizing all counter-examples:
"((∃ k m #t1.
    (DecUsing( k, m ) @ #t1)
   ∧
    (∀ h2 k2 #t2 #t3.
      (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
     ⇒
      ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)))) ∧
    (∀ h2 #t2 #t3 #t4.
      (NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3) ∧ (!KU( m ) @ #t4)
     ⇒
      ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)) ∨ (¬(#t4 < #t1)))) ∧
    (∀ #t2. (EncUsing( k, m ) @ #t2) ⇒ ¬(#t2 < #t1)) ∧
    (∀ h2 k2 #t2 #t3 a.
      (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
     ⇒
      ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)))) ∧
    (∀ #t2 #t3 h1 h2 k2.
      (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
     ⇒
      ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1))))) ∨
  (∃ k #t2.
    (GetKeyValue( k ) @ #t2)
   ∧
    ∀ L_h #t1. (NewKey( L_h, k, 'off' ) @ #t1) ⇒ ⊥) ∨
  (∃ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
    (Insert( <'obj', L_h>,
             <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
     ) @ #t)) ∨
  (∃ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
    (Insert( <'obj', L_h>,
             <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
     ) @ #t)) ∨
  (∃ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
    (Insert( <'obj', L_h>,
             <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
     ) @ #t)) ∨
  (∃ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
    (Insert( <'obj', L_h>,
             <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
     ) @ #t)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ k m #t1.
           (DecUsing( k, m ) @ #t1)
          ∧
           (∀ h2 k2 #t2 #t3.
             (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
            ⇒
             ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)))) ∧
           (∀ h2 #t2 #t3 #t4.
             (NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3) ∧ (!KU( m ) @ #t4)
            ⇒
             ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)) ∨ (¬(#t4 < #t1)))) ∧
           (∀ #t2. (EncUsing( k, m ) @ #t2) ⇒ ¬(#t2 < #t1)) ∧
           (∀ h2 k2 #t2 #t3 a.
             (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
            ⇒
             ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)))) ∧
           (∀ #t2 #t3 h1 h2 k2.
             (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
            ⇒
             ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)))))  ∥
         (∃ k #t2.
           (GetKeyValue( k ) @ #t2)
          ∧
           ∀ L_h #t1. (NewKey( L_h, k, 'off' ) @ #t1) ⇒ ⊥)  ∥
         (∃ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
           (Insert( <'obj', L_h>,
                    <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
            ) @ #t))  ∥
         (∃ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
           (Insert( <'obj', L_h>,
                    <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
            ) @ #t))  ∥
         (∃ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
           (Insert( <'obj', L_h>,
                    <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
            ) @ #t))  ∥
         (∃ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
           (Insert( <'obj', L_h>,
                    <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
            ) @ #t)) )
    case case_1
    solve( ((∀ k m #t1.
              (DecUsing( k, m ) @ #t1)
             ⇒
              ((last(#t1)) ∨
               (∃ h2 k2 #t2 #t3.
                 (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
               (∃ h2 #t2 #t3 #t4.
                 (NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3) ∧ (!KU( m ) @ #t4)
                ∧
                 (¬(last(#t4))) ∧
                 (¬(last(#t3))) ∧
                 (¬(last(#t2))) ∧
                 (#t2 < #t1) ∧
                 (#t3 < #t1) ∧
                 (#t4 < #t1)) ∨
               (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (¬(last(#t2))) ∧ (#t2 < #t1)) ∨
               (∃ h2 k2 #t2 #t3 a.
                 (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
               (∃ #t2 #t3 h1 h2 k2.
                 (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)))) ∧
            (∀ k #t2.
              (GetKeyValue( k ) @ #t2)
             ⇒
              ((last(#t2)) ∨
               (∃ L_h #t1. (NewKey( L_h, k, 'off' ) @ #t1) ∧ ¬(last(#t1))))) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
               ) @ #t)
             ⇒
              last(#t)))  ∥
           (∃ x y #t3.
             (IsIn( x, y ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (∀ #t2.
               (Insert( x, y ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t1 yp.
                  (Insert( x, yp ) @ #t1)
                 ∧
                  (¬(last(#t1))) ∧
                  (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                  (¬(#t1 = #t2)) ∧
                  (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_0( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_1( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_2( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_3( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_4( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_5( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3))) )
      case case_1
      solve( (last(#t1))  ∥
             (∃ h2 k2 #t2 #t3.
               (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
              ∧
               (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1))  ∥
             (∃ h2 #t2 #t3 #t4.
               (NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3) ∧ (!KU( m ) @ #t4)
              ∧
               (¬(last(#t4))) ∧
               (¬(last(#t3))) ∧
               (¬(last(#t2))) ∧
               (#t2 < #t1) ∧
               (#t3 < #t1) ∧
               (#t4 < #t1))  ∥
             (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (¬(last(#t2))) ∧ (#t2 < #t1))  ∥
             (∃ h2 k2 #t2 #t3 a.
               (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
              ∧
               (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1))  ∥
             (∃ #t2 #t3 h1 h2 k2.
               (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
              ∧
               (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) )
        case case_1
        solve( State_11111111211111( L_h, k, m, v, lock ) ▶₀ #t1 )
          case ifkeyvk_0_1111111121111
          solve( !KU( senc(m, k) ) @ #vk.2 )
            case c_senc
            solve( Insert( <'obj', L_h>,
                           <k, x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                   ) @ #t2 )
              case insertobjLhkatts_0_1111111111111111
              solve( State_1111111111111111( L_h,
                                             <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>, k, lock, ptr,
                                             templ
                     ) ▶₀ #t2 )
                case eventNewKeyLhkattsensatts_0_111111111111111
                solve( Insert( <'F_template', ptr>,
                               <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                       ) @ #t2.2 )
                  case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                  by contradiction /* from formulas */
                next
                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case insertobjhmatts_0_11111211111111
              solve( State_11111211111111( L_h.1,
                                           <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>, L_h, k.1, k, ut,
                                           v, lock
                     ) ▶₀ #t2 )
                case newh_0_1111121111111
                solve( Insert( <'F_template', z>,
                               <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                       ) @ #t2.2 )
                  case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                  by contradiction /* cyclic */
                next
                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                  solve( (#vr.13 < #t2.2)  ∥ (#vr.13 = #t2.2) )
                    case case_1
                    solve( State_111112111111111111111( L_h.1, atts, h2, k.2, m.1, ut, v,
                                                        ~n.2
                           ) ▶₀ #t2.1 )
                      case outh_0_11111211111111111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    solve( State_111112111111111111111( L_h.1, atts, h2, k.2, m.1, ut, v,
                                                        ~n.2
                           ) ▶₀ #t2.1 )
                      case outh_0_11111211111111111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case outkeyv_0_1111211111
            solve( State_111111111111111( L_h.2,
                                          <x.18, x.19, x.20, x.21, 'off', x.22, x.23, x.24, x.25, x.26>, t,
                                          lock, ptr, templ
                   ) ▶₀ #t1.1 )
              case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
              by contradiction /* impossible chain */
            qed
          next
            case outm_0_111111112111111
            solve( (∃ h2 k2 #t2 #t3.
                     (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                    ∧
                     (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #vr.17) ∧ (#t3 < #vr.17))  ∥
                   (∃ h2 #t2 #t3 #t4.
                     (NewKey( h2, k.1, 'off' ) @ #t2) ∧ (!KU( k.1 ) @ #t3) ∧ (!KU( t ) @ #t4)
                    ∧
                     (¬(last(#t4))) ∧
                     (¬(last(#t3))) ∧
                     (¬(last(#t2))) ∧
                     (#t2 < #vr.17) ∧
                     (#t3 < #vr.17) ∧
                     (#t4 < #vr.17))  ∥
                   (∃ #t2. (EncUsing( k.1, t ) @ #t2) ∧ (¬(last(#t2))) ∧ (#t2 < #vr.17))  ∥
                   (∃ h2 k2 #t2 #t3 a.
                     (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                    ∧
                     (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #vr.17) ∧ (#t3 < #vr.17))  ∥
                   (∃ #t2 #t3 h1 h2 k2.
                     (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
                    ∧
                     (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #vr.17) ∧ (#t3 < #vr.17)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* cyclic */
            next
              case case_3
              solve( State_1111111121111111( L_h.1, k.1, m.1, v, ~n.1 ) ▶₀ #t2 )
                case outm_0_111111112111111
                solve( (#t2.3 < #t2.4)  ∥ (#t2.3 = #t2.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( State_111111121111( L_h.2, t, v, lock ) ▶₀ #t2.1 )
                    case ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          next
            case outsenckeyvkeyv_0_111111211111111_case_1
            solve( (z.8 = 'off')  ∥ ((z.8 = 'on') ∧ (z = 'on')) )
              case case_1
              solve( Insert( <'F_template', z.1>,
                             <z.2, z.3, z.4, z.5, z.6, 'on', z.7, 'off', z.8, z.9>
                     ) @ #t2.2 )
                case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( Insert( <'F_template', z>,
                             <z.1, z.2, z.3, z.4, z.5, 'on', z.6, 'on', z.7, z.8>
                     ) @ #t2.2 )
                case insertFtemplatetrustedononoffoffononononusageusage_0_
                by contradiction /* cyclic */
              next
                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                solve( (#vr.13 < #t2.1)  ∥ (#vr.13 = #t2.1) )
                  case case_1
                  solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.1 ) ▶₀ #t2 )
                    case outsenckeyvkeyv_0_111111211111111
                    solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( (#t2.3 < #t2.6)  ∥ (#t2.3 = #t2.6) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( (#vr.13 < #t2.5)  ∥ (#vr.13 = #t2.5) )
                          case case_1
                          solve( (#t2.1 < #t2.5)  ∥ (#t2.1 = #t2.5) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( State_1( ) ▶₀ #t2.1 )
                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.1 ) ▶₀ #t2 )
                    case outsenckeyvkeyv_0_111111211111111
                    solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( (#t2.1 < #t2.5)  ∥ (#t2.1 = #t2.5) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( Insert( <'obj', L_h>,
                                         <k, x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                                 ) @ #t2.2 )
                            case insertobjLhkatts_0_1111111111111111
                            solve( State_1111111111111111( L_h,
                                                           <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>,
                                                           k, lock, ptr, templ
                                   ) ▶₀ #t2.2 )
                              case eventNewKeyLhkattsensatts_0_111111111111111
                              solve( Insert( <'F_template', ptr>,
                                             <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                                     ) @ #t2.6 )
                                case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                                solve( (#vr.12 < #t2.4)  ∥ (#vr.12 = #t2.4) )
                                  case case_1
                                  solve( State_1111111111111111111111( L_h, atts, k, ~n.4, ptr, templ
                                         ) ▶₀ #t2.3 )
                                    case outLh_0_111111111111111111111
                                    solve( (#vr.12 < #t2.7)  ∥ (#vr.12 = #t2.7) )
                                      case case_1
                                      solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( State_11( ) ▶₀ #t2.4 )
                                          case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                next
                                  case case_2
                                  solve( State_1111111111111111111111( L_h, atts, k, ~n.4, ptr, templ
                                         ) ▶₀ #t2.3 )
                                    case outLh_0_111111111111111111111
                                    solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      solve( Insert( <'obj', h2>,
                                                     <m, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                      'undef', 'undef'>
                                             ) @ #t2.5 )
                                        case insertobjLhkatts_0_1111111111111111
                                        solve( State_1111111111111111( h2,
                                                                       <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                        'off', 'on', 'undef', 'undef'>,
                                                                       m, lock, ptr, templ
                                               ) ▶₀ #t2.5 )
                                          case eventNewKeyLhkattsensatts_0_111111111111111
                                          solve( (#vr.50 < #vr.32)  ∥ (#t2.3 < #vr.50) )
                                            case case_1
                                            solve( Insert( <'F_template', ptr>,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>
                                                   ) @ #t2.8 )
                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                              solve( (#t2.1 < #t2.7)  ∥ (#t2.1 = #t2.7) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( State_1111111111111111111111( L_h, atts, k, ~n.7, ptr,
                                                                                     templ
                                                       ) ▶₀ #t2.6 )
                                                  case outLh_0_111111111111111111111
                                                  solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( <'obj', h1>,
                                                                   <~n.1, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                    x.5, 'usage', x.6>
                                                           ) @ #t2.7 )
                                                      case insertobjLhkatts_0_1111111111111111
                                                      by solve( State_1111111111111111( h1,
                                                                                        <'on', x, x.1, x.2, 
                                                                                         x.3, x.4, 'on', x.5, 
                                                                                         'usage', x.6>,
                                                                                        ~n.1, lock, ptr, templ
                                                                ) ▶₀ #t2.7 )
                                                    next
                                                      case insertobjhmatts_0_11111211111111
                                                      solve( State_11111211111111( L_h,
                                                                                   <'on', x, x.1, x.2, x.3, 
                                                                                    x.4, 'on', x.5, 'usage', 
                                                                                    x.6>,
                                                                                   h1, k, ~n.1, ut, v, lock
                                                             ) ▶₀ #t2.7 )
                                                        case newh_0_1111121111111
                                                        solve( Insert( <'F_template', z>,
                                                                       <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                        x.5, 'usage', x.6>
                                                               ) @ #t2.9 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( Insert( <'F_template', ptr>,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>
                                                   ) @ #t2.8 )
                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                              solve( (#t2.1 < #t2.7)  ∥ (#t2.1 = #t2.7) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( State_1111111111111111111111( L_h, atts, k, ~n.7, ptr,
                                                                                     templ
                                                       ) ▶₀ #t2.6 )
                                                  case outLh_0_111111111111111111111
                                                  solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( <'obj', h1>,
                                                                   <~n.1, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                    x.5, 'usage', x.6>
                                                           ) @ #t2.7 )
                                                      case insertobjLhkatts_0_1111111111111111
                                                      by solve( State_1111111111111111( h1,
                                                                                        <'on', x, x.1, x.2, 
                                                                                         x.3, x.4, 'on', x.5, 
                                                                                         'usage', x.6>,
                                                                                        ~n.1, lock, ptr, templ
                                                                ) ▶₀ #t2.7 )
                                                    next
                                                      case insertobjhmatts_0_11111211111111
                                                      solve( State_11111211111111( L_h,
                                                                                   <'on', x, x.1, x.2, x.3, 
                                                                                    x.4, 'on', x.5, 'usage', 
                                                                                    x.6>,
                                                                                   h1, k, ~n.1, ut, v, lock
                                                             ) ▶₀ #t2.7 )
                                                        case newh_0_1111121111111
                                                        solve( (#vr.69 < #vr.50)  ∥ (#t2.6 < #vr.69) )
                                                          case case_1
                                                          solve( Insert( <'F_template', z>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.9 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( Insert( <'F_template', z>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.9 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case insertobjhmatts_0_11111211111111
                                        solve( State_11111211111111( L_h,
                                                                     <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                      'off', 'on', 'undef', 'undef'>,
                                                                     h2, k, m, ut, v, lock
                                               ) ▶₀ #t2.5 )
                                          case newh_0_1111121111111
                                          solve( (#vr.51 < #vr.32)  ∥ (#t2.3 < #vr.51) )
                                            case case_1
                                            solve( Insert( <'F_template', z>,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>
                                                   ) @ #t2.8 )
                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                              solve( (#t2.1 < #t2.7)  ∥ (#t2.1 = #t2.7) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m.1,
                                                                                    ut, v, ~n.6
                                                       ) ▶₀ #t2.6 )
                                                  case outh_0_11111211111111111111
                                                  solve( (#t2.8 < #t2.10)  ∥ (#t2.8 = #t2.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( (#t2.1 < #t2.9)  ∥ (#t2.1 = #t2.9) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( Insert( <'obj', h1>,
                                                                     <~n.1, 'on', x, x.1, x.2, x.3, x.4, 
                                                                      'on', x.5, 'usage', x.6>
                                                             ) @ #t2.7 )
                                                        case insertobjLhkatts_0_1111111111111111
                                                        by solve( State_1111111111111111( h1,
                                                                                          <'on', x, x.1, x.2, 
                                                                                           x.3, x.4, 'on', 
                                                                                           x.5, 'usage', x.6>,
                                                                                          ~n.1, lock, ptr,
                                                                                          templ
                                                                  ) ▶₀ #t2.7 )
                                                      next
                                                        case insertobjhmatts_0_11111211111111
                                                        solve( State_11111211111111( L_h.1,
                                                                                     <'on', x, x.1, x.2, x.3, 
                                                                                      x.4, 'on', x.5, 
                                                                                      'usage', x.6>,
                                                                                     h1, k.1, ~n.1, ut, v,
                                                                                     lock
                                                               ) ▶₀ #t2.7 )
                                                          case newh_0_1111121111111
                                                          solve( Insert( <'F_template', z>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.10 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( Insert( <'F_template', z>,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>
                                                   ) @ #t2.8 )
                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                              solve( (#t2.1 < #t2.7)  ∥ (#t2.1 = #t2.7) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m.1,
                                                                                    ut, v, ~n.6
                                                       ) ▶₀ #t2.6 )
                                                  case outh_0_11111211111111111111
                                                  solve( (#t2.8 < #t2.10)  ∥ (#t2.8 = #t2.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( (#t2.1 < #t2.9)  ∥ (#t2.1 = #t2.9) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( Insert( <'obj', h1>,
                                                                     <~n.1, 'on', x, x.1, x.2, x.3, x.4, 
                                                                      'on', x.5, 'usage', x.6>
                                                             ) @ #t2.7 )
                                                        case insertobjLhkatts_0_1111111111111111
                                                        by solve( State_1111111111111111( h1,
                                                                                          <'on', x, x.1, x.2, 
                                                                                           x.3, x.4, 'on', 
                                                                                           x.5, 'usage', x.6>,
                                                                                          ~n.1, lock, ptr,
                                                                                          templ
                                                                  ) ▶₀ #t2.7 )
                                                      next
                                                        case insertobjhmatts_0_11111211111111
                                                        solve( State_11111211111111( L_h.1,
                                                                                     <'on', x, x.1, x.2, x.3, 
                                                                                      x.4, 'on', x.5, 
                                                                                      'usage', x.6>,
                                                                                     h1, k.1, ~n.1, ut, v,
                                                                                     lock
                                                               ) ▶₀ #t2.7 )
                                                          case newh_0_1111121111111
                                                          solve( (#vr.68 < #vr.51)  ∥ (#t2.6 < #vr.68) )
                                                            case case_1
                                                            solve( Insert( <'F_template', z>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.10 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( Insert( <'F_template', z>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.10 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                solve( (#t2.4 < #t2.1)  ∥ (#t2.4 = #t2.1)  ∥ (#vr.18 < #t2.4) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  solve( State_1111111111111111111111( L_h, atts, k, ~n.4, ptr, templ
                                         ) ▶₀ #t2.3 )
                                    case outLh_0_111111111111111111111
                                    solve( (#t2.1 < #t2.6)  ∥ (#t2.1 = #t2.6) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      solve( Insert( <'obj', h2>,
                                                     <m, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                      'undef', 'undef'>
                                             ) @ #t2.4 )
                                        case insertobjLhkatts_0_1111111111111111
                                        solve( State_1111111111111111( h2,
                                                                       <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                        'off', 'on', 'undef', 'undef'>,
                                                                       m, lock, ptr, templ
                                               ) ▶₀ #t2.4 )
                                          case eventNewKeyLhkattsensatts_0_111111111111111
                                          solve( ((#vr.33 < #vr.51) ∧
                                                  (∃ #t2.
                                                    (Unlock_0( '0', ~n.6, 'device' ) @ #t2)
                                                   ∧
                                                    (#vr.33 < #t2) ∧
                                                    (#t2 < #vr.51) ∧
                                                    (∀ #t0 pp.
                                                      (Unlock( pp, ~n.6, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                                                    (∀ pp lpp #t0.
                                                      (Lock( pp, lpp, 'device' ) @ #t0)
                                                     ⇒
                                                      ((#t0 < #vr.33) ∨ (#t0 = #vr.33) ∨ (#t2 < #t0))) ∧
                                                    (∀ pp lpp #t0.
                                                      (Unlock( pp, lpp, 'device' ) @ #t0)
                                                     ⇒
                                                      ((#t0 < #vr.33) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                 (#vr.51 < #vr.33)  ∥ (#vr.33 = #vr.51) )
                                            case case_1
                                            solve( Insert( <'F_template', ptr>,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>
                                                   ) @ #t2.7 )
                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                              solve( (#t2.6 < #t2.1)  ∥ (#t2.6 = #t2.1)  ∥ (#vr.30 < #t2.6) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( State_1111111111111111111111( L_h, atts, k, ~n.7, ptr,
                                                                                     templ
                                                       ) ▶₀ #t2.5 )
                                                  case outLh_0_111111111111111111111
                                                  solve( (#t2.7 < #t2.1)  ∥ (#t2.7 = #t2.1)  ∥
                                                         (#vr.30 < #t2.7) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( <'obj', h1>,
                                                                   <~n.1, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                    x.5, 'usage', x.6>
                                                           ) @ #t2.6 )
                                                      case insertobjLhkatts_0_1111111111111111
                                                      by solve( State_1111111111111111( h1,
                                                                                        <'on', x, x.1, x.2, 
                                                                                         x.3, x.4, 'on', x.5, 
                                                                                         'usage', x.6>,
                                                                                        ~n.1, lock, ptr, templ
                                                                ) ▶₀ #t2.6 )
                                                    next
                                                      case insertobjhmatts_0_11111211111111
                                                      solve( State_11111211111111( L_h,
                                                                                   <'on', x, x.1, x.2, x.3, 
                                                                                    x.4, 'on', x.5, 'usage', 
                                                                                    x.6>,
                                                                                   h1, k, ~n.1, ut, v, lock
                                                             ) ▶₀ #t2.6 )
                                                        case newh_0_1111121111111
                                                        solve( (#vr.70 < #vr.51)  ∥ (#t2.5 < #vr.70) )
                                                          case case_1
                                                          solve( Insert( <'F_template', z>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.8 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( Insert( <'F_template', z>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.8 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( Insert( <'F_template', ptr>,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>
                                                   ) @ #t2.7 )
                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                              solve( (#t2.6 < #t2.1)  ∥ (#t2.6 = #t2.1)  ∥ (#vr.30 < #t2.6) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( State_1111111111111111111111( L_h, atts, k, ~n.7, ptr,
                                                                                     templ
                                                       ) ▶₀ #t2.5 )
                                                  case outLh_0_111111111111111111111
                                                  solve( (#t2.1 < #t2.7)  ∥ (#t2.1 = #t2.7) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( <'obj', h1>,
                                                                   <~n.1, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                    x.5, 'usage', x.6>
                                                           ) @ #t2.6 )
                                                      case insertobjLhkatts_0_1111111111111111
                                                      by solve( State_1111111111111111( h1,
                                                                                        <'on', x, x.1, x.2, 
                                                                                         x.3, x.4, 'on', x.5, 
                                                                                         'usage', x.6>,
                                                                                        ~n.1, lock, ptr, templ
                                                                ) ▶₀ #t2.6 )
                                                    next
                                                      case insertobjhmatts_0_11111211111111
                                                      solve( State_11111211111111( L_h,
                                                                                   <'on', x, x.1, x.2, x.3, 
                                                                                    x.4, 'on', x.5, 'usage', 
                                                                                    x.6>,
                                                                                   h1, k, ~n.1, ut, v, lock
                                                             ) ▶₀ #t2.6 )
                                                        case newh_0_1111121111111
                                                        solve( Insert( <'F_template', z>,
                                                                       <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                        x.5, 'usage', x.6>
                                                               ) @ #t2.8 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( (#t2.1 < #t2.5)  ∥ (#t2.1 = #t2.5) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              solve( Insert( <'obj', h1>,
                                                             <~n.1, 'on', x, x.1, x.2, x.3, x.4, 'on', x.5, 
                                                              'usage', x.6>
                                                     ) @ #t2.4 )
                                                case insertobjLhkatts_0_1111111111111111
                                                by solve( State_1111111111111111( h1,
                                                                                  <'on', x, x.1, x.2, x.3, 
                                                                                   x.4, 'on', x.5, 'usage', 
                                                                                   x.6>,
                                                                                  ~n.1, lock, ptr, templ
                                                          ) ▶₀ #t2.4 )
                                              next
                                                case insertobjhmatts_0_11111211111111
                                                solve( State_11111211111111( L_h,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>,
                                                                             h1, k, ~n.1, ut, v, lock
                                                       ) ▶₀ #t2.4 )
                                                  case newh_0_1111121111111
                                                  solve( Insert( <'F_template', z>,
                                                                 <'on', x, x.1, x.2, x.3, x.4, 'on', x.5, 
                                                                  'usage', x.6>
                                                         ) @ #t2.6 )
                                                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case insertobjhmatts_0_11111211111111
                                        solve( State_11111211111111( L_h,
                                                                     <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                      'off', 'on', 'undef', 'undef'>,
                                                                     h2, k, m, ut, v, lock
                                               ) ▶₀ #t2.4 )
                                          case newh_0_1111121111111
                                          solve( (#vr.52 < #vr.33)  ∥ (#t2.3 < #vr.52) )
                                            case case_1
                                            solve( Insert( <'F_template', z>,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>
                                                   ) @ #t2.7 )
                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                              solve( (#t2.6 < #t2.1)  ∥ (#t2.6 = #t2.1)  ∥ (#vr.30 < #t2.6) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m.1,
                                                                                    ut, v, ~n.6
                                                       ) ▶₀ #t2.5 )
                                                  case outh_0_11111211111111111111
                                                  solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( Insert( <'obj', h1>,
                                                                     <~n.1, 'on', x, x.1, x.2, x.3, x.4, 
                                                                      'on', x.5, 'usage', x.6>
                                                             ) @ #t2.6 )
                                                        case insertobjLhkatts_0_1111111111111111
                                                        by solve( State_1111111111111111( h1,
                                                                                          <'on', x, x.1, x.2, 
                                                                                           x.3, x.4, 'on', 
                                                                                           x.5, 'usage', x.6>,
                                                                                          ~n.1, lock, ptr,
                                                                                          templ
                                                                  ) ▶₀ #t2.6 )
                                                      next
                                                        case insertobjhmatts_0_11111211111111
                                                        solve( State_11111211111111( L_h.1,
                                                                                     <'on', x, x.1, x.2, x.3, 
                                                                                      x.4, 'on', x.5, 
                                                                                      'usage', x.6>,
                                                                                     h1, k.1, ~n.1, ut, v,
                                                                                     lock
                                                               ) ▶₀ #t2.6 )
                                                          case newh_0_1111121111111
                                                          solve( Insert( <'F_template', z>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.9 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( Insert( <'F_template', z>,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>
                                                   ) @ #t2.7 )
                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                              solve( (#t2.6 < #t2.1)  ∥ (#t2.6 = #t2.1)  ∥ (#vr.30 < #t2.6) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m.1,
                                                                                    ut, v, ~n.6
                                                       ) ▶₀ #t2.5 )
                                                  case outh_0_11111211111111111111
                                                  solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.1)  ∥ (#t2.8 = #t2.1)  ∥
                                                           (#vr.30 < #t2.8) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( Insert( <'obj', h1>,
                                                                     <~n.1, 'on', x, x.1, x.2, x.3, x.4, 
                                                                      'on', x.5, 'usage', x.6>
                                                             ) @ #t2.6 )
                                                        case insertobjLhkatts_0_1111111111111111
                                                        by solve( State_1111111111111111( h1,
                                                                                          <'on', x, x.1, x.2, 
                                                                                           x.3, x.4, 'on', 
                                                                                           x.5, 'usage', x.6>,
                                                                                          ~n.1, lock, ptr,
                                                                                          templ
                                                                  ) ▶₀ #t2.6 )
                                                      next
                                                        case insertobjhmatts_0_11111211111111
                                                        solve( State_11111211111111( L_h.1,
                                                                                     <'on', x, x.1, x.2, x.3, 
                                                                                      x.4, 'on', x.5, 
                                                                                      'usage', x.6>,
                                                                                     h1, k.1, ~n.1, ut, v,
                                                                                     lock
                                                               ) ▶₀ #t2.6 )
                                                          case newh_0_1111121111111
                                                          solve( (#vr.69 < #vr.52)  ∥ (#t2.5 < #vr.69) )
                                                            case case_1
                                                            solve( Insert( <'F_template', z>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.9 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( Insert( <'F_template', z>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.9 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case case_3
                                  solve( State_1111111111111111111111( L_h, atts, k, ~n.4, ptr, templ
                                         ) ▶₀ #t2.3 )
                                    case outLh_0_111111111111111111111
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case insertobjhmatts_0_11111211111111
                            solve( State_11111211111111( L_h.1,
                                                         <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>,
                                                         L_h, k.1, k, ut, v, lock
                                   ) ▶₀ #t2.2 )
                              case newh_0_1111121111111
                              solve( (#vr.34 < #vr.22)  ∥ (#t2 < #vr.34) )
                                case case_1
                                solve( Insert( <'F_template', z>,
                                               <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                                       ) @ #t2.6 )
                                  case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                                  by contradiction /* cyclic */
                                next
                                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                  solve( (#t2.4 < #t2.1)  ∥ (#t2.4 = #t2.1)  ∥ (#vr.18 < #t2.4) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( State_111112111111111111111( L_h.1, atts, h2.1, k.2, m.1, ut, v,
                                                                        ~n.3
                                           ) ▶₀ #t2.3 )
                                      case outh_0_11111211111111111111
                                      solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( (#t2.1 < #t2.7)  ∥ (#t2.1 = #t2.7) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( Insert( <'obj', h2>,
                                                         <m, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                          'on', 'undef', 'undef'>
                                                 ) @ #t2.4 )
                                            case insertobjLhkatts_0_1111111111111111
                                            solve( State_1111111111111111( h2,
                                                                           <'off', 'off', 'on', 'on', 'on', 
                                                                            'on', 'off', 'on', 'undef', 
                                                                            'undef'>,
                                                                           m, lock, ptr, templ
                                                   ) ▶₀ #t2.4 )
                                              case eventNewKeyLhkattsensatts_0_111111111111111
                                              solve( (#vr.50 < #vr.34)  ∥ (#t2.3 < #vr.50) )
                                                case case_1
                                                solve( Insert( <'F_template', ptr>,
                                                               <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                                'on', 'undef', 'undef'>
                                                       ) @ #t2.8 )
                                                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                  solve( (#t2.6 < #t2.1)  ∥ (#t2.6 = #t2.1)  ∥
                                                         (#vr.30 < #t2.6) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( State_1111111111111111111111( L_h.1, atts, k.2,
                                                                                         ~n.6, ptr, templ
                                                           ) ▶₀ #t2.5 )
                                                      case outLh_0_111111111111111111111
                                                      solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( Insert( <'obj', h1>,
                                                                       <k, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                        x.5, 'usage', x.6>
                                                               ) @ #t2.6 )
                                                          case insertobjLhkatts_0_1111111111111111
                                                          solve( State_1111111111111111( h1,
                                                                                         <'on', x, x.1, x.2, 
                                                                                          x.3, x.4, 'on', 
                                                                                          x.5, 'usage', x.6>,
                                                                                         k, lock, ptr, templ
                                                                 ) ▶₀ #t2.6 )
                                                            case eventNewKeyLhkattsensatts_0_111111111111111
                                                            solve( (#vr.68 < #vr.50)  ∥ (#t2.5 < #vr.68) )
                                                              case case_1
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                solve( (#vr.13 < #t2.8)  ∥ (#vr.13 = #t2.8) )
                                                                  case case_1
                                                                  solve( State_1111111111111111111111( L_h.1,
                                                                                                       atts,
                                                                                                       k.1,
                                                                                                       ~n.9,
                                                                                                       ptr,
                                                                                                       templ
                                                                         ) ▶₀ #t2.7 )
                                                                    case outLh_0_111111111111111111111
                                                                    by contradiction /* from formulas */
                                                                  qed
                                                                next
                                                                  case case_2
                                                                  solve( State_1111111111111111111111( L_h.1,
                                                                                                       atts,
                                                                                                       k.1,
                                                                                                       ~n.9,
                                                                                                       ptr,
                                                                                                       templ
                                                                         ) ▶₀ #t2.7 )
                                                                    case outLh_0_111111111111111111111
                                                                    by contradiction /* from formulas */
                                                                  qed
                                                                qed
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                solve( (#vr.13 < #t2.8)  ∥ (#vr.13 = #t2.8) )
                                                                  case case_1
                                                                  solve( State_1111111111111111111111( L_h.1,
                                                                                                       atts,
                                                                                                       k.1,
                                                                                                       ~n.9,
                                                                                                       ptr,
                                                                                                       templ
                                                                         ) ▶₀ #t2.7 )
                                                                    case outLh_0_111111111111111111111
                                                                    by contradiction /* from formulas */
                                                                  qed
                                                                next
                                                                  case case_2
                                                                  solve( State_1111111111111111111111( L_h.1,
                                                                                                       atts,
                                                                                                       k.1,
                                                                                                       ~n.9,
                                                                                                       ptr,
                                                                                                       templ
                                                                         ) ▶₀ #t2.7 )
                                                                    case outLh_0_111111111111111111111
                                                                    by contradiction /* from formulas */
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case insertobjhmatts_0_11111211111111
                                                          solve( State_11111211111111( L_h.1,
                                                                                       <'on', x, x.1, x.2, 
                                                                                        x.3, x.4, 'on', x.5, 
                                                                                        'usage', x.6>,
                                                                                       h1, k.2, k, ut, v, lock
                                                                 ) ▶₀ #t2.6 )
                                                            case newh_0_1111121111111
                                                            solve( (#vr.69 < #vr.34)  ∥ (#t2.3 < #vr.69) )
                                                              case case_1
                                                              solve( (#vr.69 < #vr.50)  ∥ (#t2.5 < #vr.69) )
                                                                case case_1
                                                                solve( Insert( <'F_template', z>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.9 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              next
                                                                case case_2
                                                                solve( Insert( <'F_template', z>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.9 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', z>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( Insert( <'F_template', ptr>,
                                                               <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                                'on', 'undef', 'undef'>
                                                       ) @ #t2.8 )
                                                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                  solve( (#t2.6 < #t2.1)  ∥ (#t2.6 = #t2.1)  ∥
                                                         (#vr.30 < #t2.6) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( State_1111111111111111111111( L_h.1, atts, k.2,
                                                                                         ~n.6, ptr, templ
                                                           ) ▶₀ #t2.5 )
                                                      case outLh_0_111111111111111111111
                                                      solve( (#t2.8 < #t2.1)  ∥ (#t2.8 = #t2.1)  ∥
                                                             (#vr.30 < #t2.8) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( Insert( <'obj', h1>,
                                                                       <k, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                        x.5, 'usage', x.6>
                                                               ) @ #t2.6 )
                                                          case insertobjLhkatts_0_1111111111111111
                                                          solve( State_1111111111111111( h1,
                                                                                         <'on', x, x.1, x.2, 
                                                                                          x.3, x.4, 'on', 
                                                                                          x.5, 'usage', x.6>,
                                                                                         k, lock, ptr, templ
                                                                 ) ▶₀ #t2.6 )
                                                            case eventNewKeyLhkattsensatts_0_111111111111111
                                                            solve( Insert( <'F_template', ptr>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.9 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              solve( (#vr.13 < #t2.8)  ∥ (#vr.13 = #t2.8) )
                                                                case case_1
                                                                solve( State_1111111111111111111111( L_h.1,
                                                                                                     atts,
                                                                                                     k.1,
                                                                                                     ~n.9,
                                                                                                     ptr,
                                                                                                     templ
                                                                       ) ▶₀ #t2.7 )
                                                                  case outLh_0_111111111111111111111
                                                                  by contradiction /* from formulas */
                                                                qed
                                                              next
                                                                case case_2
                                                                solve( State_1111111111111111111111( L_h.1,
                                                                                                     atts,
                                                                                                     k.1,
                                                                                                     ~n.9,
                                                                                                     ptr,
                                                                                                     templ
                                                                       ) ▶₀ #t2.7 )
                                                                  case outLh_0_111111111111111111111
                                                                  by contradiction /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case insertobjhmatts_0_11111211111111
                                                          solve( State_11111211111111( L_h.1,
                                                                                       <'on', x, x.1, x.2, 
                                                                                        x.3, x.4, 'on', x.5, 
                                                                                        'usage', x.6>,
                                                                                       h1, k.2, k, ut, v, lock
                                                                 ) ▶₀ #t2.6 )
                                                            case newh_0_1111121111111
                                                            solve( (#vr.69 < #vr.34)  ∥ (#t2.3 < #vr.69) )
                                                              case case_1
                                                              solve( Insert( <'F_template', z>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* cyclic */
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( (#vr.69 < #vr.50)  ∥ (#t2.5 < #vr.69) )
                                                                case case_1
                                                                solve( Insert( <'F_template', z>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.9 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              next
                                                                case case_2
                                                                solve( Insert( <'F_template', z>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.9 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case case_3
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case insertobjhmatts_0_11111211111111
                                            solve( State_11111211111111( L_h.1,
                                                                         <'off', 'off', 'on', 'on', 'on', 
                                                                          'on', 'off', 'on', 'undef', 'undef'
                                                                         >,
                                                                         h2, k.2, m, ut, v, lock
                                                   ) ▶₀ #t2.4 )
                                              case newh_0_1111121111111
                                              solve( ((#vr.34 < #vr.51) ∧
                                                      (∃ #t2.
                                                        (Unlock_4( '4', ~n.4, 'device' ) @ #t2)
                                                       ∧
                                                        (#vr.34 < #t2) ∧
                                                        (#t2 < #vr.51) ∧
                                                        (∀ #t0 pp.
                                                          (Unlock( pp, ~n.4, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                                                        (∀ pp lpp #t0.
                                                          (Lock( pp, lpp, 'device' ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.34) ∨ (#t0 = #vr.34) ∨ (#t2 < #t0))) ∧
                                                        (∀ pp lpp #t0.
                                                          (Unlock( pp, lpp, 'device' ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.34) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                     (#vr.51 < #vr.34)  ∥ (#vr.34 = #vr.51) )
                                                case case_1
                                                solve( Insert( <'F_template', z>,
                                                               <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                                'on', 'undef', 'undef'>
                                                       ) @ #t2.8 )
                                                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                  solve( (#t2.6 < #t2.1)  ∥ (#t2.6 = #t2.1)  ∥
                                                         (#vr.30 < #t2.6) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( State_111112111111111111111( L_h.2, atts, h2, k.3,
                                                                                        m.1, ut, v, ~n.5
                                                           ) ▶₀ #t2.5 )
                                                      case outh_0_11111211111111111111
                                                      solve( (#t2.8 < #t2.10)  ∥ (#t2.8 = #t2.10) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( (#t2.9 < #t2.1)  ∥ (#t2.9 = #t2.1)  ∥
                                                               (#vr.30 < #t2.9) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          solve( Insert( <'obj', h1>,
                                                                         <k, 'on', x, x.1, x.2, x.3, x.4, 
                                                                          'on', x.5, 'usage', x.6>
                                                                 ) @ #t2.6 )
                                                            case insertobjLhkatts_0_1111111111111111
                                                            solve( State_1111111111111111( h1,
                                                                                           <'on', x, x.1, 
                                                                                            x.2, x.3, x.4, 
                                                                                            'on', x.5, 
                                                                                            'usage', x.6>,
                                                                                           k, lock, ptr, templ
                                                                   ) ▶₀ #t2.6 )
                                                              case eventNewKeyLhkattsensatts_0_111111111111111
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                solve( (#vr.13 < #t2.8)  ∥ (#vr.13 = #t2.8) )
                                                                  case case_1
                                                                  solve( State_1111111111111111111111( L_h.2,
                                                                                                       atts,
                                                                                                       k.2,
                                                                                                       ~n.8,
                                                                                                       ptr,
                                                                                                       templ
                                                                         ) ▶₀ #t2.7 )
                                                                    case outLh_0_111111111111111111111
                                                                    by contradiction /* from formulas */
                                                                  qed
                                                                next
                                                                  case case_2
                                                                  solve( State_1111111111111111111111( L_h.2,
                                                                                                       atts,
                                                                                                       k.2,
                                                                                                       ~n.8,
                                                                                                       ptr,
                                                                                                       templ
                                                                         ) ▶₀ #t2.7 )
                                                                    case outLh_0_111111111111111111111
                                                                    by contradiction /* from formulas */
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case insertobjhmatts_0_11111211111111
                                                            solve( State_11111211111111( L_h.2,
                                                                                         <'on', x, x.1, x.2, 
                                                                                          x.3, x.4, 'on', 
                                                                                          x.5, 'usage', x.6>,
                                                                                         h1, k.3, k, ut, v,
                                                                                         lock
                                                                   ) ▶₀ #t2.6 )
                                                              case newh_0_1111121111111
                                                              solve( (#vr.68 < #vr.34)  ∥ (#t2.3 < #vr.68) )
                                                                case case_1
                                                                solve( Insert( <'F_template', z>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.10 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              next
                                                                case case_2
                                                                solve( (#vr.68 < #vr.51)  ∥ (#t2.5 < #vr.68) )
                                                                  case case_1
                                                                  solve( Insert( <'F_template', z>,
                                                                                 <'on', x, x.1, x.2, x.3, 
                                                                                  x.4, 'on', x.5, 'usage', x.6
                                                                                 >
                                                                         ) @ #t2.10 )
                                                                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                    by contradiction /* cyclic */
                                                                  qed
                                                                next
                                                                  case case_2
                                                                  solve( Insert( <'F_template', z>,
                                                                                 <'on', x, x.1, x.2, x.3, 
                                                                                  x.4, 'on', x.5, 'usage', x.6
                                                                                 >
                                                                         ) @ #t2.10 )
                                                                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                    by contradiction /* cyclic */
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( Insert( <'F_template', z>,
                                                               <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                                'on', 'undef', 'undef'>
                                                       ) @ #t2.8 )
                                                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                  solve( (#t2.6 < #t2.1)  ∥ (#t2.6 = #t2.1)  ∥
                                                         (#vr.30 < #t2.6) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( State_111112111111111111111( L_h.2, atts, h2, k.3,
                                                                                        m.1, ut, v, ~n.5
                                                           ) ▶₀ #t2.5 )
                                                      case outh_0_11111211111111111111
                                                      solve( (#t2.8 < #t2.10)  ∥ (#t2.8 = #t2.10) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( (#t2.1 < #t2.9)  ∥ (#t2.1 = #t2.9) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          solve( Insert( <'obj', h1>,
                                                                         <k, 'on', x, x.1, x.2, x.3, x.4, 
                                                                          'on', x.5, 'usage', x.6>
                                                                 ) @ #t2.6 )
                                                            case insertobjLhkatts_0_1111111111111111
                                                            solve( State_1111111111111111( h1,
                                                                                           <'on', x, x.1, 
                                                                                            x.2, x.3, x.4, 
                                                                                            'on', x.5, 
                                                                                            'usage', x.6>,
                                                                                           k, lock, ptr, templ
                                                                   ) ▶₀ #t2.6 )
                                                              case eventNewKeyLhkattsensatts_0_111111111111111
                                                              solve( (#vr.67 < #vr.51)  ∥ (#t2.5 < #vr.67) )
                                                                case case_1
                                                                solve( Insert( <'F_template', ptr>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.10 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  solve( (#vr.13 < #t2.8)  ∥
                                                                         (#vr.13 = #t2.8) )
                                                                    case case_1
                                                                    solve( State_1111111111111111111111( L_h.2,
                                                                                                         atts,
                                                                                                         k.2,
                                                                                                         ~n.8,
                                                                                                         ptr,
                                                                                                         templ
                                                                           ) ▶₀ #t2.7 )
                                                                      case outLh_0_111111111111111111111
                                                                      by contradiction /* from formulas */
                                                                    qed
                                                                  next
                                                                    case case_2
                                                                    solve( State_1111111111111111111111( L_h.2,
                                                                                                         atts,
                                                                                                         k.2,
                                                                                                         ~n.8,
                                                                                                         ptr,
                                                                                                         templ
                                                                           ) ▶₀ #t2.7 )
                                                                      case outLh_0_111111111111111111111
                                                                      by contradiction /* from formulas */
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case case_2
                                                                solve( Insert( <'F_template', ptr>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.10 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  solve( (#vr.13 < #t2.8)  ∥
                                                                         (#vr.13 = #t2.8) )
                                                                    case case_1
                                                                    solve( State_1111111111111111111111( L_h.2,
                                                                                                         atts,
                                                                                                         k.2,
                                                                                                         ~n.8,
                                                                                                         ptr,
                                                                                                         templ
                                                                           ) ▶₀ #t2.7 )
                                                                      case outLh_0_111111111111111111111
                                                                      by contradiction /* from formulas */
                                                                    qed
                                                                  next
                                                                    case case_2
                                                                    solve( State_1111111111111111111111( L_h.2,
                                                                                                         atts,
                                                                                                         k.2,
                                                                                                         ~n.8,
                                                                                                         ptr,
                                                                                                         templ
                                                                           ) ▶₀ #t2.7 )
                                                                      case outLh_0_111111111111111111111
                                                                      by contradiction /* from formulas */
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case insertobjhmatts_0_11111211111111
                                                            solve( State_11111211111111( L_h.2,
                                                                                         <'on', x, x.1, x.2, 
                                                                                          x.3, x.4, 'on', 
                                                                                          x.5, 'usage', x.6>,
                                                                                         h1, k.3, k, ut, v,
                                                                                         lock
                                                                   ) ▶₀ #t2.6 )
                                                              case newh_0_1111121111111
                                                              solve( (#vr.68 < #vr.34)  ∥ (#t2.3 < #vr.68) )
                                                                case case_1
                                                                solve( (#vr.68 < #vr.51)  ∥ (#t2.5 < #vr.68) )
                                                                  case case_1
                                                                  solve( Insert( <'F_template', z>,
                                                                                 <'on', x, x.1, x.2, x.3, 
                                                                                  x.4, 'on', x.5, 'usage', x.6
                                                                                 >
                                                                         ) @ #t2.10 )
                                                                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                    by contradiction /* cyclic */
                                                                  qed
                                                                next
                                                                  case case_2
                                                                  solve( Insert( <'F_template', z>,
                                                                                 <'on', x, x.1, x.2, x.3, 
                                                                                  x.4, 'on', x.5, 'usage', x.6
                                                                                 >
                                                                         ) @ #t2.10 )
                                                                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                    by contradiction /* cyclic */
                                                                  qed
                                                                qed
                                                              next
                                                                case case_2
                                                                solve( Insert( <'F_template', z>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.10 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( (#t2.1 < #t2.6)  ∥ (#t2.1 = #t2.6) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( <'obj', h1>,
                                                                   <k, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                    x.5, 'usage', x.6>
                                                           ) @ #t2.4 )
                                                      case insertobjLhkatts_0_1111111111111111
                                                      solve( State_1111111111111111( h1,
                                                                                     <'on', x, x.1, x.2, x.3, 
                                                                                      x.4, 'on', x.5, 
                                                                                      'usage', x.6>,
                                                                                     k, lock, ptr, templ
                                                             ) ▶₀ #t2.4 )
                                                        case eventNewKeyLhkattsensatts_0_111111111111111
                                                        solve( Insert( <'F_template', ptr>,
                                                                       <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                        x.5, 'usage', x.6>
                                                               ) @ #t2.7 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          solve( (#vr.13 < #t2.6)  ∥ (#vr.13 = #t2.6) )
                                                            case case_1
                                                            solve( State_1111111111111111111111( L_h.1, atts,
                                                                                                 k.1, ~n.6,
                                                                                                 ptr, templ
                                                                   ) ▶₀ #t2.5 )
                                                              case outLh_0_111111111111111111111
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( State_1111111111111111111111( L_h.1, atts,
                                                                                                 k.1, ~n.6,
                                                                                                 ptr, templ
                                                                   ) ▶₀ #t2.5 )
                                                              case outLh_0_111111111111111111111
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case insertobjhmatts_0_11111211111111
                                                      solve( State_11111211111111( L_h.1,
                                                                                   <'on', x, x.1, x.2, x.3, 
                                                                                    x.4, 'on', x.5, 'usage', 
                                                                                    x.6>,
                                                                                   h1, k.2, k, ut, v, lock
                                                             ) ▶₀ #t2.4 )
                                                        case newh_0_1111121111111
                                                        solve( (#vr.51 < #vr.34)  ∥ (#t2.3 < #vr.51) )
                                                          case case_1
                                                          solve( Insert( <'F_template', z>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.7 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( Insert( <'F_template', z>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.7 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case case_3
                                    solve( State_111112111111111111111( L_h.1, atts, h2.1, k.2, m.1, ut, v,
                                                                        ~n.3
                                           ) ▶₀ #t2.3 )
                                      case outh_0_11111211111111111111
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                solve( Insert( <'F_template', z>,
                                               <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                                       ) @ #t2.6 )
                                  case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                                  by contradiction /* cyclic */
                                next
                                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                  solve( (#t2.4 < #t2.1)  ∥ (#t2.4 = #t2.1)  ∥ (#vr.18 < #t2.4) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( State_111112111111111111111( L_h.1, atts, h2.1, k.2, m.1, ut, v,
                                                                        ~n.3
                                           ) ▶₀ #t2.3 )
                                      case outh_0_11111211111111111111
                                      solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( (#t2.7 < #t2.1)  ∥ (#t2.7 = #t2.1)  ∥ (#vr.18 < #t2.7) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( Insert( <'obj', h2>,
                                                         <m, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                          'on', 'undef', 'undef'>
                                                 ) @ #t2.4 )
                                            case insertobjLhkatts_0_1111111111111111
                                            solve( State_1111111111111111( h2,
                                                                           <'off', 'off', 'on', 'on', 'on', 
                                                                            'on', 'off', 'on', 'undef', 
                                                                            'undef'>,
                                                                           m, lock, ptr, templ
                                                   ) ▶₀ #t2.4 )
                                              case eventNewKeyLhkattsensatts_0_111111111111111
                                              solve( Insert( <'F_template', ptr>,
                                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                              'on', 'undef', 'undef'>
                                                     ) @ #t2.8 )
                                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                solve( (#t2.1 < #t2.6)  ∥ (#t2.1 = #t2.6) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( State_1111111111111111111111( L_h.1, atts, k.2, ~n.6,
                                                                                       ptr, templ
                                                         ) ▶₀ #t2.5 )
                                                    case outLh_0_111111111111111111111
                                                    solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( Insert( <'obj', h1>,
                                                                     <k, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                      x.5, 'usage', x.6>
                                                             ) @ #t2.6 )
                                                        case insertobjLhkatts_0_1111111111111111
                                                        solve( State_1111111111111111( h1,
                                                                                       <'on', x, x.1, x.2, 
                                                                                        x.3, x.4, 'on', x.5, 
                                                                                        'usage', x.6>,
                                                                                       k, lock, ptr, templ
                                                               ) ▶₀ #t2.6 )
                                                          case eventNewKeyLhkattsensatts_0_111111111111111
                                                          solve( (#vr.68 < #vr.50)  ∥ (#t2.5 < #vr.68) )
                                                            case case_1
                                                            solve( Insert( <'F_template', ptr>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.9 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              solve( (#vr.13 < #t2.8)  ∥ (#vr.13 = #t2.8) )
                                                                case case_1
                                                                solve( State_1111111111111111111111( L_h.1,
                                                                                                     atts,
                                                                                                     k.1,
                                                                                                     ~n.9,
                                                                                                     ptr,
                                                                                                     templ
                                                                       ) ▶₀ #t2.7 )
                                                                  case outLh_0_111111111111111111111
                                                                  by contradiction /* from formulas */
                                                                qed
                                                              next
                                                                case case_2
                                                                solve( State_1111111111111111111111( L_h.1,
                                                                                                     atts,
                                                                                                     k.1,
                                                                                                     ~n.9,
                                                                                                     ptr,
                                                                                                     templ
                                                                       ) ▶₀ #t2.7 )
                                                                  case outLh_0_111111111111111111111
                                                                  by contradiction /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( Insert( <'F_template', ptr>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.9 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              solve( (#vr.13 < #t2.8)  ∥ (#vr.13 = #t2.8) )
                                                                case case_1
                                                                solve( State_1111111111111111111111( L_h.1,
                                                                                                     atts,
                                                                                                     k.1,
                                                                                                     ~n.9,
                                                                                                     ptr,
                                                                                                     templ
                                                                       ) ▶₀ #t2.7 )
                                                                  case outLh_0_111111111111111111111
                                                                  by contradiction /* from formulas */
                                                                qed
                                                              next
                                                                case case_2
                                                                solve( State_1111111111111111111111( L_h.1,
                                                                                                     atts,
                                                                                                     k.1,
                                                                                                     ~n.9,
                                                                                                     ptr,
                                                                                                     templ
                                                                       ) ▶₀ #t2.7 )
                                                                  case outLh_0_111111111111111111111
                                                                  by contradiction /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case insertobjhmatts_0_11111211111111
                                                        solve( State_11111211111111( L_h.1,
                                                                                     <'on', x, x.1, x.2, x.3, 
                                                                                      x.4, 'on', x.5, 
                                                                                      'usage', x.6>,
                                                                                     h1, k.2, k, ut, v, lock
                                                               ) ▶₀ #t2.6 )
                                                          case newh_0_1111121111111
                                                          solve( (#vr.69 < #vr.50)  ∥ (#t2.5 < #vr.69) )
                                                            case case_1
                                                            solve( Insert( <'F_template', z>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.9 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( Insert( <'F_template', z>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.9 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case insertobjhmatts_0_11111211111111
                                            solve( State_11111211111111( L_h.1,
                                                                         <'off', 'off', 'on', 'on', 'on', 
                                                                          'on', 'off', 'on', 'undef', 'undef'
                                                                         >,
                                                                         h2, k.2, m, ut, v, lock
                                                   ) ▶₀ #t2.4 )
                                              case newh_0_1111121111111
                                              solve( Insert( <'F_template', z>,
                                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                              'on', 'undef', 'undef'>
                                                     ) @ #t2.8 )
                                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                solve( (#t2.1 < #t2.6)  ∥ (#t2.1 = #t2.6) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( State_111112111111111111111( L_h.2, atts, h2, k.3,
                                                                                      m.1, ut, v, ~n.5
                                                         ) ▶₀ #t2.5 )
                                                    case outh_0_11111211111111111111
                                                    solve( (#t2.8 < #t2.10)  ∥ (#t2.8 = #t2.10) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( (#t2.1 < #t2.9)  ∥ (#t2.1 = #t2.9) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( Insert( <'obj', h1>,
                                                                       <k, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                        x.5, 'usage', x.6>
                                                               ) @ #t2.6 )
                                                          case insertobjLhkatts_0_1111111111111111
                                                          solve( State_1111111111111111( h1,
                                                                                         <'on', x, x.1, x.2, 
                                                                                          x.3, x.4, 'on', 
                                                                                          x.5, 'usage', x.6>,
                                                                                         k, lock, ptr, templ
                                                                 ) ▶₀ #t2.6 )
                                                            case eventNewKeyLhkattsensatts_0_111111111111111
                                                            solve( (#vr.67 < #vr.51)  ∥ (#t2.5 < #vr.67) )
                                                              case case_1
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                solve( (#vr.13 < #t2.8)  ∥ (#vr.13 = #t2.8) )
                                                                  case case_1
                                                                  solve( State_1111111111111111111111( L_h.2,
                                                                                                       atts,
                                                                                                       k.2,
                                                                                                       ~n.8,
                                                                                                       ptr,
                                                                                                       templ
                                                                         ) ▶₀ #t2.7 )
                                                                    case outLh_0_111111111111111111111
                                                                    by contradiction /* from formulas */
                                                                  qed
                                                                next
                                                                  case case_2
                                                                  solve( State_1111111111111111111111( L_h.2,
                                                                                                       atts,
                                                                                                       k.2,
                                                                                                       ~n.8,
                                                                                                       ptr,
                                                                                                       templ
                                                                         ) ▶₀ #t2.7 )
                                                                    case outLh_0_111111111111111111111
                                                                    by contradiction /* from formulas */
                                                                  qed
                                                                qed
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                solve( (#vr.13 < #t2.8)  ∥ (#vr.13 = #t2.8) )
                                                                  case case_1
                                                                  solve( State_1111111111111111111111( L_h.2,
                                                                                                       atts,
                                                                                                       k.2,
                                                                                                       ~n.8,
                                                                                                       ptr,
                                                                                                       templ
                                                                         ) ▶₀ #t2.7 )
                                                                    case outLh_0_111111111111111111111
                                                                    by contradiction /* from formulas */
                                                                  qed
                                                                next
                                                                  case case_2
                                                                  solve( State_1111111111111111111111( L_h.2,
                                                                                                       atts,
                                                                                                       k.2,
                                                                                                       ~n.8,
                                                                                                       ptr,
                                                                                                       templ
                                                                         ) ▶₀ #t2.7 )
                                                                    case outLh_0_111111111111111111111
                                                                    by contradiction /* from formulas */
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case insertobjhmatts_0_11111211111111
                                                          solve( State_11111211111111( L_h.2,
                                                                                       <'on', x, x.1, x.2, 
                                                                                        x.3, x.4, 'on', x.5, 
                                                                                        'usage', x.6>,
                                                                                       h1, k.3, k, ut, v, lock
                                                                 ) ▶₀ #t2.6 )
                                                            case newh_0_1111121111111
                                                            solve( (#vr.68 < #vr.51)  ∥ (#t2.5 < #vr.68) )
                                                              case case_1
                                                              solve( Insert( <'F_template', z>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* cyclic */
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', z>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case case_3
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  next
                                    case case_3
                                    solve( State_111112111111111111111( L_h.1, atts, h2.1, k.2, m.1, ut, v,
                                                                        ~n.3
                                           ) ▶₀ #t2.3 )
                                      case outh_0_11111211111111111111
                                      solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( (#t2.8 < #t2.1)  ∥ (#t2.8 = #t2.1)  ∥ (#vr.18 < #t2.8) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        next
                                          case case_3
                                          solve( (#t2.4 < #t2.8)  ∥ (#t2.4 = #t2.8) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( State_1( ) ▶₀ #t2.4 )
                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case outsenckeyvkeyv_0_111111211111111_case_2
            solve( Insert( <'F_template', z.3>,
                           <z.4, z.5, z.6, z.7, z.8, 'on', z.9, 'off', z.10, z.11>
                   ) @ #t2.2 )
              case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
              by contradiction /* cyclic */
            qed
          next
            case outsenckeyvkeyv_0_111111211111111_case_3
            solve( Insert( <'F_template', z.2>,
                           <z.3, z.4, z.5, z.6, z.7, 'on', z.8, 'on', z.9, z.10>
                   ) @ #t2.2 )
              case insertFtemplatetrustedononoffoffononononusageusage_0_
              by contradiction /* cyclic */
            next
              case insertFtemplateusageoffoffononononoffonundefundef_0_1
              solve( (#vr.13 < #t2.1)  ∥ (#vr.13 = #t2.1) )
                case case_1
                solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.1 ) ▶₀ #t2 )
                  case outsenckeyvkeyv_0_111111211111111
                  solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( (#t2.3 < #t2.6)  ∥ (#t2.3 = #t2.6) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( (#vr.13 < #t2.5)  ∥ (#vr.13 = #t2.5) )
                        case case_1
                        solve( (#t2.1 < #t2.5)  ∥ (#t2.1 = #t2.5) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( State_1( ) ▶₀ #t2.1 )
                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.1 ) ▶₀ #t2 )
                  case outsenckeyvkeyv_0_111111211111111
                  solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( (#t2.1 < #t2.5)  ∥ (#t2.1 = #t2.5) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( Insert( <'obj', L_h>,
                                       <k, x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                               ) @ #t2.2 )
                          case insertobjLhkatts_0_1111111111111111
                          solve( State_1111111111111111( L_h,
                                                         <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>, k,
                                                         lock, ptr, templ
                                 ) ▶₀ #t2.2 )
                            case eventNewKeyLhkattsensatts_0_111111111111111
                            solve( (#vr.34 < #vr.23)  ∥ (#t2 < #vr.34) )
                              case case_1
                              solve( Insert( <'F_template', ptr>,
                                             <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                                     ) @ #t2.6 )
                                case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                                solve( (#vr.12 < #t2.4)  ∥ (#vr.12 = #t2.4) )
                                  case case_1
                                  solve( State_1111111111111111111111( L_h, atts, k, ~n.4, ptr, templ
                                         ) ▶₀ #t2.3 )
                                    case outLh_0_111111111111111111111
                                    solve( (#vr.12 < #t2.7)  ∥ (#vr.12 = #t2.7) )
                                      case case_1
                                      solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( State_11( ) ▶₀ #t2.4 )
                                          case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                next
                                  case case_2
                                  solve( State_1111111111111111111111( L_h, atts, k, ~n.4, ptr, templ
                                         ) ▶₀ #t2.3 )
                                    case outLh_0_111111111111111111111
                                    solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      solve( Insert( <'obj', h2>,
                                                     <z.1, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                      'undef', 'undef'>
                                             ) @ #t2.5 )
                                        case insertobjLhkatts_0_1111111111111111
                                        solve( State_1111111111111111( h2,
                                                                       <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                        'off', 'on', 'undef', 'undef'>,
                                                                       z.1, lock, ptr, templ
                                               ) ▶₀ #t2.5 )
                                          case eventNewKeyLhkattsensatts_0_111111111111111
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case insertobjhmatts_0_11111211111111
                                        solve( State_11111211111111( L_h,
                                                                     <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                      'off', 'on', 'undef', 'undef'>,
                                                                     h2, k, z.1, ut, v, lock
                                               ) ▶₀ #t2.5 )
                                          case newh_0_1111121111111
                                          solve( (#vr.52 < #vr.33)  ∥ (#t2.3 < #vr.52) )
                                            case case_1
                                            solve( Insert( <'F_template', z.2>,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>
                                                   ) @ #t2.8 )
                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                              solve( (#t2.1 < #t2.7)  ∥ (#t2.1 = #t2.7) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m.1,
                                                                                    ut, v, ~n.6
                                                       ) ▶₀ #t2.6 )
                                                  case outh_0_11111211111111111111
                                                  solve( (#t2.8 < #t2.10)  ∥ (#t2.8 = #t2.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( (#t2.1 < #t2.9)  ∥ (#t2.1 = #t2.9) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( Insert( <'obj', h1>,
                                                                     <z, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                      x.5, 'usage', x.6>
                                                             ) @ #t2.7 )
                                                        case insertobjLhkatts_0_1111111111111111
                                                        solve( State_1111111111111111( h1,
                                                                                       <'on', x, x.1, x.2, 
                                                                                        x.3, x.4, 'on', x.5, 
                                                                                        'usage', x.6>,
                                                                                       z, lock, ptr, templ
                                                               ) ▶₀ #t2.7 )
                                                          case eventNewKeyLhkattsensatts_0_111111111111111
                                                          solve( (#vr.68 < #vr.33)  ∥ (#t2.3 < #vr.68) )
                                                            case case_1
                                                            solve( (#vr.68 < #vr.52)  ∥ (#t2.6 < #vr.68) )
                                                              case case_1
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( Insert( <'F_template', ptr>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.10 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case insertobjhmatts_0_11111211111111
                                                        solve( State_11111211111111( L_h.1,
                                                                                     <'on', x, x.1, x.2, x.3, 
                                                                                      x.4, 'on', x.5, 
                                                                                      'usage', x.6>,
                                                                                     h1, k.1, z, ut, v, lock
                                                               ) ▶₀ #t2.7 )
                                                          case newh_0_1111121111111
                                                          solve( (#vr.69 < #vr.33)  ∥ (#t2.3 < #vr.69) )
                                                            case case_1
                                                            solve( (#vr.69 < #vr.52)  ∥ (#t2.6 < #vr.69) )
                                                              case case_1
                                                              solve( Insert( <'F_template', z.1>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* cyclic */
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', z.1>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( Insert( <'F_template', z.1>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.10 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( Insert( <'F_template', z.2>,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>
                                                   ) @ #t2.8 )
                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                              solve( (#t2.1 < #t2.7)  ∥ (#t2.1 = #t2.7) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m.1,
                                                                                    ut, v, ~n.6
                                                       ) ▶₀ #t2.6 )
                                                  case outh_0_11111211111111111111
                                                  solve( (#t2.8 < #t2.10)  ∥ (#t2.8 = #t2.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( (#t2.1 < #t2.9)  ∥ (#t2.1 = #t2.9) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( Insert( <'obj', h1>,
                                                                     <z, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                      x.5, 'usage', x.6>
                                                             ) @ #t2.7 )
                                                        case insertobjLhkatts_0_1111111111111111
                                                        solve( State_1111111111111111( h1,
                                                                                       <'on', x, x.1, x.2, 
                                                                                        x.3, x.4, 'on', x.5, 
                                                                                        'usage', x.6>,
                                                                                       z, lock, ptr, templ
                                                               ) ▶₀ #t2.7 )
                                                          case eventNewKeyLhkattsensatts_0_111111111111111
                                                          solve( (#vr.68 < #vr.33)  ∥ (#t2.3 < #vr.68) )
                                                            case case_1
                                                            solve( Insert( <'F_template', ptr>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.10 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( (#vr.68 < #vr.52)  ∥ (#t2.6 < #vr.68) )
                                                              case case_1
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case insertobjhmatts_0_11111211111111
                                                        solve( State_11111211111111( L_h.1,
                                                                                     <'on', x, x.1, x.2, x.3, 
                                                                                      x.4, 'on', x.5, 
                                                                                      'usage', x.6>,
                                                                                     h1, k.1, z, ut, v, lock
                                                               ) ▶₀ #t2.7 )
                                                          case newh_0_1111121111111
                                                          solve( (#vr.69 < #vr.33)  ∥ (#t2.3 < #vr.69) )
                                                            case case_1
                                                            solve( Insert( <'F_template', z.1>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.10 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( (#vr.69 < #vr.52)  ∥ (#t2.6 < #vr.69) )
                                                              case case_1
                                                              solve( Insert( <'F_template', z.1>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* cyclic */
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', z.1>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                solve( (#t2.4 < #t2.1)  ∥ (#t2.4 = #t2.1)  ∥ (#vr.19 < #t2.4) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  solve( State_1111111111111111111111( L_h, atts, k, ~n.4, ptr, templ
                                         ) ▶₀ #t2.3 )
                                    case outLh_0_111111111111111111111
                                    solve( (#t2.1 < #t2.6)  ∥ (#t2.1 = #t2.6) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      solve( Insert( <'obj', h2>,
                                                     <z.1, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                      'undef', 'undef'>
                                             ) @ #t2.4 )
                                        case insertobjLhkatts_0_1111111111111111
                                        solve( State_1111111111111111( h2,
                                                                       <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                        'off', 'on', 'undef', 'undef'>,
                                                                       z.1, lock, ptr, templ
                                               ) ▶₀ #t2.4 )
                                          case eventNewKeyLhkattsensatts_0_111111111111111
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case insertobjhmatts_0_11111211111111
                                        solve( State_11111211111111( L_h,
                                                                     <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                      'off', 'on', 'undef', 'undef'>,
                                                                     h2, k, z.1, ut, v, lock
                                               ) ▶₀ #t2.4 )
                                          case newh_0_1111121111111
                                          solve( (#vr.53 < #vr.34)  ∥ (#t2.3 < #vr.53) )
                                            case case_1
                                            solve( Insert( <'F_template', z.2>,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>
                                                   ) @ #t2.7 )
                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                              solve( (#t2.6 < #t2.1)  ∥ (#t2.6 = #t2.1)  ∥ (#vr.31 < #t2.6) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m.1,
                                                                                    ut, v, ~n.6
                                                       ) ▶₀ #t2.5 )
                                                  case outh_0_11111211111111111111
                                                  solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( Insert( <'obj', h1>,
                                                                     <z, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                      x.5, 'usage', x.6>
                                                             ) @ #t2.6 )
                                                        case insertobjLhkatts_0_1111111111111111
                                                        solve( State_1111111111111111( h1,
                                                                                       <'on', x, x.1, x.2, 
                                                                                        x.3, x.4, 'on', x.5, 
                                                                                        'usage', x.6>,
                                                                                       z, lock, ptr, templ
                                                               ) ▶₀ #t2.6 )
                                                          case eventNewKeyLhkattsensatts_0_111111111111111
                                                          solve( (#vr.69 < #vr.34)  ∥ (#t2.3 < #vr.69) )
                                                            case case_1
                                                            solve( (#vr.69 < #vr.53)  ∥ (#t2.5 < #vr.69) )
                                                              case case_1
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( Insert( <'F_template', ptr>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.9 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case insertobjhmatts_0_11111211111111
                                                        solve( State_11111211111111( L_h.1,
                                                                                     <'on', x, x.1, x.2, x.3, 
                                                                                      x.4, 'on', x.5, 
                                                                                      'usage', x.6>,
                                                                                     h1, k.1, z, ut, v, lock
                                                               ) ▶₀ #t2.6 )
                                                          case newh_0_1111121111111
                                                          solve( (#vr.70 < #vr.34)  ∥ (#t2.3 < #vr.70) )
                                                            case case_1
                                                            solve( (#vr.70 < #vr.53)  ∥ (#t2.5 < #vr.70) )
                                                              case case_1
                                                              solve( Insert( <'F_template', z.1>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* cyclic */
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', z.1>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( Insert( <'F_template', z.1>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.9 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          next
                                            case case_2
                                            solve( Insert( <'F_template', z.2>,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>
                                                   ) @ #t2.7 )
                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                              solve( (#t2.6 < #t2.1)  ∥ (#t2.6 = #t2.1)  ∥ (#vr.31 < #t2.6) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m.1,
                                                                                    ut, v, ~n.6
                                                       ) ▶₀ #t2.5 )
                                                  case outh_0_11111211111111111111
                                                  solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( (#t2.8 < #t2.1)  ∥ (#t2.8 = #t2.1)  ∥
                                                           (#vr.31 < #t2.8) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( Insert( <'obj', h1>,
                                                                     <z, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                      x.5, 'usage', x.6>
                                                             ) @ #t2.6 )
                                                        case insertobjLhkatts_0_1111111111111111
                                                        solve( State_1111111111111111( h1,
                                                                                       <'on', x, x.1, x.2, 
                                                                                        x.3, x.4, 'on', x.5, 
                                                                                        'usage', x.6>,
                                                                                       z, lock, ptr, templ
                                                               ) ▶₀ #t2.6 )
                                                          case eventNewKeyLhkattsensatts_0_111111111111111
                                                          solve( (#vr.69 < #vr.34)  ∥ (#t2.3 < #vr.69) )
                                                            case case_1
                                                            solve( Insert( <'F_template', ptr>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.9 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( (#vr.69 < #vr.53)  ∥ (#t2.5 < #vr.69) )
                                                              case case_1
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case insertobjhmatts_0_11111211111111
                                                        solve( State_11111211111111( L_h.1,
                                                                                     <'on', x, x.1, x.2, x.3, 
                                                                                      x.4, 'on', x.5, 
                                                                                      'usage', x.6>,
                                                                                     h1, k.1, z, ut, v, lock
                                                               ) ▶₀ #t2.6 )
                                                          case newh_0_1111121111111
                                                          solve( (#vr.70 < #vr.34)  ∥ (#t2.3 < #vr.70) )
                                                            case case_1
                                                            solve( Insert( <'F_template', z.1>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.9 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( (#vr.70 < #vr.53)  ∥ (#t2.5 < #vr.70) )
                                                              case case_1
                                                              solve( Insert( <'F_template', z.1>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* cyclic */
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', z.1>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case case_3
                                  solve( State_1111111111111111111111( L_h, atts, k, ~n.4, ptr, templ
                                         ) ▶₀ #t2.3 )
                                    case outLh_0_111111111111111111111
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            next
                              case case_2
                              solve( Insert( <'F_template', ptr>,
                                             <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                                     ) @ #t2.6 )
                                case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                                solve( (#vr.12 < #t2.4)  ∥ (#vr.12 = #t2.4) )
                                  case case_1
                                  solve( State_1111111111111111111111( L_h, atts, k, ~n.4, ptr, templ
                                         ) ▶₀ #t2.3 )
                                    case outLh_0_111111111111111111111
                                    solve( (#vr.12 < #t2.7)  ∥ (#vr.12 = #t2.7) )
                                      case case_1
                                      solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( State_11( ) ▶₀ #t2.4 )
                                          case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                next
                                  case case_2
                                  solve( State_1111111111111111111111( L_h, atts, k, ~n.4, ptr, templ
                                         ) ▶₀ #t2.3 )
                                    case outLh_0_111111111111111111111
                                    solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      solve( Insert( <'obj', h2>,
                                                     <z.1, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                      'undef', 'undef'>
                                             ) @ #t2.5 )
                                        case insertobjLhkatts_0_1111111111111111
                                        solve( State_1111111111111111( h2,
                                                                       <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                        'off', 'on', 'undef', 'undef'>,
                                                                       z.1, lock, ptr, templ
                                               ) ▶₀ #t2.5 )
                                          case eventNewKeyLhkattsensatts_0_111111111111111
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case insertobjhmatts_0_11111211111111
                                        solve( State_11111211111111( L_h,
                                                                     <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                      'off', 'on', 'undef', 'undef'>,
                                                                     h2, k, z.1, ut, v, lock
                                               ) ▶₀ #t2.5 )
                                          case newh_0_1111121111111
                                          solve( Insert( <'F_template', z.2>,
                                                         <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                          'undef', 'undef'>
                                                 ) @ #t2.8 )
                                            case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                            solve( (#t2.1 < #t2.7)  ∥ (#t2.1 = #t2.7) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m.1,
                                                                                  ut, v, ~n.6
                                                     ) ▶₀ #t2.6 )
                                                case outh_0_11111211111111111111
                                                solve( (#t2.8 < #t2.10)  ∥ (#t2.8 = #t2.10) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( (#t2.1 < #t2.9)  ∥ (#t2.1 = #t2.9) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( <'obj', h1>,
                                                                   <z, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                    x.5, 'usage', x.6>
                                                           ) @ #t2.7 )
                                                      case insertobjLhkatts_0_1111111111111111
                                                      solve( State_1111111111111111( h1,
                                                                                     <'on', x, x.1, x.2, x.3, 
                                                                                      x.4, 'on', x.5, 
                                                                                      'usage', x.6>,
                                                                                     z, lock, ptr, templ
                                                             ) ▶₀ #t2.7 )
                                                        case eventNewKeyLhkattsensatts_0_111111111111111
                                                        solve( (#vr.68 < #vr.52)  ∥ (#t2.6 < #vr.68) )
                                                          case case_1
                                                          solve( Insert( <'F_template', ptr>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.10 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( Insert( <'F_template', ptr>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.10 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case insertobjhmatts_0_11111211111111
                                                      solve( State_11111211111111( L_h.1,
                                                                                   <'on', x, x.1, x.2, x.3, 
                                                                                    x.4, 'on', x.5, 'usage', 
                                                                                    x.6>,
                                                                                   h1, k.1, z, ut, v, lock
                                                             ) ▶₀ #t2.7 )
                                                        case newh_0_1111121111111
                                                        solve( (#vr.69 < #vr.52)  ∥ (#t2.6 < #vr.69) )
                                                          case case_1
                                                          solve( Insert( <'F_template', z.1>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.10 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( Insert( <'F_template', z.1>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.10 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                solve( (#t2.4 < #t2.1)  ∥ (#t2.4 = #t2.1)  ∥ (#vr.19 < #t2.4) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  solve( State_1111111111111111111111( L_h, atts, k, ~n.4, ptr, templ
                                         ) ▶₀ #t2.3 )
                                    case outLh_0_111111111111111111111
                                    solve( (#t2.6 < #t2.1)  ∥ (#t2.6 = #t2.1)  ∥ (#vr.19 < #t2.6) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      solve( Insert( <'obj', h2>,
                                                     <z.1, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                      'undef', 'undef'>
                                             ) @ #t2.4 )
                                        case insertobjLhkatts_0_1111111111111111
                                        solve( State_1111111111111111( h2,
                                                                       <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                        'off', 'on', 'undef', 'undef'>,
                                                                       z.1, lock, ptr, templ
                                               ) ▶₀ #t2.4 )
                                          case eventNewKeyLhkattsensatts_0_111111111111111
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case insertobjhmatts_0_11111211111111
                                        solve( State_11111211111111( L_h,
                                                                     <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                      'off', 'on', 'undef', 'undef'>,
                                                                     h2, k, z.1, ut, v, lock
                                               ) ▶₀ #t2.4 )
                                          case newh_0_1111121111111
                                          solve( Insert( <'F_template', z.2>,
                                                         <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                          'undef', 'undef'>
                                                 ) @ #t2.7 )
                                            case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                            solve( (#t2.1 < #t2.6)  ∥ (#t2.1 = #t2.6) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m.1,
                                                                                  ut, v, ~n.6
                                                     ) ▶₀ #t2.5 )
                                                case outh_0_11111211111111111111
                                                solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( <'obj', h1>,
                                                                   <z, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                    x.5, 'usage', x.6>
                                                           ) @ #t2.6 )
                                                      case insertobjLhkatts_0_1111111111111111
                                                      solve( State_1111111111111111( h1,
                                                                                     <'on', x, x.1, x.2, x.3, 
                                                                                      x.4, 'on', x.5, 
                                                                                      'usage', x.6>,
                                                                                     z, lock, ptr, templ
                                                             ) ▶₀ #t2.6 )
                                                        case eventNewKeyLhkattsensatts_0_111111111111111
                                                        solve( (#vr.69 < #vr.53)  ∥ (#t2.5 < #vr.69) )
                                                          case case_1
                                                          solve( Insert( <'F_template', ptr>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.9 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( Insert( <'F_template', ptr>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.9 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case insertobjhmatts_0_11111211111111
                                                      solve( State_11111211111111( L_h.1,
                                                                                   <'on', x, x.1, x.2, x.3, 
                                                                                    x.4, 'on', x.5, 'usage', 
                                                                                    x.6>,
                                                                                   h1, k.1, z, ut, v, lock
                                                             ) ▶₀ #t2.6 )
                                                        case newh_0_1111121111111
                                                        solve( (#vr.70 < #vr.53)  ∥ (#t2.5 < #vr.70) )
                                                          case case_1
                                                          solve( Insert( <'F_template', z.1>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.9 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( Insert( <'F_template', z.1>,
                                                                         <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                          x.5, 'usage', x.6>
                                                                 ) @ #t2.9 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_3
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                next
                                  case case_3
                                  solve( State_1111111111111111111111( L_h, atts, k, ~n.4, ptr, templ
                                         ) ▶₀ #t2.3 )
                                    case outLh_0_111111111111111111111
                                    solve( (#t2.7 < #t2.1)  ∥ (#t2.7 = #t2.1)  ∥ (#vr.19 < #t2.7) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    next
                                      case case_3
                                      solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( State_1( ) ▶₀ #t2.4 )
                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case insertobjhmatts_0_11111211111111
                          solve( State_11111211111111( L_h.1,
                                                       <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>, L_h,
                                                       k.1, k, ut, v, lock
                                 ) ▶₀ #t2.2 )
                            case newh_0_1111121111111
                            solve( (#vr.35 < #vr.23)  ∥ (#t2 < #vr.35) )
                              case case_1
                              solve( Insert( <'F_template', z.2>,
                                             <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                                     ) @ #t2.6 )
                                case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                                by contradiction /* cyclic */
                              next
                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                solve( (#t2.4 < #t2.1)  ∥ (#t2.4 = #t2.1)  ∥ (#vr.19 < #t2.4) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  solve( State_111112111111111111111( L_h.1, atts, h2.1, k.2, m.1, ut, v,
                                                                      ~n.3
                                         ) ▶₀ #t2.3 )
                                    case outh_0_11111211111111111111
                                    solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      solve( (#t2.1 < #t2.7)  ∥ (#t2.1 = #t2.7) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( Insert( <'obj', h2>,
                                                       <z.1, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                        'on', 'undef', 'undef'>
                                               ) @ #t2.4 )
                                          case insertobjLhkatts_0_1111111111111111
                                          solve( State_1111111111111111( h2,
                                                                         <'off', 'off', 'on', 'on', 'on', 
                                                                          'on', 'off', 'on', 'undef', 'undef'
                                                                         >,
                                                                         z.1, lock, ptr, templ
                                                 ) ▶₀ #t2.4 )
                                            case eventNewKeyLhkattsensatts_0_111111111111111
                                            by contradiction /* impossible chain */
                                          qed
                                        next
                                          case insertobjhmatts_0_11111211111111
                                          solve( State_11111211111111( L_h.1,
                                                                       <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                        'off', 'on', 'undef', 'undef'>,
                                                                       h2, k.2, z.1, ut, v, lock
                                                 ) ▶₀ #t2.4 )
                                            case newh_0_1111121111111
                                            solve( ((#vr.35 < #vr.52) ∧
                                                    (∃ #t2.
                                                      (Unlock_4( '4', ~n.4, 'device' ) @ #t2)
                                                     ∧
                                                      (#vr.35 < #t2) ∧
                                                      (#t2 < #vr.52) ∧
                                                      (∀ #t0 pp.
                                                        (Unlock( pp, ~n.4, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                                                      (∀ pp lpp #t0.
                                                        (Lock( pp, lpp, 'device' ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.35) ∨ (#t0 = #vr.35) ∨ (#t2 < #t0))) ∧
                                                      (∀ pp lpp #t0.
                                                        (Unlock( pp, lpp, 'device' ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.35) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                   (#vr.52 < #vr.35)  ∥ (#vr.35 = #vr.52) )
                                              case case_1
                                              solve( Insert( <'F_template', z.2>,
                                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                              'on', 'undef', 'undef'>
                                                     ) @ #t2.8 )
                                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                solve( (#t2.6 < #t2.1)  ∥ (#t2.6 = #t2.1)  ∥
                                                       (#vr.31 < #t2.6) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( State_111112111111111111111( L_h.2, atts, h2, k.3,
                                                                                      m.1, ut, v, ~n.5
                                                         ) ▶₀ #t2.5 )
                                                    case outh_0_11111211111111111111
                                                    solve( (#t2.8 < #t2.10)  ∥ (#t2.8 = #t2.10) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( (#t2.9 < #t2.1)  ∥ (#t2.9 = #t2.1)  ∥
                                                             (#vr.31 < #t2.9) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( Insert( <'obj', h1>,
                                                                       <z, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                        x.5, 'usage', x.6>
                                                               ) @ #t2.6 )
                                                          case insertobjLhkatts_0_1111111111111111
                                                          solve( State_1111111111111111( h1,
                                                                                         <'on', x, x.1, x.2, 
                                                                                          x.3, x.4, 'on', 
                                                                                          x.5, 'usage', x.6>,
                                                                                         z, lock, ptr, templ
                                                                 ) ▶₀ #t2.6 )
                                                            case eventNewKeyLhkattsensatts_0_111111111111111
                                                            solve( (#vr.68 < #vr.35)  ∥ (#t2.3 < #vr.68) )
                                                              case case_1
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( (#vr.68 < #vr.52)  ∥ (#t2.5 < #vr.68) )
                                                                case case_1
                                                                solve( Insert( <'F_template', ptr>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.10 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  by contradiction /* from formulas */
                                                                qed
                                                              next
                                                                case case_2
                                                                solve( Insert( <'F_template', ptr>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.10 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  by contradiction /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case insertobjhmatts_0_11111211111111
                                                          solve( State_11111211111111( L_h.2,
                                                                                       <'on', x, x.1, x.2, 
                                                                                        x.3, x.4, 'on', x.5, 
                                                                                        'usage', x.6>,
                                                                                       h1, k.3, z, ut, v, lock
                                                                 ) ▶₀ #t2.6 )
                                                            case newh_0_1111121111111
                                                            solve( (#vr.69 < #vr.35)  ∥ (#t2.3 < #vr.69) )
                                                              case case_1
                                                              solve( Insert( <'F_template', z.1>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* cyclic */
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( (#vr.69 < #vr.52)  ∥ (#t2.5 < #vr.69) )
                                                                case case_1
                                                                solve( Insert( <'F_template', z.1>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.10 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              next
                                                                case case_2
                                                                solve( Insert( <'F_template', z.1>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.10 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case case_3
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( Insert( <'F_template', z.2>,
                                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                              'on', 'undef', 'undef'>
                                                     ) @ #t2.8 )
                                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                solve( (#t2.6 < #t2.1)  ∥ (#t2.6 = #t2.1)  ∥
                                                       (#vr.31 < #t2.6) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( State_111112111111111111111( L_h.2, atts, h2, k.3,
                                                                                      m.1, ut, v, ~n.5
                                                         ) ▶₀ #t2.5 )
                                                    case outh_0_11111211111111111111
                                                    solve( (#t2.8 < #t2.10)  ∥ (#t2.8 = #t2.10) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( (#t2.1 < #t2.9)  ∥ (#t2.1 = #t2.9) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( Insert( <'obj', h1>,
                                                                       <z, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                        x.5, 'usage', x.6>
                                                               ) @ #t2.6 )
                                                          case insertobjLhkatts_0_1111111111111111
                                                          solve( State_1111111111111111( h1,
                                                                                         <'on', x, x.1, x.2, 
                                                                                          x.3, x.4, 'on', 
                                                                                          x.5, 'usage', x.6>,
                                                                                         z, lock, ptr, templ
                                                                 ) ▶₀ #t2.6 )
                                                            case eventNewKeyLhkattsensatts_0_111111111111111
                                                            solve( (#vr.68 < #vr.35)  ∥ (#t2.3 < #vr.68) )
                                                              case case_1
                                                              solve( (#vr.68 < #vr.52)  ∥ (#t2.5 < #vr.68) )
                                                                case case_1
                                                                solve( Insert( <'F_template', ptr>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.10 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  by contradiction /* from formulas */
                                                                qed
                                                              next
                                                                case case_2
                                                                solve( Insert( <'F_template', ptr>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.10 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  by contradiction /* from formulas */
                                                                qed
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', ptr>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case insertobjhmatts_0_11111211111111
                                                          solve( State_11111211111111( L_h.2,
                                                                                       <'on', x, x.1, x.2, 
                                                                                        x.3, x.4, 'on', x.5, 
                                                                                        'usage', x.6>,
                                                                                       h1, k.3, z, ut, v, lock
                                                                 ) ▶₀ #t2.6 )
                                                            case newh_0_1111121111111
                                                            solve( (#vr.69 < #vr.35)  ∥ (#t2.3 < #vr.69) )
                                                              case case_1
                                                              solve( (#vr.69 < #vr.52)  ∥ (#t2.5 < #vr.69) )
                                                                case case_1
                                                                solve( Insert( <'F_template', z.1>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.10 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              next
                                                                case case_2
                                                                solve( Insert( <'F_template', z.1>,
                                                                               <'on', x, x.1, x.2, x.3, x.4, 
                                                                                'on', x.5, 'usage', x.6>
                                                                       ) @ #t2.10 )
                                                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', z.1>,
                                                                             <'on', x, x.1, x.2, x.3, x.4, 
                                                                              'on', x.5, 'usage', x.6>
                                                                     ) @ #t2.10 )
                                                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case case_3
                                              solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( (#t2.1 < #t2.6)  ∥ (#t2.1 = #t2.6) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( Insert( <'obj', h1>,
                                                                 <z, 'on', x, x.1, x.2, x.3, x.4, 'on', x.5, 
                                                                  'usage', x.6>
                                                         ) @ #t2.4 )
                                                    case insertobjLhkatts_0_1111111111111111
                                                    solve( State_1111111111111111( h1,
                                                                                   <'on', x, x.1, x.2, x.3, 
                                                                                    x.4, 'on', x.5, 'usage', 
                                                                                    x.6>,
                                                                                   z, lock, ptr, templ
                                                           ) ▶₀ #t2.4 )
                                                      case eventNewKeyLhkattsensatts_0_111111111111111
                                                      solve( (#vr.51 < #vr.35)  ∥ (#t2.3 < #vr.51) )
                                                        case case_1
                                                        solve( Insert( <'F_template', ptr>,
                                                                       <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                        x.5, 'usage', x.6>
                                                               ) @ #t2.7 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( Insert( <'F_template', ptr>,
                                                                       <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                        x.5, 'usage', x.6>
                                                               ) @ #t2.7 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case insertobjhmatts_0_11111211111111
                                                    solve( State_11111211111111( L_h.1,
                                                                                 <'on', x, x.1, x.2, x.3, 
                                                                                  x.4, 'on', x.5, 'usage', x.6
                                                                                 >,
                                                                                 h1, k.2, z, ut, v, lock
                                                           ) ▶₀ #t2.4 )
                                                      case newh_0_1111121111111
                                                      solve( (#vr.52 < #vr.35)  ∥ (#t2.3 < #vr.52) )
                                                        case case_1
                                                        solve( Insert( <'F_template', z.1>,
                                                                       <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                        x.5, 'usage', x.6>
                                                               ) @ #t2.7 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( Insert( <'F_template', z.1>,
                                                                       <'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                        x.5, 'usage', x.6>
                                                               ) @ #t2.7 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case case_3
                                  solve( State_111112111111111111111( L_h.1, atts, h2.1, k.2, m.1, ut, v,
                                                                      ~n.3
                                         ) ▶₀ #t2.3 )
                                    case outh_0_11111211111111111111
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            next
                              case case_2
                              solve( Insert( <'F_template', z.2>,
                                             <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                                     ) @ #t2.6 )
                                case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                                by contradiction /* cyclic */
                              next
                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                solve( (#t2.4 < #t2.1)  ∥ (#t2.4 = #t2.1)  ∥ (#vr.19 < #t2.4) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  solve( State_111112111111111111111( L_h.1, atts, h2.1, k.2, m.1, ut, v,
                                                                      ~n.3
                                         ) ▶₀ #t2.3 )
                                    case outh_0_11111211111111111111
                                    solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      solve( (#t2.7 < #t2.1)  ∥ (#t2.7 = #t2.1)  ∥ (#vr.19 < #t2.7) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( Insert( <'obj', h2>,
                                                       <z.1, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                        'on', 'undef', 'undef'>
                                               ) @ #t2.4 )
                                          case insertobjLhkatts_0_1111111111111111
                                          solve( State_1111111111111111( h2,
                                                                         <'off', 'off', 'on', 'on', 'on', 
                                                                          'on', 'off', 'on', 'undef', 'undef'
                                                                         >,
                                                                         z.1, lock, ptr, templ
                                                 ) ▶₀ #t2.4 )
                                            case eventNewKeyLhkattsensatts_0_111111111111111
                                            by contradiction /* impossible chain */
                                          qed
                                        next
                                          case insertobjhmatts_0_11111211111111
                                          solve( State_11111211111111( L_h.1,
                                                                       <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                        'off', 'on', 'undef', 'undef'>,
                                                                       h2, k.2, z.1, ut, v, lock
                                                 ) ▶₀ #t2.4 )
                                            case newh_0_1111121111111
                                            solve( Insert( <'F_template', z.2>,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>
                                                   ) @ #t2.8 )
                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                              solve( (#t2.1 < #t2.6)  ∥ (#t2.1 = #t2.6) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( State_111112111111111111111( L_h.2, atts, h2, k.3, m.1,
                                                                                    ut, v, ~n.5
                                                       ) ▶₀ #t2.5 )
                                                  case outh_0_11111211111111111111
                                                  solve( (#t2.8 < #t2.10)  ∥ (#t2.8 = #t2.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( (#t2.1 < #t2.9)  ∥ (#t2.1 = #t2.9) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( Insert( <'obj', h1>,
                                                                     <z, 'on', x, x.1, x.2, x.3, x.4, 'on', 
                                                                      x.5, 'usage', x.6>
                                                             ) @ #t2.6 )
                                                        case insertobjLhkatts_0_1111111111111111
                                                        solve( State_1111111111111111( h1,
                                                                                       <'on', x, x.1, x.2, 
                                                                                        x.3, x.4, 'on', x.5, 
                                                                                        'usage', x.6>,
                                                                                       z, lock, ptr, templ
                                                               ) ▶₀ #t2.6 )
                                                          case eventNewKeyLhkattsensatts_0_111111111111111
                                                          solve( (#vr.68 < #vr.52)  ∥ (#t2.5 < #vr.68) )
                                                            case case_1
                                                            solve( Insert( <'F_template', ptr>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.10 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( Insert( <'F_template', ptr>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.10 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case insertobjhmatts_0_11111211111111
                                                        solve( State_11111211111111( L_h.2,
                                                                                     <'on', x, x.1, x.2, x.3, 
                                                                                      x.4, 'on', x.5, 
                                                                                      'usage', x.6>,
                                                                                     h1, k.3, z, ut, v, lock
                                                               ) ▶₀ #t2.6 )
                                                          case newh_0_1111121111111
                                                          solve( (#vr.69 < #vr.52)  ∥ (#t2.5 < #vr.69) )
                                                            case case_1
                                                            solve( Insert( <'F_template', z.1>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.10 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( Insert( <'F_template', z.1>,
                                                                           <'on', x, x.1, x.2, x.3, x.4, 
                                                                            'on', x.5, 'usage', x.6>
                                                                   ) @ #t2.10 )
                                                              case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case case_3
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                next
                                  case case_3
                                  solve( State_111112111111111111111( L_h.1, atts, h2.1, k.2, m.1, ut, v,
                                                                      ~n.3
                                         ) ▶₀ #t2.3 )
                                    case outh_0_11111211111111111111
                                    solve( (#t2.7 < #t2.9)  ∥ (#t2.7 = #t2.9) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      solve( (#t2.8 < #t2.1)  ∥ (#t2.8 = #t2.1)  ∥ (#vr.19 < #t2.8) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      next
                                        case case_3
                                        solve( (#t2.4 < #t2.8)  ∥ (#t2.4 = #t2.8) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( State_1( ) ▶₀ #t2.4 )
                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                            by contradiction /* cyclic */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case outsencmkeyv_0_1111111211111
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        by contradiction /* from formulas */
      next
        case case_4
        by contradiction /* from formulas */
      next
        case case_5
        by contradiction /* from formulas */
      next
        case case_6
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (#t1.1 = #t2)  ∥ (#t2 < #t1.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_3
      solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
             (∀ #t2.
               (Unlock_0( '0', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1.1 = #t2) ∨
                (#t2 < #t1.1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                  (¬(#t0 = #t1.1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                   (¬(#t0 = #t1.1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
             (∀ #t2.
               (Unlock_1( '1', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1.1 = #t2) ∨
                (#t2 < #t1.1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                  (¬(#t0 = #t1.1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                   (¬(#t0 = #t1.1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_5
      solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
             (∀ #t2.
               (Unlock_2( '2', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1.1 = #t2) ∨
                (#t2 < #t1.1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                  (¬(#t0 = #t1.1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                   (¬(#t0 = #t1.1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_6
      solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
             (∀ #t2.
               (Unlock_3( '3', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1.1 = #t2) ∨
                (#t2 < #t1.1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                  (¬(#t0 = #t1.1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                   (¬(#t0 = #t1.1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_7
      solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
             (∀ #t2.
               (Unlock_4( '4', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1.1 = #t2) ∨
                (#t2 < #t1.1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                  (¬(#t0 = #t1.1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                   (¬(#t0 = #t1.1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_8
      solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
             (∀ #t2.
               (Unlock_5( '5', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1.1 = #t2) ∨
                (#t2 < #t1.1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                  (¬(#t0 = #t1.1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                   (¬(#t0 = #t1.1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( ((∀ k m #t1.
              (DecUsing( k, m ) @ #t1)
             ⇒
              ((last(#t1)) ∨
               (∃ h2 k2 #t2 #t3.
                 (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
               (∃ h2 #t2 #t3 #t4.
                 (NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3) ∧ (!KU( m ) @ #t4)
                ∧
                 (¬(last(#t4))) ∧
                 (¬(last(#t3))) ∧
                 (¬(last(#t2))) ∧
                 (#t2 < #t1) ∧
                 (#t3 < #t1) ∧
                 (#t4 < #t1)) ∨
               (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (¬(last(#t2))) ∧ (#t2 < #t1)) ∨
               (∃ h2 k2 #t2 #t3 a.
                 (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
               (∃ #t2 #t3 h1 h2 k2.
                 (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)))) ∧
            (∀ k #t2.
              (GetKeyValue( k ) @ #t2)
             ⇒
              ((last(#t2)) ∨
               (∃ L_h #t1. (NewKey( L_h, k, 'off' ) @ #t1) ∧ ¬(last(#t1))))) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
               ) @ #t)
             ⇒
              last(#t)))  ∥
           (∃ x y #t3.
             (IsIn( x, y ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (∀ #t2.
               (Insert( x, y ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t1 yp.
                  (Insert( x, yp ) @ #t1)
                 ∧
                  (¬(last(#t1))) ∧
                  (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                  (¬(#t1 = #t2)) ∧
                  (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_0( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_1( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_2( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_3( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_4( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_5( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3))) )
      case case_1
      solve( (last(#t2))  ∥
             (∃ L_h #t1. (NewKey( L_h, k, 'off' ) @ #t1) ∧ ¬(last(#t1))) )
        case case_1
        solve( State_111121111( L_h, v, lock ) ▶₀ #t2 )
          case ifCangetkeyvalueattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11112111
          solve( Insert( <'obj', L_h>,
                         <k, x, x.1, x.2, x.3, 'off', x.4, x.5, x.6, x.7, x.8>
                 ) @ #t2.1 )
            case insertobjLhkatts_0_1111111111111111
            solve( State_1111111111111111( L_h,
                                           <x, x.1, x.2, x.3, 'off', x.4, x.5, x.6, x.7, x.8>, k, lock, ptr,
                                           templ
                   ) ▶₀ #t2.1 )
              case eventNewKeyLhkattsensatts_0_111111111111111
              by contradiction /* from formulas */
            qed
          next
            case insertobjhmatts_0_11111211111111
            solve( State_11111211111111( L_h.1,
                                         <x, x.1, x.2, x.3, 'off', x.4, x.5, x.6, x.7, x.8>, L_h, k.1, k, ut,
                                         v, lock
                   ) ▶₀ #t2.1 )
              case newh_0_1111121111111
              solve( Insert( <'F_template', z>,
                             <x, x.1, x.2, x.3, 'off', x.4, x.5, x.6, x.7, x.8>
                     ) @ #t2.3 )
                case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (#t1 = #t2.1)  ∥ (#t2.1 < #t1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_3
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_0( '0', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_1( '1', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_5
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_2( '2', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_6
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_3( '3', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_7
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_4( '4', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_8
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_5( '5', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_3
    solve( ((∀ k m #t1.
              (DecUsing( k, m ) @ #t1)
             ⇒
              ((last(#t1)) ∨
               (∃ h2 k2 #t2 #t3.
                 (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
               (∃ h2 #t2 #t3 #t4.
                 (NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3) ∧ (!KU( m ) @ #t4)
                ∧
                 (¬(last(#t4))) ∧
                 (¬(last(#t3))) ∧
                 (¬(last(#t2))) ∧
                 (#t2 < #t1) ∧
                 (#t3 < #t1) ∧
                 (#t4 < #t1)) ∨
               (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (¬(last(#t2))) ∧ (#t2 < #t1)) ∨
               (∃ h2 k2 #t2 #t3 a.
                 (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
               (∃ #t2 #t3 h1 h2 k2.
                 (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)))) ∧
            (∀ k #t2.
              (GetKeyValue( k ) @ #t2)
             ⇒
              ((last(#t2)) ∨
               (∃ L_h #t1. (NewKey( L_h, k, 'off' ) @ #t1) ∧ ¬(last(#t1))))) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
               ) @ #t)
             ⇒
              last(#t)))  ∥
           (∃ x y #t3.
             (IsIn( x, y ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (∀ #t2.
               (Insert( x, y ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t1 yp.
                  (Insert( x, yp ) @ #t1)
                 ∧
                  (¬(last(#t1))) ∧
                  (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                  (¬(#t1 = #t2)) ∧
                  (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_0( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_1( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_2( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_3( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_4( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_5( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3))) )
      case case_1
      solve( Insert( <'obj', L_h>,
                     <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
             ) @ #t )
        case insertobjLhkatts_0_1111111111111111
        solve( State_1111111111111111( L_h,
                                       <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>, k,
                                       lock, ptr, templ
               ) ▶₀ #t )
          case eventNewKeyLhkattsensatts_0_111111111111111
          by solve( Insert( <'F_template', ptr>,
                            <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
                    ) @ #t2 )
        qed
      next
        case insertobjhmatts_0_11111211111111
        solve( State_11111211111111( L_h,
                                     <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>, L_h.1, k,
                                     k.1, ut, v, lock
               ) ▶₀ #t )
          case newh_0_1111121111111
          by solve( Insert( <'F_template', z>,
                            <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
                    ) @ #t2 )
        qed
      qed
    next
      case case_2
      solve( (#t1 = #t2)  ∥ (#t2 < #t1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_3
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_0( '0', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_1( '1', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_5
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_2( '2', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_6
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_3( '3', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_7
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_4( '4', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_8
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_5( '5', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_4
    solve( ((∀ k m #t1.
              (DecUsing( k, m ) @ #t1)
             ⇒
              ((last(#t1)) ∨
               (∃ h2 k2 #t2 #t3.
                 (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
               (∃ h2 #t2 #t3 #t4.
                 (NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3) ∧ (!KU( m ) @ #t4)
                ∧
                 (¬(last(#t4))) ∧
                 (¬(last(#t3))) ∧
                 (¬(last(#t2))) ∧
                 (#t2 < #t1) ∧
                 (#t3 < #t1) ∧
                 (#t4 < #t1)) ∨
               (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (¬(last(#t2))) ∧ (#t2 < #t1)) ∨
               (∃ h2 k2 #t2 #t3 a.
                 (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
               (∃ #t2 #t3 h1 h2 k2.
                 (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)))) ∧
            (∀ k #t2.
              (GetKeyValue( k ) @ #t2)
             ⇒
              ((last(#t2)) ∨
               (∃ L_h #t1. (NewKey( L_h, k, 'off' ) @ #t1) ∧ ¬(last(#t1))))) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
               ) @ #t)
             ⇒
              last(#t)))  ∥
           (∃ x y #t3.
             (IsIn( x, y ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (∀ #t2.
               (Insert( x, y ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t1 yp.
                  (Insert( x, yp ) @ #t1)
                 ∧
                  (¬(last(#t1))) ∧
                  (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                  (¬(#t1 = #t2)) ∧
                  (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_0( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_1( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_2( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_3( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_4( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_5( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3))) )
      case case_1
      solve( Insert( <'obj', L_h>,
                     <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
             ) @ #t )
        case insertobjLhkatts_0_1111111111111111
        solve( State_1111111111111111( L_h,
                                       <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>, k,
                                       lock, ptr, templ
               ) ▶₀ #t )
          case eventNewKeyLhkattsensatts_0_111111111111111
          by solve( Insert( <'F_template', ptr>,
                            <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
                    ) @ #t2 )
        qed
      next
        case insertobjhmatts_0_11111211111111
        solve( State_11111211111111( L_h,
                                     <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>, L_h.1,
                                     k, k.1, ut, v, lock
               ) ▶₀ #t )
          case newh_0_1111121111111
          by solve( Insert( <'F_template', z>,
                            <wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
                    ) @ #t2 )
        qed
      qed
    next
      case case_2
      solve( (#t1 = #t2)  ∥ (#t2 < #t1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_3
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_0( '0', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_1( '1', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_5
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_2( '2', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_6
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_3( '3', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_7
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_4( '4', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_8
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_5( '5', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_5
    solve( ((∀ k m #t1.
              (DecUsing( k, m ) @ #t1)
             ⇒
              ((last(#t1)) ∨
               (∃ h2 k2 #t2 #t3.
                 (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
               (∃ h2 #t2 #t3 #t4.
                 (NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3) ∧ (!KU( m ) @ #t4)
                ∧
                 (¬(last(#t4))) ∧
                 (¬(last(#t3))) ∧
                 (¬(last(#t2))) ∧
                 (#t2 < #t1) ∧
                 (#t3 < #t1) ∧
                 (#t4 < #t1)) ∨
               (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (¬(last(#t2))) ∧ (#t2 < #t1)) ∨
               (∃ h2 k2 #t2 #t3 a.
                 (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
               (∃ #t2 #t3 h1 h2 k2.
                 (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)))) ∧
            (∀ k #t2.
              (GetKeyValue( k ) @ #t2)
             ⇒
              ((last(#t2)) ∨
               (∃ L_h #t1. (NewKey( L_h, k, 'off' ) @ #t1) ∧ ¬(last(#t1))))) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
               ) @ #t)
             ⇒
              last(#t)))  ∥
           (∃ x y #t3.
             (IsIn( x, y ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (∀ #t2.
               (Insert( x, y ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t1 yp.
                  (Insert( x, yp ) @ #t1)
                 ∧
                  (¬(last(#t1))) ∧
                  (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                  (¬(#t1 = #t2)) ∧
                  (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_0( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_1( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_2( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_3( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_4( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_5( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3))) )
      case case_1
      solve( Insert( <'obj', L_h>,
                     <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
             ) @ #t )
        case insertobjLhkatts_0_1111111111111111
        solve( State_1111111111111111( L_h,
                                       <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>, k,
                                       lock, ptr, templ
               ) ▶₀ #t )
          case eventNewKeyLhkattsensatts_0_111111111111111
          by solve( Insert( <'F_template', ptr>,
                            <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
                    ) @ #t2 )
        qed
      next
        case insertobjhmatts_0_11111211111111
        solve( State_11111211111111( L_h,
                                     <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>, L_h.1, k,
                                     k.1, ut.1, v, lock
               ) ▶₀ #t )
          case newh_0_1111121111111
          by solve( Insert( <'F_template', z>,
                            <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
                    ) @ #t2 )
        qed
      qed
    next
      case case_2
      solve( (#t1 = #t2)  ∥ (#t2 < #t1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_3
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_0( '0', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_1( '1', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_5
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_2( '2', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_6
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_3( '3', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_7
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_4( '4', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_8
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_5( '5', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_6
    solve( ((∀ k m #t1.
              (DecUsing( k, m ) @ #t1)
             ⇒
              ((last(#t1)) ∨
               (∃ h2 k2 #t2 #t3.
                 (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
               (∃ h2 #t2 #t3 #t4.
                 (NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3) ∧ (!KU( m ) @ #t4)
                ∧
                 (¬(last(#t4))) ∧
                 (¬(last(#t3))) ∧
                 (¬(last(#t2))) ∧
                 (#t2 < #t1) ∧
                 (#t3 < #t1) ∧
                 (#t4 < #t1)) ∨
               (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (¬(last(#t2))) ∧ (#t2 < #t1)) ∨
               (∃ h2 k2 #t2 #t3 a.
                 (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
               (∃ #t2 #t3 h1 h2 k2.
                 (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
                ∧
                 (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)))) ∧
            (∀ k #t2.
              (GetKeyValue( k ) @ #t2)
             ⇒
              ((last(#t2)) ∨
               (∃ L_h #t1. (NewKey( L_h, k, 'off' ) @ #t1) ∧ ¬(last(#t1))))) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
               ) @ #t)
             ⇒
              last(#t)) ∧
            (∀ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
              (Insert( <'obj', L_h>,
                       <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
               ) @ #t)
             ⇒
              last(#t)))  ∥
           (∃ x y #t3.
             (IsIn( x, y ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (∀ #t2.
               (Insert( x, y ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t1 yp.
                  (Insert( x, yp ) @ #t1)
                 ∧
                  (¬(last(#t1))) ∧
                  (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                  (¬(#t1 = #t2)) ∧
                  (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_0( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_1( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_2( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_3( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_4( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_5( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3))) )
      case case_1
      solve( Insert( <'obj', L_h>,
                     <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
             ) @ #t )
        case insertobjLhkatts_0_1111111111111111
        solve( State_1111111111111111( L_h,
                                       <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>, k,
                                       lock, ptr, templ
               ) ▶₀ #t )
          case eventNewKeyLhkattsensatts_0_111111111111111
          by solve( Insert( <'F_template', ptr>,
                            <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
                    ) @ #t2 )
        qed
      next
        case insertobjhmatts_0_11111211111111
        solve( State_11111211111111( L_h,
                                     <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>, L_h.1,
                                     k, k.1, ut.1, v, lock
               ) ▶₀ #t )
          case newh_0_1111121111111
          by solve( Insert( <'F_template', z>,
                            <wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
                    ) @ #t2 )
        qed
      qed
    next
      case case_2
      solve( (#t1 = #t2)  ∥ (#t2 < #t1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_3
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_0( '0', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_1( '1', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_5
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_2( '2', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_6
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_3( '3', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_7
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_4( '4', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_8
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_5( '5', ~n, 'device' ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, 'device' ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, 'device' ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                   (¬(#t2 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma trusted_as_ut_impossible [reuse]:
  all-traces
  "¬(∃ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
      Insert( <'obj', L_h>,
              <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
      ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"∃ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
  (Insert( <'obj', L_h>,
           <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'trusted'>
   ) @ #t)"
*/
simplify
by contradiction /* from formulas */

lemma untrusted_as_ut_impossible [reuse]:
  all-traces
  "¬(∃ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
      Insert( <'obj', L_h>,
              <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
      ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"∃ L_h k wrap unwrap enc dec sens extr trus wwt wt #t.
  (Insert( <'obj', L_h>,
           <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>
   ) @ #t)"
*/
simplify
by contradiction /* from formulas */

lemma untrusted_as_wt_impossible [reuse]:
  all-traces
  "¬(∃ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
      Insert( <'obj', L_h>,
              <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
      ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"∃ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
  (Insert( <'obj', L_h>,
           <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>
   ) @ #t)"
*/
simplify
by contradiction /* from formulas */

lemma trusted_as_wt_impossible [reuse]:
  all-traces
  "¬(∃ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
      Insert( <'obj', L_h>,
              <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
      ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"∃ L_h k wrap unwrap enc dec sens extr trus wwt ut #t.
  (Insert( <'obj', L_h>,
           <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'trusted', ut>
   ) @ #t)"
*/
simplify
by contradiction /* from formulas */

lemma bad_keys [reuse, use_induction]:
  all-traces
  "∀ h2 k #t2 a.
    (Unwrapped( h2, k, a ) @ #t2) ⇒
    ((((∃ h1 #t1. (NewKey( h1, k, 'on' ) @ #t1) ∧ (#t1 < #t2)) ∨
       (∃ L_h k2 #t1 #t0.
         (((NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)) ∧ (#t1 < #t2)) ∧
         (#t0 < #t2))) ∨
      (∃ #t0 #t1 h1 h2.1 k.1.
        (((WrapKey( h2.1, k.1, 'on' ) @ #t0) ∧ (DecKey( h1, k.1, 'on' ) @ #t1)) ∧
         (#t0 < #t2)) ∧
        (#t1 < #t2))) ∨
     (∃ #t0 #t1 h1 h2.1 k.1.
       (((UnwrapKey( h2.1, k.1, 'on' ) @ #t0) ∧
         (EncKey( h1, k.1, 'on' ) @ #t1)) ∧
        (#t0 < #t2)) ∧
       (#t1 < #t2)))"
/*
guarded formula characterizing all counter-examples:
"∃ h2 k #t2 a.
  (Unwrapped( h2, k, a ) @ #t2)
 ∧
  (∀ h1 #t1. (NewKey( h1, k, 'on' ) @ #t1) ⇒ ¬(#t1 < #t2)) ∧
  (∀ L_h k2 #t1 #t0.
    (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
   ⇒
    ((¬(#t1 < #t2)) ∨ (¬(#t0 < #t2)))) ∧
  (∀ #t0 #t1 h1 h2.1 k.1.
    (WrapKey( h2.1, k.1, 'on' ) @ #t0) ∧ (DecKey( h1, k.1, 'on' ) @ #t1)
   ⇒
    ((¬(#t0 < #t2)) ∨ (¬(#t1 < #t2)))) ∧
  (∀ #t0 #t1 h1 h2.1 k.1.
    (UnwrapKey( h2.1, k.1, 'on' ) @ #t0) ∧ (EncKey( h1, k.1, 'on' ) @ #t1)
   ⇒
    ((¬(#t0 < #t2)) ∨ (¬(#t1 < #t2))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ h2 k #t2 a.
           (Unwrapped( h2, k, a ) @ #t2)
          ⇒
           ((last(#t2)) ∨
            (∃ h1 #t1.
              (NewKey( h1, k, 'on' ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2)) ∨
            (∃ L_h k2 #t1 #t0.
              (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
             ∧
              (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2) ∧ (#t0 < #t2)) ∨
            (∃ #t0 #t1 h1 h2.1 k.1.
              (WrapKey( h2.1, k.1, 'on' ) @ #t0) ∧ (DecKey( h1, k.1, 'on' ) @ #t1)
             ∧
              (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2)) ∨
            (∃ #t0 #t1 h1 h2.1 k.1.
              (UnwrapKey( h2.1, k.1, 'on' ) @ #t0) ∧ (EncKey( h1, k.1, 'on' ) @ #t1)
             ∧
              (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2))))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t1 yp.
                (Insert( x, yp ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (¬(#t1 = #t2)) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_0( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_1( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_2( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_3( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_4( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_5( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3))) )
    case case_1
    solve( (last(#t2))  ∥
           (∃ h1 #t1.
             (NewKey( h1, k.1, 'on' ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2))  ∥
           (∃ L_h k2 #t1 #t0.
             (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2) ∧ (#t0 < #t2))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
            ∧
             (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
            ∧
             (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2)) )
      case case_1
      solve( State_111112111111111( L_h, a, h2, k, k.1, ut, v, lock ) ▶₀ #t2 )
        case insertobjhmatts_0_11111211111111
        solve( Insert( <'F_template', z>, ut ) @ #t2.1 )
          case insertFtemplatetrustedononoffoffononononusageusage_0_
          by contradiction /* from formulas */
        next
          case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
          by contradiction /* from formulas */
        next
          case insertFtemplateusageoffoffononononoffonundefundef_0_1
          solve( (#vr.14 < #t2.1)  ∥ (#vr.14 = #t2.1) )
            case case_1
            solve( State_1( ) ▶₀ #t2.1 )
              case insertFtemplatetrustedononoffoffononononusageusage_0_
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( !KU( senc(k.1, k) ) @ #vk.3 )
              case c_senc
              solve( Insert( <'obj', L_h>,
                             <k, x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                     ) @ #t2.2 )
                case insertobjLhkatts_0_1111111111111111
                solve( State_1111111111111111( L_h,
                                               <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>, k, lock,
                                               ptr, templ
                       ) ▶₀ #t2.2 )
                  case eventNewKeyLhkattsensatts_0_111111111111111
                  solve( Insert( <'F_template', ptr>,
                                 <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                         ) @ #t2.4 )
                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case insertobjhmatts_0_11111211111111
                solve( State_11111211111111( L_h.1,
                                             <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>, L_h, k.2,
                                             k, ut, v, lock
                       ) ▶₀ #t2.2 )
                  case newh_0_1111121111111
                  solve( Insert( <'F_template', z>,
                                 <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                         ) @ #t2.4 )
                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case outkeyv_0_1111211111
              solve( State_111111111111111( L_h.2,
                                            <x.17, x.18, x.19, x.20, 'off', x.21, x.22, x.23, x.24, x.25>, t,
                                            lock, ptr, templ
                     ) ▶₀ #t1 )
                case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                by contradiction /* impossible chain */
              qed
            next
              case outm_0_111111112111111
              solve( (∃ h2 k2 #t2 #t3.
                       (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17))  ∥
                     (∃ h2 #t2 #t3 #t4.
                       (NewKey( h2, k.2, 'off' ) @ #t2) ∧ (!KU( k.2 ) @ #t3) ∧ (!KU( t ) @ #t4)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17) ∧ (#t4 < #vr.17))  ∥
                     (∃ #t2. (EncUsing( k.2, t ) @ #t2) ∧ #t2 < #vr.17)  ∥
                     (∃ h2 k2 #t2 #t3 a.
                       (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17))  ∥
                     (∃ #t2 #t3 h1 h2 k2.
                       (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* cyclic */
              next
                case case_3
                solve( State_1111111121111111( L_h.1, k.2, m, v, ~n.2 ) ▶₀ #t2.2 )
                  case outm_0_111111112111111
                  solve( (#t2.5 < #t2.6)  ∥ (#t2.5 = #t2.6) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( State_111111121111( L_h.2, m, v, lock ) ▶₀ #t2.3 )
                      case ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_4
                solve( (∃ h1 #t1.
                         (NewKey( h1, k2, 'on' ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.3))  ∥
                       (∃ L_h k2 #t1 #t0.
                         (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                        ∧
                         (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.3) ∧ (#t0 < #t2.3))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2.3) ∧ (#t1 < #t2.3))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2.3) ∧ (#t1 < #t2.3)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                next
                  case case_4
                  by contradiction /* from formulas */
                qed
              next
                case case_5
                by contradiction /* from formulas */
              qed
            next
              case outsenckeyvkeyv_0_111111211111111_case_1
              solve( (z.8 = 'off')  ∥ ((z.8 = 'on') ∧ (z = 'on')) )
                case case_1
                solve( Insert( <'F_template', z.1>,
                               <z.2, z.3, z.4, z.5, z.6, 'on', z.7, 'off', z.8, z.9>
                       ) @ #t2.4 )
                  case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                solve( Insert( <'F_template', z>,
                               <z.1, z.2, z.3, z.4, z.5, 'on', z.6, 'on', z.7, z.8>
                       ) @ #t2.4 )
                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                  by contradiction /* from formulas */
                next
                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                  solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.2 ) ▶₀ #t2.2 )
                      case outsenckeyvkeyv_0_111111211111111
                      solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( (#t2.1 < #t2.6)  ∥ (#t2.1 = #t2.6) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (#t2.4 < #t2.6)  ∥ (#t2.4 = #t2.6) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( Insert( <'obj', L_h>,
                                           <k, x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                                   ) @ #t2.3 )
                              case insertobjLhkatts_0_1111111111111111
                              solve( State_1111111111111111( L_h,
                                                             <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 
                                                              'usage'>,
                                                             k, lock, ptr, templ
                                     ) ▶₀ #t2.3 )
                                case eventNewKeyLhkattsensatts_0_111111111111111
                                solve( Insert( <'F_template', ptr>,
                                               <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                                       ) @ #t2.7 )
                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                  solve( (#vr.14 < #t2.5)  ∥ (#vr.14 = #t2.5) )
                                    case case_1
                                    solve( State_1111111111111111111111( L_h, atts, k.1, ~n.5, ptr, templ
                                           ) ▶₀ #t2.4 )
                                      case outLh_0_111111111111111111111
                                      solve( (#vr.14 < #t2.8)  ∥ (#vr.14 = #t2.8) )
                                        case case_1
                                        solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( State_( ) ▶₀ #t2.5 )
                                            case Init
                                            by contradiction /* cyclic */
                                          qed
                                        qed
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  next
                                    case case_2
                                    solve( State_1111111111111111111111( L_h, atts, k.1, ~n.5, ptr, templ
                                           ) ▶₀ #t2.4 )
                                      case outLh_0_111111111111111111111
                                      solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( Insert( <'obj', h2>,
                                                       <k, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                        'undef', 'undef'>
                                               ) @ #t2.6 )
                                          case insertobjLhkatts_0_1111111111111111
                                          solve( State_1111111111111111( h2,
                                                                         <'off', 'off', 'on', 'on', 'on', 
                                                                          'on', 'off', 'on', 'undef', 'undef'
                                                                         >,
                                                                         k, lock, ptr, templ
                                                 ) ▶₀ #t2.6 )
                                            case eventNewKeyLhkattsensatts_0_111111111111111
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case insertobjhmatts_0_11111211111111
                                          solve( State_11111211111111( L_h,
                                                                       <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                        'off', 'on', 'undef', 'undef'>,
                                                                       h2, k.1, k, ut, v, lock
                                                 ) ▶₀ #t2.6 )
                                            case newh_0_1111121111111
                                            solve( (#vr.52 < #vr.33)  ∥ (#t2.4 < #vr.52) )
                                              case case_1
                                              solve( Insert( <'F_template', z>,
                                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                              'on', 'undef', 'undef'>
                                                     ) @ #t2.9 )
                                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( State_111112111111111111111( L_h.1, atts, h2, k.2, m,
                                                                                      ut, v, ~n.7
                                                         ) ▶₀ #t2.7 )
                                                    case outh_0_11111211111111111111
                                                    solve( (∃ h1 #t1.
                                                             (NewKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧ (#t1 < #vr.62))  ∥
                                                           (∃ L_h k2 #t1 #t0.
                                                             (NewKey( L_h, k2, 'on' ) @ #t0) ∧
                                                             (!KU( k2 ) @ #t1)
                                                            ∧
                                                             (¬(last(#t0))) ∧
                                                             (¬(last(#t1))) ∧
                                                             (#t1 < #vr.62) ∧
                                                             (#t0 < #vr.62))  ∥
                                                           (∃ #t0 #t1 h1 h2 k.
                                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                             (DecKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧
                                                             (¬(last(#t0))) ∧
                                                             (#t0 < #vr.62) ∧
                                                             (#t1 < #vr.62))  ∥
                                                           (∃ #t0 #t1 h1 h2 k.
                                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                             (EncKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧
                                                             (¬(last(#t0))) ∧
                                                             (#t0 < #vr.62) ∧
                                                             (#t1 < #vr.62)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( Insert( <'F_template', z>,
                                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                              'on', 'undef', 'undef'>
                                                     ) @ #t2.9 )
                                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( State_111112111111111111111( L_h.1, atts, h2, k.2, m,
                                                                                      ut, v, ~n.7
                                                         ) ▶₀ #t2.7 )
                                                    case outh_0_11111211111111111111
                                                    solve( (∃ h1 #t1.
                                                             (NewKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧ (#t1 < #vr.62))  ∥
                                                           (∃ L_h k2 #t1 #t0.
                                                             (NewKey( L_h, k2, 'on' ) @ #t0) ∧
                                                             (!KU( k2 ) @ #t1)
                                                            ∧
                                                             (¬(last(#t0))) ∧
                                                             (¬(last(#t1))) ∧
                                                             (#t1 < #vr.62) ∧
                                                             (#t0 < #vr.62))  ∥
                                                           (∃ #t0 #t1 h1 h2 k.
                                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                             (DecKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧
                                                             (¬(last(#t0))) ∧
                                                             (#t0 < #vr.62) ∧
                                                             (#t1 < #vr.62))  ∥
                                                           (∃ #t0 #t1 h1 h2 k.
                                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                             (EncKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧
                                                             (¬(last(#t0))) ∧
                                                             (#t0 < #vr.62) ∧
                                                             (#t1 < #vr.62)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case insertobjhmatts_0_11111211111111
                              solve( State_11111211111111( L_h.1,
                                                           <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 
                                                            'usage'>,
                                                           L_h, k.2, k, ut, v, lock
                                     ) ▶₀ #t2.3 )
                                case newh_0_1111121111111
                                solve( (#vr.35 < #vr.23)  ∥ (#t2.2 < #vr.35) )
                                  case case_1
                                  solve( Insert( <'F_template', z>,
                                                 <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                                         ) @ #t2.7 )
                                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case case_2
                                  solve( Insert( <'F_template', z>,
                                                 <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                                         ) @ #t2.7 )
                                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case outsenckeyvkeyv_0_111111211111111_case_2
              solve( Insert( <'F_template', z.3>,
                             <z.4, z.5, z.6, z.7, z.8, 'on', z.9, 'off', z.10, z.11>
                     ) @ #t2.4 )
                case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                by contradiction /* from formulas */
              qed
            next
              case outsenckeyvkeyv_0_111111211111111_case_3
              solve( Insert( <'F_template', z.2>,
                             <z.3, z.4, z.5, z.6, z.7, 'on', z.8, 'on', z.9, z.10>
                     ) @ #t2.4 )
                case insertFtemplatetrustedononoffoffononononusageusage_0_
                by contradiction /* from formulas */
              next
                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.2 ) ▶₀ #t2.2 )
                    case outsenckeyvkeyv_0_111111211111111
                    solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( (#t2.1 < #t2.6)  ∥ (#t2.1 = #t2.6) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( (#t2.4 < #t2.6)  ∥ (#t2.4 = #t2.6) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( Insert( <'obj', L_h>,
                                         <k, x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                                 ) @ #t2.3 )
                            case insertobjLhkatts_0_1111111111111111
                            solve( State_1111111111111111( L_h,
                                                           <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 
                                                            'usage'>,
                                                           k, lock, ptr, templ
                                   ) ▶₀ #t2.3 )
                              case eventNewKeyLhkattsensatts_0_111111111111111
                              solve( (#vr.35 < #vr.24)  ∥ (#t2.2 < #vr.35) )
                                case case_1
                                solve( Insert( <'F_template', ptr>,
                                               <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                                       ) @ #t2.7 )
                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                  solve( (#vr.14 < #t2.5)  ∥ (#vr.14 = #t2.5) )
                                    case case_1
                                    solve( State_1111111111111111111111( L_h, atts, k.1, ~n.5, ptr, templ
                                           ) ▶₀ #t2.4 )
                                      case outLh_0_111111111111111111111
                                      solve( (#vr.14 < #t2.8)  ∥ (#vr.14 = #t2.8) )
                                        case case_1
                                        solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( State_( ) ▶₀ #t2.5 )
                                            case Init
                                            by contradiction /* cyclic */
                                          qed
                                        qed
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  next
                                    case case_2
                                    solve( State_1111111111111111111111( L_h, atts, k.1, ~n.5, ptr, templ
                                           ) ▶₀ #t2.4 )
                                      case outLh_0_111111111111111111111
                                      solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( Insert( <'obj', h2>,
                                                       <z, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                        'undef', 'undef'>
                                               ) @ #t2.6 )
                                          case insertobjLhkatts_0_1111111111111111
                                          solve( State_1111111111111111( h2,
                                                                         <'off', 'off', 'on', 'on', 'on', 
                                                                          'on', 'off', 'on', 'undef', 'undef'
                                                                         >,
                                                                         z, lock, ptr, templ
                                                 ) ▶₀ #t2.6 )
                                            case eventNewKeyLhkattsensatts_0_111111111111111
                                            by contradiction /* impossible chain */
                                          qed
                                        next
                                          case insertobjhmatts_0_11111211111111
                                          solve( State_11111211111111( L_h,
                                                                       <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                        'off', 'on', 'undef', 'undef'>,
                                                                       h2, k.1, z, ut, v, lock
                                                 ) ▶₀ #t2.6 )
                                            case newh_0_1111121111111
                                            solve( (#vr.53 < #vr.34)  ∥ (#t2.4 < #vr.53) )
                                              case case_1
                                              solve( Insert( <'F_template', z.2>,
                                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                              'on', 'undef', 'undef'>
                                                     ) @ #t2.9 )
                                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( State_111112111111111111111( L_h.1, atts, h2, k.2, m,
                                                                                      ut, v, ~n.7
                                                         ) ▶₀ #t2.7 )
                                                    case outh_0_11111211111111111111
                                                    solve( (∃ h1 #t1.
                                                             (NewKey( h1, m, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧ (#t1 < #vr.63))  ∥
                                                           (∃ L_h k2 #t1 #t0.
                                                             (NewKey( L_h, k2, 'on' ) @ #t0) ∧
                                                             (!KU( k2 ) @ #t1)
                                                            ∧
                                                             (¬(last(#t0))) ∧
                                                             (¬(last(#t1))) ∧
                                                             (#t1 < #vr.63) ∧
                                                             (#t0 < #vr.63))  ∥
                                                           (∃ #t0 #t1 h1 h2 k.
                                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                             (DecKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧
                                                             (¬(last(#t0))) ∧
                                                             (#t0 < #vr.63) ∧
                                                             (#t1 < #vr.63))  ∥
                                                           (∃ #t0 #t1 h1 h2 k.
                                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                             (EncKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧
                                                             (¬(last(#t0))) ∧
                                                             (#t0 < #vr.63) ∧
                                                             (#t1 < #vr.63)) )
                                                      case case_1
                                                      solve( (#t2.9 < #t2.11)  ∥ (#t2.9 = #t2.11) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( (#t2.1 < #t2.10)  ∥ (#t2.1 = #t2.10) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          solve( State_111111111111111( h1,
                                                                                        <x, x.1, x.2, x.3, 
                                                                                         'on', x.4, x.5, x.6, 
                                                                                         x.7, x.8>,
                                                                                        m, lock, ptr, templ
                                                                 ) ▶₀ #t1 )
                                                            case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                            by contradiction /* impossible chain */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( Insert( <'F_template', z.2>,
                                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                              'on', 'undef', 'undef'>
                                                     ) @ #t2.9 )
                                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( State_111112111111111111111( L_h.1, atts, h2, k.2, m,
                                                                                      ut, v, ~n.7
                                                         ) ▶₀ #t2.7 )
                                                    case outh_0_11111211111111111111
                                                    solve( (∃ h1 #t1.
                                                             (NewKey( h1, m, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧ (#t1 < #vr.63))  ∥
                                                           (∃ L_h k2 #t1 #t0.
                                                             (NewKey( L_h, k2, 'on' ) @ #t0) ∧
                                                             (!KU( k2 ) @ #t1)
                                                            ∧
                                                             (¬(last(#t0))) ∧
                                                             (¬(last(#t1))) ∧
                                                             (#t1 < #vr.63) ∧
                                                             (#t0 < #vr.63))  ∥
                                                           (∃ #t0 #t1 h1 h2 k.
                                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                             (DecKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧
                                                             (¬(last(#t0))) ∧
                                                             (#t0 < #vr.63) ∧
                                                             (#t1 < #vr.63))  ∥
                                                           (∃ #t0 #t1 h1 h2 k.
                                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                             (EncKey( h1, k, 'on' ) @ #t1)
                                                            ∧
                                                             (¬(last(#t1))) ∧
                                                             (¬(last(#t0))) ∧
                                                             (#t0 < #vr.63) ∧
                                                             (#t1 < #vr.63)) )
                                                      case case_1
                                                      solve( (#t2.9 < #t2.11)  ∥ (#t2.9 = #t2.11) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( (#t2.1 < #t2.10)  ∥ (#t2.1 = #t2.10) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          solve( State_111111111111111( h1,
                                                                                        <x, x.1, x.2, x.3, 
                                                                                         'on', x.4, x.5, x.6, 
                                                                                         x.7, x.8>,
                                                                                        m, lock, ptr, templ
                                                                 ) ▶₀ #t1 )
                                                            case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                            by contradiction /* impossible chain */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                solve( Insert( <'F_template', ptr>,
                                               <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                                       ) @ #t2.7 )
                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                  solve( (#vr.14 < #t2.5)  ∥ (#vr.14 = #t2.5) )
                                    case case_1
                                    solve( State_1111111111111111111111( L_h, atts, k.1, ~n.5, ptr, templ
                                           ) ▶₀ #t2.4 )
                                      case outLh_0_111111111111111111111
                                      solve( (#vr.14 < #t2.8)  ∥ (#vr.14 = #t2.8) )
                                        case case_1
                                        solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( State_( ) ▶₀ #t2.5 )
                                            case Init
                                            by contradiction /* cyclic */
                                          qed
                                        qed
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  next
                                    case case_2
                                    solve( State_1111111111111111111111( L_h, atts, k.1, ~n.5, ptr, templ
                                           ) ▶₀ #t2.4 )
                                      case outLh_0_111111111111111111111
                                      solve( (#t2.5 < #t2.8)  ∥ (#t2.5 = #t2.8) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( Insert( <'obj', h2>,
                                                       <z, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                        'undef', 'undef'>
                                               ) @ #t2.6 )
                                          case insertobjLhkatts_0_1111111111111111
                                          solve( State_1111111111111111( h2,
                                                                         <'off', 'off', 'on', 'on', 'on', 
                                                                          'on', 'off', 'on', 'undef', 'undef'
                                                                         >,
                                                                         z, lock, ptr, templ
                                                 ) ▶₀ #t2.6 )
                                            case eventNewKeyLhkattsensatts_0_111111111111111
                                            by contradiction /* impossible chain */
                                          qed
                                        next
                                          case insertobjhmatts_0_11111211111111
                                          solve( State_11111211111111( L_h,
                                                                       <'off', 'off', 'on', 'on', 'on', 'on', 
                                                                        'off', 'on', 'undef', 'undef'>,
                                                                       h2, k.1, z, ut, v, lock
                                                 ) ▶₀ #t2.6 )
                                            case newh_0_1111121111111
                                            solve( Insert( <'F_template', z.2>,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>
                                                   ) @ #t2.9 )
                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                              solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( State_111112111111111111111( L_h.1, atts, h2, k.2, m,
                                                                                    ut, v, ~n.7
                                                       ) ▶₀ #t2.7 )
                                                  case outh_0_11111211111111111111
                                                  solve( (∃ h1 #t1.
                                                           (NewKey( h1, m, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧ (#t1 < #vr.63))  ∥
                                                         (∃ L_h k2 #t1 #t0.
                                                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                          ∧
                                                           (¬(last(#t0))) ∧
                                                           (¬(last(#t1))) ∧
                                                           (#t1 < #vr.63) ∧
                                                           (#t0 < #vr.63))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #vr.63) ∧
                                                           (#t1 < #vr.63))  ∥
                                                         (∃ #t0 #t1 h1 h2 k.
                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                          ∧
                                                           (¬(last(#t1))) ∧
                                                           (¬(last(#t0))) ∧
                                                           (#t0 < #vr.63) ∧
                                                           (#t1 < #vr.63)) )
                                                    case case_1
                                                    solve( (#t2.9 < #t2.11)  ∥ (#t2.9 = #t2.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( (#t2.1 < #t2.10)  ∥ (#t2.1 = #t2.10) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( State_111111111111111( h1,
                                                                                      <x, x.1, x.2, x.3, 
                                                                                       'on', x.4, x.5, x.6, 
                                                                                       x.7, x.8>,
                                                                                      m, lock, ptr, templ
                                                               ) ▶₀ #t1 )
                                                          case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                          by contradiction /* impossible chain */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case insertobjhmatts_0_11111211111111
                            solve( State_11111211111111( L_h.1,
                                                         <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'
                                                         >,
                                                         L_h, k.2, k, ut, v, lock
                                   ) ▶₀ #t2.3 )
                              case newh_0_1111121111111
                              solve( (#vr.36 < #vr.24)  ∥ (#t2.2 < #vr.36) )
                                case case_1
                                solve( Insert( <'F_template', z.2>,
                                               <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                                       ) @ #t2.7 )
                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                  by contradiction /* from formulas */
                                qed
                              next
                                case case_2
                                solve( Insert( <'F_template', z.2>,
                                               <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                                       ) @ #t2.7 )
                                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case outsencmkeyv_0_1111111211111
              solve( State_11111112111111( L_h.2, m, v, ~n.2 ) ▶₀ #t2.2 )
                case outsencmkeyv_0_1111111211111
                solve( (#t2.4 < #t2.5)  ∥ (#t2.4 = #t2.5) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( Insert( <'obj', L_h>,
                                 <k, x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                         ) @ #t2.3 )
                    case insertobjLhkatts_0_1111111111111111
                    solve( State_1111111111111111( L_h,
                                                   <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>, k,
                                                   lock, ptr, templ
                           ) ▶₀ #t2.3 )
                      case eventNewKeyLhkattsensatts_0_111111111111111
                      solve( Insert( <'F_template', ptr>,
                                     <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                             ) @ #t2.6 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        solve( (#vr.14 < #t2.5)  ∥ (#vr.14 = #t2.5) )
                          case case_1
                          solve( State_1111111111111111111111( L_h.1, atts, k, ~n.5, ptr, templ
                                 ) ▶₀ #t2.4 )
                            case outLh_0_111111111111111111111
                            solve( (#vr.14 < #t2.7)  ∥ (#vr.14 = #t2.7) )
                              case case_1
                              solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                solve( State_( ) ▶₀ #t2.5 )
                                  case Init
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( State_1111111111111111111111( L_h.1, atts, k, ~n.5, ptr, templ
                                 ) ▶₀ #t2.4 )
                            case outLh_0_111111111111111111111
                            solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              solve( Insert( <'obj', L_h>,
                                             <~n.2, x, x.1, 'on', x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                                     ) @ #t2.6 )
                                case insertobjLhkatts_0_1111111111111111
                                by solve( State_1111111111111111( L_h,
                                                                  <x, x.1, 'on', x.2, x.3, x.4, x.5, x.6, 
                                                                   x.7, x.8>,
                                                                  ~n.2, lock, ptr, templ
                                          ) ▶₀ #t2.6 )
                              next
                                case insertobjhmatts_0_11111211111111
                                solve( State_11111211111111( L_h.1,
                                                             <x, x.1, 'on', x.2, x.3, x.4, x.5, x.6, x.7, x.8
                                                             >,
                                                             L_h, k, ~n.2, ut, v, lock
                                       ) ▶₀ #t2.6 )
                                  case newh_0_1111121111111
                                  solve( Insert( <'F_template', z>,
                                                 <x, x.1, 'on', x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                                         ) @ #t2.8 )
                                    case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                                    by contradiction /* from formulas */
                                  next
                                    case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                    solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m.1, ut, v,
                                                                          ~n.7
                                             ) ▶₀ #t2.7 )
                                        case outh_0_11111211111111111111
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case insertobjhmatts_0_11111211111111
                    solve( State_11111211111111( L_h.2,
                                                 <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>, L_h,
                                                 k.1, k, ut, v, lock
                           ) ▶₀ #t2.3 )
                      case newh_0_1111121111111
                      solve( (#vr.33 < #vr.20)  ∥ (#t2.2 < #vr.33) )
                        case case_1
                        solve( Insert( <'F_template', z>,
                                       <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                               ) @ #t2.6 )
                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                          by contradiction /* from formulas */
                        qed
                      next
                        case case_2
                        solve( Insert( <'F_template', z>,
                                       <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, 'usage'>
                               ) @ #t2.6 )
                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    next
      case case_5
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (#t1 = #t2.1)  ∥ (#t2.1 < #t1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_0( '0', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                 (¬(#t2.1 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_4
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_1( '1', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                 (¬(#t2.1 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_5
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_2( '2', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                 (¬(#t2.1 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_6
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_3( '3', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                 (¬(#t2.1 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_7
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_4( '4', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                 (¬(#t2.1 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_8
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_5( '5', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                 (¬(#t2.1 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma no_key_is_wrap_and_dec__or_unwrap_and_dec_ind [use_induction,
                                                     reuse]:
  all-traces
  "∀ #t2 #t3 h1 h2 k.
    ((DecKey( h1, k, 'on' ) @ #t2) ∧ (WrapKey( h2, k, 'on' ) @ #t3)) ⇒
    ((∃ L_h k2 #t1 #t0.
       ((NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)) ∧
       (((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2)))) ∨
     (∃ #t0 #t1 h1.1 h2.1 k.1.
       ((UnwrapKey( h2.1, k.1, 'on' ) @ #t0) ∧
        (EncKey( h1.1, k.1, 'on' ) @ #t1)) ∧
       (((#t0 < #t2) ∧ (#t1 < #t2)) ∨ ((#t0 < #t3) ∧ (#t1 < #t3)))))"
/*
guarded formula characterizing all counter-examples:
"∃ #t2 #t3 h1 h2 k.
  (DecKey( h1, k, 'on' ) @ #t2) ∧ (WrapKey( h2, k, 'on' ) @ #t3)
 ∧
  (∀ L_h k2 #t1 #t0.
    (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
   ⇒
    (((¬(#t1 < #t3)) ∨ (¬(#t0 < #t3)))) ∧
    (((¬(#t1 < #t2)) ∨ (¬(#t0 < #t2))))) ∧
  (∀ #t0 #t1 h1.1 h2.1 k.1.
    (UnwrapKey( h2.1, k.1, 'on' ) @ #t0) ∧ (EncKey( h1.1, k.1, 'on' ) @ #t1)
   ⇒
    (((¬(#t0 < #t2)) ∨ (¬(#t1 < #t2)))) ∧
    (((¬(#t0 < #t3)) ∨ (¬(#t1 < #t3)))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ #t2 #t3 h1 h2 k.
           (DecKey( h1, k, 'on' ) @ #t2) ∧ (WrapKey( h2, k, 'on' ) @ #t3)
          ⇒
           ((last(#t3)) ∨
            (last(#t2)) ∨
            (∃ L_h k2 #t1 #t0.
              (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
             ∧
              (¬(last(#t0))) ∧
              (¬(last(#t1))) ∧
              ((((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))) ∨
            (∃ #t0 #t1 h1.1 h2.1 k.1.
              (UnwrapKey( h2.1, k.1, 'on' ) @ #t0) ∧ (EncKey( h1.1, k.1, 'on' ) @ #t1)
             ∧
              (¬(last(#t1))) ∧
              (¬(last(#t0))) ∧
              ((((#t0 < #t2) ∧ (#t1 < #t2)) ∨ ((#t0 < #t3) ∧ (#t1 < #t3)))))))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t1 yp.
                (Insert( x, yp ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (¬(#t1 = #t2)) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_0( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_1( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_2( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_3( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_4( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_5( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3))) )
    case case_1
    solve( (last(#t3))  ∥ (last(#t2))  ∥
           (∃ L_h k2 #t1 #t0.
             (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (¬(last(#t0))) ∧
             (¬(last(#t1))) ∧
             ((((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2)))))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
            ∧
             (¬(last(#t1))) ∧
             (¬(last(#t0))) ∧
             ((((#t0 < #t2) ∧ (#t1 < #t2)) ∨ ((#t0 < #t3) ∧ (#t1 < #t3))))) )
      case case_1
      solve( DecKey( h1, k, 'on' ) @ #t2 )
        case eventDecKeyLhkattdecatts_0_111111111111111111
        solve( State_111111111111111111( h1,
                                         <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>, k, lock, ptr,
                                         templ
               ) ▶₀ #t2 )
          case eventWrapKeyLhkattwrapatts_0_11111111111111111
          solve( Insert( <'F_template', ptr>,
                         <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                 ) @ #t2.1 )
            case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
            solve( (#vr.16 < #t2.1)  ∥ (#vr.16 = #t2.1) )
              case case_1
              solve( State_11( ) ▶₀ #t2.1 )
                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( WrapKey( h2, ~n.1, 'on' ) @ #t3 )
                case eventWrapKeyLhkattwrapatts_0_11111111111111111
                by solve( State_11111111111111111( h2,
                                                   <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, ~n.1,
                                                   lock, ptr, templ
                          ) ▶₀ #t3 )
              next
                case eventWrapKeyhmattwrapatts_0_1111121111111111
                solve( State_1111121111111111( L_h,
                                               <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, h2, k, ~n.1,
                                               ut, v, lock
                       ) ▶₀ #t3 )
                  case eventUnwrappedhmatts_0_111112111111111
                  solve( (∃ h1 #t1. (NewKey( h1, ~n.1, 'on' ) @ #t1) ∧ #t1 < #vr.19)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #vr.19) ∧ (#t0 < #vr.19))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.19) ∧ (#t1 < #vr.19))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.19) ∧ (#t1 < #vr.19)) )
                    case case_1
                    solve( Insert( <'F_template', z>,
                                   <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                           ) @ #t2.3 )
                      case insertFtemplatetrustedononoffoffononononusageusage_0_
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (¬(last(#t0.1))) ∧
                             (¬(last(#t1.1))) ∧
                             ((((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1)))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (¬(last(#t1.1))) ∧
                             (¬(last(#t0.1))) ∧
                             ((((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0))))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case insertFtemplateusageoffoffononononoffonundefundef_0_1
            solve( (#vr.17 < #t2.1)  ∥ (#vr.17 = #t2.1) )
              case case_1
              solve( State_1( ) ▶₀ #t2.1 )
                case insertFtemplatetrustedononoffoffononononusageusage_0_
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( WrapKey( h2, ~n.1, 'on' ) @ #t3 )
                case eventWrapKeyLhkattwrapatts_0_11111111111111111
                by solve( State_11111111111111111( h2,
                                                   <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, ~n.1,
                                                   lock, ptr, templ
                          ) ▶₀ #t3 )
              next
                case eventWrapKeyhmattwrapatts_0_1111121111111111
                solve( State_1111121111111111( L_h,
                                               <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, h2, k, ~n.1,
                                               ut, v, lock
                       ) ▶₀ #t3 )
                  case eventUnwrappedhmatts_0_111112111111111
                  solve( (∃ h1 #t1. (NewKey( h1, ~n.1, 'on' ) @ #t1) ∧ #t1 < #vr.19)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #vr.19) ∧ (#t0 < #vr.19))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.19) ∧ (#t1 < #vr.19))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.19) ∧ (#t1 < #vr.19)) )
                    case case_1
                    solve( Insert( <'F_template', z>,
                                   <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                           ) @ #t2.3 )
                      case insertFtemplatetrustedononoffoffononononusageusage_0_
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (¬(last(#t0.1))) ∧
                             (¬(last(#t1.1))) ∧
                             ((((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1)))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (¬(last(#t1.1))) ∧
                             (¬(last(#t0.1))) ∧
                             ((((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0))))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case eventDecKeyhmattdecatts_0_11111211111111111
        solve( State_11111211111111111( L_h,
                                        <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>, h1, k, k.1, ut, v,
                                        lock
               ) ▶₀ #t2 )
          case eventWrapKeyhmattwrapatts_0_1111121111111111
          solve( (∃ h1 #t1. (NewKey( h1, k.1, 'on' ) @ #t1) ∧ #t1 < #vr.1)  ∥
                 (∃ L_h k2 #t1 #t0.
                   (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (#t1 < #vr.1) ∧ (#t0 < #vr.1))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (#t0 < #vr.1) ∧ (#t1 < #vr.1))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (#t0 < #vr.1) ∧ (#t1 < #vr.1)) )
            case case_1
            solve( Insert( <'F_template', z>,
                           <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                   ) @ #t2.1 )
              case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
              by contradiction /* from formulas */
            next
              case insertFtemplateusageoffoffononononoffonundefundef_0_1
              solve( (#vr.16 < #t2.1)  ∥ (#vr.16 = #t2.1) )
                case case_1
                solve( State_111111111111111( h1,
                                              <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>, k, lock, ptr,
                                              templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  solve( Insert( <'F_template', ptr>,
                                 <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>
                         ) @ #t2.4 )
                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                    solve( (#vr.17 < #t2.3)  ∥ (#vr.17 = #t2.3) )
                      case case_1
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_2
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case insertFtemplateusageoffoffononononoffonundefundef_0_1
                    solve( (#t2.3 < #t2.1)  ∥ (#t2.3 = #t2.1)  ∥ (#vr.5 < #t2.3) )
                      case case_1
                      solve( (#vr.16 < #t2.3)  ∥ (#vr.16 = #t2.3) )
                        case case_1
                        solve( State_1( ) ▶₀ #t2.1 )
                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                          by contradiction /* cyclic */
                        qed
                      next
                        case case_2
                        solve( State_1( ) ▶₀ #t2.1 )
                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case case_2
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_3
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( State_111111111111111( h1,
                                              <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>, k, lock, ptr,
                                              templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  solve( Insert( <'F_template', ptr>,
                                 <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>
                         ) @ #t2.4 )
                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                    solve( (#vr.16 < #t2.3)  ∥ (#vr.16 = #t2.3) )
                      case case_1
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        solve( (#vr.16 < #t2.5)  ∥ (#vr.16 = #t2.5) )
                          case case_1
                          solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( (last(#t2))  ∥
                                   (∃ L_h k2 #t1 #t0.
                                     (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                    ∧
                                     (¬(last(#t0))) ∧
                                     (¬(last(#t1))) ∧
                                     ((((#t1 < #vr.34) ∧ (#t0 < #vr.34)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2)))))  ∥
                                   (∃ #t0 #t1 h1 h2 k.
                                     (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                    ∧
                                     (¬(last(#t1))) ∧
                                     (¬(last(#t0))) ∧
                                     ((((#t0 < #t2) ∧ (#t1 < #t2)) ∨ ((#t0 < #vr.34) ∧ (#t1 < #vr.34))))) )
                              case case_1
                              solve( State_( ) ▶₀ #t2.3 )
                                case Init
                                by contradiction /* cyclic */
                              qed
                            next
                              case case_2
                              by contradiction /* from formulas */
                            next
                              case case_3
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (last(#t2))  ∥
                                 (∃ L_h k2 #t1 #t0.
                                   (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (¬(last(#t0))) ∧
                                   (¬(last(#t1))) ∧
                                   ((((#t1 < #vr.33) ∧ (#t0 < #vr.33)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2)))))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧
                                   (¬(last(#t0))) ∧
                                   ((((#t0 < #t2) ∧ (#t1 < #t2)) ∨ ((#t0 < #vr.33) ∧ (#t1 < #vr.33))))) )
                            case case_1
                            by solve( WrapKey( h2, ~n.1, 'on' ) @ #t2 )
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case insertFtemplateusageoffoffononononoffonundefundef_0_1
                    solve( (#t2.3 < #t2.1)  ∥ (#t2.3 = #t2.1)  ∥ (#vr.5 < #t2.3) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        solve( (#t2.1 < #t2.4)  ∥ (#t2.1 = #t2.4) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( WrapKey( h2, ~n.1, 'on' ) @ #t3 )
                            case eventWrapKeyLhkattwrapatts_0_11111111111111111
                            by solve( State_11111111111111111( h2,
                                                               <'on', x.8, x.9, x.10, x.11, x.12, x.13, x.14, 
                                                                x.15, x.16>,
                                                               ~n.1, lock, ptr, templ
                                      ) ▶₀ #t3 )
                          next
                            case eventWrapKeyhmattwrapatts_0_1111121111111111
                            solve( State_1111121111111111( L_h.1,
                                                           <'on', x.8, x.9, x.10, x.11, x.12, x.13, x.14, 
                                                            x.15, x.16>,
                                                           h2, k.1, ~n.1, ut, v, lock
                                   ) ▶₀ #t3 )
                              case eventUnwrappedhmatts_0_111112111111111
                              solve( (∃ h1 #t1. (NewKey( h1, ~n.1, 'on' ) @ #t1) ∧ #t1 < #vr.36)  ∥
                                     (∃ L_h k2 #t1 #t0.
                                       (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                      ∧
                                       (#t1 < #vr.36) ∧ (#t0 < #vr.36))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                                      ∧
                                       (#t0 < #vr.36) ∧ (#t1 < #vr.36))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                      ∧
                                       (#t0 < #vr.36) ∧ (#t1 < #vr.36)) )
                                case case_1
                                solve( ((#vr.9 < #vr.44) ∧
                                        (∃ #t2.
                                          (Unlock_4( '4', ~n.4, 'device' ) @ #t2)
                                         ∧
                                          (#vr.9 < #t2) ∧
                                          (#t2 < #vr.44) ∧
                                          (∀ #t0 pp. (Unlock( pp, ~n.4, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                                          (∀ pp lpp #t0.
                                            (Lock( pp, lpp, 'device' ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                          (∀ pp lpp #t0.
                                            (Unlock( pp, lpp, 'device' ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                       (#vr.44 < #vr.9) )
                                  case case_1
                                  solve( Insert( <'F_template', z>,
                                                 <'on', x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16>
                                         ) @ #t2.5 )
                                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case case_2
                                  solve( Insert( <'F_template', z>,
                                                 <'on', x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16>
                                         ) @ #t2.5 )
                                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                solve( ((#vr.9 < #vr.44) ∧
                                        (∃ #t2.
                                          (Unlock_4( '4', ~n.4, 'device' ) @ #t2)
                                         ∧
                                          (#vr.9 < #t2) ∧
                                          (#t2 < #vr.44) ∧
                                          (∀ #t0 pp. (Unlock( pp, ~n.4, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                                          (∀ pp lpp #t0.
                                            (Lock( pp, lpp, 'device' ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                          (∀ pp lpp #t0.
                                            (Unlock( pp, lpp, 'device' ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                       (#vr.44 < #vr.9) )
                                  case case_1
                                  solve( (∃ L_h k2 #t1.2 #t0.1.
                                           (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.2)
                                          ∧
                                           (¬(last(#t0.1))) ∧
                                           (¬(last(#t1.2))) ∧
                                           ((((#t1.2 < #t0) ∧ (#t0.1 < #t0)) ∨
                                             ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1)))))  ∥
                                         (∃ #t0.1 #t1.2 h1 h2 k.
                                           (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                           (EncKey( h1, k, 'on' ) @ #t1.2)
                                          ∧
                                           (¬(last(#t1.2))) ∧
                                           (¬(last(#t0.1))) ∧
                                           ((((#t0.1 < #t1.1) ∧ (#t1.2 < #t1.1)) ∨
                                             ((#t0.1 < #t0) ∧ (#t1.2 < #t0))))) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case case_2
                                  solve( (∃ L_h k2 #t1.2 #t0.1.
                                           (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.2)
                                          ∧
                                           (¬(last(#t0.1))) ∧
                                           (¬(last(#t1.2))) ∧
                                           ((((#t1.2 < #t0) ∧ (#t0.1 < #t0)) ∨
                                             ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1)))))  ∥
                                         (∃ #t0.1 #t1.2 h1 h2 k.
                                           (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                           (EncKey( h1, k, 'on' ) @ #t1.2)
                                          ∧
                                           (¬(last(#t1.2))) ∧
                                           (¬(last(#t0.1))) ∧
                                           ((((#t0.1 < #t1.1) ∧ (#t1.2 < #t1.1)) ∨
                                             ((#t0.1 < #t0) ∧ (#t1.2 < #t0))))) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              next
                                case case_4
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_3
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            solve( (∃ L_h k2 #t1.1 #t0.1.
                     (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                    ∧
                     (¬(last(#t0.1))) ∧
                     (¬(last(#t1.1))) ∧
                     ((((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1)))))  ∥
                   (∃ #t0.1 #t1.1 h1 h2 k.
                     (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                    ∧
                     (¬(last(#t1.1))) ∧
                     (¬(last(#t0.1))) ∧
                     ((((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0))))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_4
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      solve( DecKey( h1, k, 'on' ) @ #t2 )
        case eventDecKeyLhkattdecatts_0_111111111111111111
        solve( State_111111111111111111( h1,
                                         <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>, k, lock, ptr,
                                         templ
               ) ▶₀ #t2 )
          case eventWrapKeyLhkattwrapatts_0_11111111111111111
          solve( Insert( <'F_template', ptr>,
                         <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                 ) @ #t2.1 )
            case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
            solve( (#vr.16 < #t2.1)  ∥ (#vr.16 = #t2.1) )
              case case_1
              solve( State_11( ) ▶₀ #t2.1 )
                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( WrapKey( h2, ~n.1, 'on' ) @ #t3 )
                case eventWrapKeyLhkattwrapatts_0_11111111111111111
                by solve( State_11111111111111111( h2,
                                                   <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, ~n.1,
                                                   lock, ptr, templ
                          ) ▶₀ #t3 )
              next
                case eventWrapKeyhmattwrapatts_0_1111121111111111
                solve( State_1111121111111111( L_h,
                                               <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, h2, k, ~n.1,
                                               ut, v, lock
                       ) ▶₀ #t3 )
                  case eventUnwrappedhmatts_0_111112111111111
                  solve( (∃ h1 #t1. (NewKey( h1, ~n.1, 'on' ) @ #t1) ∧ #t1 < #vr.19)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #vr.19) ∧ (#t0 < #vr.19))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.19) ∧ (#t1 < #vr.19))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.19) ∧ (#t1 < #vr.19)) )
                    case case_1
                    solve( Insert( <'F_template', z>,
                                   <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                           ) @ #t2.3 )
                      case insertFtemplatetrustedononoffoffononononusageusage_0_
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (¬(last(#t0.1))) ∧
                             (¬(last(#t1.1))) ∧
                             ((((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1)))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (¬(last(#t1.1))) ∧
                             (¬(last(#t0.1))) ∧
                             ((((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0))))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case insertFtemplateusageoffoffononononoffonundefundef_0_1
            solve( (#vr.17 < #t2.1)  ∥ (#vr.17 = #t2.1) )
              case case_1
              solve( State_1( ) ▶₀ #t2.1 )
                case insertFtemplatetrustedononoffoffononononusageusage_0_
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( WrapKey( h2, ~n.1, 'on' ) @ #t3 )
                case eventWrapKeyLhkattwrapatts_0_11111111111111111
                by solve( State_11111111111111111( h2,
                                                   <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, ~n.1,
                                                   lock, ptr, templ
                          ) ▶₀ #t3 )
              next
                case eventWrapKeyhmattwrapatts_0_1111121111111111
                solve( State_1111121111111111( L_h,
                                               <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, h2, k, ~n.1,
                                               ut, v, lock
                       ) ▶₀ #t3 )
                  case eventUnwrappedhmatts_0_111112111111111
                  solve( (∃ h1 #t1. (NewKey( h1, ~n.1, 'on' ) @ #t1) ∧ #t1 < #vr.19)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #vr.19) ∧ (#t0 < #vr.19))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.19) ∧ (#t1 < #vr.19))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.19) ∧ (#t1 < #vr.19)) )
                    case case_1
                    solve( Insert( <'F_template', z>,
                                   <'on', x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                           ) @ #t2.3 )
                      case insertFtemplatetrustedononoffoffononononusageusage_0_
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (¬(last(#t0.1))) ∧
                             (¬(last(#t1.1))) ∧
                             ((((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1)))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (¬(last(#t1.1))) ∧
                             (¬(last(#t0.1))) ∧
                             ((((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0))))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case eventDecKeyhmattdecatts_0_11111211111111111
        solve( State_11111211111111111( L_h,
                                        <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>, h1, k, k.1, ut, v,
                                        lock
               ) ▶₀ #t2 )
          case eventWrapKeyhmattwrapatts_0_1111121111111111
          solve( (∃ h1 #t1. (NewKey( h1, k.1, 'on' ) @ #t1) ∧ #t1 < #vr.1)  ∥
                 (∃ L_h k2 #t1 #t0.
                   (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (#t1 < #vr.1) ∧ (#t0 < #vr.1))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (#t0 < #vr.1) ∧ (#t1 < #vr.1))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (#t0 < #vr.1) ∧ (#t1 < #vr.1)) )
            case case_1
            solve( Insert( <'F_template', z>,
                           <x, x.1, x.2, 'on', x.3, x.4, x.5, x.6, x.7, x.8>
                   ) @ #t2.1 )
              case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
              by contradiction /* from formulas */
            next
              case insertFtemplateusageoffoffononononoffonundefundef_0_1
              solve( (#vr.16 < #t2.1)  ∥ (#vr.16 = #t2.1) )
                case case_1
                solve( State_111111111111111( h1,
                                              <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>, k, lock, ptr,
                                              templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  solve( Insert( <'F_template', ptr>,
                                 <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>
                         ) @ #t2.4 )
                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                    solve( (#vr.17 < #t2.3)  ∥ (#vr.17 = #t2.3) )
                      case case_1
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_2
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case insertFtemplateusageoffoffononononoffonundefundef_0_1
                    solve( (#t2.3 < #t2.1)  ∥ (#t2.3 = #t2.1)  ∥ (#vr.5 < #t2.3) )
                      case case_1
                      solve( (#vr.16 < #t2.3)  ∥ (#vr.16 = #t2.3) )
                        case case_1
                        solve( State_1( ) ▶₀ #t2.1 )
                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                          by contradiction /* cyclic */
                        qed
                      next
                        case case_2
                        solve( State_1( ) ▶₀ #t2.1 )
                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case case_2
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_3
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( State_111111111111111( h1,
                                              <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>, k, lock, ptr,
                                              templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  solve( Insert( <'F_template', ptr>,
                                 <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>
                         ) @ #t2.4 )
                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                    solve( (#vr.16 < #t2.3)  ∥ (#vr.16 = #t2.3) )
                      case case_1
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        solve( (#vr.16 < #t2.5)  ∥ (#vr.16 = #t2.5) )
                          case case_1
                          solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( State_( ) ▶₀ #t2.3 )
                              case Init
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( WrapKey( h2, ~n.1, 'on' ) @ #t3 )
                            case eventWrapKeyLhkattwrapatts_0_11111111111111111
                            solve( State_11111111111111111( h2,
                                                            <'on', x.8, x.9, x.10, x.11, x.12, x.13, x.14, 
                                                             x.15, x.16>,
                                                            ~n.1, lock, ptr, templ
                                   ) ▶₀ #t3 )
                              case insertobjLhkatts_0_1111111111111111
                              solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                solve( !KU( senc(~n.1, k) ) @ #vk.3 )
                                  case c_senc
                                  by contradiction /* from formulas */
                                next
                                  case outkeyv_0_1111211111
                                  solve( (#vr.38 < #vr.21)  ∥ (#t2.2 < #vr.38) )
                                    case case_1
                                    solve( State_111111111111111( L_h.1,
                                                                  <x.8, x.9, x.10, x.11, 'off', x.12, x.13, 
                                                                   x.14, x.15, x.16>,
                                                                  t, lock, ptr, templ
                                           ) ▶₀ #t1.1 )
                                      case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case case_2
                                    solve( State_111111111111111( L_h.1,
                                                                  <x.8, x.9, x.10, x.11, 'off', x.12, x.13, 
                                                                   x.14, x.15, x.16>,
                                                                  t, lock, ptr, templ
                                           ) ▶₀ #t1.1 )
                                      case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                next
                                  case outm_0_111111112111111
                                  solve( (∃ h2 k2 #t2 #t3.
                                           (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                                          ∧
                                           (#t2 < #vr.35) ∧ (#t3 < #vr.35))  ∥
                                         (∃ h2 #t2 #t3 #t4.
                                           (NewKey( h2, k.1, 'off' ) @ #t2) ∧
                                           (!KU( k.1 ) @ #t3) ∧
                                           (!KU( t ) @ #t4)
                                          ∧
                                           (#t2 < #vr.35) ∧ (#t3 < #vr.35) ∧ (#t4 < #vr.35))  ∥
                                         (∃ #t2. (EncUsing( k.1, t ) @ #t2) ∧ #t2 < #vr.35)  ∥
                                         (∃ h2 k2 #t2 #t3 a.
                                           (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                                          ∧
                                           (#t2 < #vr.35) ∧ (#t3 < #vr.35))  ∥
                                         (∃ #t2 #t3 h1 h2 k2.
                                           (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
                                          ∧
                                           (#t2 < #vr.35) ∧ (#t3 < #vr.35)) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    by contradiction /* cyclic */
                                  next
                                    case case_3
                                    solve( (#vr.39 < #vr.21)  ∥ (#t2.2 < #vr.39) )
                                      case case_1
                                      solve( State_1111111121111111( L_h.1, k.1, m, v, ~n.5 ) ▶₀ #t2.4 )
                                        case outm_0_111111112111111
                                        solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( State_111111121111( L_h.2, m, v, lock ) ▶₀ #t2.5 )
                                            case ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111
                                            by contradiction /* cyclic */
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_2
                                      solve( State_1111111121111111( L_h.1, k.1, m, v, ~n.5 ) ▶₀ #t2.4 )
                                        case outm_0_111111112111111
                                        solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( State_111111121111( L_h.2, m, v, lock ) ▶₀ #t2.5 )
                                            case ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111
                                            by contradiction /* cyclic */
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case case_4
                                    solve( (#vr.39 < #vr.21)  ∥ (#t2.2 < #vr.39) )
                                      case case_1
                                      solve( (∃ h1 #t1. (NewKey( h1, k2, 'on' ) @ #t1) ∧ #t1 < #t2.5)  ∥
                                             (∃ L_h k2 #t1 #t0.
                                               (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                              ∧
                                               (#t1 < #t2.5) ∧ (#t0 < #t2.5))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (#t0 < #t2.5) ∧ (#t1 < #t2.5))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                               (EncKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (#t0 < #t2.5) ∧ (#t1 < #t2.5)) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      next
                                        case case_3
                                        solve( (∃ L_h k2 #t1.2 #t0.1.
                                                 (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.2)
                                                ∧
                                                 (¬(last(#t0.1))) ∧
                                                 (¬(last(#t1.2))) ∧
                                                 ((((#t1.2 < #t0) ∧ (#t0.1 < #t0)) ∨
                                                   ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1)))))  ∥
                                               (∃ #t0.1 #t1.2 h1 h2 k.
                                                 (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                                 (EncKey( h1, k, 'on' ) @ #t1.2)
                                                ∧
                                                 (¬(last(#t1.2))) ∧
                                                 (¬(last(#t0.1))) ∧
                                                 ((((#t0.1 < #t1.1) ∧ (#t1.2 < #t1.1)) ∨
                                                   ((#t0.1 < #t0) ∧ (#t1.2 < #t0))))) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case case_4
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case case_2
                                      solve( (∃ h1 #t1. (NewKey( h1, k2, 'on' ) @ #t1) ∧ #t1 < #t2.5)  ∥
                                             (∃ L_h k2 #t1 #t0.
                                               (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                              ∧
                                               (#t1 < #t2.5) ∧ (#t0 < #t2.5))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (#t0 < #t2.5) ∧ (#t1 < #t2.5))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                               (EncKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (#t0 < #t2.5) ∧ (#t1 < #t2.5)) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      next
                                        case case_3
                                        solve( (∃ L_h k2 #t1.2 #t0.1.
                                                 (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.2)
                                                ∧
                                                 (¬(last(#t0.1))) ∧
                                                 (¬(last(#t1.2))) ∧
                                                 ((((#t1.2 < #t0) ∧ (#t0.1 < #t0)) ∨
                                                   ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1)))))  ∥
                                               (∃ #t0.1 #t1.2 h1 h2 k.
                                                 (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                                 (EncKey( h1, k, 'on' ) @ #t1.2)
                                                ∧
                                                 (¬(last(#t1.2))) ∧
                                                 (¬(last(#t0.1))) ∧
                                                 ((((#t0.1 < #t1.1) ∧ (#t1.2 < #t1.1)) ∨
                                                   ((#t0.1 < #t0) ∧ (#t1.2 < #t0))))) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case case_4
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  next
                                    case case_5
                                    solve( (#vr.39 < #vr.21)  ∥ (#t2.2 < #vr.39) )
                                      case case_1
                                      solve( (∃ L_h k2 #t1 #t0.
                                               (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                              ∧
                                               (¬(last(#t0))) ∧
                                               (¬(last(#t1))) ∧
                                               ((((#t1 < #t2.7) ∧ (#t0 < #t2.7)) ∨
                                                 ((#t1 < #t3.1) ∧ (#t0 < #t3.1)))))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                               (EncKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧
                                               (¬(last(#t0))) ∧
                                               ((((#t0 < #t3.1) ∧ (#t1 < #t3.1)) ∨
                                                 ((#t0 < #t2.7) ∧ (#t1 < #t2.7))))) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case case_2
                                      solve( (∃ L_h k2 #t1 #t0.
                                               (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                              ∧
                                               (¬(last(#t0))) ∧
                                               (¬(last(#t1))) ∧
                                               ((((#t1 < #t2.7) ∧ (#t0 < #t2.7)) ∨
                                                 ((#t1 < #t3.1) ∧ (#t0 < #t3.1)))))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                               (EncKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧
                                               (¬(last(#t0))) ∧
                                               ((((#t0 < #t3.1) ∧ (#t1 < #t3.1)) ∨
                                                 ((#t0 < #t2.7) ∧ (#t1 < #t2.7))))) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                next
                                  case outsenckeyvkeyv_0_111111211111111_case_1
                                  solve( (z.8 = 'off')  ∥ ((z.8 = 'on') ∧ (z = 'on')) )
                                    case case_1
                                    solve( (#vr.41 < #vr.21)  ∥ (#t2.2 < #vr.41) )
                                      case case_1
                                      solve( Insert( <'F_template', z.1>,
                                                     <z.2, z.3, z.4, z.5, z.6, 'on', z.7, 'off', z.8, z.9>
                                             ) @ #t2.6 )
                                        case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case case_2
                                      solve( Insert( <'F_template', z.1>,
                                                     <z.2, z.3, z.4, z.5, z.6, 'on', z.7, 'off', z.8, z.9>
                                             ) @ #t2.6 )
                                        case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  next
                                    case case_2
                                    solve( (#vr.41 < #vr.21)  ∥ (#t2.2 < #vr.41) )
                                      case case_1
                                      solve( Insert( <'F_template', z>,
                                                     <z.1, z.2, z.3, z.4, z.5, 'on', z.6, 'on', z.7, z.8>
                                             ) @ #t2.6 )
                                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                                        by contradiction /* from formulas */
                                      next
                                        case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                        solve( (#t2.1 < #t2.5)  ∥ (#t2.1 = #t2.5) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.5 ) ▶₀ #t2.4 )
                                            case outsenckeyvkeyv_0_111111211111111
                                            by contradiction /* cyclic */
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_2
                                      solve( Insert( <'F_template', z>,
                                                     <z.1, z.2, z.3, z.4, z.5, 'on', z.6, 'on', z.7, z.8>
                                             ) @ #t2.6 )
                                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                                        by contradiction /* from formulas */
                                      next
                                        case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                        solve( (#t2.1 < #t2.5)  ∥ (#t2.1 = #t2.5) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.5 ) ▶₀ #t2.4 )
                                            case outsenckeyvkeyv_0_111111211111111
                                            solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( Insert( <'obj', L_h>,
                                                                 <k, x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, 
                                                                  x.7, 'usage'>
                                                         ) @ #t2.5 )
                                                    case insertobjLhkatts_0_1111111111111111
                                                    solve( State_1111111111111111( L_h,
                                                                                   <x, 'on', x.1, x.2, x.3, 
                                                                                    x.4, x.5, x.6, x.7, 
                                                                                    'usage'>,
                                                                                   k, lock, ptr, templ
                                                           ) ▶₀ #t2.5 )
                                                      case eventNewKeyLhkattsensatts_0_111111111111111
                                                      solve( ((#vr.21 < #vr.52) ∧
                                                              (∃ #t2.
                                                                (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                                                               ∧
                                                                (#vr.21 < #t2) ∧
                                                                (#t2 < #vr.52) ∧
                                                                (∀ #t0 pp.
                                                                  (Unlock( pp, ~n.2, 'device' ) @ #t0)
                                                                 ⇒
                                                                  #t0 = #t2) ∧
                                                                (∀ pp lpp #t0.
                                                                  (Lock( pp, lpp, 'device' ) @ #t0)
                                                                 ⇒
                                                                  ((#t0 < #vr.21) ∨
                                                                   (#t0 = #vr.21) ∨
                                                                   (#t2 < #t0))) ∧
                                                                (∀ pp lpp #t0.
                                                                  (Unlock( pp, lpp, 'device' ) @ #t0)
                                                                 ⇒
                                                                  ((#t0 < #vr.21) ∨
                                                                   (#t2 < #t0) ∨
                                                                   (#t2 = #t0)))))  ∥
                                                             (#vr.52 < #vr.21)  ∥ (#vr.21 = #vr.52) )
                                                        case case_1
                                                        solve( Insert( <'F_template', ptr>,
                                                                       <x, 'on', x.1, x.2, x.3, x.4, x.5, 
                                                                        x.6, x.7, 'usage'>
                                                               ) @ #t2.9 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          solve( (#t2.7 < #t2.3)  ∥ (#t2.7 = #t2.3)  ∥
                                                                 (#vr.18 < #t2.7) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_2
                                                            solve( State_1111111111111111111111( L_h, atts, k,
                                                                                                 ~n.8, ptr,
                                                                                                 templ
                                                                   ) ▶₀ #t2.6 )
                                                              case outLh_0_111111111111111111111
                                                              solve( (#t2.9 < #t2.3)  ∥ (#t2.9 = #t2.3)  ∥
                                                                     (#vr.18 < #t2.9) )
                                                                case case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case case_2
                                                                solve( Insert( <'obj', h2>,
                                                                               <~n.1, 'off', 'off', 'on', 
                                                                                'on', 'on', 'on', 'off', 
                                                                                'on', 'undef', 'undef'>
                                                                       ) @ #t2.7 )
                                                                  case insertobjLhkatts_0_1111111111111111
                                                                  by solve( State_1111111111111111( h2,
                                                                                                    <'off', 
                                                                                                     'off', 
                                                                                                     'on', 
                                                                                                     'on', 
                                                                                                     'on', 
                                                                                                     'on', 
                                                                                                     'off', 
                                                                                                     'on', 
                                                                                                     'undef', 
                                                                                                     'undef'>,
                                                                                                    ~n.1,
                                                                                                    lock, ptr,
                                                                                                    templ
                                                                            ) ▶₀ #t2.7 )
                                                                next
                                                                  case insertobjhmatts_0_11111211111111
                                                                  solve( State_11111211111111( L_h,
                                                                                               <'off', 'off', 
                                                                                                'on', 'on', 
                                                                                                'on', 'on', 
                                                                                                'off', 'on', 
                                                                                                'undef', 
                                                                                                'undef'>,
                                                                                               h2, k, ~n.1,
                                                                                               ut, v, lock
                                                                         ) ▶₀ #t2.7 )
                                                                    case newh_0_1111121111111
                                                                    solve( (#vr.71 < #vr.52)  ∥
                                                                           (#t2.6 < #vr.71) )
                                                                      case case_1
                                                                      solve( Insert( <'F_template', z>,
                                                                                     <'off', 'off', 'on', 
                                                                                      'on', 'on', 'on', 
                                                                                      'off', 'on', 'undef', 
                                                                                      'undef'>
                                                                             ) @ #t2.10 )
                                                                        case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                        solve( (#t2.1 < #t2.9)  ∥
                                                                               (#t2.1 = #t2.9) )
                                                                          case case_1
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_2
                                                                          solve( State_111112111111111111111( L_h.1,
                                                                                                              atts,
                                                                                                              h2,
                                                                                                              k.1,
                                                                                                              m,
                                                                                                              ut,
                                                                                                              v,
                                                                                                              ~n.10
                                                                                 ) ▶₀ #t2.8 )
                                                                            case outh_0_11111211111111111111
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    next
                                                                      case case_2
                                                                      solve( Insert( <'F_template', z>,
                                                                                     <'off', 'off', 'on', 
                                                                                      'on', 'on', 'on', 
                                                                                      'off', 'on', 'undef', 
                                                                                      'undef'>
                                                                             ) @ #t2.10 )
                                                                        case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                        solve( (#t2.1 < #t2.9)  ∥
                                                                               (#t2.1 = #t2.9) )
                                                                          case case_1
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_2
                                                                          solve( State_111112111111111111111( L_h.1,
                                                                                                              atts,
                                                                                                              h2,
                                                                                                              k.1,
                                                                                                              m,
                                                                                                              ut,
                                                                                                              v,
                                                                                                              ~n.10
                                                                                 ) ▶₀ #t2.8 )
                                                                            case outh_0_11111211111111111111
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case case_3
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          next
                                                            case case_3
                                                            solve( State_1111111111111111111111( L_h, atts, k,
                                                                                                 ~n.8, ptr,
                                                                                                 templ
                                                                   ) ▶₀ #t2.6 )
                                                              case outLh_0_111111111111111111111
                                                              solve( (#t2.10 < #t2.3)  ∥ (#t2.10 = #t2.3)  ∥
                                                                     (#vr.18 < #t2.10) )
                                                                case case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case case_2
                                                                by contradiction /* from formulas */
                                                              next
                                                                case case_3
                                                                solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                                  case case_1
                                                                  by contradiction /* from formulas */
                                                                next
                                                                  case case_2
                                                                  solve( State_( ) ▶₀ #t2.7 )
                                                                    case Init
                                                                    by contradiction /* cyclic */
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( Insert( <'F_template', ptr>,
                                                                       <x, 'on', x.1, x.2, x.3, x.4, x.5, 
                                                                        x.6, x.7, 'usage'>
                                                               ) @ #t2.9 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          solve( (#t2.7 < #t2.3)  ∥ (#t2.7 = #t2.3)  ∥
                                                                 (#vr.18 < #t2.7) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_2
                                                            solve( State_1111111111111111111111( L_h, atts, k,
                                                                                                 ~n.8, ptr,
                                                                                                 templ
                                                                   ) ▶₀ #t2.6 )
                                                              case outLh_0_111111111111111111111
                                                              solve( (#t2.3 < #t2.9)  ∥ (#t2.3 = #t2.9) )
                                                                case case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case case_2
                                                                solve( Insert( <'obj', h2>,
                                                                               <~n.1, 'off', 'off', 'on', 
                                                                                'on', 'on', 'on', 'off', 
                                                                                'on', 'undef', 'undef'>
                                                                       ) @ #t2.7 )
                                                                  case insertobjLhkatts_0_1111111111111111
                                                                  by solve( State_1111111111111111( h2,
                                                                                                    <'off', 
                                                                                                     'off', 
                                                                                                     'on', 
                                                                                                     'on', 
                                                                                                     'on', 
                                                                                                     'on', 
                                                                                                     'off', 
                                                                                                     'on', 
                                                                                                     'undef', 
                                                                                                     'undef'>,
                                                                                                    ~n.1,
                                                                                                    lock, ptr,
                                                                                                    templ
                                                                            ) ▶₀ #t2.7 )
                                                                next
                                                                  case insertobjhmatts_0_11111211111111
                                                                  solve( State_11111211111111( L_h,
                                                                                               <'off', 'off', 
                                                                                                'on', 'on', 
                                                                                                'on', 'on', 
                                                                                                'off', 'on', 
                                                                                                'undef', 
                                                                                                'undef'>,
                                                                                               h2, k, ~n.1,
                                                                                               ut, v, lock
                                                                         ) ▶₀ #t2.7 )
                                                                    case newh_0_1111121111111
                                                                    solve( Insert( <'F_template', z>,
                                                                                   <'off', 'off', 'on', 'on', 
                                                                                    'on', 'on', 'off', 'on', 
                                                                                    'undef', 'undef'>
                                                                           ) @ #t2.10 )
                                                                      case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                      solve( (#t2.1 < #t2.9)  ∥
                                                                             (#t2.1 = #t2.9) )
                                                                        case case_1
                                                                        by contradiction /* from formulas */
                                                                      next
                                                                        case case_2
                                                                        solve( State_111112111111111111111( L_h.1,
                                                                                                            atts,
                                                                                                            h2,
                                                                                                            k.1,
                                                                                                            m,
                                                                                                            ut,
                                                                                                            v,
                                                                                                            ~n.10
                                                                               ) ▶₀ #t2.8 )
                                                                          case outh_0_11111211111111111111
                                                                          by contradiction /* from formulas */
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case case_3
                                                            solve( State_1111111111111111111111( L_h, atts, k,
                                                                                                 ~n.8, ptr,
                                                                                                 templ
                                                                   ) ▶₀ #t2.6 )
                                                              case outLh_0_111111111111111111111
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case case_3
                                                        solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          solve( Insert( <'obj', h2>,
                                                                         <~n.1, 'off', 'off', 'on', 'on', 
                                                                          'on', 'on', 'off', 'on', 'undef', 
                                                                          'undef'>
                                                                 ) @ #t2.6 )
                                                            case insertobjLhkatts_0_1111111111111111
                                                            by solve( State_1111111111111111( h2,
                                                                                              <'off', 'off', 
                                                                                               'on', 'on', 
                                                                                               'on', 'on', 
                                                                                               'off', 'on', 
                                                                                               'undef', 
                                                                                               'undef'>,
                                                                                              ~n.1, lock, ptr,
                                                                                              templ
                                                                      ) ▶₀ #t2.6 )
                                                          next
                                                            case insertobjhmatts_0_11111211111111
                                                            solve( State_11111211111111( L_h,
                                                                                         <'off', 'off', 'on', 
                                                                                          'on', 'on', 'on', 
                                                                                          'off', 'on', 
                                                                                          'undef', 'undef'>,
                                                                                         h2, k, ~n.1, ut, v,
                                                                                         lock
                                                                   ) ▶₀ #t2.6 )
                                                              case newh_0_1111121111111
                                                              solve( Insert( <'F_template', z>,
                                                                             <'off', 'off', 'on', 'on', 'on', 
                                                                              'on', 'off', 'on', 'undef', 
                                                                              'undef'>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                                  case case_1
                                                                  by contradiction /* from formulas */
                                                                next
                                                                  case case_2
                                                                  solve( State_111112111111111111111( L_h.1,
                                                                                                      atts,
                                                                                                      h2, k.1,
                                                                                                      m, ut,
                                                                                                      v, ~n.7
                                                                         ) ▶₀ #t2.7 )
                                                                    case outh_0_11111211111111111111
                                                                    by contradiction /* from formulas */
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case insertobjhmatts_0_11111211111111
                                                    solve( State_11111211111111( L_h.1,
                                                                                 <x, 'on', x.1, x.2, x.3, 
                                                                                  x.4, x.5, x.6, x.7, 'usage'
                                                                                 >,
                                                                                 L_h, k.1, k, ut, v, lock
                                                           ) ▶₀ #t2.5 )
                                                      case newh_0_1111121111111
                                                      solve( (#vr.53 < #vr.21)  ∥ (#t2.2 < #vr.53) )
                                                        case case_1
                                                        solve( Insert( <'F_template', z>,
                                                                       <x, 'on', x.1, x.2, x.3, x.4, x.5, 
                                                                        x.6, x.7, 'usage'>
                                                               ) @ #t2.9 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( (#vr.53 < #vr.41)  ∥ (#t2.4 < #vr.53) )
                                                          case case_1
                                                          solve( Insert( <'F_template', z>,
                                                                         <x, 'on', x.1, x.2, x.3, x.4, x.5, 
                                                                          x.6, x.7, 'usage'>
                                                                 ) @ #t2.9 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( Insert( <'F_template', z>,
                                                                         <x, 'on', x.1, x.2, x.3, x.4, x.5, 
                                                                          x.6, x.7, 'usage'>
                                                                 ) @ #t2.9 )
                                                            case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case outsenckeyvkeyv_0_111111211111111_case_2
                                  solve( (#vr.42 < #vr.21)  ∥ (#t2.2 < #vr.42) )
                                    case case_1
                                    solve( Insert( <'F_template', z.3>,
                                                   <z.4, z.5, z.6, z.7, z.8, 'on', z.9, 'off', z.10, z.11>
                                           ) @ #t2.6 )
                                      case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case case_2
                                    solve( Insert( <'F_template', z.3>,
                                                   <z.4, z.5, z.6, z.7, z.8, 'on', z.9, 'off', z.10, z.11>
                                           ) @ #t2.6 )
                                      case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                next
                                  case outsenckeyvkeyv_0_111111211111111_case_3
                                  solve( (#vr.42 < #vr.21)  ∥ (#t2.2 < #vr.42) )
                                    case case_1
                                    solve( Insert( <'F_template', z.2>,
                                                   <z.3, z.4, z.5, z.6, z.7, 'on', z.8, 'on', z.9, z.10>
                                           ) @ #t2.6 )
                                      case insertFtemplatetrustedononoffoffononononusageusage_0_
                                      by contradiction /* from formulas */
                                    next
                                      case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                      solve( (#t2.1 < #t2.5)  ∥ (#t2.1 = #t2.5) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.5 ) ▶₀ #t2.4 )
                                          case outsenckeyvkeyv_0_111111211111111
                                          solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( Insert( <'obj', L_h>,
                                                               <k, x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, 
                                                                x.7, 'usage'>
                                                       ) @ #t2.5 )
                                                  case insertobjLhkatts_0_1111111111111111
                                                  solve( State_1111111111111111( L_h,
                                                                                 <x, 'on', x.1, x.2, x.3, 
                                                                                  x.4, x.5, x.6, x.7, 'usage'
                                                                                 >,
                                                                                 k, lock, ptr, templ
                                                         ) ▶₀ #t2.5 )
                                                    case eventNewKeyLhkattsensatts_0_111111111111111
                                                    solve( ((#vr.21 < #vr.53) ∧
                                                            (∃ #t2.
                                                              (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                                                             ∧
                                                              (#vr.21 < #t2) ∧
                                                              (#t2 < #vr.53) ∧
                                                              (∀ #t0 pp.
                                                                (Unlock( pp, ~n.2, 'device' ) @ #t0)
                                                               ⇒
                                                                #t0 = #t2) ∧
                                                              (∀ pp lpp #t0.
                                                                (Lock( pp, lpp, 'device' ) @ #t0)
                                                               ⇒
                                                                ((#t0 < #vr.21) ∨
                                                                 (#t0 = #vr.21) ∨
                                                                 (#t2 < #t0))) ∧
                                                              (∀ pp lpp #t0.
                                                                (Unlock( pp, lpp, 'device' ) @ #t0)
                                                               ⇒
                                                                ((#t0 < #vr.21) ∨
                                                                 (#t2 < #t0) ∨
                                                                 (#t2 = #t0)))))  ∥
                                                           (#vr.53 < #vr.21)  ∥ (#vr.21 = #vr.53) )
                                                      case case_1
                                                      solve( Insert( <'F_template', ptr>,
                                                                     <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, 
                                                                      x.7, 'usage'>
                                                             ) @ #t2.9 )
                                                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                        solve( (#t2.7 < #t2.3)  ∥ (#t2.7 = #t2.3)  ∥
                                                               (#vr.18 < #t2.7) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          solve( State_1111111111111111111111( L_h, atts, k,
                                                                                               ~n.8, ptr,
                                                                                               templ
                                                                 ) ▶₀ #t2.6 )
                                                            case outLh_0_111111111111111111111
                                                            solve( (#t2.9 < #t2.3)  ∥ (#t2.9 = #t2.3)  ∥
                                                                   (#vr.18 < #t2.9) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case case_2
                                                              solve( Insert( <'obj', h2>,
                                                                             <z, 'off', 'off', 'on', 'on', 
                                                                              'on', 'on', 'off', 'on', 
                                                                              'undef', 'undef'>
                                                                     ) @ #t2.7 )
                                                                case insertobjLhkatts_0_1111111111111111
                                                                solve( State_1111111111111111( h2,
                                                                                               <'off', 'off', 
                                                                                                'on', 'on', 
                                                                                                'on', 'on', 
                                                                                                'off', 'on', 
                                                                                                'undef', 
                                                                                                'undef'>,
                                                                                               z, lock, ptr,
                                                                                               templ
                                                                       ) ▶₀ #t2.7 )
                                                                  case eventNewKeyLhkattsensatts_0_111111111111111
                                                                  by contradiction /* impossible chain */
                                                                qed
                                                              next
                                                                case insertobjhmatts_0_11111211111111
                                                                solve( State_11111211111111( L_h,
                                                                                             <'off', 'off', 
                                                                                              'on', 'on', 
                                                                                              'on', 'on', 
                                                                                              'off', 'on', 
                                                                                              'undef', 'undef'
                                                                                             >,
                                                                                             h2, k, z, ut, v,
                                                                                             lock
                                                                       ) ▶₀ #t2.7 )
                                                                  case newh_0_1111121111111
                                                                  solve( Insert( <'F_template', z.2>,
                                                                                 <'off', 'off', 'on', 'on', 
                                                                                  'on', 'on', 'off', 'on', 
                                                                                  'undef', 'undef'>
                                                                         ) @ #t2.10 )
                                                                    case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                    solve( (#t2.1 < #t2.9)  ∥
                                                                           (#t2.1 = #t2.9) )
                                                                      case case_1
                                                                      by contradiction /* from formulas */
                                                                    next
                                                                      case case_2
                                                                      solve( State_111112111111111111111( L_h.1,
                                                                                                          atts,
                                                                                                          h2,
                                                                                                          k.1,
                                                                                                          m,
                                                                                                          ut,
                                                                                                          v,
                                                                                                          ~n.10
                                                                             ) ▶₀ #t2.8 )
                                                                        case outh_0_11111211111111111111
                                                                        solve( (∃ h1 #t1.
                                                                                 (NewKey( h1, m, 'on' ) @ #t1)
                                                                                ∧
                                                                                 #t1 < #vr.82)  ∥
                                                                               (∃ L_h k2 #t1 #t0.
                                                                                 (NewKey( L_h, k2, 'on'
                                                                                  ) @ #t0) ∧
                                                                                 (!KU( k2 ) @ #t1)
                                                                                ∧
                                                                                 (#t1 < #vr.82) ∧
                                                                                 (#t0 < #vr.82))  ∥
                                                                               (∃ #t0 #t1 h1 h2 k.
                                                                                 (WrapKey( h2, k, 'on'
                                                                                  ) @ #t0) ∧
                                                                                 (DecKey( h1, k, 'on' ) @ #t1)
                                                                                ∧
                                                                                 (#t0 < #vr.82) ∧
                                                                                 (#t1 < #vr.82))  ∥
                                                                               (∃ #t0 #t1 h1 h2 k.
                                                                                 (UnwrapKey( h2, k, 'on'
                                                                                  ) @ #t0) ∧
                                                                                 (EncKey( h1, k, 'on' ) @ #t1)
                                                                                ∧
                                                                                 (#t0 < #vr.82) ∧
                                                                                 (#t1 < #vr.82)) )
                                                                          case case_1
                                                                          solve( (#t2.10 < #t2.12)  ∥
                                                                                 (#t2.10 = #t2.12) )
                                                                            case case_1
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          next
                                                                            case case_2
                                                                            solve( (#t2.1 < #t2.11)  ∥
                                                                                   (#t2.1 = #t2.11) )
                                                                              case case_1
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            next
                                                                              case case_2
                                                                              solve( State_111111111111111( h1,
                                                                                                            <
                                                                                                             x, 
                                                                                                             x.1, 
                                                                                                             x.2, 
                                                                                                             x.3, 
                                                                                                             'on', 
                                                                                                             x.4, 
                                                                                                             x.5, 
                                                                                                             x.6, 
                                                                                                             x.7, 
                                                                                                             x.8
                                                                                                            >,
                                                                                                            m,
                                                                                                            lock,
                                                                                                            ptr,
                                                                                                            templ
                                                                                     ) ▶₀ #t1.1 )
                                                                                case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                                by contradiction
                                                                                   /* impossible chain */
                                                                              qed
                                                                            qed
                                                                          qed
                                                                        next
                                                                          case case_2
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_3
                                                                          solve( (#t2.10 < #t2.12)  ∥
                                                                                 (#t2.10 = #t2.12) )
                                                                            case case_1
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          next
                                                                            case case_2
                                                                            solve( (#t2.1 < #t2.11)  ∥
                                                                                   (#t2.1 = #t2.11) )
                                                                              case case_1
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            next
                                                                              case case_2
                                                                              solve( (∃ L_h k2 #t1.2 #t0.1.
                                                                                       (NewKey( L_h, k2, 'on'
                                                                                        ) @ #t0.1) ∧
                                                                                       (!KU( k2 ) @ #t1.2)
                                                                                      ∧
                                                                                       (¬(last(#t0.1))) ∧
                                                                                       (¬(last(#t1.2))) ∧
                                                                                       ((((#t1.2 < #t0) ∧
                                                                                          (#t0.1 < #t0)) ∨
                                                                                         ((#t1.2 < #t1.1) ∧
                                                                                          (#t0.1 < #t1.1)))))  ∥
                                                                                     (∃ #t0.1 #t1.2 h1 h2 k.
                                                                                       (UnwrapKey( h2, k, 'on'
                                                                                        ) @ #t0.1) ∧
                                                                                       (EncKey( h1, k, 'on'
                                                                                        ) @ #t1.2)
                                                                                      ∧
                                                                                       (¬(last(#t1.2))) ∧
                                                                                       (¬(last(#t0.1))) ∧
                                                                                       ((((#t0.1 < #t1.1) ∧
                                                                                          (#t1.2 < #t1.1)) ∨
                                                                                         ((#t0.1 < #t0) ∧
                                                                                          (#t1.2 < #t0))))) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              qed
                                                                            qed
                                                                          qed
                                                                        next
                                                                          case case_4
                                                                          by contradiction /* from formulas */
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            next
                                                              case case_3
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          solve( State_1111111111111111111111( L_h, atts, k,
                                                                                               ~n.8, ptr,
                                                                                               templ
                                                                 ) ▶₀ #t2.6 )
                                                            case outLh_0_111111111111111111111
                                                            solve( (#t2.10 < #t2.3)  ∥ (#t2.10 = #t2.3)  ∥
                                                                   (#vr.18 < #t2.10) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case case_3
                                                              solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                                case case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case case_2
                                                                solve( State_( ) ▶₀ #t2.7 )
                                                                  case Init
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( (#vr.53 < #vr.42)  ∥ (#t2.4 < #vr.53) )
                                                        case case_1
                                                        solve( Insert( <'F_template', ptr>,
                                                                       <x, 'on', x.1, x.2, x.3, x.4, x.5, 
                                                                        x.6, x.7, 'usage'>
                                                               ) @ #t2.9 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          solve( (#t2.7 < #t2.3)  ∥ (#t2.7 = #t2.3)  ∥
                                                                 (#vr.18 < #t2.7) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_2
                                                            solve( State_1111111111111111111111( L_h, atts, k,
                                                                                                 ~n.8, ptr,
                                                                                                 templ
                                                                   ) ▶₀ #t2.6 )
                                                              case outLh_0_111111111111111111111
                                                              solve( (#t2.3 < #t2.9)  ∥ (#t2.3 = #t2.9) )
                                                                case case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case case_2
                                                                solve( Insert( <'obj', h2>,
                                                                               <z, 'off', 'off', 'on', 'on', 
                                                                                'on', 'on', 'off', 'on', 
                                                                                'undef', 'undef'>
                                                                       ) @ #t2.7 )
                                                                  case insertobjLhkatts_0_1111111111111111
                                                                  solve( State_1111111111111111( h2,
                                                                                                 <'off', 
                                                                                                  'off', 
                                                                                                  'on', 'on', 
                                                                                                  'on', 'on', 
                                                                                                  'off', 
                                                                                                  'on', 
                                                                                                  'undef', 
                                                                                                  'undef'>,
                                                                                                 z, lock, ptr,
                                                                                                 templ
                                                                         ) ▶₀ #t2.7 )
                                                                    case eventNewKeyLhkattsensatts_0_111111111111111
                                                                    by contradiction /* impossible chain */
                                                                  qed
                                                                next
                                                                  case insertobjhmatts_0_11111211111111
                                                                  solve( State_11111211111111( L_h,
                                                                                               <'off', 'off', 
                                                                                                'on', 'on', 
                                                                                                'on', 'on', 
                                                                                                'off', 'on', 
                                                                                                'undef', 
                                                                                                'undef'>,
                                                                                               h2, k, z, ut,
                                                                                               v, lock
                                                                         ) ▶₀ #t2.7 )
                                                                    case newh_0_1111121111111
                                                                    solve( (#vr.72 < #vr.53)  ∥
                                                                           (#t2.6 < #vr.72) )
                                                                      case case_1
                                                                      solve( Insert( <'F_template', z.2>,
                                                                                     <'off', 'off', 'on', 
                                                                                      'on', 'on', 'on', 
                                                                                      'off', 'on', 'undef', 
                                                                                      'undef'>
                                                                             ) @ #t2.10 )
                                                                        case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                        solve( (#t2.1 < #t2.9)  ∥
                                                                               (#t2.1 = #t2.9) )
                                                                          case case_1
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_2
                                                                          solve( State_111112111111111111111( L_h.1,
                                                                                                              atts,
                                                                                                              h2,
                                                                                                              k.1,
                                                                                                              m,
                                                                                                              ut,
                                                                                                              v,
                                                                                                              ~n.10
                                                                                 ) ▶₀ #t2.8 )
                                                                            case outh_0_11111211111111111111
                                                                            solve( (∃ h1 #t1.
                                                                                     (NewKey( h1, m, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     #t1 < #vr.82)  ∥
                                                                                   (∃ L_h k2 #t1 #t0.
                                                                                     (NewKey( L_h, k2, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (!KU( k2 ) @ #t1)
                                                                                    ∧
                                                                                     (#t1 < #vr.82) ∧
                                                                                     (#t0 < #vr.82))  ∥
                                                                                   (∃ #t0 #t1 h1 h2 k.
                                                                                     (WrapKey( h2, k, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (DecKey( h1, k, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     (#t0 < #vr.82) ∧
                                                                                     (#t1 < #vr.82))  ∥
                                                                                   (∃ #t0 #t1 h1 h2 k.
                                                                                     (UnwrapKey( h2, k, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (EncKey( h1, k, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     (#t0 < #vr.82) ∧
                                                                                     (#t1 < #vr.82)) )
                                                                              case case_1
                                                                              solve( (#t2.10 < #t2.12)  ∥
                                                                                     (#t2.10 = #t2.12) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (#t2.1 < #t2.11)  ∥
                                                                                       (#t2.1 = #t2.11) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( State_111111111111111( h1,
                                                                                                                <
                                                                                                                 x, 
                                                                                                                 x.1, 
                                                                                                                 x.2, 
                                                                                                                 x.3, 
                                                                                                                 'on', 
                                                                                                                 x.4, 
                                                                                                                 x.5, 
                                                                                                                 x.6, 
                                                                                                                 x.7, 
                                                                                                                 x.8
                                                                                                                >,
                                                                                                                m,
                                                                                                                lock,
                                                                                                                ptr,
                                                                                                                templ
                                                                                         ) ▶₀ #t1.1 )
                                                                                    case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                                    by contradiction
                                                                                       /* impossible chain */
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case case_2
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            next
                                                                              case case_3
                                                                              solve( (#t2.10 < #t2.12)  ∥
                                                                                     (#t2.10 = #t2.12) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (#t2.1 < #t2.11)  ∥
                                                                                       (#t2.1 = #t2.11) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( (∃ L_h k2 #t1.2
                                                                                            #t0.1.
                                                                                           (NewKey( L_h, k2,
                                                                                                    'on'
                                                                                            ) @ #t0.1) ∧
                                                                                           (!KU( k2 ) @ #t1.2)
                                                                                          ∧
                                                                                           (¬(last(#t0.1))) ∧
                                                                                           (¬(last(#t1.2))) ∧
                                                                                           ((((#t1.2 < #t0) ∧
                                                                                              (#t0.1 < #t0)) ∨
                                                                                             ((#t1.2 < #t1.1) ∧
                                                                                              (#t0.1 < #t1.1)))))  ∥
                                                                                         (∃ #t0.1 #t1.2 h1 h2
                                                                                            k.
                                                                                           (UnwrapKey( h2, k,
                                                                                                       'on'
                                                                                            ) @ #t0.1) ∧
                                                                                           (EncKey( h1, k,
                                                                                                    'on'
                                                                                            ) @ #t1.2)
                                                                                          ∧
                                                                                           (¬(last(#t1.2))) ∧
                                                                                           (¬(last(#t0.1))) ∧
                                                                                           ((((#t0.1 < #t1.1) ∧
                                                                                              (#t1.2 < #t1.1)) ∨
                                                                                             ((#t0.1 < #t0) ∧
                                                                                              (#t1.2 < #t0))))) )
                                                                                    case case_1
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  next
                                                                                    case case_2
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case case_4
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    next
                                                                      case case_2
                                                                      solve( Insert( <'F_template', z.2>,
                                                                                     <'off', 'off', 'on', 
                                                                                      'on', 'on', 'on', 
                                                                                      'off', 'on', 'undef', 
                                                                                      'undef'>
                                                                             ) @ #t2.10 )
                                                                        case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                        solve( (#t2.1 < #t2.9)  ∥
                                                                               (#t2.1 = #t2.9) )
                                                                          case case_1
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_2
                                                                          solve( State_111112111111111111111( L_h.1,
                                                                                                              atts,
                                                                                                              h2,
                                                                                                              k.1,
                                                                                                              m,
                                                                                                              ut,
                                                                                                              v,
                                                                                                              ~n.10
                                                                                 ) ▶₀ #t2.8 )
                                                                            case outh_0_11111211111111111111
                                                                            solve( (∃ h1 #t1.
                                                                                     (NewKey( h1, m, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     #t1 < #vr.82)  ∥
                                                                                   (∃ L_h k2 #t1 #t0.
                                                                                     (NewKey( L_h, k2, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (!KU( k2 ) @ #t1)
                                                                                    ∧
                                                                                     (#t1 < #vr.82) ∧
                                                                                     (#t0 < #vr.82))  ∥
                                                                                   (∃ #t0 #t1 h1 h2 k.
                                                                                     (WrapKey( h2, k, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (DecKey( h1, k, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     (#t0 < #vr.82) ∧
                                                                                     (#t1 < #vr.82))  ∥
                                                                                   (∃ #t0 #t1 h1 h2 k.
                                                                                     (UnwrapKey( h2, k, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (EncKey( h1, k, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     (#t0 < #vr.82) ∧
                                                                                     (#t1 < #vr.82)) )
                                                                              case case_1
                                                                              solve( (#t2.10 < #t2.12)  ∥
                                                                                     (#t2.10 = #t2.12) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (#t2.1 < #t2.11)  ∥
                                                                                       (#t2.1 = #t2.11) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( State_111111111111111( h1,
                                                                                                                <
                                                                                                                 x, 
                                                                                                                 x.1, 
                                                                                                                 x.2, 
                                                                                                                 x.3, 
                                                                                                                 'on', 
                                                                                                                 x.4, 
                                                                                                                 x.5, 
                                                                                                                 x.6, 
                                                                                                                 x.7, 
                                                                                                                 x.8
                                                                                                                >,
                                                                                                                m,
                                                                                                                lock,
                                                                                                                ptr,
                                                                                                                templ
                                                                                         ) ▶₀ #t1.1 )
                                                                                    case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                                    by contradiction
                                                                                       /* impossible chain */
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case case_2
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            next
                                                                              case case_3
                                                                              solve( (#t2.10 < #t2.12)  ∥
                                                                                     (#t2.10 = #t2.12) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (#t2.1 < #t2.11)  ∥
                                                                                       (#t2.1 = #t2.11) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( (∃ L_h k2 #t1.2
                                                                                            #t0.1.
                                                                                           (NewKey( L_h, k2,
                                                                                                    'on'
                                                                                            ) @ #t0.1) ∧
                                                                                           (!KU( k2 ) @ #t1.2)
                                                                                          ∧
                                                                                           (¬(last(#t0.1))) ∧
                                                                                           (¬(last(#t1.2))) ∧
                                                                                           ((((#t1.2 < #t0) ∧
                                                                                              (#t0.1 < #t0)) ∨
                                                                                             ((#t1.2 < #t1.1) ∧
                                                                                              (#t0.1 < #t1.1)))))  ∥
                                                                                         (∃ #t0.1 #t1.2 h1 h2
                                                                                            k.
                                                                                           (UnwrapKey( h2, k,
                                                                                                       'on'
                                                                                            ) @ #t0.1) ∧
                                                                                           (EncKey( h1, k,
                                                                                                    'on'
                                                                                            ) @ #t1.2)
                                                                                          ∧
                                                                                           (¬(last(#t1.2))) ∧
                                                                                           (¬(last(#t0.1))) ∧
                                                                                           ((((#t0.1 < #t1.1) ∧
                                                                                              (#t1.2 < #t1.1)) ∨
                                                                                             ((#t0.1 < #t0) ∧
                                                                                              (#t1.2 < #t0))))) )
                                                                                    case case_1
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  next
                                                                                    case case_2
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case case_4
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case case_3
                                                            solve( State_1111111111111111111111( L_h, atts, k,
                                                                                                 ~n.8, ptr,
                                                                                                 templ
                                                                   ) ▶₀ #t2.6 )
                                                              case outLh_0_111111111111111111111
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( Insert( <'F_template', ptr>,
                                                                       <x, 'on', x.1, x.2, x.3, x.4, x.5, 
                                                                        x.6, x.7, 'usage'>
                                                               ) @ #t2.9 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          solve( (#t2.7 < #t2.3)  ∥ (#t2.7 = #t2.3)  ∥
                                                                 (#vr.18 < #t2.7) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_2
                                                            solve( State_1111111111111111111111( L_h, atts, k,
                                                                                                 ~n.8, ptr,
                                                                                                 templ
                                                                   ) ▶₀ #t2.6 )
                                                              case outLh_0_111111111111111111111
                                                              solve( (#t2.3 < #t2.9)  ∥ (#t2.3 = #t2.9) )
                                                                case case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case case_2
                                                                solve( Insert( <'obj', h2>,
                                                                               <z, 'off', 'off', 'on', 'on', 
                                                                                'on', 'on', 'off', 'on', 
                                                                                'undef', 'undef'>
                                                                       ) @ #t2.7 )
                                                                  case insertobjLhkatts_0_1111111111111111
                                                                  solve( State_1111111111111111( h2,
                                                                                                 <'off', 
                                                                                                  'off', 
                                                                                                  'on', 'on', 
                                                                                                  'on', 'on', 
                                                                                                  'off', 
                                                                                                  'on', 
                                                                                                  'undef', 
                                                                                                  'undef'>,
                                                                                                 z, lock, ptr,
                                                                                                 templ
                                                                         ) ▶₀ #t2.7 )
                                                                    case eventNewKeyLhkattsensatts_0_111111111111111
                                                                    by contradiction /* impossible chain */
                                                                  qed
                                                                next
                                                                  case insertobjhmatts_0_11111211111111
                                                                  solve( State_11111211111111( L_h,
                                                                                               <'off', 'off', 
                                                                                                'on', 'on', 
                                                                                                'on', 'on', 
                                                                                                'off', 'on', 
                                                                                                'undef', 
                                                                                                'undef'>,
                                                                                               h2, k, z, ut,
                                                                                               v, lock
                                                                         ) ▶₀ #t2.7 )
                                                                    case newh_0_1111121111111
                                                                    solve( Insert( <'F_template', z.2>,
                                                                                   <'off', 'off', 'on', 'on', 
                                                                                    'on', 'on', 'off', 'on', 
                                                                                    'undef', 'undef'>
                                                                           ) @ #t2.10 )
                                                                      case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                      solve( (#t2.1 < #t2.9)  ∥
                                                                             (#t2.1 = #t2.9) )
                                                                        case case_1
                                                                        by contradiction /* from formulas */
                                                                      next
                                                                        case case_2
                                                                        solve( State_111112111111111111111( L_h.1,
                                                                                                            atts,
                                                                                                            h2,
                                                                                                            k.1,
                                                                                                            m,
                                                                                                            ut,
                                                                                                            v,
                                                                                                            ~n.10
                                                                               ) ▶₀ #t2.8 )
                                                                          case outh_0_11111211111111111111
                                                                          solve( (∃ h1 #t1.
                                                                                   (NewKey( h1, m, 'on'
                                                                                    ) @ #t1)
                                                                                  ∧
                                                                                   #t1 < #vr.82)  ∥
                                                                                 (∃ L_h k2 #t1 #t0.
                                                                                   (NewKey( L_h, k2, 'on'
                                                                                    ) @ #t0) ∧
                                                                                   (!KU( k2 ) @ #t1)
                                                                                  ∧
                                                                                   (#t1 < #vr.82) ∧
                                                                                   (#t0 < #vr.82))  ∥
                                                                                 (∃ #t0 #t1 h1 h2 k.
                                                                                   (WrapKey( h2, k, 'on'
                                                                                    ) @ #t0) ∧
                                                                                   (DecKey( h1, k, 'on'
                                                                                    ) @ #t1)
                                                                                  ∧
                                                                                   (#t0 < #vr.82) ∧
                                                                                   (#t1 < #vr.82))  ∥
                                                                                 (∃ #t0 #t1 h1 h2 k.
                                                                                   (UnwrapKey( h2, k, 'on'
                                                                                    ) @ #t0) ∧
                                                                                   (EncKey( h1, k, 'on'
                                                                                    ) @ #t1)
                                                                                  ∧
                                                                                   (#t0 < #vr.82) ∧
                                                                                   (#t1 < #vr.82)) )
                                                                            case case_1
                                                                            solve( (#t2.10 < #t2.12)  ∥
                                                                                   (#t2.10 = #t2.12) )
                                                                              case case_1
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            next
                                                                              case case_2
                                                                              solve( (#t2.1 < #t2.11)  ∥
                                                                                     (#t2.1 = #t2.11) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( State_111111111111111( h1,
                                                                                                              <
                                                                                                               x, 
                                                                                                               x.1, 
                                                                                                               x.2, 
                                                                                                               x.3, 
                                                                                                               'on', 
                                                                                                               x.4, 
                                                                                                               x.5, 
                                                                                                               x.6, 
                                                                                                               x.7, 
                                                                                                               x.8
                                                                                                              >,
                                                                                                              m,
                                                                                                              lock,
                                                                                                              ptr,
                                                                                                              templ
                                                                                       ) ▶₀ #t1.1 )
                                                                                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                                  by contradiction
                                                                                     /* impossible chain */
                                                                                qed
                                                                              qed
                                                                            qed
                                                                          next
                                                                            case case_2
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          next
                                                                            case case_3
                                                                            solve( (#t2.10 < #t2.12)  ∥
                                                                                   (#t2.10 = #t2.12) )
                                                                              case case_1
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            next
                                                                              case case_2
                                                                              solve( (#t2.1 < #t2.11)  ∥
                                                                                     (#t2.1 = #t2.11) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (∃ L_h k2 #t1.2 #t0.1.
                                                                                         (NewKey( L_h, k2,
                                                                                                  'on'
                                                                                          ) @ #t0.1) ∧
                                                                                         (!KU( k2 ) @ #t1.2)
                                                                                        ∧
                                                                                         (¬(last(#t0.1))) ∧
                                                                                         (¬(last(#t1.2))) ∧
                                                                                         ((((#t1.2 < #t0) ∧
                                                                                            (#t0.1 < #t0)) ∨
                                                                                           ((#t1.2 < #t1.1) ∧
                                                                                            (#t0.1 < #t1.1)))))  ∥
                                                                                       (∃ #t0.1 #t1.2 h1 h2 k.
                                                                                         (UnwrapKey( h2, k,
                                                                                                     'on'
                                                                                          ) @ #t0.1) ∧
                                                                                         (EncKey( h1, k, 'on'
                                                                                          ) @ #t1.2)
                                                                                        ∧
                                                                                         (¬(last(#t1.2))) ∧
                                                                                         (¬(last(#t0.1))) ∧
                                                                                         ((((#t0.1 < #t1.1) ∧
                                                                                            (#t1.2 < #t1.1)) ∨
                                                                                           ((#t0.1 < #t0) ∧
                                                                                            (#t1.2 < #t0))))) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                qed
                                                                              qed
                                                                            qed
                                                                          next
                                                                            case case_4
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case case_3
                                                            solve( State_1111111111111111111111( L_h, atts, k,
                                                                                                 ~n.8, ptr,
                                                                                                 templ
                                                                   ) ▶₀ #t2.6 )
                                                              case outLh_0_111111111111111111111
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( Insert( <'obj', h2>,
                                                                       <z, 'off', 'off', 'on', 'on', 'on', 
                                                                        'on', 'off', 'on', 'undef', 'undef'>
                                                               ) @ #t2.6 )
                                                          case insertobjLhkatts_0_1111111111111111
                                                          solve( State_1111111111111111( h2,
                                                                                         <'off', 'off', 'on', 
                                                                                          'on', 'on', 'on', 
                                                                                          'off', 'on', 
                                                                                          'undef', 'undef'>,
                                                                                         z, lock, ptr, templ
                                                                 ) ▶₀ #t2.6 )
                                                            case eventNewKeyLhkattsensatts_0_111111111111111
                                                            by contradiction /* impossible chain */
                                                          qed
                                                        next
                                                          case insertobjhmatts_0_11111211111111
                                                          solve( State_11111211111111( L_h,
                                                                                       <'off', 'off', 'on', 
                                                                                        'on', 'on', 'on', 
                                                                                        'off', 'on', 'undef', 
                                                                                        'undef'>,
                                                                                       h2, k, z, ut, v, lock
                                                                 ) ▶₀ #t2.6 )
                                                            case newh_0_1111121111111
                                                            solve( Insert( <'F_template', z.2>,
                                                                           <'off', 'off', 'on', 'on', 'on', 
                                                                            'on', 'off', 'on', 'undef', 
                                                                            'undef'>
                                                                   ) @ #t2.9 )
                                                              case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                              solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                                case case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case case_2
                                                                solve( State_111112111111111111111( L_h.1,
                                                                                                    atts, h2,
                                                                                                    k.1, m,
                                                                                                    ut, v,
                                                                                                    ~n.7
                                                                       ) ▶₀ #t2.7 )
                                                                  case outh_0_11111211111111111111
                                                                  solve( (∃ h1 #t1.
                                                                           (NewKey( h1, m, 'on' ) @ #t1)
                                                                          ∧
                                                                           #t1 < #vr.63)  ∥
                                                                         (∃ L_h k2 #t1 #t0.
                                                                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧
                                                                           (!KU( k2 ) @ #t1)
                                                                          ∧
                                                                           (#t1 < #vr.63) ∧ (#t0 < #vr.63))  ∥
                                                                         (∃ #t0 #t1 h1 h2 k.
                                                                           (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                                           (DecKey( h1, k, 'on' ) @ #t1)
                                                                          ∧
                                                                           (#t0 < #vr.63) ∧ (#t1 < #vr.63))  ∥
                                                                         (∃ #t0 #t1 h1 h2 k.
                                                                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                                                           (EncKey( h1, k, 'on' ) @ #t1)
                                                                          ∧
                                                                           (#t0 < #vr.63) ∧ (#t1 < #vr.63)) )
                                                                    case case_1
                                                                    solve( (#t2.9 < #t2.11)  ∥
                                                                           (#t2.9 = #t2.11) )
                                                                      case case_1
                                                                      by contradiction /* from formulas */
                                                                    next
                                                                      case case_2
                                                                      solve( (#t2.1 < #t2.10)  ∥
                                                                             (#t2.1 = #t2.10) )
                                                                        case case_1
                                                                        by contradiction /* from formulas */
                                                                      next
                                                                        case case_2
                                                                        solve( State_111111111111111( h1,
                                                                                                      <x, 
                                                                                                       x.1, 
                                                                                                       x.2, 
                                                                                                       x.3, 
                                                                                                       'on', 
                                                                                                       x.4, 
                                                                                                       x.5, 
                                                                                                       x.6, 
                                                                                                       x.7, 
                                                                                                       x.8>,
                                                                                                      m, lock,
                                                                                                      ptr,
                                                                                                      templ
                                                                               ) ▶₀ #t1.1 )
                                                                          case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                          by contradiction
                                                                             /* impossible chain */
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  next
                                                                    case case_2
                                                                    by contradiction /* from formulas */
                                                                  next
                                                                    case case_3
                                                                    solve( (#t2.9 < #t2.11)  ∥
                                                                           (#t2.9 = #t2.11) )
                                                                      case case_1
                                                                      by contradiction /* from formulas */
                                                                    next
                                                                      case case_2
                                                                      solve( (#t2.1 < #t2.10)  ∥
                                                                             (#t2.1 = #t2.10) )
                                                                        case case_1
                                                                        by contradiction /* from formulas */
                                                                      next
                                                                        case case_2
                                                                        solve( (∃ L_h k2 #t1.2 #t0.1.
                                                                                 (NewKey( L_h, k2, 'on'
                                                                                  ) @ #t0.1) ∧
                                                                                 (!KU( k2 ) @ #t1.2)
                                                                                ∧
                                                                                 (¬(last(#t0.1))) ∧
                                                                                 (¬(last(#t1.2))) ∧
                                                                                 ((((#t1.2 < #t0) ∧
                                                                                    (#t0.1 < #t0)) ∨
                                                                                   ((#t1.2 < #t1.1) ∧
                                                                                    (#t0.1 < #t1.1)))))  ∥
                                                                               (∃ #t0.1 #t1.2 h1 h2 k.
                                                                                 (UnwrapKey( h2, k, 'on'
                                                                                  ) @ #t0.1) ∧
                                                                                 (EncKey( h1, k, 'on'
                                                                                  ) @ #t1.2)
                                                                                ∧
                                                                                 (¬(last(#t1.2))) ∧
                                                                                 (¬(last(#t0.1))) ∧
                                                                                 ((((#t0.1 < #t1.1) ∧
                                                                                    (#t1.2 < #t1.1)) ∨
                                                                                   ((#t0.1 < #t0) ∧
                                                                                    (#t1.2 < #t0))))) )
                                                                          case case_1
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_2
                                                                          by contradiction /* from formulas */
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  next
                                                                    case case_4
                                                                    by contradiction /* from formulas */
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case insertobjhmatts_0_11111211111111
                                                  solve( State_11111211111111( L_h.1,
                                                                               <x, 'on', x.1, x.2, x.3, x.4, 
                                                                                x.5, x.6, x.7, 'usage'>,
                                                                               L_h, k.1, k, ut, v, lock
                                                         ) ▶₀ #t2.5 )
                                                    case newh_0_1111121111111
                                                    solve( (#vr.54 < #vr.21)  ∥ (#t2.2 < #vr.54) )
                                                      case case_1
                                                      solve( (#vr.54 < #vr.42)  ∥ (#t2.4 < #vr.54) )
                                                        case case_1
                                                        solve( Insert( <'F_template', z.2>,
                                                                       <x, 'on', x.1, x.2, x.3, x.4, x.5, 
                                                                        x.6, x.7, 'usage'>
                                                               ) @ #t2.9 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( Insert( <'F_template', z.2>,
                                                                       <x, 'on', x.1, x.2, x.3, x.4, x.5, 
                                                                        x.6, x.7, 'usage'>
                                                               ) @ #t2.9 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( Insert( <'F_template', z.2>,
                                                                     <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, 
                                                                      x.7, 'usage'>
                                                             ) @ #t2.9 )
                                                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case case_2
                                    solve( Insert( <'F_template', z.2>,
                                                   <z.3, z.4, z.5, z.6, z.7, 'on', z.8, 'on', z.9, z.10>
                                           ) @ #t2.6 )
                                      case insertFtemplatetrustedononoffoffononononusageusage_0_
                                      by contradiction /* from formulas */
                                    next
                                      case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                      solve( (#t2.1 < #t2.5)  ∥ (#t2.1 = #t2.5) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.5 ) ▶₀ #t2.4 )
                                          case outsenckeyvkeyv_0_111111211111111
                                          solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( Insert( <'obj', L_h>,
                                                               <k, x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, 
                                                                x.7, 'usage'>
                                                       ) @ #t2.5 )
                                                  case insertobjLhkatts_0_1111111111111111
                                                  solve( State_1111111111111111( L_h,
                                                                                 <x, 'on', x.1, x.2, x.3, 
                                                                                  x.4, x.5, x.6, x.7, 'usage'
                                                                                 >,
                                                                                 k, lock, ptr, templ
                                                         ) ▶₀ #t2.5 )
                                                    case eventNewKeyLhkattsensatts_0_111111111111111
                                                    solve( ((#vr.21 < #vr.53) ∧
                                                            (∃ #t2.
                                                              (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                                                             ∧
                                                              (#vr.21 < #t2) ∧
                                                              (#t2 < #vr.53) ∧
                                                              (∀ #t0 pp.
                                                                (Unlock( pp, ~n.2, 'device' ) @ #t0)
                                                               ⇒
                                                                #t0 = #t2) ∧
                                                              (∀ pp lpp #t0.
                                                                (Lock( pp, lpp, 'device' ) @ #t0)
                                                               ⇒
                                                                ((#t0 < #vr.21) ∨
                                                                 (#t0 = #vr.21) ∨
                                                                 (#t2 < #t0))) ∧
                                                              (∀ pp lpp #t0.
                                                                (Unlock( pp, lpp, 'device' ) @ #t0)
                                                               ⇒
                                                                ((#t0 < #vr.21) ∨
                                                                 (#t2 < #t0) ∨
                                                                 (#t2 = #t0)))))  ∥
                                                           (#vr.53 < #vr.21)  ∥ (#vr.21 = #vr.53) )
                                                      case case_1
                                                      solve( (#vr.53 < #vr.42)  ∥ (#t2.4 < #vr.53) )
                                                        case case_1
                                                        solve( Insert( <'F_template', ptr>,
                                                                       <x, 'on', x.1, x.2, x.3, x.4, x.5, 
                                                                        x.6, x.7, 'usage'>
                                                               ) @ #t2.9 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          solve( (#t2.7 < #t2.3)  ∥ (#t2.7 = #t2.3)  ∥
                                                                 (#vr.18 < #t2.7) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_2
                                                            solve( State_1111111111111111111111( L_h, atts, k,
                                                                                                 ~n.8, ptr,
                                                                                                 templ
                                                                   ) ▶₀ #t2.6 )
                                                              case outLh_0_111111111111111111111
                                                              solve( (#t2.9 < #t2.3)  ∥ (#t2.9 = #t2.3)  ∥
                                                                     (#vr.18 < #t2.9) )
                                                                case case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case case_2
                                                                solve( Insert( <'obj', h2>,
                                                                               <z, 'off', 'off', 'on', 'on', 
                                                                                'on', 'on', 'off', 'on', 
                                                                                'undef', 'undef'>
                                                                       ) @ #t2.7 )
                                                                  case insertobjLhkatts_0_1111111111111111
                                                                  solve( State_1111111111111111( h2,
                                                                                                 <'off', 
                                                                                                  'off', 
                                                                                                  'on', 'on', 
                                                                                                  'on', 'on', 
                                                                                                  'off', 
                                                                                                  'on', 
                                                                                                  'undef', 
                                                                                                  'undef'>,
                                                                                                 z, lock, ptr,
                                                                                                 templ
                                                                         ) ▶₀ #t2.7 )
                                                                    case eventNewKeyLhkattsensatts_0_111111111111111
                                                                    by contradiction /* impossible chain */
                                                                  qed
                                                                next
                                                                  case insertobjhmatts_0_11111211111111
                                                                  solve( State_11111211111111( L_h,
                                                                                               <'off', 'off', 
                                                                                                'on', 'on', 
                                                                                                'on', 'on', 
                                                                                                'off', 'on', 
                                                                                                'undef', 
                                                                                                'undef'>,
                                                                                               h2, k, z, ut,
                                                                                               v, lock
                                                                         ) ▶₀ #t2.7 )
                                                                    case newh_0_1111121111111
                                                                    solve( (#vr.72 < #vr.21)  ∥
                                                                           (#t2.2 < #vr.72) )
                                                                      case case_1
                                                                      solve( Insert( <'F_template', z.2>,
                                                                                     <'off', 'off', 'on', 
                                                                                      'on', 'on', 'on', 
                                                                                      'off', 'on', 'undef', 
                                                                                      'undef'>
                                                                             ) @ #t2.10 )
                                                                        case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                        solve( (#t2.1 < #t2.9)  ∥
                                                                               (#t2.1 = #t2.9) )
                                                                          case case_1
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_2
                                                                          solve( State_111112111111111111111( L_h.1,
                                                                                                              atts,
                                                                                                              h2,
                                                                                                              k.1,
                                                                                                              m,
                                                                                                              ut,
                                                                                                              v,
                                                                                                              ~n.10
                                                                                 ) ▶₀ #t2.8 )
                                                                            case outh_0_11111211111111111111
                                                                            solve( (∃ h1 #t1.
                                                                                     (NewKey( h1, m, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     #t1 < #vr.82)  ∥
                                                                                   (∃ L_h k2 #t1 #t0.
                                                                                     (NewKey( L_h, k2, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (!KU( k2 ) @ #t1)
                                                                                    ∧
                                                                                     (#t1 < #vr.82) ∧
                                                                                     (#t0 < #vr.82))  ∥
                                                                                   (∃ #t0 #t1 h1 h2 k.
                                                                                     (WrapKey( h2, k, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (DecKey( h1, k, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     (#t0 < #vr.82) ∧
                                                                                     (#t1 < #vr.82))  ∥
                                                                                   (∃ #t0 #t1 h1 h2 k.
                                                                                     (UnwrapKey( h2, k, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (EncKey( h1, k, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     (#t0 < #vr.82) ∧
                                                                                     (#t1 < #vr.82)) )
                                                                              case case_1
                                                                              solve( (#t2.10 < #t2.12)  ∥
                                                                                     (#t2.10 = #t2.12) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (#t2.1 < #t2.11)  ∥
                                                                                       (#t2.1 = #t2.11) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( State_111111111111111( h1,
                                                                                                                <
                                                                                                                 x, 
                                                                                                                 x.1, 
                                                                                                                 x.2, 
                                                                                                                 x.3, 
                                                                                                                 'on', 
                                                                                                                 x.4, 
                                                                                                                 x.5, 
                                                                                                                 x.6, 
                                                                                                                 x.7, 
                                                                                                                 x.8
                                                                                                                >,
                                                                                                                m,
                                                                                                                lock,
                                                                                                                ptr,
                                                                                                                templ
                                                                                         ) ▶₀ #t1.1 )
                                                                                    case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                                    by contradiction
                                                                                       /* impossible chain */
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case case_2
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            next
                                                                              case case_3
                                                                              solve( (#t2.10 < #t2.12)  ∥
                                                                                     (#t2.10 = #t2.12) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (#t2.1 < #t2.11)  ∥
                                                                                       (#t2.1 = #t2.11) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( (∃ L_h k2 #t1.2
                                                                                            #t0.1.
                                                                                           (NewKey( L_h, k2,
                                                                                                    'on'
                                                                                            ) @ #t0.1) ∧
                                                                                           (!KU( k2 ) @ #t1.2)
                                                                                          ∧
                                                                                           (¬(last(#t0.1))) ∧
                                                                                           (¬(last(#t1.2))) ∧
                                                                                           ((((#t1.2 < #t0) ∧
                                                                                              (#t0.1 < #t0)) ∨
                                                                                             ((#t1.2 < #t1.1) ∧
                                                                                              (#t0.1 < #t1.1)))))  ∥
                                                                                         (∃ #t0.1 #t1.2 h1 h2
                                                                                            k.
                                                                                           (UnwrapKey( h2, k,
                                                                                                       'on'
                                                                                            ) @ #t0.1) ∧
                                                                                           (EncKey( h1, k,
                                                                                                    'on'
                                                                                            ) @ #t1.2)
                                                                                          ∧
                                                                                           (¬(last(#t1.2))) ∧
                                                                                           (¬(last(#t0.1))) ∧
                                                                                           ((((#t0.1 < #t1.1) ∧
                                                                                              (#t1.2 < #t1.1)) ∨
                                                                                             ((#t0.1 < #t0) ∧
                                                                                              (#t1.2 < #t0))))) )
                                                                                    case case_1
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  next
                                                                                    case case_2
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case case_4
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    next
                                                                      case case_2
                                                                      solve( (#vr.72 < #vr.53)  ∥
                                                                             (#t2.6 < #vr.72) )
                                                                        case case_1
                                                                        solve( Insert( <'F_template', z.2>,
                                                                                       <'off', 'off', 'on', 
                                                                                        'on', 'on', 'on', 
                                                                                        'off', 'on', 'undef', 
                                                                                        'undef'>
                                                                               ) @ #t2.10 )
                                                                          case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                          solve( (#t2.1 < #t2.9)  ∥
                                                                                 (#t2.1 = #t2.9) )
                                                                            case case_1
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          next
                                                                            case case_2
                                                                            solve( State_111112111111111111111( L_h.1,
                                                                                                                atts,
                                                                                                                h2,
                                                                                                                k.1,
                                                                                                                m,
                                                                                                                ut,
                                                                                                                v,
                                                                                                                ~n.10
                                                                                   ) ▶₀ #t2.8 )
                                                                              case outh_0_11111211111111111111
                                                                              solve( (∃ h1 #t1.
                                                                                       (NewKey( h1, m, 'on'
                                                                                        ) @ #t1)
                                                                                      ∧
                                                                                       #t1 < #vr.82)  ∥
                                                                                     (∃ L_h k2 #t1 #t0.
                                                                                       (NewKey( L_h, k2, 'on'
                                                                                        ) @ #t0) ∧
                                                                                       (!KU( k2 ) @ #t1)
                                                                                      ∧
                                                                                       (#t1 < #vr.82) ∧
                                                                                       (#t0 < #vr.82))  ∥
                                                                                     (∃ #t0 #t1 h1 h2 k.
                                                                                       (WrapKey( h2, k, 'on'
                                                                                        ) @ #t0) ∧
                                                                                       (DecKey( h1, k, 'on'
                                                                                        ) @ #t1)
                                                                                      ∧
                                                                                       (#t0 < #vr.82) ∧
                                                                                       (#t1 < #vr.82))  ∥
                                                                                     (∃ #t0 #t1 h1 h2 k.
                                                                                       (UnwrapKey( h2, k, 'on'
                                                                                        ) @ #t0) ∧
                                                                                       (EncKey( h1, k, 'on'
                                                                                        ) @ #t1)
                                                                                      ∧
                                                                                       (#t0 < #vr.82) ∧
                                                                                       (#t1 < #vr.82)) )
                                                                                case case_1
                                                                                solve( (#t2.10 < #t2.12)  ∥
                                                                                       (#t2.10 = #t2.12) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( (#t2.1 < #t2.11)  ∥
                                                                                         (#t2.1 = #t2.11) )
                                                                                    case case_1
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  next
                                                                                    case case_2
                                                                                    solve( State_111111111111111( h1,
                                                                                                                  <
                                                                                                                   x, 
                                                                                                                   x.1, 
                                                                                                                   x.2, 
                                                                                                                   x.3, 
                                                                                                                   'on', 
                                                                                                                   x.4, 
                                                                                                                   x.5, 
                                                                                                                   x.6, 
                                                                                                                   x.7, 
                                                                                                                   x.8
                                                                                                                  >,
                                                                                                                  m,
                                                                                                                  lock,
                                                                                                                  ptr,
                                                                                                                  templ
                                                                                           ) ▶₀ #t1.1 )
                                                                                      case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                                      by contradiction
                                                                                         /* impossible chain
                                                                                         */
                                                                                    qed
                                                                                  qed
                                                                                qed
                                                                              next
                                                                                case case_2
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_3
                                                                                solve( (#t2.10 < #t2.12)  ∥
                                                                                       (#t2.10 = #t2.12) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( (#t2.1 < #t2.11)  ∥
                                                                                         (#t2.1 = #t2.11) )
                                                                                    case case_1
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  next
                                                                                    case case_2
                                                                                    solve( (∃ L_h k2 #t1.2
                                                                                              #t0.1.
                                                                                             (NewKey( L_h, k2,
                                                                                                      'on'
                                                                                              ) @ #t0.1) ∧
                                                                                             (!KU( k2
                                                                                              ) @ #t1.2)
                                                                                            ∧
                                                                                             (¬(last(#t0.1))) ∧
                                                                                             (¬(last(#t1.2))) ∧
                                                                                             ((((#t1.2 < #t0) ∧
                                                                                                (#t0.1 < #t0)) ∨
                                                                                               ((#t1.2 < #t1.1) ∧
                                                                                                (#t0.1 < #t1.1)))))  ∥
                                                                                           (∃ #t0.1 #t1.2 h1
                                                                                              h2 k.
                                                                                             (UnwrapKey( h2,
                                                                                                         k,
                                                                                                         'on'
                                                                                              ) @ #t0.1) ∧
                                                                                             (EncKey( h1, k,
                                                                                                      'on'
                                                                                              ) @ #t1.2)
                                                                                            ∧
                                                                                             (¬(last(#t1.2))) ∧
                                                                                             (¬(last(#t0.1))) ∧
                                                                                             ((((#t0.1 < #t1.1) ∧
                                                                                                (#t1.2 < #t1.1)) ∨
                                                                                               ((#t0.1 < #t0) ∧
                                                                                                (#t1.2 < #t0))))) )
                                                                                      case case_1
                                                                                      by contradiction
                                                                                         /* from formulas */
                                                                                    next
                                                                                      case case_2
                                                                                      by contradiction
                                                                                         /* from formulas */
                                                                                    qed
                                                                                  qed
                                                                                qed
                                                                              next
                                                                                case case_4
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              qed
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      next
                                                                        case case_2
                                                                        solve( Insert( <'F_template', z.2>,
                                                                                       <'off', 'off', 'on', 
                                                                                        'on', 'on', 'on', 
                                                                                        'off', 'on', 'undef', 
                                                                                        'undef'>
                                                                               ) @ #t2.10 )
                                                                          case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                          solve( (#t2.1 < #t2.9)  ∥
                                                                                 (#t2.1 = #t2.9) )
                                                                            case case_1
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          next
                                                                            case case_2
                                                                            solve( State_111112111111111111111( L_h.1,
                                                                                                                atts,
                                                                                                                h2,
                                                                                                                k.1,
                                                                                                                m,
                                                                                                                ut,
                                                                                                                v,
                                                                                                                ~n.10
                                                                                   ) ▶₀ #t2.8 )
                                                                              case outh_0_11111211111111111111
                                                                              solve( (∃ h1 #t1.
                                                                                       (NewKey( h1, m, 'on'
                                                                                        ) @ #t1)
                                                                                      ∧
                                                                                       #t1 < #vr.82)  ∥
                                                                                     (∃ L_h k2 #t1 #t0.
                                                                                       (NewKey( L_h, k2, 'on'
                                                                                        ) @ #t0) ∧
                                                                                       (!KU( k2 ) @ #t1)
                                                                                      ∧
                                                                                       (#t1 < #vr.82) ∧
                                                                                       (#t0 < #vr.82))  ∥
                                                                                     (∃ #t0 #t1 h1 h2 k.
                                                                                       (WrapKey( h2, k, 'on'
                                                                                        ) @ #t0) ∧
                                                                                       (DecKey( h1, k, 'on'
                                                                                        ) @ #t1)
                                                                                      ∧
                                                                                       (#t0 < #vr.82) ∧
                                                                                       (#t1 < #vr.82))  ∥
                                                                                     (∃ #t0 #t1 h1 h2 k.
                                                                                       (UnwrapKey( h2, k, 'on'
                                                                                        ) @ #t0) ∧
                                                                                       (EncKey( h1, k, 'on'
                                                                                        ) @ #t1)
                                                                                      ∧
                                                                                       (#t0 < #vr.82) ∧
                                                                                       (#t1 < #vr.82)) )
                                                                                case case_1
                                                                                solve( (#t2.10 < #t2.12)  ∥
                                                                                       (#t2.10 = #t2.12) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( (#t2.1 < #t2.11)  ∥
                                                                                         (#t2.1 = #t2.11) )
                                                                                    case case_1
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  next
                                                                                    case case_2
                                                                                    solve( State_111111111111111( h1,
                                                                                                                  <
                                                                                                                   x, 
                                                                                                                   x.1, 
                                                                                                                   x.2, 
                                                                                                                   x.3, 
                                                                                                                   'on', 
                                                                                                                   x.4, 
                                                                                                                   x.5, 
                                                                                                                   x.6, 
                                                                                                                   x.7, 
                                                                                                                   x.8
                                                                                                                  >,
                                                                                                                  m,
                                                                                                                  lock,
                                                                                                                  ptr,
                                                                                                                  templ
                                                                                           ) ▶₀ #t1.1 )
                                                                                      case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                                      by contradiction
                                                                                         /* impossible chain
                                                                                         */
                                                                                    qed
                                                                                  qed
                                                                                qed
                                                                              next
                                                                                case case_2
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_3
                                                                                solve( (#t2.10 < #t2.12)  ∥
                                                                                       (#t2.10 = #t2.12) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( (#t2.1 < #t2.11)  ∥
                                                                                         (#t2.1 = #t2.11) )
                                                                                    case case_1
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  next
                                                                                    case case_2
                                                                                    solve( (∃ L_h k2 #t1.2
                                                                                              #t0.1.
                                                                                             (NewKey( L_h, k2,
                                                                                                      'on'
                                                                                              ) @ #t0.1) ∧
                                                                                             (!KU( k2
                                                                                              ) @ #t1.2)
                                                                                            ∧
                                                                                             (¬(last(#t0.1))) ∧
                                                                                             (¬(last(#t1.2))) ∧
                                                                                             ((((#t1.2 < #t0) ∧
                                                                                                (#t0.1 < #t0)) ∨
                                                                                               ((#t1.2 < #t1.1) ∧
                                                                                                (#t0.1 < #t1.1)))))  ∥
                                                                                           (∃ #t0.1 #t1.2 h1
                                                                                              h2 k.
                                                                                             (UnwrapKey( h2,
                                                                                                         k,
                                                                                                         'on'
                                                                                              ) @ #t0.1) ∧
                                                                                             (EncKey( h1, k,
                                                                                                      'on'
                                                                                              ) @ #t1.2)
                                                                                            ∧
                                                                                             (¬(last(#t1.2))) ∧
                                                                                             (¬(last(#t0.1))) ∧
                                                                                             ((((#t0.1 < #t1.1) ∧
                                                                                                (#t1.2 < #t1.1)) ∨
                                                                                               ((#t0.1 < #t0) ∧
                                                                                                (#t1.2 < #t0))))) )
                                                                                      case case_1
                                                                                      by contradiction
                                                                                         /* from formulas */
                                                                                    next
                                                                                      case case_2
                                                                                      by contradiction
                                                                                         /* from formulas */
                                                                                    qed
                                                                                  qed
                                                                                qed
                                                                              next
                                                                                case case_4
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              qed
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case case_3
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          next
                                                            case case_3
                                                            solve( State_1111111111111111111111( L_h, atts, k,
                                                                                                 ~n.8, ptr,
                                                                                                 templ
                                                                   ) ▶₀ #t2.6 )
                                                              case outLh_0_111111111111111111111
                                                              solve( (#t2.10 < #t2.3)  ∥ (#t2.10 = #t2.3)  ∥
                                                                     (#vr.18 < #t2.10) )
                                                                case case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case case_2
                                                                by contradiction /* from formulas */
                                                              next
                                                                case case_3
                                                                solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                                  case case_1
                                                                  by contradiction /* from formulas */
                                                                next
                                                                  case case_2
                                                                  solve( State_( ) ▶₀ #t2.7 )
                                                                    case Init
                                                                    by contradiction /* cyclic */
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( Insert( <'F_template', ptr>,
                                                                       <x, 'on', x.1, x.2, x.3, x.4, x.5, 
                                                                        x.6, x.7, 'usage'>
                                                               ) @ #t2.9 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          solve( (#t2.7 < #t2.3)  ∥ (#t2.7 = #t2.3)  ∥
                                                                 (#vr.18 < #t2.7) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_2
                                                            solve( State_1111111111111111111111( L_h, atts, k,
                                                                                                 ~n.8, ptr,
                                                                                                 templ
                                                                   ) ▶₀ #t2.6 )
                                                              case outLh_0_111111111111111111111
                                                              solve( (#t2.9 < #t2.3)  ∥ (#t2.9 = #t2.3)  ∥
                                                                     (#vr.18 < #t2.9) )
                                                                case case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case case_2
                                                                solve( Insert( <'obj', h2>,
                                                                               <z, 'off', 'off', 'on', 'on', 
                                                                                'on', 'on', 'off', 'on', 
                                                                                'undef', 'undef'>
                                                                       ) @ #t2.7 )
                                                                  case insertobjLhkatts_0_1111111111111111
                                                                  solve( State_1111111111111111( h2,
                                                                                                 <'off', 
                                                                                                  'off', 
                                                                                                  'on', 'on', 
                                                                                                  'on', 'on', 
                                                                                                  'off', 
                                                                                                  'on', 
                                                                                                  'undef', 
                                                                                                  'undef'>,
                                                                                                 z, lock, ptr,
                                                                                                 templ
                                                                         ) ▶₀ #t2.7 )
                                                                    case eventNewKeyLhkattsensatts_0_111111111111111
                                                                    by contradiction /* impossible chain */
                                                                  qed
                                                                next
                                                                  case insertobjhmatts_0_11111211111111
                                                                  solve( State_11111211111111( L_h,
                                                                                               <'off', 'off', 
                                                                                                'on', 'on', 
                                                                                                'on', 'on', 
                                                                                                'off', 'on', 
                                                                                                'undef', 
                                                                                                'undef'>,
                                                                                               h2, k, z, ut,
                                                                                               v, lock
                                                                         ) ▶₀ #t2.7 )
                                                                    case newh_0_1111121111111
                                                                    solve( (#vr.72 < #vr.21)  ∥
                                                                           (#t2.2 < #vr.72) )
                                                                      case case_1
                                                                      solve( Insert( <'F_template', z.2>,
                                                                                     <'off', 'off', 'on', 
                                                                                      'on', 'on', 'on', 
                                                                                      'off', 'on', 'undef', 
                                                                                      'undef'>
                                                                             ) @ #t2.10 )
                                                                        case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                        solve( (#t2.1 < #t2.9)  ∥
                                                                               (#t2.1 = #t2.9) )
                                                                          case case_1
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_2
                                                                          solve( State_111112111111111111111( L_h.1,
                                                                                                              atts,
                                                                                                              h2,
                                                                                                              k.1,
                                                                                                              m,
                                                                                                              ut,
                                                                                                              v,
                                                                                                              ~n.10
                                                                                 ) ▶₀ #t2.8 )
                                                                            case outh_0_11111211111111111111
                                                                            solve( (∃ h1 #t1.
                                                                                     (NewKey( h1, m, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     #t1 < #vr.82)  ∥
                                                                                   (∃ L_h k2 #t1 #t0.
                                                                                     (NewKey( L_h, k2, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (!KU( k2 ) @ #t1)
                                                                                    ∧
                                                                                     (#t1 < #vr.82) ∧
                                                                                     (#t0 < #vr.82))  ∥
                                                                                   (∃ #t0 #t1 h1 h2 k.
                                                                                     (WrapKey( h2, k, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (DecKey( h1, k, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     (#t0 < #vr.82) ∧
                                                                                     (#t1 < #vr.82))  ∥
                                                                                   (∃ #t0 #t1 h1 h2 k.
                                                                                     (UnwrapKey( h2, k, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (EncKey( h1, k, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     (#t0 < #vr.82) ∧
                                                                                     (#t1 < #vr.82)) )
                                                                              case case_1
                                                                              solve( (#t2.10 < #t2.12)  ∥
                                                                                     (#t2.10 = #t2.12) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (#t2.1 < #t2.11)  ∥
                                                                                       (#t2.1 = #t2.11) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( State_111111111111111( h1,
                                                                                                                <
                                                                                                                 x, 
                                                                                                                 x.1, 
                                                                                                                 x.2, 
                                                                                                                 x.3, 
                                                                                                                 'on', 
                                                                                                                 x.4, 
                                                                                                                 x.5, 
                                                                                                                 x.6, 
                                                                                                                 x.7, 
                                                                                                                 x.8
                                                                                                                >,
                                                                                                                m,
                                                                                                                lock,
                                                                                                                ptr,
                                                                                                                templ
                                                                                         ) ▶₀ #t1.1 )
                                                                                    case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                                    by contradiction
                                                                                       /* impossible chain */
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case case_2
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            next
                                                                              case case_3
                                                                              solve( (#t2.10 < #t2.12)  ∥
                                                                                     (#t2.10 = #t2.12) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (#t2.1 < #t2.11)  ∥
                                                                                       (#t2.1 = #t2.11) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( (∃ L_h k2 #t1.2
                                                                                            #t0.1.
                                                                                           (NewKey( L_h, k2,
                                                                                                    'on'
                                                                                            ) @ #t0.1) ∧
                                                                                           (!KU( k2 ) @ #t1.2)
                                                                                          ∧
                                                                                           (¬(last(#t0.1))) ∧
                                                                                           (¬(last(#t1.2))) ∧
                                                                                           ((((#t1.2 < #t0) ∧
                                                                                              (#t0.1 < #t0)) ∨
                                                                                             ((#t1.2 < #t1.1) ∧
                                                                                              (#t0.1 < #t1.1)))))  ∥
                                                                                         (∃ #t0.1 #t1.2 h1 h2
                                                                                            k.
                                                                                           (UnwrapKey( h2, k,
                                                                                                       'on'
                                                                                            ) @ #t0.1) ∧
                                                                                           (EncKey( h1, k,
                                                                                                    'on'
                                                                                            ) @ #t1.2)
                                                                                          ∧
                                                                                           (¬(last(#t1.2))) ∧
                                                                                           (¬(last(#t0.1))) ∧
                                                                                           ((((#t0.1 < #t1.1) ∧
                                                                                              (#t1.2 < #t1.1)) ∨
                                                                                             ((#t0.1 < #t0) ∧
                                                                                              (#t1.2 < #t0))))) )
                                                                                    case case_1
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  next
                                                                                    case case_2
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case case_4
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    next
                                                                      case case_2
                                                                      solve( Insert( <'F_template', z.2>,
                                                                                     <'off', 'off', 'on', 
                                                                                      'on', 'on', 'on', 
                                                                                      'off', 'on', 'undef', 
                                                                                      'undef'>
                                                                             ) @ #t2.10 )
                                                                        case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                        solve( (#t2.1 < #t2.9)  ∥
                                                                               (#t2.1 = #t2.9) )
                                                                          case case_1
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_2
                                                                          solve( State_111112111111111111111( L_h.1,
                                                                                                              atts,
                                                                                                              h2,
                                                                                                              k.1,
                                                                                                              m,
                                                                                                              ut,
                                                                                                              v,
                                                                                                              ~n.10
                                                                                 ) ▶₀ #t2.8 )
                                                                            case outh_0_11111211111111111111
                                                                            solve( (∃ h1 #t1.
                                                                                     (NewKey( h1, m, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     #t1 < #vr.82)  ∥
                                                                                   (∃ L_h k2 #t1 #t0.
                                                                                     (NewKey( L_h, k2, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (!KU( k2 ) @ #t1)
                                                                                    ∧
                                                                                     (#t1 < #vr.82) ∧
                                                                                     (#t0 < #vr.82))  ∥
                                                                                   (∃ #t0 #t1 h1 h2 k.
                                                                                     (WrapKey( h2, k, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (DecKey( h1, k, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     (#t0 < #vr.82) ∧
                                                                                     (#t1 < #vr.82))  ∥
                                                                                   (∃ #t0 #t1 h1 h2 k.
                                                                                     (UnwrapKey( h2, k, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (EncKey( h1, k, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     (#t0 < #vr.82) ∧
                                                                                     (#t1 < #vr.82)) )
                                                                              case case_1
                                                                              solve( (#t2.10 < #t2.12)  ∥
                                                                                     (#t2.10 = #t2.12) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (#t2.1 < #t2.11)  ∥
                                                                                       (#t2.1 = #t2.11) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( State_111111111111111( h1,
                                                                                                                <
                                                                                                                 x, 
                                                                                                                 x.1, 
                                                                                                                 x.2, 
                                                                                                                 x.3, 
                                                                                                                 'on', 
                                                                                                                 x.4, 
                                                                                                                 x.5, 
                                                                                                                 x.6, 
                                                                                                                 x.7, 
                                                                                                                 x.8
                                                                                                                >,
                                                                                                                m,
                                                                                                                lock,
                                                                                                                ptr,
                                                                                                                templ
                                                                                         ) ▶₀ #t1.1 )
                                                                                    case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                                    by contradiction
                                                                                       /* impossible chain */
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case case_2
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            next
                                                                              case case_3
                                                                              solve( (#t2.10 < #t2.12)  ∥
                                                                                     (#t2.10 = #t2.12) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (#t2.1 < #t2.11)  ∥
                                                                                       (#t2.1 = #t2.11) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( (∃ L_h k2 #t1.2
                                                                                            #t0.1.
                                                                                           (NewKey( L_h, k2,
                                                                                                    'on'
                                                                                            ) @ #t0.1) ∧
                                                                                           (!KU( k2 ) @ #t1.2)
                                                                                          ∧
                                                                                           (¬(last(#t0.1))) ∧
                                                                                           (¬(last(#t1.2))) ∧
                                                                                           ((((#t1.2 < #t0) ∧
                                                                                              (#t0.1 < #t0)) ∨
                                                                                             ((#t1.2 < #t1.1) ∧
                                                                                              (#t0.1 < #t1.1)))))  ∥
                                                                                         (∃ #t0.1 #t1.2 h1 h2
                                                                                            k.
                                                                                           (UnwrapKey( h2, k,
                                                                                                       'on'
                                                                                            ) @ #t0.1) ∧
                                                                                           (EncKey( h1, k,
                                                                                                    'on'
                                                                                            ) @ #t1.2)
                                                                                          ∧
                                                                                           (¬(last(#t1.2))) ∧
                                                                                           (¬(last(#t0.1))) ∧
                                                                                           ((((#t0.1 < #t1.1) ∧
                                                                                              (#t1.2 < #t1.1)) ∨
                                                                                             ((#t0.1 < #t0) ∧
                                                                                              (#t1.2 < #t0))))) )
                                                                                    case case_1
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  next
                                                                                    case case_2
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case case_4
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case case_3
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          next
                                                            case case_3
                                                            solve( State_1111111111111111111111( L_h, atts, k,
                                                                                                 ~n.8, ptr,
                                                                                                 templ
                                                                   ) ▶₀ #t2.6 )
                                                              case outLh_0_111111111111111111111
                                                              solve( (#t2.10 < #t2.3)  ∥ (#t2.10 = #t2.3)  ∥
                                                                     (#vr.18 < #t2.10) )
                                                                case case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case case_2
                                                                by contradiction /* from formulas */
                                                              next
                                                                case case_3
                                                                solve( (#t2.7 < #t2.10)  ∥ (#t2.7 = #t2.10) )
                                                                  case case_1
                                                                  by contradiction /* from formulas */
                                                                next
                                                                  case case_2
                                                                  solve( State_( ) ▶₀ #t2.7 )
                                                                    case Init
                                                                    by contradiction /* cyclic */
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( Insert( <'F_template', ptr>,
                                                                     <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, 
                                                                      x.7, 'usage'>
                                                             ) @ #t2.9 )
                                                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                        solve( (#t2.7 < #t2.3)  ∥ (#t2.7 = #t2.3)  ∥
                                                               (#vr.18 < #t2.7) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          solve( State_1111111111111111111111( L_h, atts, k,
                                                                                               ~n.8, ptr,
                                                                                               templ
                                                                 ) ▶₀ #t2.6 )
                                                            case outLh_0_111111111111111111111
                                                            solve( (#t2.3 < #t2.9)  ∥ (#t2.3 = #t2.9) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case case_2
                                                              solve( Insert( <'obj', h2>,
                                                                             <z, 'off', 'off', 'on', 'on', 
                                                                              'on', 'on', 'off', 'on', 
                                                                              'undef', 'undef'>
                                                                     ) @ #t2.7 )
                                                                case insertobjLhkatts_0_1111111111111111
                                                                solve( State_1111111111111111( h2,
                                                                                               <'off', 'off', 
                                                                                                'on', 'on', 
                                                                                                'on', 'on', 
                                                                                                'off', 'on', 
                                                                                                'undef', 
                                                                                                'undef'>,
                                                                                               z, lock, ptr,
                                                                                               templ
                                                                       ) ▶₀ #t2.7 )
                                                                  case eventNewKeyLhkattsensatts_0_111111111111111
                                                                  by contradiction /* impossible chain */
                                                                qed
                                                              next
                                                                case insertobjhmatts_0_11111211111111
                                                                solve( State_11111211111111( L_h,
                                                                                             <'off', 'off', 
                                                                                              'on', 'on', 
                                                                                              'on', 'on', 
                                                                                              'off', 'on', 
                                                                                              'undef', 'undef'
                                                                                             >,
                                                                                             h2, k, z, ut, v,
                                                                                             lock
                                                                       ) ▶₀ #t2.7 )
                                                                  case newh_0_1111121111111
                                                                  solve( (#vr.72 < #vr.21)  ∥
                                                                         (#t2.2 < #vr.72) )
                                                                    case case_1
                                                                    solve( (#vr.72 < #vr.53)  ∥
                                                                           (#t2.6 < #vr.72) )
                                                                      case case_1
                                                                      solve( Insert( <'F_template', z.2>,
                                                                                     <'off', 'off', 'on', 
                                                                                      'on', 'on', 'on', 
                                                                                      'off', 'on', 'undef', 
                                                                                      'undef'>
                                                                             ) @ #t2.10 )
                                                                        case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                        solve( (#t2.1 < #t2.9)  ∥
                                                                               (#t2.1 = #t2.9) )
                                                                          case case_1
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_2
                                                                          solve( State_111112111111111111111( L_h.1,
                                                                                                              atts,
                                                                                                              h2,
                                                                                                              k.1,
                                                                                                              m,
                                                                                                              ut,
                                                                                                              v,
                                                                                                              ~n.10
                                                                                 ) ▶₀ #t2.8 )
                                                                            case outh_0_11111211111111111111
                                                                            solve( (∃ h1 #t1.
                                                                                     (NewKey( h1, m, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     #t1 < #vr.82)  ∥
                                                                                   (∃ L_h k2 #t1 #t0.
                                                                                     (NewKey( L_h, k2, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (!KU( k2 ) @ #t1)
                                                                                    ∧
                                                                                     (#t1 < #vr.82) ∧
                                                                                     (#t0 < #vr.82))  ∥
                                                                                   (∃ #t0 #t1 h1 h2 k.
                                                                                     (WrapKey( h2, k, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (DecKey( h1, k, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     (#t0 < #vr.82) ∧
                                                                                     (#t1 < #vr.82))  ∥
                                                                                   (∃ #t0 #t1 h1 h2 k.
                                                                                     (UnwrapKey( h2, k, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (EncKey( h1, k, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     (#t0 < #vr.82) ∧
                                                                                     (#t1 < #vr.82)) )
                                                                              case case_1
                                                                              solve( (#t2.10 < #t2.12)  ∥
                                                                                     (#t2.10 = #t2.12) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (#t2.1 < #t2.11)  ∥
                                                                                       (#t2.1 = #t2.11) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( State_111111111111111( h1,
                                                                                                                <
                                                                                                                 x, 
                                                                                                                 x.1, 
                                                                                                                 x.2, 
                                                                                                                 x.3, 
                                                                                                                 'on', 
                                                                                                                 x.4, 
                                                                                                                 x.5, 
                                                                                                                 x.6, 
                                                                                                                 x.7, 
                                                                                                                 x.8
                                                                                                                >,
                                                                                                                m,
                                                                                                                lock,
                                                                                                                ptr,
                                                                                                                templ
                                                                                         ) ▶₀ #t1.1 )
                                                                                    case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                                    by contradiction
                                                                                       /* impossible chain */
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case case_2
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            next
                                                                              case case_3
                                                                              solve( (#t2.10 < #t2.12)  ∥
                                                                                     (#t2.10 = #t2.12) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (#t2.1 < #t2.11)  ∥
                                                                                       (#t2.1 = #t2.11) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( (∃ L_h k2 #t1.2
                                                                                            #t0.1.
                                                                                           (NewKey( L_h, k2,
                                                                                                    'on'
                                                                                            ) @ #t0.1) ∧
                                                                                           (!KU( k2 ) @ #t1.2)
                                                                                          ∧
                                                                                           (¬(last(#t0.1))) ∧
                                                                                           (¬(last(#t1.2))) ∧
                                                                                           ((((#t1.2 < #t0) ∧
                                                                                              (#t0.1 < #t0)) ∨
                                                                                             ((#t1.2 < #t1.1) ∧
                                                                                              (#t0.1 < #t1.1)))))  ∥
                                                                                         (∃ #t0.1 #t1.2 h1 h2
                                                                                            k.
                                                                                           (UnwrapKey( h2, k,
                                                                                                       'on'
                                                                                            ) @ #t0.1) ∧
                                                                                           (EncKey( h1, k,
                                                                                                    'on'
                                                                                            ) @ #t1.2)
                                                                                          ∧
                                                                                           (¬(last(#t1.2))) ∧
                                                                                           (¬(last(#t0.1))) ∧
                                                                                           ((((#t0.1 < #t1.1) ∧
                                                                                              (#t1.2 < #t1.1)) ∨
                                                                                             ((#t0.1 < #t0) ∧
                                                                                              (#t1.2 < #t0))))) )
                                                                                    case case_1
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  next
                                                                                    case case_2
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case case_4
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    next
                                                                      case case_2
                                                                      solve( Insert( <'F_template', z.2>,
                                                                                     <'off', 'off', 'on', 
                                                                                      'on', 'on', 'on', 
                                                                                      'off', 'on', 'undef', 
                                                                                      'undef'>
                                                                             ) @ #t2.10 )
                                                                        case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                        solve( (#t2.1 < #t2.9)  ∥
                                                                               (#t2.1 = #t2.9) )
                                                                          case case_1
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_2
                                                                          solve( State_111112111111111111111( L_h.1,
                                                                                                              atts,
                                                                                                              h2,
                                                                                                              k.1,
                                                                                                              m,
                                                                                                              ut,
                                                                                                              v,
                                                                                                              ~n.10
                                                                                 ) ▶₀ #t2.8 )
                                                                            case outh_0_11111211111111111111
                                                                            solve( (∃ h1 #t1.
                                                                                     (NewKey( h1, m, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     #t1 < #vr.82)  ∥
                                                                                   (∃ L_h k2 #t1 #t0.
                                                                                     (NewKey( L_h, k2, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (!KU( k2 ) @ #t1)
                                                                                    ∧
                                                                                     (#t1 < #vr.82) ∧
                                                                                     (#t0 < #vr.82))  ∥
                                                                                   (∃ #t0 #t1 h1 h2 k.
                                                                                     (WrapKey( h2, k, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (DecKey( h1, k, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     (#t0 < #vr.82) ∧
                                                                                     (#t1 < #vr.82))  ∥
                                                                                   (∃ #t0 #t1 h1 h2 k.
                                                                                     (UnwrapKey( h2, k, 'on'
                                                                                      ) @ #t0) ∧
                                                                                     (EncKey( h1, k, 'on'
                                                                                      ) @ #t1)
                                                                                    ∧
                                                                                     (#t0 < #vr.82) ∧
                                                                                     (#t1 < #vr.82)) )
                                                                              case case_1
                                                                              solve( (#t2.10 < #t2.12)  ∥
                                                                                     (#t2.10 = #t2.12) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (#t2.1 < #t2.11)  ∥
                                                                                       (#t2.1 = #t2.11) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( State_111111111111111( h1,
                                                                                                                <
                                                                                                                 x, 
                                                                                                                 x.1, 
                                                                                                                 x.2, 
                                                                                                                 x.3, 
                                                                                                                 'on', 
                                                                                                                 x.4, 
                                                                                                                 x.5, 
                                                                                                                 x.6, 
                                                                                                                 x.7, 
                                                                                                                 x.8
                                                                                                                >,
                                                                                                                m,
                                                                                                                lock,
                                                                                                                ptr,
                                                                                                                templ
                                                                                         ) ▶₀ #t1.1 )
                                                                                    case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                                    by contradiction
                                                                                       /* impossible chain */
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case case_2
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            next
                                                                              case case_3
                                                                              solve( (#t2.10 < #t2.12)  ∥
                                                                                     (#t2.10 = #t2.12) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (#t2.1 < #t2.11)  ∥
                                                                                       (#t2.1 = #t2.11) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  solve( (∃ L_h k2 #t1.2
                                                                                            #t0.1.
                                                                                           (NewKey( L_h, k2,
                                                                                                    'on'
                                                                                            ) @ #t0.1) ∧
                                                                                           (!KU( k2 ) @ #t1.2)
                                                                                          ∧
                                                                                           (¬(last(#t0.1))) ∧
                                                                                           (¬(last(#t1.2))) ∧
                                                                                           ((((#t1.2 < #t0) ∧
                                                                                              (#t0.1 < #t0)) ∨
                                                                                             ((#t1.2 < #t1.1) ∧
                                                                                              (#t0.1 < #t1.1)))))  ∥
                                                                                         (∃ #t0.1 #t1.2 h1 h2
                                                                                            k.
                                                                                           (UnwrapKey( h2, k,
                                                                                                       'on'
                                                                                            ) @ #t0.1) ∧
                                                                                           (EncKey( h1, k,
                                                                                                    'on'
                                                                                            ) @ #t1.2)
                                                                                          ∧
                                                                                           (¬(last(#t1.2))) ∧
                                                                                           (¬(last(#t0.1))) ∧
                                                                                           ((((#t0.1 < #t1.1) ∧
                                                                                              (#t1.2 < #t1.1)) ∨
                                                                                             ((#t0.1 < #t0) ∧
                                                                                              (#t1.2 < #t0))))) )
                                                                                    case case_1
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  next
                                                                                    case case_2
                                                                                    by contradiction
                                                                                       /* from formulas */
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case case_4
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  next
                                                                    case case_2
                                                                    solve( Insert( <'F_template', z.2>,
                                                                                   <'off', 'off', 'on', 'on', 
                                                                                    'on', 'on', 'off', 'on', 
                                                                                    'undef', 'undef'>
                                                                           ) @ #t2.10 )
                                                                      case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                      solve( (#t2.1 < #t2.9)  ∥
                                                                             (#t2.1 = #t2.9) )
                                                                        case case_1
                                                                        by contradiction /* from formulas */
                                                                      next
                                                                        case case_2
                                                                        solve( State_111112111111111111111( L_h.1,
                                                                                                            atts,
                                                                                                            h2,
                                                                                                            k.1,
                                                                                                            m,
                                                                                                            ut,
                                                                                                            v,
                                                                                                            ~n.10
                                                                               ) ▶₀ #t2.8 )
                                                                          case outh_0_11111211111111111111
                                                                          solve( (∃ h1 #t1.
                                                                                   (NewKey( h1, m, 'on'
                                                                                    ) @ #t1)
                                                                                  ∧
                                                                                   #t1 < #vr.82)  ∥
                                                                                 (∃ L_h k2 #t1 #t0.
                                                                                   (NewKey( L_h, k2, 'on'
                                                                                    ) @ #t0) ∧
                                                                                   (!KU( k2 ) @ #t1)
                                                                                  ∧
                                                                                   (#t1 < #vr.82) ∧
                                                                                   (#t0 < #vr.82))  ∥
                                                                                 (∃ #t0 #t1 h1 h2 k.
                                                                                   (WrapKey( h2, k, 'on'
                                                                                    ) @ #t0) ∧
                                                                                   (DecKey( h1, k, 'on'
                                                                                    ) @ #t1)
                                                                                  ∧
                                                                                   (#t0 < #vr.82) ∧
                                                                                   (#t1 < #vr.82))  ∥
                                                                                 (∃ #t0 #t1 h1 h2 k.
                                                                                   (UnwrapKey( h2, k, 'on'
                                                                                    ) @ #t0) ∧
                                                                                   (EncKey( h1, k, 'on'
                                                                                    ) @ #t1)
                                                                                  ∧
                                                                                   (#t0 < #vr.82) ∧
                                                                                   (#t1 < #vr.82)) )
                                                                            case case_1
                                                                            solve( (#t2.10 < #t2.12)  ∥
                                                                                   (#t2.10 = #t2.12) )
                                                                              case case_1
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            next
                                                                              case case_2
                                                                              solve( (#t2.1 < #t2.11)  ∥
                                                                                     (#t2.1 = #t2.11) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( State_111111111111111( h1,
                                                                                                              <
                                                                                                               x, 
                                                                                                               x.1, 
                                                                                                               x.2, 
                                                                                                               x.3, 
                                                                                                               'on', 
                                                                                                               x.4, 
                                                                                                               x.5, 
                                                                                                               x.6, 
                                                                                                               x.7, 
                                                                                                               x.8
                                                                                                              >,
                                                                                                              m,
                                                                                                              lock,
                                                                                                              ptr,
                                                                                                              templ
                                                                                       ) ▶₀ #t1.1 )
                                                                                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                                  by contradiction
                                                                                     /* impossible chain */
                                                                                qed
                                                                              qed
                                                                            qed
                                                                          next
                                                                            case case_2
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          next
                                                                            case case_3
                                                                            solve( (#t2.10 < #t2.12)  ∥
                                                                                   (#t2.10 = #t2.12) )
                                                                              case case_1
                                                                              by contradiction
                                                                                 /* from formulas */
                                                                            next
                                                                              case case_2
                                                                              solve( (#t2.1 < #t2.11)  ∥
                                                                                     (#t2.1 = #t2.11) )
                                                                                case case_1
                                                                                by contradiction
                                                                                   /* from formulas */
                                                                              next
                                                                                case case_2
                                                                                solve( (∃ L_h k2 #t1.2 #t0.1.
                                                                                         (NewKey( L_h, k2,
                                                                                                  'on'
                                                                                          ) @ #t0.1) ∧
                                                                                         (!KU( k2 ) @ #t1.2)
                                                                                        ∧
                                                                                         (¬(last(#t0.1))) ∧
                                                                                         (¬(last(#t1.2))) ∧
                                                                                         ((((#t1.2 < #t0) ∧
                                                                                            (#t0.1 < #t0)) ∨
                                                                                           ((#t1.2 < #t1.1) ∧
                                                                                            (#t0.1 < #t1.1)))))  ∥
                                                                                       (∃ #t0.1 #t1.2 h1 h2 k.
                                                                                         (UnwrapKey( h2, k,
                                                                                                     'on'
                                                                                          ) @ #t0.1) ∧
                                                                                         (EncKey( h1, k, 'on'
                                                                                          ) @ #t1.2)
                                                                                        ∧
                                                                                         (¬(last(#t1.2))) ∧
                                                                                         (¬(last(#t0.1))) ∧
                                                                                         ((((#t0.1 < #t1.1) ∧
                                                                                            (#t1.2 < #t1.1)) ∨
                                                                                           ((#t0.1 < #t0) ∧
                                                                                            (#t1.2 < #t0))))) )
                                                                                  case case_1
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                next
                                                                                  case case_2
                                                                                  by contradiction
                                                                                     /* from formulas */
                                                                                qed
                                                                              qed
                                                                            qed
                                                                          next
                                                                            case case_4
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          solve( State_1111111111111111111111( L_h, atts, k,
                                                                                               ~n.8, ptr,
                                                                                               templ
                                                                 ) ▶₀ #t2.6 )
                                                            case outLh_0_111111111111111111111
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( Insert( <'obj', h2>,
                                                                       <z, 'off', 'off', 'on', 'on', 'on', 
                                                                        'on', 'off', 'on', 'undef', 'undef'>
                                                               ) @ #t2.6 )
                                                          case insertobjLhkatts_0_1111111111111111
                                                          solve( State_1111111111111111( h2,
                                                                                         <'off', 'off', 'on', 
                                                                                          'on', 'on', 'on', 
                                                                                          'off', 'on', 
                                                                                          'undef', 'undef'>,
                                                                                         z, lock, ptr, templ
                                                                 ) ▶₀ #t2.6 )
                                                            case eventNewKeyLhkattsensatts_0_111111111111111
                                                            by contradiction /* impossible chain */
                                                          qed
                                                        next
                                                          case insertobjhmatts_0_11111211111111
                                                          solve( State_11111211111111( L_h,
                                                                                       <'off', 'off', 'on', 
                                                                                        'on', 'on', 'on', 
                                                                                        'off', 'on', 'undef', 
                                                                                        'undef'>,
                                                                                       h2, k, z, ut, v, lock
                                                                 ) ▶₀ #t2.6 )
                                                            case newh_0_1111121111111
                                                            solve( (#vr.53 < #vr.21)  ∥ (#t2.2 < #vr.53) )
                                                              case case_1
                                                              solve( Insert( <'F_template', z.2>,
                                                                             <'off', 'off', 'on', 'on', 'on', 
                                                                              'on', 'off', 'on', 'undef', 
                                                                              'undef'>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                                  case case_1
                                                                  by contradiction /* from formulas */
                                                                next
                                                                  case case_2
                                                                  solve( State_111112111111111111111( L_h.1,
                                                                                                      atts,
                                                                                                      h2, k.1,
                                                                                                      m, ut,
                                                                                                      v, ~n.7
                                                                         ) ▶₀ #t2.7 )
                                                                    case outh_0_11111211111111111111
                                                                    solve( (∃ h1 #t1.
                                                                             (NewKey( h1, m, 'on' ) @ #t1)
                                                                            ∧
                                                                             #t1 < #vr.63)  ∥
                                                                           (∃ L_h k2 #t1 #t0.
                                                                             (NewKey( L_h, k2, 'on' ) @ #t0) ∧
                                                                             (!KU( k2 ) @ #t1)
                                                                            ∧
                                                                             (#t1 < #vr.63) ∧
                                                                             (#t0 < #vr.63))  ∥
                                                                           (∃ #t0 #t1 h1 h2 k.
                                                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                                             (DecKey( h1, k, 'on' ) @ #t1)
                                                                            ∧
                                                                             (#t0 < #vr.63) ∧
                                                                             (#t1 < #vr.63))  ∥
                                                                           (∃ #t0 #t1 h1 h2 k.
                                                                             (UnwrapKey( h2, k, 'on'
                                                                              ) @ #t0) ∧
                                                                             (EncKey( h1, k, 'on' ) @ #t1)
                                                                            ∧
                                                                             (#t0 < #vr.63) ∧
                                                                             (#t1 < #vr.63)) )
                                                                      case case_1
                                                                      solve( (#t2.9 < #t2.11)  ∥
                                                                             (#t2.9 = #t2.11) )
                                                                        case case_1
                                                                        by contradiction /* from formulas */
                                                                      next
                                                                        case case_2
                                                                        solve( (#t2.1 < #t2.10)  ∥
                                                                               (#t2.1 = #t2.10) )
                                                                          case case_1
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_2
                                                                          solve( State_111111111111111( h1,
                                                                                                        <x, 
                                                                                                         x.1, 
                                                                                                         x.2, 
                                                                                                         x.3, 
                                                                                                         'on', 
                                                                                                         x.4, 
                                                                                                         x.5, 
                                                                                                         x.6, 
                                                                                                         x.7, 
                                                                                                         x.8>,
                                                                                                        m,
                                                                                                        lock,
                                                                                                        ptr,
                                                                                                        templ
                                                                                 ) ▶₀ #t1.1 )
                                                                            case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                            by contradiction
                                                                               /* impossible chain */
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    next
                                                                      case case_2
                                                                      by contradiction /* from formulas */
                                                                    next
                                                                      case case_3
                                                                      solve( (#t2.9 < #t2.11)  ∥
                                                                             (#t2.9 = #t2.11) )
                                                                        case case_1
                                                                        by contradiction /* from formulas */
                                                                      next
                                                                        case case_2
                                                                        solve( (#t2.1 < #t2.10)  ∥
                                                                               (#t2.1 = #t2.10) )
                                                                          case case_1
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_2
                                                                          solve( (∃ L_h k2 #t1.2 #t0.1.
                                                                                   (NewKey( L_h, k2, 'on'
                                                                                    ) @ #t0.1) ∧
                                                                                   (!KU( k2 ) @ #t1.2)
                                                                                  ∧
                                                                                   (¬(last(#t0.1))) ∧
                                                                                   (¬(last(#t1.2))) ∧
                                                                                   ((((#t1.2 < #t0) ∧
                                                                                      (#t0.1 < #t0)) ∨
                                                                                     ((#t1.2 < #t1.1) ∧
                                                                                      (#t0.1 < #t1.1)))))  ∥
                                                                                 (∃ #t0.1 #t1.2 h1 h2 k.
                                                                                   (UnwrapKey( h2, k, 'on'
                                                                                    ) @ #t0.1) ∧
                                                                                   (EncKey( h1, k, 'on'
                                                                                    ) @ #t1.2)
                                                                                  ∧
                                                                                   (¬(last(#t1.2))) ∧
                                                                                   (¬(last(#t0.1))) ∧
                                                                                   ((((#t0.1 < #t1.1) ∧
                                                                                      (#t1.2 < #t1.1)) ∨
                                                                                     ((#t0.1 < #t0) ∧
                                                                                      (#t1.2 < #t0))))) )
                                                                            case case_1
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          next
                                                                            case case_2
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    next
                                                                      case case_4
                                                                      by contradiction /* from formulas */
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( Insert( <'F_template', z.2>,
                                                                             <'off', 'off', 'on', 'on', 'on', 
                                                                              'on', 'off', 'on', 'undef', 
                                                                              'undef'>
                                                                     ) @ #t2.9 )
                                                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                                                solve( (#t2.1 < #t2.8)  ∥ (#t2.1 = #t2.8) )
                                                                  case case_1
                                                                  by contradiction /* from formulas */
                                                                next
                                                                  case case_2
                                                                  solve( State_111112111111111111111( L_h.1,
                                                                                                      atts,
                                                                                                      h2, k.1,
                                                                                                      m, ut,
                                                                                                      v, ~n.7
                                                                         ) ▶₀ #t2.7 )
                                                                    case outh_0_11111211111111111111
                                                                    solve( (∃ h1 #t1.
                                                                             (NewKey( h1, m, 'on' ) @ #t1)
                                                                            ∧
                                                                             #t1 < #vr.63)  ∥
                                                                           (∃ L_h k2 #t1 #t0.
                                                                             (NewKey( L_h, k2, 'on' ) @ #t0) ∧
                                                                             (!KU( k2 ) @ #t1)
                                                                            ∧
                                                                             (#t1 < #vr.63) ∧
                                                                             (#t0 < #vr.63))  ∥
                                                                           (∃ #t0 #t1 h1 h2 k.
                                                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧
                                                                             (DecKey( h1, k, 'on' ) @ #t1)
                                                                            ∧
                                                                             (#t0 < #vr.63) ∧
                                                                             (#t1 < #vr.63))  ∥
                                                                           (∃ #t0 #t1 h1 h2 k.
                                                                             (UnwrapKey( h2, k, 'on'
                                                                              ) @ #t0) ∧
                                                                             (EncKey( h1, k, 'on' ) @ #t1)
                                                                            ∧
                                                                             (#t0 < #vr.63) ∧
                                                                             (#t1 < #vr.63)) )
                                                                      case case_1
                                                                      solve( (#t2.9 < #t2.11)  ∥
                                                                             (#t2.9 = #t2.11) )
                                                                        case case_1
                                                                        by contradiction /* from formulas */
                                                                      next
                                                                        case case_2
                                                                        solve( (#t2.1 < #t2.10)  ∥
                                                                               (#t2.1 = #t2.10) )
                                                                          case case_1
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_2
                                                                          solve( State_111111111111111( h1,
                                                                                                        <x, 
                                                                                                         x.1, 
                                                                                                         x.2, 
                                                                                                         x.3, 
                                                                                                         'on', 
                                                                                                         x.4, 
                                                                                                         x.5, 
                                                                                                         x.6, 
                                                                                                         x.7, 
                                                                                                         x.8>,
                                                                                                        m,
                                                                                                        lock,
                                                                                                        ptr,
                                                                                                        templ
                                                                                 ) ▶₀ #t1.1 )
                                                                            case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                                                            by contradiction
                                                                               /* impossible chain */
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    next
                                                                      case case_2
                                                                      by contradiction /* from formulas */
                                                                    next
                                                                      case case_3
                                                                      solve( (#t2.9 < #t2.11)  ∥
                                                                             (#t2.9 = #t2.11) )
                                                                        case case_1
                                                                        by contradiction /* from formulas */
                                                                      next
                                                                        case case_2
                                                                        solve( (#t2.1 < #t2.10)  ∥
                                                                               (#t2.1 = #t2.10) )
                                                                          case case_1
                                                                          by contradiction /* from formulas */
                                                                        next
                                                                          case case_2
                                                                          solve( (∃ L_h k2 #t1.2 #t0.1.
                                                                                   (NewKey( L_h, k2, 'on'
                                                                                    ) @ #t0.1) ∧
                                                                                   (!KU( k2 ) @ #t1.2)
                                                                                  ∧
                                                                                   (¬(last(#t0.1))) ∧
                                                                                   (¬(last(#t1.2))) ∧
                                                                                   ((((#t1.2 < #t0) ∧
                                                                                      (#t0.1 < #t0)) ∨
                                                                                     ((#t1.2 < #t1.1) ∧
                                                                                      (#t0.1 < #t1.1)))))  ∥
                                                                                 (∃ #t0.1 #t1.2 h1 h2 k.
                                                                                   (UnwrapKey( h2, k, 'on'
                                                                                    ) @ #t0.1) ∧
                                                                                   (EncKey( h1, k, 'on'
                                                                                    ) @ #t1.2)
                                                                                  ∧
                                                                                   (¬(last(#t1.2))) ∧
                                                                                   (¬(last(#t0.1))) ∧
                                                                                   ((((#t0.1 < #t1.1) ∧
                                                                                      (#t1.2 < #t1.1)) ∨
                                                                                     ((#t0.1 < #t0) ∧
                                                                                      (#t1.2 < #t0))))) )
                                                                            case case_1
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          next
                                                                            case case_2
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    next
                                                                      case case_4
                                                                      by contradiction /* from formulas */
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case insertobjhmatts_0_11111211111111
                                                  solve( State_11111211111111( L_h.1,
                                                                               <x, 'on', x.1, x.2, x.3, x.4, 
                                                                                x.5, x.6, x.7, 'usage'>,
                                                                               L_h, k.1, k, ut, v, lock
                                                         ) ▶₀ #t2.5 )
                                                    case newh_0_1111121111111
                                                    solve( (#vr.54 < #vr.21)  ∥ (#t2.2 < #vr.54) )
                                                      case case_1
                                                      solve( Insert( <'F_template', z.2>,
                                                                     <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, 
                                                                      x.7, 'usage'>
                                                             ) @ #t2.9 )
                                                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( (#vr.54 < #vr.42)  ∥ (#t2.4 < #vr.54) )
                                                        case case_1
                                                        solve( Insert( <'F_template', z.2>,
                                                                       <x, 'on', x.1, x.2, x.3, x.4, x.5, 
                                                                        x.6, x.7, 'usage'>
                                                               ) @ #t2.9 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( Insert( <'F_template', z.2>,
                                                                       <x, 'on', x.1, x.2, x.3, x.4, x.5, 
                                                                        x.6, x.7, 'usage'>
                                                               ) @ #t2.9 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case outsencmkeyv_0_1111111211111
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          next
                            case eventWrapKeyhmattwrapatts_0_1111121111111111
                            solve( State_1111121111111111( L_h.1,
                                                           <'on', x.8, x.9, x.10, x.11, x.12, x.13, x.14, 
                                                            x.15, x.16>,
                                                           h2, k.1, ~n.1, ut, v, lock
                                   ) ▶₀ #t3 )
                              case eventUnwrappedhmatts_0_111112111111111
                              solve( (∃ h1 #t1. (NewKey( h1, ~n.1, 'on' ) @ #t1) ∧ #t1 < #vr.35)  ∥
                                     (∃ L_h k2 #t1 #t0.
                                       (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                      ∧
                                       (#t1 < #vr.35) ∧ (#t0 < #vr.35))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                                      ∧
                                       (#t0 < #vr.35) ∧ (#t1 < #vr.35))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                      ∧
                                       (#t0 < #vr.35) ∧ (#t1 < #vr.35)) )
                                case case_1
                                solve( ((#vr.9 < #vr.43) ∧
                                        (∃ #t2.
                                          (Unlock_4( '4', ~n.4, 'device' ) @ #t2)
                                         ∧
                                          (#vr.9 < #t2) ∧
                                          (#t2 < #vr.43) ∧
                                          (∀ #t0 pp. (Unlock( pp, ~n.4, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                                          (∀ pp lpp #t0.
                                            (Lock( pp, lpp, 'device' ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                          (∀ pp lpp #t0.
                                            (Unlock( pp, lpp, 'device' ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                       (#vr.43 < #vr.9) )
                                  case case_1
                                  solve( Insert( <'F_template', z>,
                                                 <'on', x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16>
                                         ) @ #t2.6 )
                                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case case_2
                                  solve( Insert( <'F_template', z>,
                                                 <'on', x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16>
                                         ) @ #t2.6 )
                                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                solve( ((#vr.9 < #vr.43) ∧
                                        (∃ #t2.
                                          (Unlock_4( '4', ~n.4, 'device' ) @ #t2)
                                         ∧
                                          (#vr.9 < #t2) ∧
                                          (#t2 < #vr.43) ∧
                                          (∀ #t0 pp. (Unlock( pp, ~n.4, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                                          (∀ pp lpp #t0.
                                            (Lock( pp, lpp, 'device' ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                          (∀ pp lpp #t0.
                                            (Unlock( pp, lpp, 'device' ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                       (#vr.43 < #vr.9) )
                                  case case_1
                                  solve( (∃ L_h k2 #t1.2 #t0.1.
                                           (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.2)
                                          ∧
                                           (¬(last(#t0.1))) ∧
                                           (¬(last(#t1.2))) ∧
                                           ((((#t1.2 < #t0) ∧ (#t0.1 < #t0)) ∨
                                             ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1)))))  ∥
                                         (∃ #t0.1 #t1.2 h1 h2 k.
                                           (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                           (EncKey( h1, k, 'on' ) @ #t1.2)
                                          ∧
                                           (¬(last(#t1.2))) ∧
                                           (¬(last(#t0.1))) ∧
                                           ((((#t0.1 < #t1.1) ∧ (#t1.2 < #t1.1)) ∨
                                             ((#t0.1 < #t0) ∧ (#t1.2 < #t0))))) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case case_2
                                  solve( (∃ L_h k2 #t1.2 #t0.1.
                                           (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.2)
                                          ∧
                                           (¬(last(#t0.1))) ∧
                                           (¬(last(#t1.2))) ∧
                                           ((((#t1.2 < #t0) ∧ (#t0.1 < #t0)) ∨
                                             ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1)))))  ∥
                                         (∃ #t0.1 #t1.2 h1 h2 k.
                                           (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                           (EncKey( h1, k, 'on' ) @ #t1.2)
                                          ∧
                                           (¬(last(#t1.2))) ∧
                                           (¬(last(#t0.1))) ∧
                                           ((((#t0.1 < #t1.1) ∧ (#t1.2 < #t1.1)) ∨
                                             ((#t0.1 < #t0) ∧ (#t1.2 < #t0))))) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              next
                                case case_4
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case insertFtemplateusageoffoffononononoffonundefundef_0_1
                    solve( (#t2.3 < #t2.1)  ∥ (#t2.3 = #t2.1)  ∥ (#vr.5 < #t2.3) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        solve( (#t2.1 < #t2.4)  ∥ (#t2.1 = #t2.4) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (last(#t3))  ∥
                                 (∃ L_h k2 #t1 #t0.
                                   (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (¬(last(#t0))) ∧
                                   (¬(last(#t1))) ∧
                                   ((((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #vr.33) ∧ (#t0 < #vr.33)))))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧
                                   (¬(last(#t0))) ∧
                                   ((((#t0 < #vr.33) ∧ (#t1 < #vr.33)) ∨ ((#t0 < #t3) ∧ (#t1 < #t3))))) )
                            case case_1
                            by solve( WrapKey( h2, ~n.1, 'on' ) @ #t2 )
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_3
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            solve( (∃ L_h k2 #t1.1 #t0.1.
                     (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                    ∧
                     (¬(last(#t0.1))) ∧
                     (¬(last(#t1.1))) ∧
                     ((((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1)))))  ∥
                   (∃ #t0.1 #t1.1 h1 h2 k.
                     (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                    ∧
                     (¬(last(#t1.1))) ∧
                     (¬(last(#t0.1))) ∧
                     ((((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0))))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_4
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_3
      solve( ((#t1 < #t3) ∧ (#t0 < #t3))  ∥ ((#t1 < #t2) ∧ (#t0 < #t2)) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_4
      solve( ((#t0 < #t2) ∧ (#t1 < #t2))  ∥ ((#t0 < #t3) ∧ (#t1 < #t3)) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_2
    solve( (#t1 = #t2)  ∥ (#t2 < #t1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_0( '0', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_4
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_1( '1', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_5
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_2( '2', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_6
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_3( '3', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_7
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_4( '4', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_8
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_5( '5', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma no_key_is_enc_and_unwrap [use_induction, reuse]:
  all-traces
  "∀ #t2 #t3 h1 h2 k.
    ((EncKey( h1, k, 'on' ) @ #t2) ∧ (UnwrapKey( h2, k, 'on' ) @ #t3)) ⇒
    (∃ L_h k2 #t1 #t0.
      ((NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)) ∧
      (((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))"
/*
guarded formula characterizing all counter-examples:
"∃ #t2 #t3 h1 h2 k.
  (EncKey( h1, k, 'on' ) @ #t2) ∧ (UnwrapKey( h2, k, 'on' ) @ #t3)
 ∧
  ∀ L_h k2 #t1 #t0.
   (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
  ⇒
   (((¬(#t1 < #t3)) ∨ (¬(#t0 < #t3)))) ∧
   (((¬(#t1 < #t2)) ∨ (¬(#t0 < #t2))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ #t2 #t3 h1 h2 k.
           (EncKey( h1, k, 'on' ) @ #t2) ∧ (UnwrapKey( h2, k, 'on' ) @ #t3)
          ⇒
           ((last(#t3)) ∨
            (last(#t2)) ∨
            (∃ L_h k2 #t1 #t0.
              (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
             ∧
              (¬(last(#t0))) ∧
              (¬(last(#t1))) ∧
              ((((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2)))))))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t1 yp.
                (Insert( x, yp ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (¬(#t1 = #t2)) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_0( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_1( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_2( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_3( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_4( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_5( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3))) )
    case case_1
    solve( (last(#t3))  ∥ (last(#t2))  ∥
           (∃ L_h k2 #t1 #t0.
             (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (¬(last(#t0))) ∧
             (¬(last(#t1))) ∧
             ((((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))) )
      case case_1
      solve( EncKey( h1, k, 'on' ) @ #t2 )
        case eventEncKeyLhkattencatts_0_1111111111111111111
        solve( State_1111111111111111111( h1,
                                          <x, x.1, 'on', x.2, x.3, x.4, x.5, x.6, x.7, x.8>, k, lock, ptr,
                                          templ
               ) ▶₀ #t2 )
          case eventDecKeyLhkattdecatts_0_111111111111111111
          solve( Insert( <'F_template', ptr>,
                         <x, x.1, 'on', x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                 ) @ #t2.1 )
            case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
            solve( (#vr.17 < #t2.1)  ∥ (#vr.17 = #t2.1) )
              case case_1
              solve( State_11( ) ▶₀ #t2.1 )
                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( UnwrapKey( h2, ~n.1, 'on' ) @ #t3 )
                case eventUnwrapKeyLhkattunwrapatts_0_11111111111111111111
                by solve( State_11111111111111111111( h2,
                                                      <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, ~n.1,
                                                      lock, ptr, templ
                          ) ▶₀ #t3 )
              next
                case eventUnwrapKeyhmattunwrapatts_0_1111121111111111111
                solve( State_1111121111111111111( L_h,
                                                  <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, h2, k,
                                                  ~n.1, ut, v, lock
                       ) ▶₀ #t3 )
                  case eventEncKeyhmattencatts_0_111112111111111111
                  solve( (∃ h1 #t1. (NewKey( h1, ~n.1, 'on' ) @ #t1) ∧ #t1 < #vr.23)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #vr.23) ∧ (#t0 < #vr.23))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.23) ∧ (#t1 < #vr.23))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.23) ∧ (#t1 < #vr.23)) )
                    case case_1
                    solve( Insert( <'F_template', z>,
                                   <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                           ) @ #t2.3 )
                      case insertFtemplatetrustedononoffoffononononusageusage_0_
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( ((#t0.1 < #t1) ∧ (#t1.1 < #t1))  ∥
                             ((#t0.1 < #t0) ∧ (#t1.1 < #t0)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case insertFtemplateusageoffoffononononoffonundefundef_0_1
            solve( (#vr.18 < #t2.1)  ∥ (#vr.18 = #t2.1) )
              case case_1
              solve( State_1( ) ▶₀ #t2.1 )
                case insertFtemplatetrustedononoffoffononononusageusage_0_
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( UnwrapKey( h2, ~n.1, 'on' ) @ #t3 )
                case eventUnwrapKeyLhkattunwrapatts_0_11111111111111111111
                by solve( State_11111111111111111111( h2,
                                                      <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, ~n.1,
                                                      lock, ptr, templ
                          ) ▶₀ #t3 )
              next
                case eventUnwrapKeyhmattunwrapatts_0_1111121111111111111
                solve( State_1111121111111111111( L_h,
                                                  <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, h2, k,
                                                  ~n.1, ut, v, lock
                       ) ▶₀ #t3 )
                  case eventEncKeyhmattencatts_0_111112111111111111
                  solve( (∃ h1 #t1. (NewKey( h1, ~n.1, 'on' ) @ #t1) ∧ #t1 < #vr.23)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #vr.23) ∧ (#t0 < #vr.23))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.23) ∧ (#t1 < #vr.23))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.23) ∧ (#t1 < #vr.23)) )
                    case case_1
                    solve( Insert( <'F_template', z>,
                                   <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                           ) @ #t2.3 )
                      case insertFtemplatetrustedononoffoffononononusageusage_0_
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( ((#t0.1 < #t1) ∧ (#t1.1 < #t1))  ∥
                             ((#t0.1 < #t0) ∧ (#t1.1 < #t0)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case eventEncKeyhmattencatts_0_111112111111111111
        solve( State_111112111111111111( L_h,
                                         <x, x.1, 'on', x.2, x.3, x.4, x.5, x.6, x.7, x.8>, h1, k, k.1, ut, v,
                                         lock
               ) ▶₀ #t2 )
          case eventDecKeyhmattdecatts_0_11111211111111111
          solve( (∃ h1 #t1. (NewKey( h1, k.1, 'on' ) @ #t1) ∧ #t1 < #vr.2)  ∥
                 (∃ L_h k2 #t1 #t0.
                   (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (#t1 < #vr.2) ∧ (#t0 < #vr.2))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (#t0 < #vr.2) ∧ (#t1 < #vr.2))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (#t0 < #vr.2) ∧ (#t1 < #vr.2)) )
            case case_1
            solve( Insert( <'F_template', z>,
                           <x, x.1, 'on', x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                   ) @ #t2.1 )
              case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
              by contradiction /* from formulas */
            next
              case insertFtemplateusageoffoffononononoffonundefundef_0_1
              solve( (#vr.17 < #t2.1)  ∥ (#vr.17 = #t2.1) )
                case case_1
                solve( State_111111111111111( h1,
                                              <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>, k, lock, ptr,
                                              templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  solve( Insert( <'F_template', ptr>,
                                 <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>
                         ) @ #t2.4 )
                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                    solve( (#vr.18 < #t2.3)  ∥ (#vr.18 = #t2.3) )
                      case case_1
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_2
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case insertFtemplateusageoffoffononononoffonundefundef_0_1
                    solve( (#t2.3 < #t2.1)  ∥ (#t2.3 = #t2.1)  ∥ (#vr.6 < #t2.3) )
                      case case_1
                      solve( (#vr.17 < #t2.3)  ∥ (#vr.17 = #t2.3) )
                        case case_1
                        solve( State_1( ) ▶₀ #t2.1 )
                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                          by contradiction /* cyclic */
                        qed
                      next
                        case case_2
                        solve( State_1( ) ▶₀ #t2.1 )
                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case case_2
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_3
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( State_111111111111111( h1,
                                              <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>, k, lock, ptr,
                                              templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  solve( Insert( <'F_template', ptr>,
                                 <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>
                         ) @ #t2.4 )
                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                    solve( (#vr.17 < #t2.3)  ∥ (#vr.17 = #t2.3) )
                      case case_1
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        solve( (#vr.17 < #t2.5)  ∥ (#vr.17 = #t2.5) )
                          case case_1
                          solve( (∃ L_h k2 #t1 #t0.
                                   (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (((#t1 < #vr.35) ∧ (#t0 < #vr.35)) ∨ ((#t1 < #vr) ∧ (#t0 < #vr))))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                  ∧
                                   (((#t0 < #vr) ∧ (#t1 < #vr)) ∨ ((#t0 < #vr.35) ∧ (#t1 < #vr.35)))) )
                            case case_1
                            solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              solve( (last(#t2))  ∥
                                     (∃ L_h k2 #t1 #t0.
                                       (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                      ∧
                                       (¬(last(#t0))) ∧
                                       (¬(last(#t1))) ∧
                                       ((((#t1 < #vr.32) ∧ (#t0 < #vr.32)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case case_2
                            solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              solve( (last(#t2))  ∥
                                     (∃ L_h k2 #t1 #t0.
                                       (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                      ∧
                                       (¬(last(#t0))) ∧
                                       (¬(last(#t1))) ∧
                                       ((((#t1 < #vr.32) ∧ (#t0 < #vr.32)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))) )
                                case case_1
                                solve( ((#t0 < #vr) ∧ (#t1.1 < #vr))  ∥
                                       ((#t0 < #vr.35) ∧ (#t1.1 < #vr.35)) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  by contradiction /* from formulas */
                                qed
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (∃ L_h k2 #t1 #t0.
                                   (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (((#t1 < #vr.34) ∧ (#t0 < #vr.34)) ∨ ((#t1 < #vr) ∧ (#t0 < #vr))))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                  ∧
                                   (((#t0 < #vr) ∧ (#t1 < #vr)) ∨ ((#t0 < #vr.34) ∧ (#t1 < #vr.34)))) )
                            case case_1
                            solve( (last(#t2))  ∥
                                   (∃ L_h k2 #t1 #t0.
                                     (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                    ∧
                                     (¬(last(#t0))) ∧
                                     (¬(last(#t1))) ∧
                                     ((((#t1 < #vr.31) ∧ (#t0 < #vr.31)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case case_2
                            solve( (last(#t2))  ∥
                                   (∃ L_h k2 #t1 #t0.
                                     (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                    ∧
                                     (¬(last(#t0))) ∧
                                     (¬(last(#t1))) ∧
                                     ((((#t1 < #vr.31) ∧ (#t0 < #vr.31)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))) )
                              case case_1
                              solve( ((#t0 < #vr) ∧ (#t1.1 < #vr))  ∥
                                     ((#t0 < #vr.34) ∧ (#t1.1 < #vr.34)) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case insertFtemplateusageoffoffononononoffonundefundef_0_1
                    solve( (#t2.3 < #t2.1)  ∥ (#t2.3 = #t2.1)  ∥ (#vr.6 < #t2.3) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        solve( (#t2.1 < #t2.4)  ∥ (#t2.1 = #t2.4) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( UnwrapKey( h2, ~n.1, 'on' ) @ #t3 )
                            case eventUnwrapKeyLhkattunwrapatts_0_11111111111111111111
                            by solve( State_11111111111111111111( h2,
                                                                  <x.8, 'on', x.9, x.10, x.11, x.12, x.13, 
                                                                   x.14, x.15, x.16>,
                                                                  ~n.1, lock, ptr, templ
                                      ) ▶₀ #t3 )
                          next
                            case eventUnwrapKeyhmattunwrapatts_0_1111121111111111111
                            solve( State_1111121111111111111( L_h.1,
                                                              <x.8, 'on', x.9, x.10, x.11, x.12, x.13, x.14, 
                                                               x.15, x.16>,
                                                              h2, k.1, ~n.1, ut, v, lock
                                   ) ▶₀ #t3 )
                              case eventEncKeyhmattencatts_0_111112111111111111
                              solve( (∃ h1 #t1. (NewKey( h1, ~n.1, 'on' ) @ #t1) ∧ #t1 < #vr.40)  ∥
                                     (∃ L_h k2 #t1 #t0.
                                       (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                      ∧
                                       (#t1 < #vr.40) ∧ (#t0 < #vr.40))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                                      ∧
                                       (#t0 < #vr.40) ∧ (#t1 < #vr.40))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                      ∧
                                       (#t0 < #vr.40) ∧ (#t1 < #vr.40)) )
                                case case_1
                                solve( ((#vr.10 < #vr.48) ∧
                                        (∃ #t2.
                                          (Unlock_4( '4', ~n.4, 'device' ) @ #t2)
                                         ∧
                                          (#vr.10 < #t2) ∧
                                          (#t2 < #vr.48) ∧
                                          (∀ #t0 pp. (Unlock( pp, ~n.4, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                                          (∀ pp lpp #t0.
                                            (Lock( pp, lpp, 'device' ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.10) ∨ (#t0 = #vr.10) ∨ (#t2 < #t0))) ∧
                                          (∀ pp lpp #t0.
                                            (Unlock( pp, lpp, 'device' ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.10) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                       (#vr.48 < #vr.10) )
                                  case case_1
                                  solve( Insert( <'F_template', z>,
                                                 <x.8, 'on', x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16>
                                         ) @ #t2.5 )
                                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case case_2
                                  solve( Insert( <'F_template', z>,
                                                 <x.8, 'on', x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16>
                                         ) @ #t2.5 )
                                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                solve( ((#vr.10 < #vr.48) ∧
                                        (∃ #t2.
                                          (Unlock_4( '4', ~n.4, 'device' ) @ #t2)
                                         ∧
                                          (#vr.10 < #t2) ∧
                                          (#t2 < #vr.48) ∧
                                          (∀ #t0 pp. (Unlock( pp, ~n.4, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                                          (∀ pp lpp #t0.
                                            (Lock( pp, lpp, 'device' ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.10) ∨ (#t0 = #vr.10) ∨ (#t2 < #t0))) ∧
                                          (∀ pp lpp #t0.
                                            (Unlock( pp, lpp, 'device' ) @ #t0)
                                           ⇒
                                            ((#t0 < #vr.10) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                       (#vr.48 < #vr.10) )
                                  case case_1
                                  solve( (∃ L_h k2 #t1.2 #t0.1.
                                           (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.2)
                                          ∧
                                           (((#t1.2 < #t0) ∧ (#t0.1 < #t0)) ∨
                                            ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1))))  ∥
                                         (∃ #t0.1 #t1.2 h1 h2 k.
                                           (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                           (EncKey( h1, k, 'on' ) @ #t1.2)
                                          ∧
                                           (((#t0.1 < #t1.1) ∧ (#t1.2 < #t1.1)) ∨
                                            ((#t0.1 < #t0) ∧ (#t1.2 < #t0)))) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( ((#t0.1 < #t1.1) ∧ (#t1.2 < #t1.1))  ∥
                                           ((#t0.1 < #t0) ∧ (#t1.2 < #t0)) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                next
                                  case case_2
                                  solve( (∃ L_h k2 #t1.2 #t0.1.
                                           (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.2)
                                          ∧
                                           (((#t1.2 < #t0) ∧ (#t0.1 < #t0)) ∨
                                            ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1))))  ∥
                                         (∃ #t0.1 #t1.2 h1 h2 k.
                                           (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                           (EncKey( h1, k, 'on' ) @ #t1.2)
                                          ∧
                                           (((#t0.1 < #t1.1) ∧ (#t1.2 < #t1.1)) ∨
                                            ((#t0.1 < #t0) ∧ (#t1.2 < #t0)))) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( ((#t0.1 < #t1.1) ∧ (#t1.2 < #t1.1))  ∥
                                           ((#t0.1 < #t0) ∧ (#t1.2 < #t0)) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                qed
                              next
                                case case_4
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_3
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            solve( (∃ L_h k2 #t1.1 #t0.1.
                     (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                    ∧
                     (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                   (∃ #t0.1 #t1.1 h1 h2 k.
                     (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                    ∧
                     (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
              case case_1
              solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                     ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_2
              solve( ((#t0.1 < #t1) ∧ (#t1.1 < #t1))  ∥
                     ((#t0.1 < #t0) ∧ (#t1.1 < #t0)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_4
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      solve( EncKey( h1, k, 'on' ) @ #t2 )
        case eventEncKeyLhkattencatts_0_1111111111111111111
        solve( State_1111111111111111111( h1,
                                          <x, x.1, 'on', x.2, x.3, x.4, x.5, x.6, x.7, x.8>, k, lock, ptr,
                                          templ
               ) ▶₀ #t2 )
          case eventDecKeyLhkattdecatts_0_111111111111111111
          solve( Insert( <'F_template', ptr>,
                         <x, x.1, 'on', x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                 ) @ #t2.1 )
            case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
            solve( (#vr.17 < #t2.1)  ∥ (#vr.17 = #t2.1) )
              case case_1
              solve( State_11( ) ▶₀ #t2.1 )
                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( UnwrapKey( h2, ~n.1, 'on' ) @ #t3 )
                case eventUnwrapKeyLhkattunwrapatts_0_11111111111111111111
                by solve( State_11111111111111111111( h2,
                                                      <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, ~n.1,
                                                      lock, ptr, templ
                          ) ▶₀ #t3 )
              next
                case eventUnwrapKeyhmattunwrapatts_0_1111121111111111111
                solve( State_1111121111111111111( L_h,
                                                  <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, h2, k,
                                                  ~n.1, ut, v, lock
                       ) ▶₀ #t3 )
                  case eventEncKeyhmattencatts_0_111112111111111111
                  solve( (∃ h1 #t1. (NewKey( h1, ~n.1, 'on' ) @ #t1) ∧ #t1 < #vr.23)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #vr.23) ∧ (#t0 < #vr.23))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.23) ∧ (#t1 < #vr.23))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.23) ∧ (#t1 < #vr.23)) )
                    case case_1
                    solve( Insert( <'F_template', z>,
                                   <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                           ) @ #t2.3 )
                      case insertFtemplatetrustedononoffoffononononusageusage_0_
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( ((#t0.1 < #t1) ∧ (#t1.1 < #t1))  ∥
                             ((#t0.1 < #t0) ∧ (#t1.1 < #t0)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case insertFtemplateusageoffoffononononoffonundefundef_0_1
            solve( (#vr.18 < #t2.1)  ∥ (#vr.18 = #t2.1) )
              case case_1
              solve( State_1( ) ▶₀ #t2.1 )
                case insertFtemplatetrustedononoffoffononononusageusage_0_
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( UnwrapKey( h2, ~n.1, 'on' ) @ #t3 )
                case eventUnwrapKeyLhkattunwrapatts_0_11111111111111111111
                by solve( State_11111111111111111111( h2,
                                                      <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, ~n.1,
                                                      lock, ptr, templ
                          ) ▶₀ #t3 )
              next
                case eventUnwrapKeyhmattunwrapatts_0_1111121111111111111
                solve( State_1111121111111111111( L_h,
                                                  <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>, h2, k,
                                                  ~n.1, ut, v, lock
                       ) ▶₀ #t3 )
                  case eventEncKeyhmattencatts_0_111112111111111111
                  solve( (∃ h1 #t1. (NewKey( h1, ~n.1, 'on' ) @ #t1) ∧ #t1 < #vr.23)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #vr.23) ∧ (#t0 < #vr.23))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.23) ∧ (#t1 < #vr.23))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #vr.23) ∧ (#t1 < #vr.23)) )
                    case case_1
                    solve( Insert( <'F_template', z>,
                                   <x, 'on', x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                           ) @ #t2.3 )
                      case insertFtemplatetrustedononoffoffononononusageusage_0_
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( ((#t0.1 < #t1) ∧ (#t1.1 < #t1))  ∥
                             ((#t0.1 < #t0) ∧ (#t1.1 < #t0)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case eventEncKeyhmattencatts_0_111112111111111111
        solve( State_111112111111111111( L_h,
                                         <x, x.1, 'on', x.2, x.3, x.4, x.5, x.6, x.7, x.8>, h1, k, k.1, ut, v,
                                         lock
               ) ▶₀ #t2 )
          case eventDecKeyhmattdecatts_0_11111211111111111
          solve( (∃ h1 #t1. (NewKey( h1, k.1, 'on' ) @ #t1) ∧ #t1 < #vr.2)  ∥
                 (∃ L_h k2 #t1 #t0.
                   (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (#t1 < #vr.2) ∧ (#t0 < #vr.2))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (#t0 < #vr.2) ∧ (#t1 < #vr.2))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                  ∧
                   (#t0 < #vr.2) ∧ (#t1 < #vr.2)) )
            case case_1
            solve( Insert( <'F_template', z>,
                           <x, x.1, 'on', x.2, x.3, x.4, x.5, x.6, x.7, x.8>
                   ) @ #t2.1 )
              case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
              by contradiction /* from formulas */
            next
              case insertFtemplateusageoffoffononononoffonundefundef_0_1
              solve( (#vr.17 < #t2.1)  ∥ (#vr.17 = #t2.1) )
                case case_1
                solve( State_111111111111111( h1,
                                              <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>, k, lock, ptr,
                                              templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  solve( Insert( <'F_template', ptr>,
                                 <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>
                         ) @ #t2.4 )
                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                    solve( (#vr.18 < #t2.3)  ∥ (#vr.18 = #t2.3) )
                      case case_1
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_2
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case insertFtemplateusageoffoffononononoffonundefundef_0_1
                    solve( (#t2.3 < #t2.1)  ∥ (#t2.3 = #t2.1)  ∥ (#vr.6 < #t2.3) )
                      case case_1
                      solve( (#vr.17 < #t2.3)  ∥ (#vr.17 = #t2.3) )
                        case case_1
                        solve( State_1( ) ▶₀ #t2.1 )
                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                          by contradiction /* cyclic */
                        qed
                      next
                        case case_2
                        solve( State_1( ) ▶₀ #t2.1 )
                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case case_2
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_3
                      solve( State_1( ) ▶₀ #t2.1 )
                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( State_111111111111111( h1,
                                              <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>, k, lock, ptr,
                                              templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  solve( Insert( <'F_template', ptr>,
                                 <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>
                         ) @ #t2.4 )
                    case insertFtemplatetrustedononoffoffononononusageusage_0_
                    solve( (#vr.17 < #t2.3)  ∥ (#vr.17 = #t2.3) )
                      case case_1
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        solve( (#vr.17 < #t2.5)  ∥ (#vr.17 = #t2.5) )
                          case case_1
                          solve( (∃ L_h k2 #t1 #t0.
                                   (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (((#t1 < #vr.35) ∧ (#t0 < #vr.35)) ∨ ((#t1 < #vr) ∧ (#t0 < #vr))))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                  ∧
                                   (((#t0 < #vr) ∧ (#t1 < #vr)) ∨ ((#t0 < #vr.35) ∧ (#t1 < #vr.35)))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              solve( ((#t0 < #vr) ∧ (#t1.1 < #vr))  ∥
                                     ((#t0 < #vr.35) ∧ (#t1.1 < #vr.35)) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (∃ L_h k2 #t1 #t0.
                                   (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (((#t1 < #vr.34) ∧ (#t0 < #vr.34)) ∨ ((#t1 < #vr) ∧ (#t0 < #vr))))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                  ∧
                                   (((#t0 < #vr) ∧ (#t1 < #vr)) ∨ ((#t0 < #vr.34) ∧ (#t1 < #vr.34)))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( ((#t0 < #vr) ∧ (#t1.1 < #vr))  ∥
                                   ((#t0 < #vr.34) ∧ (#t1.1 < #vr.34)) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case insertFtemplateusageoffoffononononoffonundefundef_0_1
                    solve( (#t2.3 < #t2.1)  ∥ (#t2.3 = #t2.1)  ∥ (#vr.6 < #t2.3) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        solve( (#t2.1 < #t2.4)  ∥ (#t2.1 = #t2.4) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (last(#t3))  ∥
                                 (∃ L_h k2 #t1 #t0.
                                   (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (¬(last(#t0))) ∧
                                   (¬(last(#t1))) ∧
                                   ((((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #vr.33) ∧ (#t0 < #vr.33))))) )
                            case case_1
                            by solve( UnwrapKey( h2, ~n.1, 'on' ) @ #t2 )
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_3
                      solve( State_1111111111111111111111( L_h.1, atts, k.1, ~n.2, ptr, templ
                             ) ▶₀ #t2.2 )
                        case outLh_0_111111111111111111111
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            solve( (∃ L_h k2 #t1.1 #t0.1.
                     (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                    ∧
                     (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                   (∃ #t0.1 #t1.1 h1 h2 k.
                     (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                    ∧
                     (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t0.1 < #t1) ∧ (#t1.1 < #t1))  ∥
                     ((#t0.1 < #t0) ∧ (#t1.1 < #t0)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_4
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_3
      solve( ((#t1 < #t3) ∧ (#t0 < #t3))  ∥ ((#t1 < #t2) ∧ (#t0 < #t2)) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_2
    solve( (#t1 = #t2)  ∥ (#t2 < #t1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_0( '0', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_4
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_1( '1', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_5
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_2( '2', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_6
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_3( '3', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_7
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_4( '4', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_8
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_5( '5', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cannot_obtain_key_ind [reuse, use_induction]:
  all-traces
  "¬(∃ #i #j L_h k. (NewKey( L_h, k, 'on' ) @ #i) ∧ (!KU( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j L_h k. (NewKey( L_h, k, 'on' ) @ #i) ∧ (!KU( k ) @ #j)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ #i #j L_h k.
           (NewKey( L_h, k, 'on' ) @ #i) ∧ (!KU( k ) @ #j)
          ⇒
           ((last(#j)) ∨ (last(#i))))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t1 yp.
                (Insert( x, yp ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (¬(#t1 = #t2)) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_0( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_1( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_2( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_3( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_4( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_5( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3))) )
    case case_1
    solve( (last(#j))  ∥ (last(#i)) )
      case case_1
      solve( State_111111111111111( L_h,
                                    <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>, k, lock, ptr, templ
             ) ▶₀ #i )
        case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
        solve( Insert( <'F_template', ptr>,
                       <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>
               ) @ #t2 )
          case insertFtemplatetrustedononoffoffononononusageusage_0_
          solve( (#vr.15 < #t2)  ∥ (#vr.15 = #t2) )
            case case_1
            solve( State_( ) ▶₀ #t2 )
              case Init
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( !KU( ~n.1 ) @ #j )
              case outkeyv_0_1111211111
              solve( ((#vr.4 < #vr.20) ∧
                      (∃ #t2.
                        (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                       ∧
                        (#vr.4 < #t2) ∧
                        (#t2 < #vr.20) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.20 < #vr.4) )
                case case_1
                solve( State_111111111111111( L_h,
                                              <x, x.1, x.2, x.3, 'off', x.4, x.5, x.6, x.7, x.8>, t, lock,
                                              ptr, templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  by solve( (#vl, 0) ~~> (#j, 0) )
                qed
              next
                case case_2
                solve( State_111111111111111( L_h,
                                              <x, x.1, x.2, x.3, 'off', x.4, x.5, x.6, x.7, x.8>, t, lock,
                                              ptr, templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  by solve( (#vl, 0) ~~> (#j, 0) )
                qed
              qed
            next
              case outm_0_111111112111111
              solve( (∃ h2 k2 #t2 #t3.
                       (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17))  ∥
                     (∃ h2 #t2 #t3 #t4.
                       (NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3) ∧ (!KU( t ) @ #t4)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17) ∧ (#t4 < #vr.17))  ∥
                     (∃ #t2. (EncUsing( k, t ) @ #t2) ∧ #t2 < #vr.17)  ∥
                     (∃ h2 k2 #t2 #t3 a.
                       (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17))  ∥
                     (∃ #t2 #t3 h1 h2 k2.
                       (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* cyclic */
              next
                case case_3
                solve( ((#vr.4 < #vr.21) ∧
                        (∃ #t2.
                          (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                         ∧
                          (#vr.4 < #t2) ∧
                          (#t2 < #vr.21) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.21 < #vr.4) )
                  case case_1
                  solve( State_111111121111( L_h, t, v, lock ) ▶₀ #t2.1 )
                    case ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( State_111111121111( L_h, t, v, lock ) ▶₀ #t2.1 )
                    case ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case case_4
                solve( ((#vr.4 < #vr.21) ∧
                        (∃ #t2.
                          (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                         ∧
                          (#vr.4 < #t2) ∧
                          (#t2 < #vr.21) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.21 < #vr.4) )
                  case case_1
                  solve( (∃ h1 #t1. (NewKey( h1, k2, 'on' ) @ #t1) ∧ #t1 < #t2.1)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #t2.1) ∧ (#t0 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                next
                  case case_2
                  solve( (∃ h1 #t1. (NewKey( h1, k2, 'on' ) @ #t1) ∧ #t1 < #t2.1)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #t2.1) ∧ (#t0 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_5
                solve( ((#vr.4 < #vr.21) ∧
                        (∃ #t2.
                          (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                         ∧
                          (#vr.4 < #t2) ∧
                          (#t2 < #vr.21) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.21 < #vr.4) )
                  case case_1
                  solve( (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (((#t1 < #t2.3) ∧ (#t0 < #t2.3)) ∨ ((#t1 < #t3) ∧ (#t0 < #t3))))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (((#t0 < #t3) ∧ (#t1 < #t3)) ∨ ((#t0 < #t2.3) ∧ (#t1 < #t2.3)))) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case case_2
                  solve( (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (((#t1 < #t2.3) ∧ (#t0 < #t2.3)) ∨ ((#t1 < #t3) ∧ (#t0 < #t3))))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (((#t0 < #t3) ∧ (#t1 < #t3)) ∨ ((#t0 < #t2.3) ∧ (#t1 < #t2.3)))) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case outsenckeyvkeyv_0_111111211111111_case_1
              solve( ((#vr.4 < #vr.24) ∧
                      (∃ #t2.
                        (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                       ∧
                        (#vr.4 < #t2) ∧
                        (#t2 < #vr.24) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.24 < #vr.4) )
                case case_1
                solve( Insert( <'F_template', z.3>,
                               <z.4, z.5, z.6, z.7, z.8, 'on', z.9, 'off', z.10, z.11>
                       ) @ #t2.2 )
                  case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                solve( Insert( <'F_template', z.3>,
                               <z.4, z.5, z.6, z.7, z.8, 'on', z.9, 'off', z.10, z.11>
                       ) @ #t2.2 )
                  case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                  by contradiction /* from formulas */
                qed
              qed
            next
              case outsenckeyvkeyv_0_111111211111111_case_2
              solve( ((#vr.4 < #vr.24) ∧
                      (∃ #t2.
                        (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                       ∧
                        (#vr.4 < #t2) ∧
                        (#t2 < #vr.24) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.24 < #vr.4) )
                case case_1
                solve( Insert( <'F_template', z.2>,
                               <z.3, z.4, z.5, z.6, z.7, 'on', z.8, 'on', z.9, z.10>
                       ) @ #t2.2 )
                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                  by contradiction /* from formulas */
                next
                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                  solve( (#vr.14 < #t2.2)  ∥ (#vr.14 = #t2.2) )
                    case case_1
                    solve( State_1111111111111111111111( L_h, atts, k, ~n.2, ptr, templ
                           ) ▶₀ #t2.1 )
                      case outLh_0_111111111111111111111
                      solve( (#t2 < #t2.5)  ∥ (#t2 = #t2.5) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( State_1( ) ▶₀ #t2.2 )
                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( State_1111111111111111111111( L_h, atts, k, ~n.2, ptr, templ
                           ) ▶₀ #t2.1 )
                      case outLh_0_111111111111111111111
                      solve( (#t2 < #t2.5)  ∥ (#t2 = #t2.5) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( Insert( <'obj', h2>,
                                       <z, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 'undef'
                                       >
                               ) @ #t2.3 )
                          case insertobjLhkatts_0_1111111111111111
                          solve( State_1111111111111111( h2,
                                                         <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                          'undef', 'undef'>,
                                                         z, lock, ptr, templ
                                 ) ▶₀ #t2.3 )
                            case eventNewKeyLhkattsensatts_0_111111111111111
                            by solve( (#vr.16, 0) ~~> (#j, 0) )
                          qed
                        next
                          case insertobjhmatts_0_11111211111111
                          solve( State_11111211111111( L_h,
                                                       <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                        'undef', 'undef'>,
                                                       h2, k, z, ut, v, lock
                                 ) ▶₀ #t2.3 )
                            case newh_0_1111121111111
                            solve( (#vr.41 < #vr.4)  ∥ (#t2.1 < #vr.41) )
                              case case_1
                              solve( Insert( <'F_template', z.2>,
                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                                              'undef'>
                                     ) @ #t2.6 )
                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                solve( (#t2.2 < #t2.5)  ∥ (#t2.2 = #t2.5) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m, ut, v, ~n.4
                                         ) ▶₀ #t2.4 )
                                    case outh_0_11111211111111111111
                                    solve( (∃ h1 #t1. (NewKey( h1, m, 'on' ) @ #t1) ∧ #t1 < #vr.51)  ∥
                                           (∃ L_h k2 #t1 #t0.
                                             (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (#t1 < #vr.51) ∧ (#t0 < #vr.51))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (#t0 < #vr.51) ∧ (#t1 < #vr.51))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (#t0 < #vr.51) ∧ (#t1 < #vr.51)) )
                                      case case_1
                                      solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( (#t2.2 < #t2.7)  ∥ (#t2.2 = #t2.7) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( State_111111111111111( h1,
                                                                        <x, x.1, x.2, x.3, 'on', x.4, x.5, 
                                                                         x.6, x.7, x.8>,
                                                                        m, lock, ptr, templ
                                                 ) ▶₀ #t1 )
                                            case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                            solve( (#vr.16, 0) ~~> (#j, 0) )
                                              case Var_fresh_4_n
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    next
                                      case case_3
                                      solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( (#t2.2 < #t2.7)  ∥ (#t2.2 = #t2.7) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( (∃ L_h k2 #t1.1 #t0.1.
                                                   (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                                                  ∧
                                                   (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨
                                                    ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                                                 (∃ #t0.1 #t1.1 h1 h2 k.
                                                   (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                                   (EncKey( h1, k, 'on' ) @ #t1.1)
                                                  ∧
                                                   (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨
                                                    ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_4
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case case_2
                              solve( Insert( <'F_template', z.2>,
                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                                              'undef'>
                                     ) @ #t2.6 )
                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                solve( (#t2.2 < #t2.5)  ∥ (#t2.2 = #t2.5) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m, ut, v, ~n.4
                                         ) ▶₀ #t2.4 )
                                    case outh_0_11111211111111111111
                                    solve( (∃ h1 #t1. (NewKey( h1, m, 'on' ) @ #t1) ∧ #t1 < #vr.51)  ∥
                                           (∃ L_h k2 #t1 #t0.
                                             (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (#t1 < #vr.51) ∧ (#t0 < #vr.51))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (#t0 < #vr.51) ∧ (#t1 < #vr.51))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (#t0 < #vr.51) ∧ (#t1 < #vr.51)) )
                                      case case_1
                                      solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( (#t2.2 < #t2.7)  ∥ (#t2.2 = #t2.7) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( State_111111111111111( h1,
                                                                        <x, x.1, x.2, x.3, 'on', x.4, x.5, 
                                                                         x.6, x.7, x.8>,
                                                                        m, lock, ptr, templ
                                                 ) ▶₀ #t1 )
                                            case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                            solve( (#vr.16, 0) ~~> (#j, 0) )
                                              case Var_fresh_4_n
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    next
                                      case case_3
                                      solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( (#t2.2 < #t2.7)  ∥ (#t2.2 = #t2.7) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( (∃ L_h k2 #t1.1 #t0.1.
                                                   (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                                                  ∧
                                                   (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨
                                                    ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                                                 (∃ #t0.1 #t1.1 h1 h2 k.
                                                   (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                                   (EncKey( h1, k, 'on' ) @ #t1.1)
                                                  ∧
                                                   (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨
                                                    ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_4
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( Insert( <'F_template', z.2>,
                               <z.3, z.4, z.5, z.6, z.7, 'on', z.8, 'on', z.9, z.10>
                       ) @ #t2.2 )
                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                  by contradiction /* from formulas */
                next
                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                  solve( (#vr.14 < #t2.2)  ∥ (#vr.14 = #t2.2) )
                    case case_1
                    solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.3 ) ▶₀ #t2.1 )
                      case outsenckeyvkeyv_0_111111211111111
                      solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( (#t2.3 < #t2.6)  ∥ (#t2.3 = #t2.6) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (#vr.14 < #t2.5)  ∥ (#vr.14 = #t2.5) )
                            case case_1
                            solve( (#t2.2 < #t2.5)  ∥ (#t2.2 = #t2.5) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              solve( State_1( ) ▶₀ #t2.2 )
                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.3 ) ▶₀ #t2.1 )
                      case outsenckeyvkeyv_0_111111211111111
                      solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( (#t2.2 < #t2.5)  ∥ (#t2.2 = #t2.5) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( Insert( <'obj', h2>,
                                           <z, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                                            'undef'>
                                   ) @ #t2.3 )
                              case insertobjLhkatts_0_1111111111111111
                              solve( State_1111111111111111( h2,
                                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                              'on', 'undef', 'undef'>,
                                                             z, lock, ptr, templ
                                     ) ▶₀ #t2.3 )
                                case eventNewKeyLhkattsensatts_0_111111111111111
                                by solve( (#vr.16, 0) ~~> (#j, 0) )
                              qed
                            next
                              case insertobjhmatts_0_11111211111111
                              solve( State_11111211111111( L_h,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>,
                                                           h2, k, z, ut, v, lock
                                     ) ▶₀ #t2.3 )
                                case newh_0_1111121111111
                                solve( Insert( <'F_template', z.2>,
                                               <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                                                'undef'>
                                       ) @ #t2.6 )
                                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                  solve( (#t2.2 < #t2.5)  ∥ (#t2.2 = #t2.5) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m, ut, v, ~n.5
                                           ) ▶₀ #t2.4 )
                                      case outh_0_11111211111111111111
                                      solve( (∃ h1 #t1. (NewKey( h1, m, 'on' ) @ #t1) ∧ #t1 < #vr.45)  ∥
                                             (∃ L_h k2 #t1 #t0.
                                               (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                              ∧
                                               (#t1 < #vr.45) ∧ (#t0 < #vr.45))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (#t0 < #vr.45) ∧ (#t1 < #vr.45))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                               (EncKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (#t0 < #vr.45) ∧ (#t1 < #vr.45)) )
                                        case case_1
                                        solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( (#t2.2 < #t2.7)  ∥ (#t2.2 = #t2.7) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( State_111111111111111( h1,
                                                                          <x, x.1, x.2, x.3, 'on', x.4, x.5, 
                                                                           x.6, x.7, x.8>,
                                                                          m, lock, ptr, templ
                                                   ) ▶₀ #t1 )
                                              case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                              solve( (#vr.16, 0) ~~> (#j, 0) )
                                                case Var_fresh_4_n
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      next
                                        case case_3
                                        solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( (#t2.2 < #t2.7)  ∥ (#t2.2 = #t2.7) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( (∃ L_h k2 #t1.1 #t0.1.
                                                     (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                                                    ∧
                                                     (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨
                                                      ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                                                   (∃ #t0.1 #t1.1 h1 h2 k.
                                                     (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                                     (EncKey( h1, k, 'on' ) @ #t1.1)
                                                    ∧
                                                     (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨
                                                      ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      next
                                        case case_4
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case insertFtemplateusageoffoffononononoffonundefundef_0_1
          solve( (#vr.14 < #t2)  ∥ (#vr.14 = #t2) )
            case case_1
            solve( State_1( ) ▶₀ #t2 )
              case insertFtemplatetrustedononoffoffononononusageusage_0_
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( !KU( ~n.1 ) @ #j )
              case outkeyv_0_1111211111
              solve( ((#vr.4 < #vr.20) ∧
                      (∃ #t2.
                        (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                       ∧
                        (#vr.4 < #t2) ∧
                        (#t2 < #vr.20) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.20 < #vr.4) )
                case case_1
                solve( State_111111111111111( L_h,
                                              <x, x.1, x.2, x.3, 'off', x.4, x.5, x.6, x.7, x.8>, t, lock,
                                              ptr, templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  by solve( (#vl, 0) ~~> (#j, 0) )
                qed
              next
                case case_2
                solve( State_111111111111111( L_h,
                                              <x, x.1, x.2, x.3, 'off', x.4, x.5, x.6, x.7, x.8>, t, lock,
                                              ptr, templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  by solve( (#vl, 0) ~~> (#j, 0) )
                qed
              qed
            next
              case outm_0_111111112111111
              solve( (∃ h2 k2 #t2 #t3.
                       (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17))  ∥
                     (∃ h2 #t2 #t3 #t4.
                       (NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3) ∧ (!KU( t ) @ #t4)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17) ∧ (#t4 < #vr.17))  ∥
                     (∃ #t2. (EncUsing( k, t ) @ #t2) ∧ #t2 < #vr.17)  ∥
                     (∃ h2 k2 #t2 #t3 a.
                       (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17))  ∥
                     (∃ #t2 #t3 h1 h2 k2.
                       (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* cyclic */
              next
                case case_3
                solve( ((#vr.4 < #vr.21) ∧
                        (∃ #t2.
                          (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                         ∧
                          (#vr.4 < #t2) ∧
                          (#t2 < #vr.21) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.21 < #vr.4) )
                  case case_1
                  solve( State_111111121111( L_h, t, v, lock ) ▶₀ #t2.1 )
                    case ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( State_111111121111( L_h, t, v, lock ) ▶₀ #t2.1 )
                    case ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case case_4
                solve( ((#vr.4 < #vr.21) ∧
                        (∃ #t2.
                          (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                         ∧
                          (#vr.4 < #t2) ∧
                          (#t2 < #vr.21) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.21 < #vr.4) )
                  case case_1
                  solve( (∃ h1 #t1. (NewKey( h1, k2, 'on' ) @ #t1) ∧ #t1 < #t2.1)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #t2.1) ∧ (#t0 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                next
                  case case_2
                  solve( (∃ h1 #t1. (NewKey( h1, k2, 'on' ) @ #t1) ∧ #t1 < #t2.1)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #t2.1) ∧ (#t0 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_5
                solve( ((#vr.4 < #vr.21) ∧
                        (∃ #t2.
                          (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                         ∧
                          (#vr.4 < #t2) ∧
                          (#t2 < #vr.21) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.21 < #vr.4) )
                  case case_1
                  solve( (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (((#t1 < #t2.3) ∧ (#t0 < #t2.3)) ∨ ((#t1 < #t3) ∧ (#t0 < #t3))))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (((#t0 < #t3) ∧ (#t1 < #t3)) ∨ ((#t0 < #t2.3) ∧ (#t1 < #t2.3)))) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case case_2
                  solve( (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (((#t1 < #t2.3) ∧ (#t0 < #t2.3)) ∨ ((#t1 < #t3) ∧ (#t0 < #t3))))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (((#t0 < #t3) ∧ (#t1 < #t3)) ∨ ((#t0 < #t2.3) ∧ (#t1 < #t2.3)))) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case outsenckeyvkeyv_0_111111211111111_case_1
              solve( ((#vr.4 < #vr.24) ∧
                      (∃ #t2.
                        (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                       ∧
                        (#vr.4 < #t2) ∧
                        (#t2 < #vr.24) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.24 < #vr.4) )
                case case_1
                solve( Insert( <'F_template', z.3>,
                               <z.4, z.5, z.6, z.7, z.8, 'on', z.9, 'off', z.10, z.11>
                       ) @ #t2.2 )
                  case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                solve( Insert( <'F_template', z.3>,
                               <z.4, z.5, z.6, z.7, z.8, 'on', z.9, 'off', z.10, z.11>
                       ) @ #t2.2 )
                  case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                  by contradiction /* from formulas */
                qed
              qed
            next
              case outsenckeyvkeyv_0_111111211111111_case_2
              solve( ((#vr.4 < #vr.24) ∧
                      (∃ #t2.
                        (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                       ∧
                        (#vr.4 < #t2) ∧
                        (#t2 < #vr.24) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.24 < #vr.4) )
                case case_1
                solve( Insert( <'F_template', z.2>,
                               <z.3, z.4, z.5, z.6, z.7, 'on', z.8, 'on', z.9, z.10>
                       ) @ #t2.2 )
                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                  by contradiction /* from formulas */
                next
                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                  solve( (#t2.2 < #t2)  ∥ (#t2.2 = #t2)  ∥ (#vr.1 < #t2.2) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( State_1111111111111111111111( L_h, atts, k, ~n.2, ptr, templ
                           ) ▶₀ #t2.1 )
                      case outLh_0_111111111111111111111
                      solve( (#t2 < #t2.4)  ∥ (#t2 = #t2.4) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( Insert( <'obj', h2>,
                                       <z, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 'undef'
                                       >
                               ) @ #t2.2 )
                          case insertobjLhkatts_0_1111111111111111
                          solve( State_1111111111111111( h2,
                                                         <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                          'undef', 'undef'>,
                                                         z, lock, ptr, templ
                                 ) ▶₀ #t2.2 )
                            case eventNewKeyLhkattsensatts_0_111111111111111
                            solve( (#vr.17, 0) ~~> (#j, 0) )
                              case Var_fresh_3_n
                              solve( (#t2 < #t2.4)  ∥ (#t2 = #t2.4) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                solve( Insert( <'obj', h1>,
                                               <z, 'on', x, x.1, x.2, x.3, x.4, 'on', x.5, 'usage', x.6>
                                       ) @ #t2.3 )
                                  case insertobjLhkatts_0_1111111111111111
                                  solve( State_1111111111111111( h1,
                                                                 <'on', x, x.1, x.2, x.3, x.4, 'on', x.5, 
                                                                  'usage', x.6>,
                                                                 z, lock, ptr, templ
                                         ) ▶₀ #t2.3 )
                                    case eventNewKeyLhkattsensatts_0_111111111111111
                                    solve( (#vr.40 < #vr.4)  ∥ (#t2.1 < #vr.40) )
                                      case case_1
                                      solve( Insert( <'F_template', ptr>,
                                                     <'on', x, x.1, x.2, x.3, x.4, 'on', x.5, 'usage', x.6>
                                             ) @ #t2.5 )
                                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case case_2
                                      solve( Insert( <'F_template', ptr>,
                                                     <'on', x, x.1, x.2, x.3, x.4, 'on', x.5, 'usage', x.6>
                                             ) @ #t2.5 )
                                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                next
                                  case insertobjhmatts_0_11111211111111
                                  solve( State_11111211111111( L_h,
                                                               <'on', x, x.1, x.2, x.3, x.4, 'on', x.5, 
                                                                'usage', x.6>,
                                                               h1, k, z, ut, v, lock
                                         ) ▶₀ #t2.3 )
                                    case newh_0_1111121111111
                                    solve( (#vr.41 < #vr.4)  ∥ (#t2.1 < #vr.41) )
                                      case case_1
                                      solve( Insert( <'F_template', z.1>,
                                                     <'on', x, x.1, x.2, x.3, x.4, 'on', x.5, 'usage', x.6>
                                             ) @ #t2.5 )
                                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case case_2
                                      solve( Insert( <'F_template', z.1>,
                                                     <'on', x, x.1, x.2, x.3, x.4, 'on', x.5, 'usage', x.6>
                                             ) @ #t2.5 )
                                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case insertobjhmatts_0_11111211111111
                          solve( State_11111211111111( L_h,
                                                       <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 
                                                        'undef', 'undef'>,
                                                       h2, k, z, ut, v, lock
                                 ) ▶₀ #t2.2 )
                            case newh_0_1111121111111
                            solve( (#vr.42 < #vr.4)  ∥ (#t2.1 < #vr.42) )
                              case case_1
                              solve( Insert( <'F_template', z.2>,
                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                                              'undef'>
                                     ) @ #t2.5 )
                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                solve( (#t2.4 < #t2)  ∥ (#t2.4 = #t2)  ∥ (#vr.1 < #t2.4) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m, ut, v, ~n.4
                                         ) ▶₀ #t2.3 )
                                    case outh_0_11111211111111111111
                                    solve( (∃ h1 #t1. (NewKey( h1, m, 'on' ) @ #t1) ∧ #t1 < #vr.52)  ∥
                                           (∃ L_h k2 #t1 #t0.
                                             (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (#t1 < #vr.52) ∧ (#t0 < #vr.52))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (#t0 < #vr.52) ∧ (#t1 < #vr.52))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (#t0 < #vr.52) ∧ (#t1 < #vr.52)) )
                                      case case_1
                                      solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( (#t2 < #t2.6)  ∥ (#t2 = #t2.6) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( State_111111111111111( h1,
                                                                        <x, x.1, x.2, x.3, 'on', x.4, x.5, 
                                                                         x.6, x.7, x.8>,
                                                                        m, lock, ptr, templ
                                                 ) ▶₀ #t1 )
                                            case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                            solve( (#vr.17, 0) ~~> (#j, 0) )
                                              case Var_fresh_4_n
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    next
                                      case case_3
                                      solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( (#t2 < #t2.6)  ∥ (#t2 = #t2.6) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( (∃ L_h k2 #t1.1 #t0.1.
                                                   (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                                                  ∧
                                                   (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨
                                                    ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                                                 (∃ #t0.1 #t1.1 h1 h2 k.
                                                   (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                                   (EncKey( h1, k, 'on' ) @ #t1.1)
                                                  ∧
                                                   (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨
                                                    ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    next
                                      case case_4
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                next
                                  case case_3
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case case_2
                              solve( Insert( <'F_template', z.2>,
                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                                              'undef'>
                                     ) @ #t2.5 )
                                case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                solve( (#t2.4 < #t2)  ∥ (#t2.4 = #t2)  ∥ (#vr.1 < #t2.4) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m, ut, v, ~n.4
                                         ) ▶₀ #t2.3 )
                                    case outh_0_11111211111111111111
                                    solve( (∃ h1 #t1. (NewKey( h1, m, 'on' ) @ #t1) ∧ #t1 < #vr.52)  ∥
                                           (∃ L_h k2 #t1 #t0.
                                             (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (#t1 < #vr.52) ∧ (#t0 < #vr.52))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (#t0 < #vr.52) ∧ (#t1 < #vr.52))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                                            ∧
                                             (#t0 < #vr.52) ∧ (#t1 < #vr.52)) )
                                      case case_1
                                      solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( (#t2.6 < #t2)  ∥ (#t2.6 = #t2)  ∥ (#vr.1 < #t2.6) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( State_111111111111111( h1,
                                                                        <x, x.1, x.2, x.3, 'on', x.4, x.5, 
                                                                         x.6, x.7, x.8>,
                                                                        m, lock, ptr, templ
                                                 ) ▶₀ #t1 )
                                            case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                            solve( (#vr.17, 0) ~~> (#j, 0) )
                                              case Var_fresh_4_n
                                              solve( (#t2 < #t2.6)  ∥ (#t2 = #t2.6) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( Insert( <'obj', h1>,
                                                               <z, 'on', x.8, x.9, x.10, x.11, x.12, 'on', 
                                                                x.13, 'usage', x.14>
                                                       ) @ #t2.4 )
                                                  case insertobjLhkatts_0_1111111111111111
                                                  solve( State_1111111111111111( h1,
                                                                                 <'on', x.8, x.9, x.10, x.11, 
                                                                                  x.12, 'on', x.13, 'usage', 
                                                                                  x.14>,
                                                                                 z, lock, ptr, templ
                                                         ) ▶₀ #t2.4 )
                                                    case eventNewKeyLhkattsensatts_0_111111111111111
                                                    solve( (#vr.58 < #vr.4)  ∥ (#t2.1 < #vr.58) )
                                                      case case_1
                                                      solve( Insert( <'F_template', ptr>,
                                                                     <'on', x.8, x.9, x.10, x.11, x.12, 'on', 
                                                                      x.13, 'usage', x.14>
                                                             ) @ #t2.7 )
                                                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( (#vr.58 < #vr.42)  ∥ (#t2.3 < #vr.58) )
                                                        case case_1
                                                        solve( Insert( <'F_template', ptr>,
                                                                       <'on', x.8, x.9, x.10, x.11, x.12, 
                                                                        'on', x.13, 'usage', x.14>
                                                               ) @ #t2.7 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( Insert( <'F_template', ptr>,
                                                                       <'on', x.8, x.9, x.10, x.11, x.12, 
                                                                        'on', x.13, 'usage', x.14>
                                                               ) @ #t2.7 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case insertobjhmatts_0_11111211111111
                                                  solve( State_11111211111111( L_h.1,
                                                                               <'on', x.8, x.9, x.10, x.11, 
                                                                                x.12, 'on', x.13, 'usage', 
                                                                                x.14>,
                                                                               h1, k.1, z, ut, v, lock
                                                         ) ▶₀ #t2.4 )
                                                    case newh_0_1111121111111
                                                    solve( (#vr.59 < #vr.4)  ∥ (#t2.1 < #vr.59) )
                                                      case case_1
                                                      solve( Insert( <'F_template', z.1>,
                                                                     <'on', x.8, x.9, x.10, x.11, x.12, 'on', 
                                                                      x.13, 'usage', x.14>
                                                             ) @ #t2.7 )
                                                        case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( (#vr.59 < #vr.42)  ∥ (#t2.3 < #vr.59) )
                                                        case case_1
                                                        solve( Insert( <'F_template', z.1>,
                                                                       <'on', x.8, x.9, x.10, x.11, x.12, 
                                                                        'on', x.13, 'usage', x.14>
                                                               ) @ #t2.7 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( Insert( <'F_template', z.1>,
                                                                       <'on', x.8, x.9, x.10, x.11, x.12, 
                                                                        'on', x.13, 'usage', x.14>
                                                               ) @ #t2.7 )
                                                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case case_3
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    next
                                      case case_3
                                      solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( (#t2.6 < #t2)  ∥ (#t2.6 = #t2)  ∥ (#vr.1 < #t2.6) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( (∃ L_h k2 #t1.1 #t0.1.
                                                   (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                                                  ∧
                                                   (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨
                                                    ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                                                 (∃ #t0.1 #t1.1 h1 h2 k.
                                                   (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                                   (EncKey( h1, k, 'on' ) @ #t1.1)
                                                  ∧
                                                   (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨
                                                    ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case case_3
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    next
                                      case case_4
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                next
                                  case case_3
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_3
                    solve( State_1111111111111111111111( L_h, atts, k, ~n.2, ptr, templ
                           ) ▶₀ #t2.1 )
                      case outLh_0_111111111111111111111
                      solve( (#t2 < #t2.5)  ∥ (#t2 = #t2.5) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( State_1( ) ▶₀ #t2.2 )
                          case insertFtemplatetrustedononoffoffononononusageusage_0_
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( Insert( <'F_template', z.2>,
                               <z.3, z.4, z.5, z.6, z.7, 'on', z.8, 'on', z.9, z.10>
                       ) @ #t2.2 )
                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                  by contradiction /* from formulas */
                next
                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                  solve( (#t2.2 < #t2)  ∥ (#t2.2 = #t2)  ∥ (#vr.1 < #t2.2) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.3 ) ▶₀ #t2.1 )
                      case outsenckeyvkeyv_0_111111211111111
                      solve( (#t2.3 < #t2.6)  ∥ (#t2.3 = #t2.6) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( (#t2 < #t2.4)  ∥ (#t2 = #t2.4) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (#t2.2 < #t2.4)  ∥ (#t2.2 = #t2.4) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( Insert( <'obj', h2>,
                                           <z, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                                            'undef'>
                                   ) @ #t2.2 )
                              case insertobjLhkatts_0_1111111111111111
                              solve( State_1111111111111111( h2,
                                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                              'on', 'undef', 'undef'>,
                                                             z, lock, ptr, templ
                                     ) ▶₀ #t2.2 )
                                case eventNewKeyLhkattsensatts_0_111111111111111
                                solve( (#vr.17, 0) ~~> (#j, 0) )
                                  case Var_fresh_3_n
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case insertobjhmatts_0_11111211111111
                              solve( State_11111211111111( L_h,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>,
                                                           h2, k, z, ut, v, lock
                                     ) ▶₀ #t2.2 )
                                case newh_0_1111121111111
                                solve( Insert( <'F_template', z.2>,
                                               <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                                                'undef'>
                                       ) @ #t2.5 )
                                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                  solve( (#t2 < #t2.4)  ∥ (#t2 = #t2.4) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m, ut, v, ~n.5
                                           ) ▶₀ #t2.3 )
                                      case outh_0_11111211111111111111
                                      solve( (∃ h1 #t1. (NewKey( h1, m, 'on' ) @ #t1) ∧ #t1 < #vr.46)  ∥
                                             (∃ L_h k2 #t1 #t0.
                                               (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                              ∧
                                               (#t1 < #vr.46) ∧ (#t0 < #vr.46))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (#t0 < #vr.46) ∧ (#t1 < #vr.46))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                               (EncKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (#t0 < #vr.46) ∧ (#t1 < #vr.46)) )
                                        case case_1
                                        solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( (#t2 < #t2.6)  ∥ (#t2 = #t2.6) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( State_111111111111111( h1,
                                                                          <x, x.1, x.2, x.3, 'on', x.4, x.5, 
                                                                           x.6, x.7, x.8>,
                                                                          m, lock, ptr, templ
                                                   ) ▶₀ #t1 )
                                              case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                              solve( (#vr.17, 0) ~~> (#j, 0) )
                                                case Var_fresh_4_n
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      next
                                        case case_3
                                        solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( (#t2 < #t2.6)  ∥ (#t2 = #t2.6) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( (∃ L_h k2 #t1.1 #t0.1.
                                                     (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                                                    ∧
                                                     (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨
                                                      ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                                                   (∃ #t0.1 #t1.1 h1 h2 k.
                                                     (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                                     (EncKey( h1, k, 'on' ) @ #t1.1)
                                                    ∧
                                                     (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨
                                                      ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      next
                                        case case_4
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_3
                    solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.3 ) ▶₀ #t2.1 )
                      case outsenckeyvkeyv_0_111111211111111
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( State_111111111111111( L_h,
                                    <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>, k, lock, ptr, templ
             ) ▶₀ #i )
        case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
        solve( Insert( <'F_template', ptr>,
                       <x, x.1, x.2, x.3, 'on', x.4, x.5, x.6, x.7, x.8>
               ) @ #t2 )
          case insertFtemplatetrustedononoffoffononononusageusage_0_
          solve( (#vr.15 < #t2)  ∥ (#vr.15 = #t2) )
            case case_1
            solve( State_( ) ▶₀ #t2 )
              case Init
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( !KU( ~n.1 ) @ #j )
              case outkeyv_0_1111211111
              solve( ((#vr.4 < #vr.20) ∧
                      (∃ #t2.
                        (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                       ∧
                        (#vr.4 < #t2) ∧
                        (#t2 < #vr.20) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.20 < #vr.4) )
                case case_1
                solve( State_111111111111111( L_h,
                                              <x, x.1, x.2, x.3, 'off', x.4, x.5, x.6, x.7, x.8>, t, lock,
                                              ptr, templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  by solve( (#vl, 0) ~~> (#j, 0) )
                qed
              next
                case case_2
                solve( State_111111111111111( L_h,
                                              <x, x.1, x.2, x.3, 'off', x.4, x.5, x.6, x.7, x.8>, t, lock,
                                              ptr, templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  by solve( (#vl, 0) ~~> (#j, 0) )
                qed
              qed
            next
              case outm_0_111111112111111
              solve( (∃ h2 k2 #t2 #t3.
                       (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17))  ∥
                     (∃ h2 #t2 #t3 #t4.
                       (NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3) ∧ (!KU( t ) @ #t4)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17) ∧ (#t4 < #vr.17))  ∥
                     (∃ #t2. (EncUsing( k, t ) @ #t2) ∧ #t2 < #vr.17)  ∥
                     (∃ h2 k2 #t2 #t3 a.
                       (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17))  ∥
                     (∃ #t2 #t3 h1 h2 k2.
                       (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* cyclic */
              next
                case case_3
                solve( ((#vr.4 < #vr.21) ∧
                        (∃ #t2.
                          (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                         ∧
                          (#vr.4 < #t2) ∧
                          (#t2 < #vr.21) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.21 < #vr.4) )
                  case case_1
                  solve( State_111111121111( L_h, t, v, lock ) ▶₀ #t2.1 )
                    case ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( State_111111121111( L_h, t, v, lock ) ▶₀ #t2.1 )
                    case ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case case_4
                solve( ((#vr.4 < #vr.21) ∧
                        (∃ #t2.
                          (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                         ∧
                          (#vr.4 < #t2) ∧
                          (#t2 < #vr.21) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.21 < #vr.4) )
                  case case_1
                  solve( (∃ h1 #t1. (NewKey( h1, k2, 'on' ) @ #t1) ∧ #t1 < #t2.1)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #t2.1) ∧ (#t0 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                      case case_1
                      solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                             ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( ((#t0.2 < #t1) ∧ (#t1.2 < #t1))  ∥
                             ((#t0.2 < #t0.1) ∧ (#t1.2 < #t0.1)) )
                        case case_1
                        solve( ((#t1.2 < #t0.2) ∧ (#t0 < #t0.2))  ∥
                               ((#t1.2 < #t1.1) ∧ (#t0 < #t1.1)) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case case_2
                        solve( ((#t1.2 < #t0.2) ∧ (#t0 < #t0.2))  ∥
                               ((#t1.2 < #t1.1) ∧ (#t0 < #t1.1)) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case case_4
                    solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                           ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ h1 #t1. (NewKey( h1, k2, 'on' ) @ #t1) ∧ #t1 < #t2.1)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #t2.1) ∧ (#t0 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                      case case_1
                      solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                             ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( ((#t0.2 < #t1) ∧ (#t1.2 < #t1))  ∥
                             ((#t0.2 < #t0.1) ∧ (#t1.2 < #t0.1)) )
                        case case_1
                        solve( ((#t1.2 < #t0.2) ∧ (#t0 < #t0.2))  ∥
                               ((#t1.2 < #t1.1) ∧ (#t0 < #t1.1)) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case case_2
                        solve( ((#t1.2 < #t0.2) ∧ (#t0 < #t0.2))  ∥
                               ((#t1.2 < #t1.1) ∧ (#t0 < #t1.1)) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case case_4
                    solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                           ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case case_5
                solve( ((#vr.4 < #vr.21) ∧
                        (∃ #t2.
                          (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                         ∧
                          (#vr.4 < #t2) ∧
                          (#t2 < #vr.21) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.21 < #vr.4) )
                  case case_1
                  solve( (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (((#t1 < #t2.3) ∧ (#t0 < #t2.3)) ∨ ((#t1 < #t3) ∧ (#t0 < #t3))))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (((#t0 < #t3) ∧ (#t1 < #t3)) ∨ ((#t0 < #t2.3) ∧ (#t1 < #t2.3)))) )
                    case case_1
                    solve( ((#t1 < #t2.3) ∧ (#t0 < #t2.3))  ∥ ((#t1 < #t3) ∧ (#t0 < #t3)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    solve( ((#t0.1 < #t3) ∧ (#t1.1 < #t3))  ∥
                           ((#t0.1 < #t2.3) ∧ (#t1.1 < #t2.3)) )
                      case case_1
                      solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                             ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                             ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (((#t1 < #t2.3) ∧ (#t0 < #t2.3)) ∨ ((#t1 < #t3) ∧ (#t0 < #t3))))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (((#t0 < #t3) ∧ (#t1 < #t3)) ∨ ((#t0 < #t2.3) ∧ (#t1 < #t2.3)))) )
                    case case_1
                    solve( ((#t1 < #t2.3) ∧ (#t0 < #t2.3))  ∥ ((#t1 < #t3) ∧ (#t0 < #t3)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    solve( ((#t0.1 < #t3) ∧ (#t1.1 < #t3))  ∥
                           ((#t0.1 < #t2.3) ∧ (#t1.1 < #t2.3)) )
                      case case_1
                      solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                             ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                             ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case outsenckeyvkeyv_0_111111211111111_case_1
              solve( ((#vr.4 < #vr.24) ∧
                      (∃ #t2.
                        (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                       ∧
                        (#vr.4 < #t2) ∧
                        (#t2 < #vr.24) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.24 < #vr.4) )
                case case_1
                solve( Insert( <'F_template', z.3>,
                               <z.4, z.5, z.6, z.7, z.8, 'on', z.9, 'off', z.10, z.11>
                       ) @ #t2.2 )
                  case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                solve( Insert( <'F_template', z.3>,
                               <z.4, z.5, z.6, z.7, z.8, 'on', z.9, 'off', z.10, z.11>
                       ) @ #t2.2 )
                  case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                  by contradiction /* from formulas */
                qed
              qed
            next
              case outsenckeyvkeyv_0_111111211111111_case_2
              solve( ((#vr.4 < #vr.24) ∧
                      (∃ #t2.
                        (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                       ∧
                        (#vr.4 < #t2) ∧
                        (#t2 < #vr.24) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.24 < #vr.4) )
                case case_1
                solve( Insert( <'F_template', z.2>,
                               <z.3, z.4, z.5, z.6, z.7, 'on', z.8, 'on', z.9, z.10>
                       ) @ #t2.2 )
                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                  by contradiction /* from formulas */
                next
                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                  solve( (#vr.14 < #t2.2)  ∥ (#vr.14 = #t2.2) )
                    case case_1
                    solve( State_1111111111111111111111( L_h, atts, k, ~n.2, ptr, templ
                           ) ▶₀ #t2.1 )
                      case outLh_0_111111111111111111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    solve( State_1111111111111111111111( L_h, atts, k, ~n.2, ptr, templ
                           ) ▶₀ #t2.1 )
                      case outLh_0_111111111111111111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case case_2
                solve( Insert( <'F_template', z.2>,
                               <z.3, z.4, z.5, z.6, z.7, 'on', z.8, 'on', z.9, z.10>
                       ) @ #t2.2 )
                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                  by contradiction /* from formulas */
                next
                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                  solve( (#vr.14 < #t2.2)  ∥ (#vr.14 = #t2.2) )
                    case case_1
                    solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.3 ) ▶₀ #t2.1 )
                      case outsenckeyvkeyv_0_111111211111111
                      solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( (#t2.3 < #t2.6)  ∥ (#t2.3 = #t2.6) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (#vr.14 < #t2.5)  ∥ (#vr.14 = #t2.5) )
                            case case_1
                            solve( (#t2.2 < #t2.5)  ∥ (#t2.2 = #t2.5) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              solve( State_1( ) ▶₀ #t2.2 )
                                case insertFtemplatetrustedononoffoffononononusageusage_0_
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.3 ) ▶₀ #t2.1 )
                      case outsenckeyvkeyv_0_111111211111111
                      solve( (#t2.4 < #t2.7)  ∥ (#t2.4 = #t2.7) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( (#t2.2 < #t2.5)  ∥ (#t2.2 = #t2.5) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( Insert( <'obj', h2>,
                                           <z, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                                            'undef'>
                                   ) @ #t2.3 )
                              case insertobjLhkatts_0_1111111111111111
                              solve( State_1111111111111111( h2,
                                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                              'on', 'undef', 'undef'>,
                                                             z, lock, ptr, templ
                                     ) ▶₀ #t2.3 )
                                case eventNewKeyLhkattsensatts_0_111111111111111
                                by solve( (#vr.16, 0) ~~> (#j, 0) )
                              qed
                            next
                              case insertobjhmatts_0_11111211111111
                              solve( State_11111211111111( L_h,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>,
                                                           h2, k, z, ut, v, lock
                                     ) ▶₀ #t2.3 )
                                case newh_0_1111121111111
                                solve( Insert( <'F_template', z.2>,
                                               <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                                                'undef'>
                                       ) @ #t2.6 )
                                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                  solve( (#t2.2 < #t2.5)  ∥ (#t2.2 = #t2.5) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m, ut, v, ~n.5
                                           ) ▶₀ #t2.4 )
                                      case outh_0_11111211111111111111
                                      solve( (∃ h1 #t1. (NewKey( h1, m, 'on' ) @ #t1) ∧ #t1 < #vr.45)  ∥
                                             (∃ L_h k2 #t1 #t0.
                                               (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                              ∧
                                               (#t1 < #vr.45) ∧ (#t0 < #vr.45))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (#t0 < #vr.45) ∧ (#t1 < #vr.45))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                               (EncKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (#t0 < #vr.45) ∧ (#t1 < #vr.45)) )
                                        case case_1
                                        solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( (#t2.2 < #t2.7)  ∥ (#t2.2 = #t2.7) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( State_111111111111111( h1,
                                                                          <x, x.1, x.2, x.3, 'on', x.4, x.5, 
                                                                           x.6, x.7, x.8>,
                                                                          m, lock, ptr, templ
                                                   ) ▶₀ #t1 )
                                              case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                              solve( (#vr.16, 0) ~~> (#j, 0) )
                                                case Var_fresh_4_n
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      next
                                        case case_3
                                        solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( (#t2.2 < #t2.7)  ∥ (#t2.2 = #t2.7) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( (∃ L_h k2 #t1.1 #t0.1.
                                                     (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                                                    ∧
                                                     (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨
                                                      ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                                                   (∃ #t0.1 #t1.1 h1 h2 k.
                                                     (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                                     (EncKey( h1, k, 'on' ) @ #t1.1)
                                                    ∧
                                                     (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨
                                                      ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                                              case case_1
                                              solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                                                     ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case case_2
                                              solve( ((#t0.2 < #t1) ∧ (#t1.2 < #t1))  ∥
                                                     ((#t0.2 < #t0.1) ∧ (#t1.2 < #t0.1)) )
                                                case case_1
                                                solve( ((#t1.2 < #t0.2) ∧ (#t0 < #t0.2))  ∥
                                                       ((#t1.2 < #t1.1) ∧ (#t0 < #t1.1)) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case case_2
                                                solve( ((#t1.2 < #t0.2) ∧ (#t0 < #t0.2))  ∥
                                                       ((#t1.2 < #t1.1) ∧ (#t0 < #t1.1)) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case case_4
                                        solve( (#t2.6 < #t2.8)  ∥ (#t2.6 = #t2.8) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( (#t2.2 < #t2.7)  ∥ (#t2.2 = #t2.7) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                                                   ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case insertFtemplateusageoffoffononononoffonundefundef_0_1
          solve( (#vr.14 < #t2)  ∥ (#vr.14 = #t2) )
            case case_1
            solve( State_1( ) ▶₀ #t2 )
              case insertFtemplatetrustedononoffoffononononusageusage_0_
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( !KU( ~n.1 ) @ #j )
              case outkeyv_0_1111211111
              solve( ((#vr.4 < #vr.20) ∧
                      (∃ #t2.
                        (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                       ∧
                        (#vr.4 < #t2) ∧
                        (#t2 < #vr.20) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.20 < #vr.4) )
                case case_1
                solve( State_111111111111111( L_h,
                                              <x, x.1, x.2, x.3, 'off', x.4, x.5, x.6, x.7, x.8>, t, lock,
                                              ptr, templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  by solve( (#vl, 0) ~~> (#j, 0) )
                qed
              next
                case case_2
                solve( State_111111111111111( L_h,
                                              <x, x.1, x.2, x.3, 'off', x.4, x.5, x.6, x.7, x.8>, t, lock,
                                              ptr, templ
                       ) ▶₀ #t1 )
                  case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                  by solve( (#vl, 0) ~~> (#j, 0) )
                qed
              qed
            next
              case outm_0_111111112111111
              solve( (∃ h2 k2 #t2 #t3.
                       (NewKey( h2, k2, 'on' ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17))  ∥
                     (∃ h2 #t2 #t3 #t4.
                       (NewKey( h2, k, 'off' ) @ #t2) ∧ (!KU( k ) @ #t3) ∧ (!KU( t ) @ #t4)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17) ∧ (#t4 < #vr.17))  ∥
                     (∃ #t2. (EncUsing( k, t ) @ #t2) ∧ #t2 < #vr.17)  ∥
                     (∃ h2 k2 #t2 #t3 a.
                       (Unwrapped( h2, k2, a ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17))  ∥
                     (∃ #t2 #t3 h1 h2 k2.
                       (WrapKey( h2, k2, 'on' ) @ #t2) ∧ (DecKey( h1, k2, 'on' ) @ #t3)
                      ∧
                       (#t2 < #vr.17) ∧ (#t3 < #vr.17)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* cyclic */
              next
                case case_3
                solve( ((#vr.4 < #vr.21) ∧
                        (∃ #t2.
                          (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                         ∧
                          (#vr.4 < #t2) ∧
                          (#t2 < #vr.21) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.21 < #vr.4) )
                  case case_1
                  solve( State_111111121111( L_h, t, v, lock ) ▶₀ #t2.1 )
                    case ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( State_111111121111( L_h, t, v, lock ) ▶₀ #t2.1 )
                    case ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case case_4
                solve( ((#vr.4 < #vr.21) ∧
                        (∃ #t2.
                          (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                         ∧
                          (#vr.4 < #t2) ∧
                          (#t2 < #vr.21) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.21 < #vr.4) )
                  case case_1
                  solve( (∃ h1 #t1. (NewKey( h1, k2, 'on' ) @ #t1) ∧ #t1 < #t2.1)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #t2.1) ∧ (#t0 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                      case case_1
                      solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                             ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( ((#t0.2 < #t1) ∧ (#t1.2 < #t1))  ∥
                             ((#t0.2 < #t0.1) ∧ (#t1.2 < #t0.1)) )
                        case case_1
                        solve( ((#t1.2 < #t0.2) ∧ (#t0 < #t0.2))  ∥
                               ((#t1.2 < #t1.1) ∧ (#t0 < #t1.1)) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case case_2
                        solve( ((#t1.2 < #t0.2) ∧ (#t0 < #t0.2))  ∥
                               ((#t1.2 < #t1.1) ∧ (#t0 < #t1.1)) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case case_4
                    solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                           ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ h1 #t1. (NewKey( h1, k2, 'on' ) @ #t1) ∧ #t1 < #t2.1)  ∥
                         (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #t2.1) ∧ (#t0 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (#t0 < #t2.1) ∧ (#t1 < #t2.1)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( (∃ L_h k2 #t1.1 #t0.1.
                             (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                            ∧
                             (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨ ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                           (∃ #t0.1 #t1.1 h1 h2 k.
                             (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧ (EncKey( h1, k, 'on' ) @ #t1.1)
                            ∧
                             (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨ ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                      case case_1
                      solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                             ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( ((#t0.2 < #t1) ∧ (#t1.2 < #t1))  ∥
                             ((#t0.2 < #t0.1) ∧ (#t1.2 < #t0.1)) )
                        case case_1
                        solve( ((#t1.2 < #t0.2) ∧ (#t0 < #t0.2))  ∥
                               ((#t1.2 < #t1.1) ∧ (#t0 < #t1.1)) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case case_2
                        solve( ((#t1.2 < #t0.2) ∧ (#t0 < #t0.2))  ∥
                               ((#t1.2 < #t1.1) ∧ (#t0 < #t1.1)) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case case_4
                    solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                           ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case case_5
                solve( ((#vr.4 < #vr.21) ∧
                        (∃ #t2.
                          (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                         ∧
                          (#vr.4 < #t2) ∧
                          (#t2 < #vr.21) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, 'device' ) @ #t0)
                           ⇒
                            ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.21 < #vr.4) )
                  case case_1
                  solve( (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (((#t1 < #t2.3) ∧ (#t0 < #t2.3)) ∨ ((#t1 < #t3) ∧ (#t0 < #t3))))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (((#t0 < #t3) ∧ (#t1 < #t3)) ∨ ((#t0 < #t2.3) ∧ (#t1 < #t2.3)))) )
                    case case_1
                    solve( ((#t1 < #t2.3) ∧ (#t0 < #t2.3))  ∥ ((#t1 < #t3) ∧ (#t0 < #t3)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    solve( ((#t0.1 < #t3) ∧ (#t1.1 < #t3))  ∥
                           ((#t0.1 < #t2.3) ∧ (#t1.1 < #t2.3)) )
                      case case_1
                      solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                             ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                             ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ L_h k2 #t1 #t0.
                           (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (((#t1 < #t2.3) ∧ (#t0 < #t2.3)) ∨ ((#t1 < #t3) ∧ (#t0 < #t3))))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (UnwrapKey( h2, k, 'on' ) @ #t0) ∧ (EncKey( h1, k, 'on' ) @ #t1)
                          ∧
                           (((#t0 < #t3) ∧ (#t1 < #t3)) ∨ ((#t0 < #t2.3) ∧ (#t1 < #t2.3)))) )
                    case case_1
                    solve( ((#t1 < #t2.3) ∧ (#t0 < #t2.3))  ∥ ((#t1 < #t3) ∧ (#t0 < #t3)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    solve( ((#t0.1 < #t3) ∧ (#t1.1 < #t3))  ∥
                           ((#t0.1 < #t2.3) ∧ (#t1.1 < #t2.3)) )
                      case case_1
                      solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                             ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                             ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case outsenckeyvkeyv_0_111111211111111_case_1
              solve( ((#vr.4 < #vr.24) ∧
                      (∃ #t2.
                        (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                       ∧
                        (#vr.4 < #t2) ∧
                        (#t2 < #vr.24) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.24 < #vr.4) )
                case case_1
                solve( Insert( <'F_template', z.3>,
                               <z.4, z.5, z.6, z.7, z.8, 'on', z.9, 'off', z.10, z.11>
                       ) @ #t2.2 )
                  case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                solve( Insert( <'F_template', z.3>,
                               <z.4, z.5, z.6, z.7, z.8, 'on', z.9, 'off', z.10, z.11>
                       ) @ #t2.2 )
                  case insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11
                  by contradiction /* from formulas */
                qed
              qed
            next
              case outsenckeyvkeyv_0_111111211111111_case_2
              solve( ((#vr.4 < #vr.24) ∧
                      (∃ #t2.
                        (Unlock_0( '0', ~n.2, 'device' ) @ #t2)
                       ∧
                        (#vr.4 < #t2) ∧
                        (#t2 < #vr.24) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n.2, 'device' ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t0 = #vr.4) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, 'device' ) @ #t0)
                         ⇒
                          ((#t0 < #vr.4) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.24 < #vr.4) )
                case case_1
                solve( Insert( <'F_template', z.2>,
                               <z.3, z.4, z.5, z.6, z.7, 'on', z.8, 'on', z.9, z.10>
                       ) @ #t2.2 )
                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                  by contradiction /* from formulas */
                next
                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                  solve( (#t2.2 < #t2)  ∥ (#t2.2 = #t2)  ∥ (#vr.1 < #t2.2) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( State_1111111111111111111111( L_h, atts, k, ~n.2, ptr, templ
                           ) ▶₀ #t2.1 )
                      case outLh_0_111111111111111111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_3
                    solve( State_1111111111111111111111( L_h, atts, k, ~n.2, ptr, templ
                           ) ▶₀ #t2.1 )
                      case outLh_0_111111111111111111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case case_2
                solve( Insert( <'F_template', z.2>,
                               <z.3, z.4, z.5, z.6, z.7, 'on', z.8, 'on', z.9, z.10>
                       ) @ #t2.2 )
                  case insertFtemplatetrustedononoffoffononononusageusage_0_
                  by contradiction /* from formulas */
                next
                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                  solve( (#t2.2 < #t2)  ∥ (#t2.2 = #t2)  ∥ (#vr.1 < #t2.2) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.3 ) ▶₀ #t2.1 )
                      case outsenckeyvkeyv_0_111111211111111
                      solve( (#t2.3 < #t2.6)  ∥ (#t2.3 = #t2.6) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( (#t2 < #t2.4)  ∥ (#t2 = #t2.4) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (#t2.2 < #t2.4)  ∥ (#t2.2 = #t2.4) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( Insert( <'obj', h2>,
                                           <z, 'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                                            'undef'>
                                   ) @ #t2.2 )
                              case insertobjLhkatts_0_1111111111111111
                              solve( State_1111111111111111( h2,
                                                             <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                              'on', 'undef', 'undef'>,
                                                             z, lock, ptr, templ
                                     ) ▶₀ #t2.2 )
                                case eventNewKeyLhkattsensatts_0_111111111111111
                                solve( (#vr.17, 0) ~~> (#j, 0) )
                                  case Var_fresh_3_n
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case insertobjhmatts_0_11111211111111
                              solve( State_11111211111111( L_h,
                                                           <'off', 'off', 'on', 'on', 'on', 'on', 'off', 
                                                            'on', 'undef', 'undef'>,
                                                           h2, k, z, ut, v, lock
                                     ) ▶₀ #t2.2 )
                                case newh_0_1111121111111
                                solve( Insert( <'F_template', z.2>,
                                               <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
                                                'undef'>
                                       ) @ #t2.5 )
                                  case insertFtemplateusageoffoffononononoffonundefundef_0_1
                                  solve( (#t2 < #t2.4)  ∥ (#t2 = #t2.4) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( State_111112111111111111111( L_h.1, atts, h2, k.1, m, ut, v, ~n.5
                                           ) ▶₀ #t2.3 )
                                      case outh_0_11111211111111111111
                                      solve( (∃ h1 #t1. (NewKey( h1, m, 'on' ) @ #t1) ∧ #t1 < #vr.46)  ∥
                                             (∃ L_h k2 #t1 #t0.
                                               (NewKey( L_h, k2, 'on' ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                              ∧
                                               (#t1 < #vr.46) ∧ (#t0 < #vr.46))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (WrapKey( h2, k, 'on' ) @ #t0) ∧ (DecKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (#t0 < #vr.46) ∧ (#t1 < #vr.46))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (UnwrapKey( h2, k, 'on' ) @ #t0) ∧
                                               (EncKey( h1, k, 'on' ) @ #t1)
                                              ∧
                                               (#t0 < #vr.46) ∧ (#t1 < #vr.46)) )
                                        case case_1
                                        solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( (#t2 < #t2.6)  ∥ (#t2 = #t2.6) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( State_111111111111111( h1,
                                                                          <x, x.1, x.2, x.3, 'on', x.4, x.5, 
                                                                           x.6, x.7, x.8>,
                                                                          m, lock, ptr, templ
                                                   ) ▶₀ #t1 )
                                              case ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111
                                              solve( (#vr.17, 0) ~~> (#j, 0) )
                                                case Var_fresh_4_n
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      next
                                        case case_3
                                        solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( (#t2 < #t2.6)  ∥ (#t2 = #t2.6) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( (∃ L_h k2 #t1.1 #t0.1.
                                                     (NewKey( L_h, k2, 'on' ) @ #t0.1) ∧ (!KU( k2 ) @ #t1.1)
                                                    ∧
                                                     (((#t1.1 < #t0) ∧ (#t0.1 < #t0)) ∨
                                                      ((#t1.1 < #t1) ∧ (#t0.1 < #t1))))  ∥
                                                   (∃ #t0.1 #t1.1 h1 h2 k.
                                                     (UnwrapKey( h2, k, 'on' ) @ #t0.1) ∧
                                                     (EncKey( h1, k, 'on' ) @ #t1.1)
                                                    ∧
                                                     (((#t0.1 < #t1) ∧ (#t1.1 < #t1)) ∨
                                                      ((#t0.1 < #t0) ∧ (#t1.1 < #t0)))) )
                                              case case_1
                                              solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                                                     ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case case_2
                                              solve( ((#t0.2 < #t1) ∧ (#t1.2 < #t1))  ∥
                                                     ((#t0.2 < #t0.1) ∧ (#t1.2 < #t0.1)) )
                                                case case_1
                                                solve( ((#t1.2 < #t0.2) ∧ (#t0 < #t0.2))  ∥
                                                       ((#t1.2 < #t1.1) ∧ (#t0 < #t1.1)) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case case_2
                                                solve( ((#t1.2 < #t0.2) ∧ (#t0 < #t0.2))  ∥
                                                       ((#t1.2 < #t1.1) ∧ (#t0 < #t1.1)) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case case_4
                                        solve( (#t2.5 < #t2.7)  ∥ (#t2.5 = #t2.7) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( (#t2 < #t2.6)  ∥ (#t2 = #t2.6) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( ((#t1.1 < #t0.1) ∧ (#t0 < #t0.1))  ∥
                                                   ((#t1.1 < #t1) ∧ (#t0 < #t1)) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_3
                    solve( State_1111112111111111( h1, h2, v1, v2, wt, ~n.3 ) ▶₀ #t2.1 )
                      case outsenckeyvkeyv_0_111111211111111
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( (#t1 = #t2)  ∥ (#t2 < #t1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_0( '0', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_4
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_1( '1', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_5
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_2( '2', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_6
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_3( '3', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_7
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_4( '4', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_8
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_5( '5', ~n, 'device' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'device' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'device' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'device' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cannot_obtain_key:
  all-traces
  "¬(∃ #i #j L_h k. (NewKey( L_h, k, 'on' ) @ #i) ∧ (K( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j L_h k. (NewKey( L_h, k, 'on' ) @ #i) ∧ (K( k ) @ #j)"
*/
simplify
by contradiction /* from formulas */

rule (modulo E) Init[color=#ffffff,
                     process="insert <'F_template', 'trusted'>,<'on', 'on', 'off', 'off', 'on', 'on', 'on', 'on', 'usage', 'usage'
>;"]:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertFtemplatetrustedononoffoffononononusageusage_0_[color=#ffffff,
                                                                      process="insert <'F_template', 'trusted'>,<'on', 'on', 'off', 'off', 'on', 'on', 'on', 'on', 'usage', 'usage'
>;"]:
   [ State_( ) ]
  --[
  Insert( <'F_template', 'trusted'>,
          <'on', 'on', 'off', 'off', 'on', 'on', 'on', 'on', 'usage', 'usage'>
  )
  ]->
   [ State_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertFtemplateusageoffoffononononoffonundefundef_0_1[color=#ffffff,
                                                                      process="insert <'F_template', 'usage'>,<'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 
 'undef'>;"]:
   [ State_1( ) ]
  --[
  Insert( <'F_template', 'usage'>,
          <'off', 'off', 'on', 'on', 'on', 'on', 'off', 'on', 'undef', 'undef'>
  )
  ]->
   [ State_11( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertFtemplateuntrustedoffoffononoffonoffoffundefundef_0_11[color=#ffffff,
                                                                             process="insert <'F_template', 'untrusted'>,<'off', 'off', 'on', 'on', 'off', 'on', 'off', 'off', 'undef', 
 'undef'>;"]:
   [ State_11( ) ]
  --[
  Insert( <'F_template', 'untrusted'>,
          <'off', 'off', 'on', 'on', 'off', 'on', 'off', 'off', 'undef', 'undef'>
  )
  ]->
   [ State_111( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_111[color=#ffffff, process="!"]:
   [ State_111( ) ] --> [ !Semistate_1111( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_111[color=#ffffff, process="!"]:
   [ !Semistate_1111( ) ] --> [ State_1111( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1111[color=#ffffff, process="|"]:
   [ State_1111( ) ] --> [ State_11111( ), State_11112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11111[color=#ffffff, process="|"]:
   [ State_11111( ) ] --> [ State_111111( ), State_111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_111111[color=#ffffff, process="|"]:
   [ State_111111( ) ] --> [ State_1111111( ), State_1111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1111111[color=#ffffff, process="|"]:
   [ State_1111111( ) ] --> [ State_11111111( ), State_11111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11111111[color=#ffffff, process="|"]:
   [ State_11111111( ) ] --> [ State_111111111( ), State_111111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) increateattsptr_0_111111111[color=#638040,
                                            process="in(<'create', atts, ptr>);"]:
   [ State_111111111( ), In( <'create', atts, ptr> ) ]
  -->
   [ State_1111111111( atts, ptr ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lockdevice_0_1111111111[color=#638040,
                                        process="lock 'device';"]:
   [ State_1111111111( atts, ptr ), Fr( lock ) ]
  --[ Lock_0( '0', lock, 'device' ), Lock( '0', lock, 'device' ) ]->
   [ State_11111111111( atts, lock, ptr ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newLh_0_11111111111[color=#638040, process="new L_h;"]:
   [ State_11111111111( atts, lock, ptr ), Fr( L_h ) ]
  -->
   [ State_111111111111( L_h, atts, lock, ptr ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newk_0_111111111111[color=#638040, process="new k;"]:
   [ State_111111111111( L_h, atts, lock, ptr ), Fr( k ) ]
  -->
   [ State_1111111111111( L_h, atts, k, lock, ptr ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupFtemplateptrastempl_0_1111111111111[color=#638040,
                                                          process="lookup <'F_template', ptr> as templ"]:
   [ State_1111111111111( L_h, atts, k, lock, ptr ) ]
  --[ IsIn( <'F_template', ptr>, templ ) ]->
   [ State_11111111111111( L_h, atts, k, lock, ptr, templ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupFtemplateptrastempl_1_1111111111111[color=#638040,
                                                          process="lookup <'F_template', ptr> as templ"]:
   [ State_1111111111111( L_h, atts, k, lock, ptr ) ]
  --[ IsNotSet( <'F_template', ptr> ) ]->
   [ State_11111111111112( L_h, atts, k, lock, ptr ) ]

  /* has exactly the trivial AC variant */

restriction Restr_ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111_1:
  "∀ x #NOW x.1 x.2 x.3 x.4 x.5 x.6 x.7 x.8 x.9 x.10 x.11 x.12 x.13 x.14
     x.15 x.16 x.17 x.18 x.19.
    (Restr_ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111_1( x,
                                                                                                                                                                                                                                                                     x.1,
                                                                                                                                                                                                                                                                     x.2,
                                                                                                                                                                                                                                                                     x.3,
                                                                                                                                                                                                                                                                     x.4,
                                                                                                                                                                                                                                                                     x.5,
                                                                                                                                                                                                                                                                     x.6,
                                                                                                                                                                                                                                                                     x.7,
                                                                                                                                                                                                                                                                     x.8,
                                                                                                                                                                                                                                                                     x.9,
                                                                                                                                                                                                                                                                     x.10,
                                                                                                                                                                                                                                                                     x.11,
                                                                                                                                                                                                                                                                     x.12,
                                                                                                                                                                                                                                                                     x.13,
                                                                                                                                                                                                                                                                     x.14,
                                                                                                                                                                                                                                                                     x.15,
                                                                                                                                                                                                                                                                     x.16,
                                                                                                                                                                                                                                                                     x.17,
                                                                                                                                                                                                                                                                     x.18,
                                                                                                                                                                                                                                                                     x.19
     ) @ #NOW) ⇒
    ((((((((((x = x.1) ∧ (x.2 = x.3)) ∧ (x.4 = x.5)) ∧ (x.6 = x.7)) ∧
          (x.8 = x.9)) ∧
         (x.10 = x.11)) ∧
        (x.12 = x.13)) ∧
       (x.14 = x.15)) ∧
      (x.16 = x.17)) ∧
     (x.18 = x.19))"
  // safety formula

rule (modulo E) ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111[color=#638040,
                                                                                                                                                                                                                                                                       process="if Permits( attwrap(templ), attunwrap(templ), attenc(templ),
         attdec(templ), attsens(templ), attextr(templ), atttrus(templ),
         attwwt(templ), attwt(templ), attut(templ), attwrap(atts),
         attunwrap(atts), attenc(atts), attdec(atts), attsens(atts),
         attextr(atts), atttrus(atts), attwwt(atts), attwt(atts),
         attut(atts)
)"]:
   [ State_11111111111111( L_h, atts, k, lock, ptr, templ ) ]
  --[
  Restr_ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111_1( attwrap(templ),
                                                                                                                                                                                                                                                                  attwrap(atts),
                                                                                                                                                                                                                                                                  attunwrap(templ),
                                                                                                                                                                                                                                                                  attunwrap(atts),
                                                                                                                                                                                                                                                                  attenc(templ),
                                                                                                                                                                                                                                                                  attenc(atts),
                                                                                                                                                                                                                                                                  attdec(templ),
                                                                                                                                                                                                                                                                  attdec(atts),
                                                                                                                                                                                                                                                                  attsens(templ),
                                                                                                                                                                                                                                                                  attsens(atts),
                                                                                                                                                                                                                                                                  attextr(templ),
                                                                                                                                                                                                                                                                  attextr(atts),
                                                                                                                                                                                                                                                                  atttrus(templ),
                                                                                                                                                                                                                                                                  atttrus(atts),
                                                                                                                                                                                                                                                                  attwwt(templ),
                                                                                                                                                                                                                                                                  attwwt(atts),
                                                                                                                                                                                                                                                                  attwt(templ),
                                                                                                                                                                                                                                                                  attwt(atts),
                                                                                                                                                                                                                                                                  attut(templ),
                                                                                                                                                                                                                                                                  attut(atts)
  )
  ]->
   [ State_111111111111111( L_h, atts, k, lock, ptr, templ ) ]

  /*
  rule (modulo AC) ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111[color=#638040,
                                                                                                                                                                                                                                                                          process="if Permits( attwrap(templ), attunwrap(templ), attenc(templ),
         attdec(templ), attsens(templ), attextr(templ), atttrus(templ),
         attwwt(templ), attwt(templ), attut(templ), attwrap(atts),
         attunwrap(atts), attenc(atts), attdec(atts), attsens(atts),
         attextr(atts), atttrus(atts), attwwt(atts), attwt(atts),
         attut(atts)
)"]:
     [ State_11111111111111( L_h, atts, k, lock, ptr, templ ) ]
    --[
    Restr_ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_11111111111111_1( z,
                                                                                                                                                                                                                                                                    z.1,
                                                                                                                                                                                                                                                                    z.2,
                                                                                                                                                                                                                                                                    z.3,
                                                                                                                                                                                                                                                                    z.4,
                                                                                                                                                                                                                                                                    z.5,
                                                                                                                                                                                                                                                                    z.6,
                                                                                                                                                                                                                                                                    z.7,
                                                                                                                                                                                                                                                                    z.8,
                                                                                                                                                                                                                                                                    z.9,
                                                                                                                                                                                                                                                                    z.10,
                                                                                                                                                                                                                                                                    z.11,
                                                                                                                                                                                                                                                                    z.12,
                                                                                                                                                                                                                                                                    z.13,
                                                                                                                                                                                                                                                                    z.14,
                                                                                                                                                                                                                                                                    z.15,
                                                                                                                                                                                                                                                                    z.16,
                                                                                                                                                                                                                                                                    z.17,
                                                                                                                                                                                                                                                                    z.18,
                                                                                                                                                                                                                                                                    z.19
    )
    ]->
     [ State_111111111111111( L_h, atts, k, lock, ptr, templ ) ]
    variants (modulo AC)
    1. atts  = atts.27
       templ = templ.27
       z     = attwrap(templ.27)
       z.1   = attwrap(atts.27)
       z.2   = attunwrap(templ.27)
       z.3   = attunwrap(atts.27)
       z.4   = attenc(templ.27)
       z.5   = attenc(atts.27)
       z.6   = attdec(templ.27)
       z.7   = attdec(atts.27)
       z.8   = attsens(templ.27)
       z.9   = attsens(atts.27)
       z.10  = attextr(templ.27)
       z.11  = attextr(atts.27)
       z.12  = atttrus(templ.27)
       z.13  = atttrus(atts.27)
       z.14  = attwwt(templ.27)
       z.15  = attwwt(atts.27)
       z.16  = attwt(templ.27)
       z.17  = attwt(atts.27)
       z.18  = attut(templ.27)
       z.19  = attut(atts.27)
    
    2. atts  = atts.37
       templ = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36>
       z     = x.27
       z.1   = attwrap(atts.37)
       z.2   = x.28
       z.3   = attunwrap(atts.37)
       z.4   = x.29
       z.5   = attenc(atts.37)
       z.6   = x.30
       z.7   = attdec(atts.37)
       z.8   = x.31
       z.9   = attsens(atts.37)
       z.10  = x.32
       z.11  = attextr(atts.37)
       z.12  = x.33
       z.13  = atttrus(atts.37)
       z.14  = x.34
       z.15  = attwwt(atts.37)
       z.16  = x.35
       z.17  = attwt(atts.37)
       z.18  = x.36
       z.19  = attut(atts.37)
    
    3. atts  = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36>
       templ = templ.37
       z     = attwrap(templ.37)
       z.1   = x.27
       z.2   = attunwrap(templ.37)
       z.3   = x.28
       z.4   = attenc(templ.37)
       z.5   = x.29
       z.6   = attdec(templ.37)
       z.7   = x.30
       z.8   = attsens(templ.37)
       z.9   = x.31
       z.10  = attextr(templ.37)
       z.11  = x.32
       z.12  = atttrus(templ.37)
       z.13  = x.33
       z.14  = attwwt(templ.37)
       z.15  = x.34
       z.16  = attwt(templ.37)
       z.17  = x.35
       z.18  = attut(templ.37)
       z.19  = x.36
    
    4. atts  = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36>
       templ = <x.40, x.41, x.42, x.43, x.44, x.45, x.46, x.47, x.48, x.49>
       z     = x.40
       z.1   = x.27
       z.2   = x.41
       z.3   = x.28
       z.4   = x.42
       z.5   = x.29
       z.6   = x.43
       z.7   = x.30
       z.8   = x.44
       z.9   = x.31
       z.10  = x.45
       z.11  = x.32
       z.12  = x.46
       z.13  = x.33
       z.14  = x.47
       z.15  = x.34
       z.16  = x.48
       z.17  = x.35
       z.18  = x.49
       z.19  = x.36
  */

restriction Restr_ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_1_11111111111111_1:
  "∀ x #NOW x.1 x.2 x.3 x.4 x.5 x.6 x.7 x.8 x.9 x.10 x.11 x.12 x.13 x.14
     x.15 x.16 x.17 x.18 x.19.
    (Restr_ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_1_11111111111111_1( x,
                                                                                                                                                                                                                                                                     x.1,
                                                                                                                                                                                                                                                                     x.2,
                                                                                                                                                                                                                                                                     x.3,
                                                                                                                                                                                                                                                                     x.4,
                                                                                                                                                                                                                                                                     x.5,
                                                                                                                                                                                                                                                                     x.6,
                                                                                                                                                                                                                                                                     x.7,
                                                                                                                                                                                                                                                                     x.8,
                                                                                                                                                                                                                                                                     x.9,
                                                                                                                                                                                                                                                                     x.10,
                                                                                                                                                                                                                                                                     x.11,
                                                                                                                                                                                                                                                                     x.12,
                                                                                                                                                                                                                                                                     x.13,
                                                                                                                                                                                                                                                                     x.14,
                                                                                                                                                                                                                                                                     x.15,
                                                                                                                                                                                                                                                                     x.16,
                                                                                                                                                                                                                                                                     x.17,
                                                                                                                                                                                                                                                                     x.18,
                                                                                                                                                                                                                                                                     x.19
     ) @ #NOW) ⇒
    (¬((((((((((x = x.1) ∧ (x.2 = x.3)) ∧ (x.4 = x.5)) ∧ (x.6 = x.7)) ∧
            (x.8 = x.9)) ∧
           (x.10 = x.11)) ∧
          (x.12 = x.13)) ∧
         (x.14 = x.15)) ∧
        (x.16 = x.17)) ∧
       (x.18 = x.19)))"
  // safety formula

rule (modulo E) ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_1_11111111111111[color=#638040,
                                                                                                                                                                                                                                                                       process="if Permits( attwrap(templ), attunwrap(templ), attenc(templ),
         attdec(templ), attsens(templ), attextr(templ), atttrus(templ),
         attwwt(templ), attwt(templ), attut(templ), attwrap(atts),
         attunwrap(atts), attenc(atts), attdec(atts), attsens(atts),
         attextr(atts), atttrus(atts), attwwt(atts), attwt(atts),
         attut(atts)
)"]:
   [ State_11111111111111( L_h, atts, k, lock, ptr, templ ) ]
  --[
  Restr_ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_1_11111111111111_1( attwrap(templ),
                                                                                                                                                                                                                                                                  attwrap(atts),
                                                                                                                                                                                                                                                                  attunwrap(templ),
                                                                                                                                                                                                                                                                  attunwrap(atts),
                                                                                                                                                                                                                                                                  attenc(templ),
                                                                                                                                                                                                                                                                  attenc(atts),
                                                                                                                                                                                                                                                                  attdec(templ),
                                                                                                                                                                                                                                                                  attdec(atts),
                                                                                                                                                                                                                                                                  attsens(templ),
                                                                                                                                                                                                                                                                  attsens(atts),
                                                                                                                                                                                                                                                                  attextr(templ),
                                                                                                                                                                                                                                                                  attextr(atts),
                                                                                                                                                                                                                                                                  atttrus(templ),
                                                                                                                                                                                                                                                                  atttrus(atts),
                                                                                                                                                                                                                                                                  attwwt(templ),
                                                                                                                                                                                                                                                                  attwwt(atts),
                                                                                                                                                                                                                                                                  attwt(templ),
                                                                                                                                                                                                                                                                  attwt(atts),
                                                                                                                                                                                                                                                                  attut(templ),
                                                                                                                                                                                                                                                                  attut(atts)
  )
  ]->
   [ State_111111111111112( L_h, atts, k, lock, ptr, templ ) ]

  /*
  rule (modulo AC) ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_1_11111111111111[color=#638040,
                                                                                                                                                                                                                                                                          process="if Permits( attwrap(templ), attunwrap(templ), attenc(templ),
         attdec(templ), attsens(templ), attextr(templ), atttrus(templ),
         attwwt(templ), attwt(templ), attut(templ), attwrap(atts),
         attunwrap(atts), attenc(atts), attdec(atts), attsens(atts),
         attextr(atts), atttrus(atts), attwwt(atts), attwt(atts),
         attut(atts)
)"]:
     [ State_11111111111111( L_h, atts, k, lock, ptr, templ ) ]
    --[
    Restr_ifPermitsattwraptemplattunwraptemplattenctemplattdectemplattsenstemplattextrtemplatttrustemplattwwttemplattwttemplattuttemplattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_1_11111111111111_1( z,
                                                                                                                                                                                                                                                                    z.1,
                                                                                                                                                                                                                                                                    z.2,
                                                                                                                                                                                                                                                                    z.3,
                                                                                                                                                                                                                                                                    z.4,
                                                                                                                                                                                                                                                                    z.5,
                                                                                                                                                                                                                                                                    z.6,
                                                                                                                                                                                                                                                                    z.7,
                                                                                                                                                                                                                                                                    z.8,
                                                                                                                                                                                                                                                                    z.9,
                                                                                                                                                                                                                                                                    z.10,
                                                                                                                                                                                                                                                                    z.11,
                                                                                                                                                                                                                                                                    z.12,
                                                                                                                                                                                                                                                                    z.13,
                                                                                                                                                                                                                                                                    z.14,
                                                                                                                                                                                                                                                                    z.15,
                                                                                                                                                                                                                                                                    z.16,
                                                                                                                                                                                                                                                                    z.17,
                                                                                                                                                                                                                                                                    z.18,
                                                                                                                                                                                                                                                                    z.19
    )
    ]->
     [ State_111111111111112( L_h, atts, k, lock, ptr, templ ) ]
    variants (modulo AC)
    1. atts  = atts.27
       templ = templ.27
       z     = attwrap(templ.27)
       z.1   = attwrap(atts.27)
       z.2   = attunwrap(templ.27)
       z.3   = attunwrap(atts.27)
       z.4   = attenc(templ.27)
       z.5   = attenc(atts.27)
       z.6   = attdec(templ.27)
       z.7   = attdec(atts.27)
       z.8   = attsens(templ.27)
       z.9   = attsens(atts.27)
       z.10  = attextr(templ.27)
       z.11  = attextr(atts.27)
       z.12  = atttrus(templ.27)
       z.13  = atttrus(atts.27)
       z.14  = attwwt(templ.27)
       z.15  = attwwt(atts.27)
       z.16  = attwt(templ.27)
       z.17  = attwt(atts.27)
       z.18  = attut(templ.27)
       z.19  = attut(atts.27)
    
    2. atts  = atts.37
       templ = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36>
       z     = x.27
       z.1   = attwrap(atts.37)
       z.2   = x.28
       z.3   = attunwrap(atts.37)
       z.4   = x.29
       z.5   = attenc(atts.37)
       z.6   = x.30
       z.7   = attdec(atts.37)
       z.8   = x.31
       z.9   = attsens(atts.37)
       z.10  = x.32
       z.11  = attextr(atts.37)
       z.12  = x.33
       z.13  = atttrus(atts.37)
       z.14  = x.34
       z.15  = attwwt(atts.37)
       z.16  = x.35
       z.17  = attwt(atts.37)
       z.18  = x.36
       z.19  = attut(atts.37)
    
    3. atts  = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36>
       templ = templ.37
       z     = attwrap(templ.37)
       z.1   = x.27
       z.2   = attunwrap(templ.37)
       z.3   = x.28
       z.4   = attenc(templ.37)
       z.5   = x.29
       z.6   = attdec(templ.37)
       z.7   = x.30
       z.8   = attsens(templ.37)
       z.9   = x.31
       z.10  = attextr(templ.37)
       z.11  = x.32
       z.12  = atttrus(templ.37)
       z.13  = x.33
       z.14  = attwwt(templ.37)
       z.15  = x.34
       z.16  = attwt(templ.37)
       z.17  = x.35
       z.18  = attut(templ.37)
       z.19  = x.36
    
    4. atts  = <x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, x.36>
       templ = <x.40, x.41, x.42, x.43, x.44, x.45, x.46, x.47, x.48, x.49>
       z     = x.40
       z.1   = x.27
       z.2   = x.41
       z.3   = x.28
       z.4   = x.42
       z.5   = x.29
       z.6   = x.43
       z.7   = x.30
       z.8   = x.44
       z.9   = x.31
       z.10  = x.45
       z.11  = x.32
       z.12  = x.46
       z.13  = x.33
       z.14  = x.47
       z.15  = x.34
       z.16  = x.48
       z.17  = x.35
       z.18  = x.49
       z.19  = x.36
  */

rule (modulo E) eventNewKeyLhkattsensatts_0_111111111111111[color=#638040,
                                                            process="event NewKey( L_h, k, attsens(atts) );"]:
   [ State_111111111111111( L_h, atts, k, lock, ptr, templ ) ]
  --[ NewKey( L_h, k, attsens(atts) ) ]->
   [ State_1111111111111111( L_h, atts, k, lock, ptr, templ ) ]

  /*
  rule (modulo AC) eventNewKeyLhkattsensatts_0_111111111111111[color=#638040,
                                                               process="event NewKey( L_h, k, attsens(atts) );"]:
     [ State_111111111111111( L_h, atts, k, lock, ptr, templ ) ]
    --[ NewKey( L_h, k, z ) ]->
     [ State_1111111111111111( L_h, atts, k, lock, ptr, templ ) ]
    variants (modulo AC)
    1. atts  = atts.8
       z     = attsens(atts.8)
    
    2. atts  = <x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17>
       z     = x.12
  */

rule (modulo E) insertobjLhkatts_0_1111111111111111[color=#638040,
                                                    process="insert <'obj', L_h>,<k, atts>;"]:
   [ State_1111111111111111( L_h, atts, k, lock, ptr, templ ) ]
  --[ Insert( <'obj', L_h>, <k, atts> ) ]->
   [ State_11111111111111111( L_h, atts, k, lock, ptr, templ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventWrapKeyLhkattwrapatts_0_11111111111111111[color=#638040,
                                                               process="event WrapKey( L_h, k, attwrap(atts) );"]:
   [ State_11111111111111111( L_h, atts, k, lock, ptr, templ ) ]
  --[ WrapKey( L_h, k, attwrap(atts) ) ]->
   [ State_111111111111111111( L_h, atts, k, lock, ptr, templ ) ]

  /*
  rule (modulo AC) eventWrapKeyLhkattwrapatts_0_11111111111111111[color=#638040,
                                                                  process="event WrapKey( L_h, k, attwrap(atts) );"]:
     [ State_11111111111111111( L_h, atts, k, lock, ptr, templ ) ]
    --[ WrapKey( L_h, k, z ) ]->
     [ State_111111111111111111( L_h, atts, k, lock, ptr, templ ) ]
    variants (modulo AC)
    1. atts  = atts.8
       z     = attwrap(atts.8)
    
    2. atts  = <x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17>
       z     = x.8
  */

rule (modulo E) eventDecKeyLhkattdecatts_0_111111111111111111[color=#638040,
                                                              process="event DecKey( L_h, k, attdec(atts) );"]:
   [ State_111111111111111111( L_h, atts, k, lock, ptr, templ ) ]
  --[ DecKey( L_h, k, attdec(atts) ) ]->
   [ State_1111111111111111111( L_h, atts, k, lock, ptr, templ ) ]

  /*
  rule (modulo AC) eventDecKeyLhkattdecatts_0_111111111111111111[color=#638040,
                                                                 process="event DecKey( L_h, k, attdec(atts) );"]:
     [ State_111111111111111111( L_h, atts, k, lock, ptr, templ ) ]
    --[ DecKey( L_h, k, z ) ]->
     [ State_1111111111111111111( L_h, atts, k, lock, ptr, templ ) ]
    variants (modulo AC)
    1. atts  = atts.8
       z     = attdec(atts.8)
    
    2. atts  = <x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17>
       z     = x.11
  */

rule (modulo E) eventEncKeyLhkattencatts_0_1111111111111111111[color=#638040,
                                                               process="event EncKey( L_h, k, attenc(atts) );"]:
   [ State_1111111111111111111( L_h, atts, k, lock, ptr, templ ) ]
  --[ EncKey( L_h, k, attenc(atts) ) ]->
   [ State_11111111111111111111( L_h, atts, k, lock, ptr, templ ) ]

  /*
  rule (modulo AC) eventEncKeyLhkattencatts_0_1111111111111111111[color=#638040,
                                                                  process="event EncKey( L_h, k, attenc(atts) );"]:
     [ State_1111111111111111111( L_h, atts, k, lock, ptr, templ ) ]
    --[ EncKey( L_h, k, z ) ]->
     [ State_11111111111111111111( L_h, atts, k, lock, ptr, templ ) ]
    variants (modulo AC)
    1. atts  = atts.8
       z     = attenc(atts.8)
    
    2. atts  = <x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17>
       z     = x.10
  */

rule (modulo E) eventUnwrapKeyLhkattunwrapatts_0_11111111111111111111[color=#638040,
                                                                      process="event UnwrapKey( L_h, k, attunwrap(atts) );"]:
   [ State_11111111111111111111( L_h, atts, k, lock, ptr, templ ) ]
  --[ UnwrapKey( L_h, k, attunwrap(atts) ) ]->
   [ State_111111111111111111111( L_h, atts, k, lock, ptr, templ ) ]

  /*
  rule (modulo AC) eventUnwrapKeyLhkattunwrapatts_0_11111111111111111111[color=#638040,
                                                                         process="event UnwrapKey( L_h, k, attunwrap(atts) );"]:
     [ State_11111111111111111111( L_h, atts, k, lock, ptr, templ ) ]
    --[ UnwrapKey( L_h, k, z ) ]->
     [ State_111111111111111111111( L_h, atts, k, lock, ptr, templ ) ]
    variants (modulo AC)
    1. atts  = atts.8
       z     = attunwrap(atts.8)
    
    2. atts  = <x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17>
       z     = x.9
  */

rule (modulo E) outLh_0_111111111111111111111[color=#638040,
                                              process="out(L_h);"]:
   [ State_111111111111111111111( L_h, atts, k, lock, ptr, templ ) ]
  -->
   [
   State_1111111111111111111111( L_h, atts, k, lock, ptr, templ ),
   Out( L_h )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlockdevice_0_1111111111111111111111[color=#638040,
                                                      process="unlock 'device';"]:
   [ State_1111111111111111111111( L_h, atts, k, lock, ptr, templ ) ]
  --[ Unlock_0( '0', lock, 'device' ), Unlock( '0', lock, 'device' ) ]->
   [ State_11111111111111111111111( L_h, atts, k, lock, ptr, templ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11111111111111111111111[color=#638040, process="0"]:
   [ State_11111111111111111111111( L_h, atts, k, lock, ptr, templ ) ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_111111111111112[color=#638040, process="0"]:
   [ State_111111111111112( L_h, atts, k, lock, ptr, templ ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11111111111112[color=#638040, process="0"]:
   [ State_11111111111112( L_h, atts, k, lock, ptr ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) inLhsencmk_0_111111112[color=#414080,
                                       process="in(<L_h, senc(m, k)>);"]:
   [ State_111111112( ), In( <L_h, senc(m, k)> ) ]
  -->
   [ State_1111111121( L_h, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lockdevice_0_1111111121[color=#414080,
                                        process="lock 'device';"]:
   [ State_1111111121( L_h, k, m ), Fr( lock.1 ) ]
  --[ Lock_1( '1', lock.1, 'device' ), Lock( '1', lock.1, 'device' ) ]->
   [ State_11111111211( L_h, k, m, lock.1 ) ]

  /*
  rule (modulo AC) lockdevice_0_1111111121[color=#414080,
                                           process="lock 'device';"]:
     [ State_1111111121( L_h, k, m ), Fr( lock ) ]
    --[ Lock_1( '1', lock, 'device' ), Lock( '1', lock, 'device' ) ]->
     [ State_11111111211( L_h, k, m, lock ) ]
  */

rule (modulo E) lookupobjLhasv_0_11111111211[color=#414080,
                                             process="lookup <'obj', L_h> as v"]:
   [ State_11111111211( L_h, k, m, lock.1 ) ]
  --[ IsIn( <'obj', L_h>, v ) ]->
   [ State_111111112111( L_h, k, m, v, lock.1 ) ]

  /*
  rule (modulo AC) lookupobjLhasv_0_11111111211[color=#414080,
                                                process="lookup <'obj', L_h> as v"]:
     [ State_11111111211( L_h, k, m, lock ) ]
    --[ IsIn( <'obj', L_h>, v ) ]->
     [ State_111111112111( L_h, k, m, v, lock ) ]
  */

rule (modulo E) lookupobjLhasv_1_11111111211[color=#414080,
                                             process="lookup <'obj', L_h> as v"]:
   [ State_11111111211( L_h, k, m, lock.1 ) ]
  --[ IsNotSet( <'obj', L_h> ) ]->
   [ State_111111112112( L_h, k, m, lock.1 ) ]

  /*
  rule (modulo AC) lookupobjLhasv_1_11111111211[color=#414080,
                                                process="lookup <'obj', L_h> as v"]:
     [ State_11111111211( L_h, k, m, lock ) ]
    --[ IsNotSet( <'obj', L_h> ) ]->
     [ State_111111112112( L_h, k, m, lock ) ]
  */

restriction Restr_ifCandecryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_111111112111_1:
  "∀ x #NOW.
    (Restr_ifCandecryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_111111112111_1( x
     ) @ #NOW) ⇒
    (x = 'on')"
  // safety formula

rule (modulo E) ifCandecryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_111111112111[color=#414080,
                                                                                                                                                     process="if Can_decrypt( attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)),
             attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)),
             attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
   [ State_111111112111( L_h, k, m, v, lock.1 ) ]
  --[
  Restr_ifCandecryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_111111112111_1( attdec(tem(v))
  )
  ]->
   [ State_1111111121111( L_h, k, m, v, lock.1 ) ]

  /*
  rule (modulo AC) ifCandecryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_111111112111[color=#414080,
                                                                                                                                                        process="if Can_decrypt( attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)),
             attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)),
             attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
     [ State_111111112111( L_h, k, m, v, lock ) ]
    --[
    Restr_ifCandecryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_111111112111_1( z
    )
    ]->
     [ State_1111111121111( L_h, k, m, v, lock ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = attdec(tem(v.8))
    
    2. v     = <x.8, x.9>
       z     = attdec(x.9)
    
    3. v     = <x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17, 
                x.18>
       z     = x.12
  */

restriction Restr_ifCandecryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_111111112111_1:
  "∀ x #NOW.
    (Restr_ifCandecryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_111111112111_1( x
     ) @ #NOW) ⇒
    (¬(x = 'on'))"
  // safety formula

rule (modulo E) ifCandecryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_111111112111[color=#414080,
                                                                                                                                                     process="if Can_decrypt( attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)),
             attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)),
             attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
   [ State_111111112111( L_h, k, m, v, lock.1 ) ]
  --[
  Restr_ifCandecryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_111111112111_1( attdec(tem(v))
  )
  ]->
   [ State_1111111121112( L_h, k, m, v, lock.1 ) ]

  /*
  rule (modulo AC) ifCandecryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_111111112111[color=#414080,
                                                                                                                                                        process="if Can_decrypt( attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)),
             attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)),
             attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
     [ State_111111112111( L_h, k, m, v, lock ) ]
    --[
    Restr_ifCandecryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_111111112111_1( z
    )
    ]->
     [ State_1111111121112( L_h, k, m, v, lock ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = attdec(tem(v.8))
    
    2. v     = <x.8, x.9>
       z     = attdec(x.9)
    
    3. v     = <x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17, 
                x.18>
       z     = x.12
  */

rule (modulo E) ifkeyvk_0_1111111121111[color=#414080,
                                        process="if key(v)=k"]:
   [ State_1111111121111( L_h, k, m, v, lock.1 ) ]
  --[ Pred_Eq( key(v), k ) ]->
   [ State_11111111211111( L_h, k, m, v, lock.1 ) ]

  /*
  rule (modulo AC) ifkeyvk_0_1111111121111[color=#414080,
                                           process="if key(v)=k"]:
     [ State_1111111121111( L_h, k, m, v, lock ) ]
    --[ Pred_Eq( z, k ) ]->
     [ State_11111111211111( L_h, k, m, v, lock ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = key(v.8)
    
    2. v     = <x.8, x.9>
       z     = x.8
  */

rule (modulo E) ifkeyvk_1_1111111121111[color=#414080,
                                        process="if key(v)=k"]:
   [ State_1111111121111( L_h, k, m, v, lock.1 ) ]
  --[ Pred_Not_Eq( key(v), k ) ]->
   [ State_11111111211112( L_h, k, m, v, lock.1 ) ]

  /*
  rule (modulo AC) ifkeyvk_1_1111111121111[color=#414080,
                                           process="if key(v)=k"]:
     [ State_1111111121111( L_h, k, m, v, lock ) ]
    --[ Pred_Not_Eq( z, k ) ]->
     [ State_11111111211112( L_h, k, m, v, lock ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = key(v.8)
    
    2. v     = <x.8, x.9>
       z     = x.8
  */

rule (modulo E) eventDecUsingkm_0_11111111211111[color=#414080,
                                                 process="event DecUsing( k, m );"]:
   [ State_11111111211111( L_h, k, m, v, lock.1 ) ]
  --[ DecUsing( k, m ) ]->
   [ State_111111112111111( L_h, k, m, v, lock.1 ) ]

  /*
  rule (modulo AC) eventDecUsingkm_0_11111111211111[color=#414080,
                                                    process="event DecUsing( k, m );"]:
     [ State_11111111211111( L_h, k, m, v, lock ) ]
    --[ DecUsing( k, m ) ]->
     [ State_111111112111111( L_h, k, m, v, lock ) ]
  */

rule (modulo E) outm_0_111111112111111[color=#414080, process="out(m);"]:
   [ State_111111112111111( L_h, k, m, v, lock.1 ) ]
  -->
   [ State_1111111121111111( L_h, k, m, v, lock.1 ), Out( m ) ]

  /*
  rule (modulo AC) outm_0_111111112111111[color=#414080,
                                          process="out(m);"]:
     [ State_111111112111111( L_h, k, m, v, lock ) ]
    -->
     [ State_1111111121111111( L_h, k, m, v, lock ), Out( m ) ]
  */

rule (modulo E) unlockdevice_0_1111111121111111[color=#414080,
                                                process="unlock 'device';"]:
   [ State_1111111121111111( L_h, k, m, v, lock.1 ) ]
  --[ Unlock_1( '1', lock.1, 'device' ), Unlock( '1', lock.1, 'device' )
  ]->
   [ State_11111111211111111( L_h, k, m, v, lock.1 ) ]

  /*
  rule (modulo AC) unlockdevice_0_1111111121111111[color=#414080,
                                                   process="unlock 'device';"]:
     [ State_1111111121111111( L_h, k, m, v, lock ) ]
    --[ Unlock_1( '1', lock, 'device' ), Unlock( '1', lock, 'device' ) ]->
     [ State_11111111211111111( L_h, k, m, v, lock ) ]
  */

rule (modulo E) p_0_11111111211111111[color=#414080, process="0"]:
   [ State_11111111211111111( L_h, k, m, v, lock.1 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_11111111211111111[color=#414080, process="0"]:
     [ State_11111111211111111( L_h, k, m, v, lock ) ] --> [ ]
  */

rule (modulo E) p_0_11111111211112[color=#414080, process="0"]:
   [ State_11111111211112( L_h, k, m, v, lock.1 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_11111111211112[color=#414080, process="0"]:
     [ State_11111111211112( L_h, k, m, v, lock ) ] --> [ ]
  */

rule (modulo E) p_0_1111111121112[color=#414080, process="0"]:
   [ State_1111111121112( L_h, k, m, v, lock.1 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_1111111121112[color=#414080, process="0"]:
     [ State_1111111121112( L_h, k, m, v, lock ) ] --> [ ]
  */

rule (modulo E) p_0_111111112112[color=#414080, process="0"]:
   [ State_111111112112( L_h, k, m, lock.1 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_111111112112[color=#414080, process="0"]:
     [ State_111111112112( L_h, k, m, lock ) ] --> [ ]
  */

rule (modulo E) inLhm_0_11111112[color=#408075, process="in(<L_h, m>);"]:
   [ State_11111112( ), In( <L_h, m> ) ] --> [ State_111111121( L_h, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lockdevice_0_111111121[color=#408075,
                                       process="lock 'device';"]:
   [ State_111111121( L_h, m ), Fr( lock.2 ) ]
  --[ Lock_2( '2', lock.2, 'device' ), Lock( '2', lock.2, 'device' ) ]->
   [ State_1111111211( L_h, m, lock.2 ) ]

  /*
  rule (modulo AC) lockdevice_0_111111121[color=#408075,
                                          process="lock 'device';"]:
     [ State_111111121( L_h, m ), Fr( lock ) ]
    --[ Lock_2( '2', lock, 'device' ), Lock( '2', lock, 'device' ) ]->
     [ State_1111111211( L_h, m, lock ) ]
  */

rule (modulo E) lookupobjLhasv_0_1111111211[color=#408075,
                                            process="lookup <'obj', L_h> as v"]:
   [ State_1111111211( L_h, m, lock.2 ) ]
  --[ IsIn( <'obj', L_h>, v ) ]->
   [ State_11111112111( L_h, m, v, lock.2 ) ]

  /*
  rule (modulo AC) lookupobjLhasv_0_1111111211[color=#408075,
                                               process="lookup <'obj', L_h> as v"]:
     [ State_1111111211( L_h, m, lock ) ]
    --[ IsIn( <'obj', L_h>, v ) ]->
     [ State_11111112111( L_h, m, v, lock ) ]
  */

rule (modulo E) lookupobjLhasv_1_1111111211[color=#408075,
                                            process="lookup <'obj', L_h> as v"]:
   [ State_1111111211( L_h, m, lock.2 ) ]
  --[ IsNotSet( <'obj', L_h> ) ]->
   [ State_11111112112( L_h, m, lock.2 ) ]

  /*
  rule (modulo AC) lookupobjLhasv_1_1111111211[color=#408075,
                                               process="lookup <'obj', L_h> as v"]:
     [ State_1111111211( L_h, m, lock ) ]
    --[ IsNotSet( <'obj', L_h> ) ]->
     [ State_11111112112( L_h, m, lock ) ]
  */

restriction Restr_ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111_1:
  "∀ x #NOW.
    (Restr_ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111_1( x
     ) @ #NOW) ⇒
    (x = 'on')"
  // safety formula

rule (modulo E) ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111[color=#408075,
                                                                                                                                                    process="if Can_encrypt( attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)),
             attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)),
             attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
   [ State_11111112111( L_h, m, v, lock.2 ) ]
  --[
  Restr_ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111_1( attenc(tem(v))
  )
  ]->
   [ State_111111121111( L_h, m, v, lock.2 ) ]

  /*
  rule (modulo AC) ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111[color=#408075,
                                                                                                                                                       process="if Can_encrypt( attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)),
             attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)),
             attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
     [ State_11111112111( L_h, m, v, lock ) ]
    --[
    Restr_ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111112111_1( z
    )
    ]->
     [ State_111111121111( L_h, m, v, lock ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = attenc(tem(v.8))
    
    2. v     = <x.8, x.9>
       z     = attenc(x.9)
    
    3. v     = <x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17, 
                x.18>
       z     = x.11
  */

restriction Restr_ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11111112111_1:
  "∀ x #NOW.
    (Restr_ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11111112111_1( x
     ) @ #NOW) ⇒
    (¬(x = 'on'))"
  // safety formula

rule (modulo E) ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11111112111[color=#408075,
                                                                                                                                                    process="if Can_encrypt( attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)),
             attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)),
             attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
   [ State_11111112111( L_h, m, v, lock.2 ) ]
  --[
  Restr_ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11111112111_1( attenc(tem(v))
  )
  ]->
   [ State_111111121112( L_h, m, v, lock.2 ) ]

  /*
  rule (modulo AC) ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11111112111[color=#408075,
                                                                                                                                                       process="if Can_encrypt( attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)),
             attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)),
             attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
     [ State_11111112111( L_h, m, v, lock ) ]
    --[
    Restr_ifCanencryptattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11111112111_1( z
    )
    ]->
     [ State_111111121112( L_h, m, v, lock ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = attenc(tem(v.8))
    
    2. v     = <x.8, x.9>
       z     = attenc(x.9)
    
    3. v     = <x.8, x.9, x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17, 
                x.18>
       z     = x.11
  */

rule (modulo E) eventEncUsingkeyvm_0_111111121111[color=#408075,
                                                  process="event EncUsing( key(v), m );"]:
   [ State_111111121111( L_h, m, v, lock.2 ) ]
  --[ EncUsing( key(v), m ) ]->
   [ State_1111111211111( L_h, m, v, lock.2 ) ]

  /*
  rule (modulo AC) eventEncUsingkeyvm_0_111111121111[color=#408075,
                                                     process="event EncUsing( key(v), m );"]:
     [ State_111111121111( L_h, m, v, lock ) ]
    --[ EncUsing( z, m ) ]->
     [ State_1111111211111( L_h, m, v, lock ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = key(v.8)
    
    2. v     = <x.8, x.9>
       z     = x.8
  */

rule (modulo E) outsencmkeyv_0_1111111211111[color=#408075,
                                             process="out(senc(m, key(v)));"]:
   [ State_1111111211111( L_h, m, v, lock.2 ) ]
  -->
   [ State_11111112111111( L_h, m, v, lock.2 ), Out( senc(m, key(v)) ) ]

  /*
  rule (modulo AC) outsencmkeyv_0_1111111211111[color=#408075,
                                                process="out(senc(m, key(v)));"]:
     [ State_1111111211111( L_h, m, v, lock ) ]
    -->
     [ State_11111112111111( L_h, m, v, lock ), Out( senc(m, z) ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = key(v.8)
    
    2. v     = <x.8, x.9>
       z     = x.8
  */

rule (modulo E) unlockdevice_0_11111112111111[color=#408075,
                                              process="unlock 'device';"]:
   [ State_11111112111111( L_h, m, v, lock.2 ) ]
  --[ Unlock_2( '2', lock.2, 'device' ), Unlock( '2', lock.2, 'device' )
  ]->
   [ State_111111121111111( L_h, m, v, lock.2 ) ]

  /*
  rule (modulo AC) unlockdevice_0_11111112111111[color=#408075,
                                                 process="unlock 'device';"]:
     [ State_11111112111111( L_h, m, v, lock ) ]
    --[ Unlock_2( '2', lock, 'device' ), Unlock( '2', lock, 'device' ) ]->
     [ State_111111121111111( L_h, m, v, lock ) ]
  */

rule (modulo E) p_0_111111121111111[color=#408075, process="0"]:
   [ State_111111121111111( L_h, m, v, lock.2 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_111111121111111[color=#408075, process="0"]:
     [ State_111111121111111( L_h, m, v, lock ) ] --> [ ]
  */

rule (modulo E) p_0_111111121112[color=#408075, process="0"]:
   [ State_111111121112( L_h, m, v, lock.2 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_111111121112[color=#408075, process="0"]:
     [ State_111111121112( L_h, m, v, lock ) ] --> [ ]
  */

rule (modulo E) p_0_11111112112[color=#408075, process="0"]:
   [ State_11111112112( L_h, m, lock.2 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_11111112112[color=#408075, process="0"]:
     [ State_11111112112( L_h, m, lock ) ] --> [ ]
  */

rule (modulo E) inhh_0_1111112[color=#806040, process="in(<h1, h2>);"]:
   [ State_1111112( ), In( <h1, h2> ) ] --> [ State_11111121( h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lockdevice_0_11111121[color=#806040,
                                      process="lock 'device';"]:
   [ State_11111121( h1, h2 ), Fr( lock.3 ) ]
  --[ Lock_3( '3', lock.3, 'device' ), Lock( '3', lock.3, 'device' ) ]->
   [ State_111111211( h1, h2, lock.3 ) ]

  /*
  rule (modulo AC) lockdevice_0_11111121[color=#806040,
                                         process="lock 'device';"]:
     [ State_11111121( h1, h2 ), Fr( lock ) ]
    --[ Lock_3( '3', lock, 'device' ), Lock( '3', lock, 'device' ) ]->
     [ State_111111211( h1, h2, lock ) ]
  */

rule (modulo E) lookupobjhasv_0_111111211[color=#806040,
                                          process="lookup <'obj', h1> as v1"]:
   [ State_111111211( h1, h2, lock.3 ) ]
  --[ IsIn( <'obj', h1>, v1 ) ]->
   [ State_1111112111( h1, h2, v1, lock.3 ) ]

  /*
  rule (modulo AC) lookupobjhasv_0_111111211[color=#806040,
                                             process="lookup <'obj', h1> as v1"]:
     [ State_111111211( h1, h2, lock ) ]
    --[ IsIn( <'obj', h1>, v1 ) ]->
     [ State_1111112111( h1, h2, v1, lock ) ]
  */

rule (modulo E) lookupobjhasv_1_111111211[color=#806040,
                                          process="lookup <'obj', h1> as v1"]:
   [ State_111111211( h1, h2, lock.3 ) ]
  --[ IsNotSet( <'obj', h1> ) ]->
   [ State_1111112112( h1, h2, lock.3 ) ]

  /*
  rule (modulo AC) lookupobjhasv_1_111111211[color=#806040,
                                             process="lookup <'obj', h1> as v1"]:
     [ State_111111211( h1, h2, lock ) ]
    --[ IsNotSet( <'obj', h1> ) ]->
     [ State_1111112112( h1, h2, lock ) ]
  */

rule (modulo E) lookupobjhasv_0_1111112111[color=#806040,
                                           process="lookup <'obj', h2> as v2"]:
   [ State_1111112111( h1, h2, v1, lock.3 ) ]
  --[ IsIn( <'obj', h2>, v2 ) ]->
   [ State_11111121111( h1, h2, v1, v2, lock.3 ) ]

  /*
  rule (modulo AC) lookupobjhasv_0_1111112111[color=#806040,
                                              process="lookup <'obj', h2> as v2"]:
     [ State_1111112111( h1, h2, v1, lock ) ]
    --[ IsIn( <'obj', h2>, v2 ) ]->
     [ State_11111121111( h1, h2, v1, v2, lock ) ]
  */

rule (modulo E) lookupobjhasv_1_1111112111[color=#806040,
                                           process="lookup <'obj', h2> as v2"]:
   [ State_1111112111( h1, h2, v1, lock.3 ) ]
  --[ IsNotSet( <'obj', h2> ) ]->
   [ State_11111121112( h1, h2, v1, lock.3 ) ]

  /*
  rule (modulo AC) lookupobjhasv_1_1111112111[color=#806040,
                                              process="lookup <'obj', h2> as v2"]:
     [ State_1111112111( h1, h2, v1, lock ) ]
    --[ IsNotSet( <'obj', h2> ) ]->
     [ State_11111121112( h1, h2, v1, lock ) ]
  */

restriction Restr_ifCanwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemvattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111121111_1:
  "∀ x #NOW x.1 x.2 x.3 x.4.
    (Restr_ifCanwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemvattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111121111_1( x,
                                                                                                                                                                                                                                                        x.1,
                                                                                                                                                                                                                                                        x.2,
                                                                                                                                                                                                                                                        x.3,
                                                                                                                                                                                                                                                        x.4
     ) @ #NOW) ⇒
    (((x = 'on') ∧ (x.1 = 'on')) ∧
     ((x.2 = 'off') ∨ ((x.3 = 'on') ∧ (x.4 = 'on'))))"
  // safety formula

rule (modulo E) ifCanwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemvattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111121111[color=#806040,
                                                                                                                                                                                                                                                          process="if Can_wrap( attwrap(tem(v1)), attunwrap(tem(v1)), attenc(tem(v1)),
          attdec(tem(v1)), attsens(tem(v1)), attextr(tem(v1)),
          atttrus(tem(v1)), attwwt(tem(v1)), attwt(tem(v1)), attut(tem(v1)),
          attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)),
          attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)),
          atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))
)"]:
   [ State_11111121111( h1, h2, v1, v2, lock.3 ) ]
  --[
  Restr_ifCanwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemvattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111121111_1( attwrap(tem(v1)),
                                                                                                                                                                                                                                                     attextr(tem(v2)),
                                                                                                                                                                                                                                                     attwwt(tem(v2)),
                                                                                                                                                                                                                                                     attwwt(tem(v2)),
                                                                                                                                                                                                                                                     atttrus(tem(v1))
  )
  ]->
   [ State_111111211111( h1, h2, v1, v2, lock.3 ) ]

  /*
  rule (modulo AC) ifCanwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemvattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111121111[color=#806040,
                                                                                                                                                                                                                                                             process="if Can_wrap( attwrap(tem(v1)), attunwrap(tem(v1)), attenc(tem(v1)),
          attdec(tem(v1)), attsens(tem(v1)), attextr(tem(v1)),
          atttrus(tem(v1)), attwwt(tem(v1)), attwt(tem(v1)), attut(tem(v1)),
          attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)),
          attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)),
          atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))
)"]:
     [ State_11111121111( h1, h2, v1, v2, lock ) ]
    --[
    Restr_ifCanwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemvattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11111121111_1( z,
                                                                                                                                                                                                                                                       z.1,
                                                                                                                                                                                                                                                       z.2,
                                                                                                                                                                                                                                                       z.2,
                                                                                                                                                                                                                                                       z.3
    )
    ]->
     [ State_111111211111( h1, h2, v1, v2, lock ) ]
    variants (modulo AC)
    1. v1    = v1.13
       v2    = v2.13
       z     = attwrap(tem(v1.13))
       z.1   = attextr(tem(v2.13))
       z.2   = attwwt(tem(v2.13))
       z.3   = atttrus(tem(v1.13))
    
    2. v1    = v1.15
       v2    = <x.13, x.14>
       z     = attwrap(tem(v1.15))
       z.1   = attextr(x.14)
       z.2   = attwwt(x.14)
       z.3   = atttrus(tem(v1.15))
    
    3. v1    = v1.24
       v2    = <x.13, x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, x.23
               >
       z     = attwrap(tem(v1.24))
       z.1   = x.19
       z.2   = x.21
       z.3   = atttrus(tem(v1.24))
    
    4. v1    = <x.13, x.14>
       v2    = v2.15
       z     = attwrap(x.14)
       z.1   = attextr(tem(v2.15))
       z.2   = attwwt(tem(v2.15))
       z.3   = atttrus(x.14)
    
    5. v1    = <x.13, x.14>
       v2    = <x.15, x.16>
       z     = attwrap(x.14)
       z.1   = attextr(x.16)
       z.2   = attwwt(x.16)
       z.3   = atttrus(x.14)
    
    6. v1    = <x.13, x.14>
       v2    = <x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, x.23, x.24, x.25
               >
       z     = attwrap(x.14)
       z.1   = x.21
       z.2   = x.23
       z.3   = atttrus(x.14)
    
    7. v1    = <x.13, x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, 
                x.23>
       v2    = v2.24
       z     = x.14
       z.1   = attextr(tem(v2.24))
       z.2   = attwwt(tem(v2.24))
       z.3   = x.20
    
    8. v1    = <x.13, x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, 
                x.23>
       v2    = <x.24, x.25>
       z     = x.14
       z.1   = attextr(x.25)
       z.2   = attwwt(x.25)
       z.3   = x.20
    
    9. v1    = <x.13, x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, 
                x.23>
       v2    = <x.24, x.25, x.26, x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34
               >
       z     = x.14
       z.1   = x.30
       z.2   = x.32
       z.3   = x.20
  */

restriction Restr_ifCanwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemvattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11111121111_1:
  "∀ x #NOW x.1 x.2 x.3 x.4.
    (Restr_ifCanwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemvattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11111121111_1( x,
                                                                                                                                                                                                                                                        x.1,
                                                                                                                                                                                                                                                        x.2,
                                                                                                                                                                                                                                                        x.3,
                                                                                                                                                                                                                                                        x.4
     ) @ #NOW) ⇒
    (¬(((x = 'on') ∧ (x.1 = 'on')) ∧
       ((x.2 = 'off') ∨ ((x.3 = 'on') ∧ (x.4 = 'on')))))"
  // safety formula

rule (modulo E) ifCanwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemvattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11111121111[color=#806040,
                                                                                                                                                                                                                                                          process="if Can_wrap( attwrap(tem(v1)), attunwrap(tem(v1)), attenc(tem(v1)),
          attdec(tem(v1)), attsens(tem(v1)), attextr(tem(v1)),
          atttrus(tem(v1)), attwwt(tem(v1)), attwt(tem(v1)), attut(tem(v1)),
          attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)),
          attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)),
          atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))
)"]:
   [ State_11111121111( h1, h2, v1, v2, lock.3 ) ]
  --[
  Restr_ifCanwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemvattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11111121111_1( attwrap(tem(v1)),
                                                                                                                                                                                                                                                     attextr(tem(v2)),
                                                                                                                                                                                                                                                     attwwt(tem(v2)),
                                                                                                                                                                                                                                                     attwwt(tem(v2)),
                                                                                                                                                                                                                                                     atttrus(tem(v1))
  )
  ]->
   [ State_111111211112( h1, h2, v1, v2, lock.3 ) ]

  /*
  rule (modulo AC) ifCanwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemvattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11111121111[color=#806040,
                                                                                                                                                                                                                                                             process="if Can_wrap( attwrap(tem(v1)), attunwrap(tem(v1)), attenc(tem(v1)),
          attdec(tem(v1)), attsens(tem(v1)), attextr(tem(v1)),
          atttrus(tem(v1)), attwwt(tem(v1)), attwt(tem(v1)), attut(tem(v1)),
          attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)),
          attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)),
          atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))
)"]:
     [ State_11111121111( h1, h2, v1, v2, lock ) ]
    --[
    Restr_ifCanwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemvattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11111121111_1( z,
                                                                                                                                                                                                                                                       z.1,
                                                                                                                                                                                                                                                       z.2,
                                                                                                                                                                                                                                                       z.2,
                                                                                                                                                                                                                                                       z.3
    )
    ]->
     [ State_111111211112( h1, h2, v1, v2, lock ) ]
    variants (modulo AC)
    1. v1    = v1.13
       v2    = v2.13
       z     = attwrap(tem(v1.13))
       z.1   = attextr(tem(v2.13))
       z.2   = attwwt(tem(v2.13))
       z.3   = atttrus(tem(v1.13))
    
    2. v1    = v1.15
       v2    = <x.13, x.14>
       z     = attwrap(tem(v1.15))
       z.1   = attextr(x.14)
       z.2   = attwwt(x.14)
       z.3   = atttrus(tem(v1.15))
    
    3. v1    = v1.24
       v2    = <x.13, x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, x.23
               >
       z     = attwrap(tem(v1.24))
       z.1   = x.19
       z.2   = x.21
       z.3   = atttrus(tem(v1.24))
    
    4. v1    = <x.13, x.14>
       v2    = v2.15
       z     = attwrap(x.14)
       z.1   = attextr(tem(v2.15))
       z.2   = attwwt(tem(v2.15))
       z.3   = atttrus(x.14)
    
    5. v1    = <x.13, x.14>
       v2    = <x.15, x.16>
       z     = attwrap(x.14)
       z.1   = attextr(x.16)
       z.2   = attwwt(x.16)
       z.3   = atttrus(x.14)
    
    6. v1    = <x.13, x.14>
       v2    = <x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, x.23, x.24, x.25
               >
       z     = attwrap(x.14)
       z.1   = x.21
       z.2   = x.23
       z.3   = atttrus(x.14)
    
    7. v1    = <x.13, x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, 
                x.23>
       v2    = v2.24
       z     = x.14
       z.1   = attextr(tem(v2.24))
       z.2   = attwwt(tem(v2.24))
       z.3   = x.20
    
    8. v1    = <x.13, x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, 
                x.23>
       v2    = <x.24, x.25>
       z     = x.14
       z.1   = attextr(x.25)
       z.2   = attwwt(x.25)
       z.3   = x.20
    
    9. v1    = <x.13, x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, 
                x.23>
       v2    = <x.24, x.25, x.26, x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34
               >
       z     = x.14
       z.1   = x.30
       z.2   = x.32
       z.3   = x.20
  */

rule (modulo E) lookupFtemplateattwttemvaswt_0_111111211111[color=#806040,
                                                            process="lookup <'F_template', attwt(tem(v1))> as wt"]:
   [ State_111111211111( h1, h2, v1, v2, lock.3 ) ]
  --[ IsIn( <'F_template', attwt(tem(v1))>, wt ) ]->
   [ State_1111112111111( h1, h2, v1, v2, wt, lock.3 ) ]

  /*
  rule (modulo AC) lookupFtemplateattwttemvaswt_0_111111211111[color=#806040,
                                                               process="lookup <'F_template', attwt(tem(v1))> as wt"]:
     [ State_111111211111( h1, h2, v1, v2, lock ) ]
    --[ IsIn( <'F_template', z>, wt ) ]->
     [ State_1111112111111( h1, h2, v1, v2, wt, lock ) ]
    variants (modulo AC)
    1. v1    = v1.13
       z     = attwt(tem(v1.13))
    
    2. v1    = <x.14, x.15>
       z     = attwt(x.15)
    
    3. v1    = <x.24, x.25, x.26, x.27, x.28, x.29, x.30, x.31, x.32, z.23, 
                x.34>
       z     = z.23
  */

rule (modulo E) lookupFtemplateattwttemvaswt_1_111111211111[color=#806040,
                                                            process="lookup <'F_template', attwt(tem(v1))> as wt"]:
   [ State_111111211111( h1, h2, v1, v2, lock.3 ) ]
  --[ IsNotSet( <'F_template', attwt(tem(v1))> ) ]->
   [ State_1111112111112( h1, h2, v1, v2, lock.3 ) ]

  /*
  rule (modulo AC) lookupFtemplateattwttemvaswt_1_111111211111[color=#806040,
                                                               process="lookup <'F_template', attwt(tem(v1))> as wt"]:
     [ State_111111211111( h1, h2, v1, v2, lock ) ]
    --[ IsNotSet( <'F_template', z> ) ]->
     [ State_1111112111112( h1, h2, v1, v2, lock ) ]
    variants (modulo AC)
    1. v1    = v1.12
       z     = attwt(tem(v1.12))
    
    2. v1    = <x.13, x.14>
       z     = attwt(x.14)
    
    3. v1    = <x.23, x.24, x.25, x.26, x.27, x.28, x.29, x.30, x.31, z.22, 
                x.33>
       z     = z.22
  */

restriction Restr_ifPermitsattwrapwtattunwrapwtattencwtattdecwtattsenswtattextrwtatttruswtattwwtwtattwtwtattutwtattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_1111112111111_1:
  "∀ x #NOW x.1 x.2 x.3 x.4 x.5 x.6 x.7 x.8 x.9 x.10 x.11 x.12 x.13 x.14
     x.15 x.16 x.17 x.18 x.19.
    (Restr_ifPermitsattwrapwtattunwrapwtattencwtattdecwtattsenswtattextrwtatttruswtattwwtwtattwtwtattutwtattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_1111112111111_1( x,
                                                                                                                                                                                                                                      x.1,
                                                                                                                                                                                                                                      x.2,
                                                                                                                                                                                                                                      x.3,
                                                                                                                                                                                                                                      x.4,
                                                                                                                                                                                                                                      x.5,
                                                                                                                                                                                                                                      x.6,
                                                                                                                                                                                                                                      x.7,
                                                                                                                                                                                                                                      x.8,
                                                                                                                                                                                                                                      x.9,
                                                                                                                                                                                                                                      x.10,
                                                                                                                                                                                                                                      x.11,
                                                                                                                                                                                                                                      x.12,
                                                                                                                                                                                                                                      x.13,
                                                                                                                                                                                                                                      x.14,
                                                                                                                                                                                                                                      x.15,
                                                                                                                                                                                                                                      x.16,
                                                                                                                                                                                                                                      x.17,
                                                                                                                                                                                                                                      x.18,
                                                                                                                                                                                                                                      x.19
     ) @ #NOW) ⇒
    ((((((((((x = x.1) ∧ (x.2 = x.3)) ∧ (x.4 = x.5)) ∧ (x.6 = x.7)) ∧
          (x.8 = x.9)) ∧
         (x.10 = x.11)) ∧
        (x.12 = x.13)) ∧
       (x.14 = x.15)) ∧
      (x.16 = x.17)) ∧
     (x.18 = x.19))"
  // safety formula

rule (modulo E) ifPermitsattwrapwtattunwrapwtattencwtattdecwtattsenswtattextrwtatttruswtattwwtwtattwtwtattutwtattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_1111112111111[color=#806040,
                                                                                                                                                                                                                                        process="if Permits( attwrap(wt), attunwrap(wt), attenc(wt), attdec(wt),
         attsens(wt), attextr(wt), atttrus(wt), attwwt(wt), attwt(wt),
         attut(wt), attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)),
         attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)),
         atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))
)"]:
   [ State_1111112111111( h1, h2, v1, v2, wt, lock.3 ) ]
  --[
  Restr_ifPermitsattwrapwtattunwrapwtattencwtattdecwtattsenswtattextrwtatttruswtattwwtwtattwtwtattutwtattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_1111112111111_1( attwrap(wt),
                                                                                                                                                                                                                                   attwrap(tem(v2)),
                                                                                                                                                                                                                                   attunwrap(wt),
                                                                                                                                                                                                                                   attunwrap(tem(v2)),
                                                                                                                                                                                                                                   attenc(wt),
                                                                                                                                                                                                                                   attenc(tem(v2)),
                                                                                                                                                                                                                                   attdec(wt),
                                                                                                                                                                                                                                   attdec(tem(v2)),
                                                                                                                                                                                                                                   attsens(wt),
                                                                                                                                                                                                                                   attsens(tem(v2)),
                                                                                                                                                                                                                                   attextr(wt),
                                                                                                                                                                                                                                   attextr(tem(v2)),
                                                                                                                                                                                                                                   atttrus(wt),
                                                                                                                                                                                                                                   atttrus(tem(v2)),
                                                                                                                                                                                                                                   attwwt(wt),
                                                                                                                                                                                                                                   attwwt(tem(v2)),
                                                                                                                                                                                                                                   attwt(wt),
                                                                                                                                                                                                                                   attwt(tem(v2)),
                                                                                                                                                                                                                                   attut(wt),
                                                                                                                                                                                                                                   attut(tem(v2))
  )
  ]->
   [ State_11111121111111( h1, h2, v1, v2, wt, lock.3 ) ]

  /*
  rule (modulo AC) ifPermitsattwrapwtattunwrapwtattencwtattdecwtattsenswtattextrwtatttruswtattwwtwtattwtwtattutwtattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_1111112111111[color=#806040,
                                                                                                                                                                                                                                           process="if Permits( attwrap(wt), attunwrap(wt), attenc(wt), attdec(wt),
         attsens(wt), attextr(wt), atttrus(wt), attwwt(wt), attwt(wt),
         attut(wt), attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)),
         attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)),
         atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))
)"]:
     [ State_1111112111111( h1, h2, v1, v2, wt, lock ) ]
    --[
    Restr_ifPermitsattwrapwtattunwrapwtattencwtattdecwtattsenswtattextrwtatttruswtattwwtwtattwtwtattutwtattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_1111112111111_1( z,
                                                                                                                                                                                                                                     z.1,
                                                                                                                                                                                                                                     z.2,
                                                                                                                                                                                                                                     z.3,
                                                                                                                                                                                                                                     z.4,
                                                                                                                                                                                                                                     z.5,
                                                                                                                                                                                                                                     z.6,
                                                                                                                                                                                                                                     z.7,
                                                                                                                                                                                                                                     z.8,
                                                                                                                                                                                                                                     z.9,
                                                                                                                                                                                                                                     z.10,
                                                                                                                                                                                                                                     z.11,
                                                                                                                                                                                                                                     z.12,
                                                                                                                                                                                                                                     z.13,
                                                                                                                                                                                                                                     z.14,
                                                                                                                                                                                                                                     z.15,
                                                                                                                                                                                                                                     z.16,
                                                                                                                                                                                                                                     z.17,
                                                                                                                                                                                                                                     z.18,
                                                                                                                                                                                                                                     z.19
    )
    ]->
     [ State_11111121111111( h1, h2, v1, v2, wt, lock ) ]
    variants (modulo AC)
    1. v2    = v2.30
       wt    = wt.30
       z     = attwrap(wt.30)
       z.1   = attwrap(tem(v2.30))
       z.2   = attunwrap(wt.30)
       z.3   = attunwrap(tem(v2.30))
       z.4   = attenc(wt.30)
       z.5   = attenc(tem(v2.30))
       z.6   = attdec(wt.30)
       z.7   = attdec(tem(v2.30))
       z.8   = attsens(wt.30)
       z.9   = attsens(tem(v2.30))
       z.10  = attextr(wt.30)
       z.11  = attextr(tem(v2.30))
       z.12  = atttrus(wt.30)
       z.13  = atttrus(tem(v2.30))
       z.14  = attwwt(wt.30)
       z.15  = attwwt(tem(v2.30))
       z.16  = attwt(wt.30)
       z.17  = attwt(tem(v2.30))
       z.18  = attut(wt.30)
       z.19  = attut(tem(v2.30))
    
    2. v2    = v2.40
       wt    = <x.30, x.31, x.32, x.33, x.34, x.35, x.36, x.37, x.38, x.39>
       z     = x.30
       z.1   = attwrap(tem(v2.40))
       z.2   = x.31
       z.3   = attunwrap(tem(v2.40))
       z.4   = x.32
       z.5   = attenc(tem(v2.40))
       z.6   = x.33
       z.7   = attdec(tem(v2.40))
       z.8   = x.34
       z.9   = attsens(tem(v2.40))
       z.10  = x.35
       z.11  = attextr(tem(v2.40))
       z.12  = x.36
       z.13  = atttrus(tem(v2.40))
       z.14  = x.37
       z.15  = attwwt(tem(v2.40))
       z.16  = x.38
       z.17  = attwt(tem(v2.40))
       z.18  = x.39
       z.19  = attut(tem(v2.40))
    
    3. v2    = <x.30, x.31>
       wt    = wt.32
       z     = attwrap(wt.32)
       z.1   = attwrap(x.31)
       z.2   = attunwrap(wt.32)
       z.3   = attunwrap(x.31)
       z.4   = attenc(wt.32)
       z.5   = attenc(x.31)
       z.6   = attdec(wt.32)
       z.7   = attdec(x.31)
       z.8   = attsens(wt.32)
       z.9   = attsens(x.31)
       z.10  = attextr(wt.32)
       z.11  = attextr(x.31)
       z.12  = atttrus(wt.32)
       z.13  = atttrus(x.31)
       z.14  = attwwt(wt.32)
       z.15  = attwwt(x.31)
       z.16  = attwt(wt.32)
       z.17  = attwt(x.31)
       z.18  = attut(wt.32)
       z.19  = attut(x.31)
    
    4. v2    = <x.30, x.31>
       wt    = <x.32, x.33, x.34, x.35, x.36, x.37, x.38, x.39, x.40, x.41>
       z     = x.32
       z.1   = attwrap(x.31)
       z.2   = x.33
       z.3   = attunwrap(x.31)
       z.4   = x.34
       z.5   = attenc(x.31)
       z.6   = x.35
       z.7   = attdec(x.31)
       z.8   = x.36
       z.9   = attsens(x.31)
       z.10  = x.37
       z.11  = attextr(x.31)
       z.12  = x.38
       z.13  = atttrus(x.31)
       z.14  = x.39
       z.15  = attwwt(x.31)
       z.16  = x.40
       z.17  = attwt(x.31)
       z.18  = x.41
       z.19  = attut(x.31)
    
    5. v2    = <x.30, x.31, x.32, x.33, x.34, x.35, x.36, x.37, x.38, x.39, 
                x.40>
       wt    = wt.41
       z     = attwrap(wt.41)
       z.1   = x.31
       z.2   = attunwrap(wt.41)
       z.3   = x.32
       z.4   = attenc(wt.41)
       z.5   = x.33
       z.6   = attdec(wt.41)
       z.7   = x.34
       z.8   = attsens(wt.41)
       z.9   = x.35
       z.10  = attextr(wt.41)
       z.11  = x.36
       z.12  = atttrus(wt.41)
       z.13  = x.37
       z.14  = attwwt(wt.41)
       z.15  = x.38
       z.16  = attwt(wt.41)
       z.17  = x.39
       z.18  = attut(wt.41)
       z.19  = x.40
    
    6. v2    = <x.30, x.31, x.32, x.33, x.34, x.35, x.36, x.37, x.38, x.39, 
                x.40>
       wt    = <x.41, x.42, x.43, x.44, x.45, x.46, x.47, x.48, x.49, x.50>
       z     = x.41
       z.1   = x.31
       z.2   = x.42
       z.3   = x.32
       z.4   = x.43
       z.5   = x.33
       z.6   = x.44
       z.7   = x.34
       z.8   = x.45
       z.9   = x.35
       z.10  = x.46
       z.11  = x.36
       z.12  = x.47
       z.13  = x.37
       z.14  = x.48
       z.15  = x.38
       z.16  = x.49
       z.17  = x.39
       z.18  = x.50
       z.19  = x.40
  */

restriction Restr_ifPermitsattwrapwtattunwrapwtattencwtattdecwtattsenswtattextrwtatttruswtattwwtwtattwtwtattutwtattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_1111112111111_1:
  "∀ x #NOW x.1 x.2 x.3 x.4 x.5 x.6 x.7 x.8 x.9 x.10 x.11 x.12 x.13 x.14
     x.15 x.16 x.17 x.18 x.19.
    (Restr_ifPermitsattwrapwtattunwrapwtattencwtattdecwtattsenswtattextrwtatttruswtattwwtwtattwtwtattutwtattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_1111112111111_1( x,
                                                                                                                                                                                                                                      x.1,
                                                                                                                                                                                                                                      x.2,
                                                                                                                                                                                                                                      x.3,
                                                                                                                                                                                                                                      x.4,
                                                                                                                                                                                                                                      x.5,
                                                                                                                                                                                                                                      x.6,
                                                                                                                                                                                                                                      x.7,
                                                                                                                                                                                                                                      x.8,
                                                                                                                                                                                                                                      x.9,
                                                                                                                                                                                                                                      x.10,
                                                                                                                                                                                                                                      x.11,
                                                                                                                                                                                                                                      x.12,
                                                                                                                                                                                                                                      x.13,
                                                                                                                                                                                                                                      x.14,
                                                                                                                                                                                                                                      x.15,
                                                                                                                                                                                                                                      x.16,
                                                                                                                                                                                                                                      x.17,
                                                                                                                                                                                                                                      x.18,
                                                                                                                                                                                                                                      x.19
     ) @ #NOW) ⇒
    (¬((((((((((x = x.1) ∧ (x.2 = x.3)) ∧ (x.4 = x.5)) ∧ (x.6 = x.7)) ∧
            (x.8 = x.9)) ∧
           (x.10 = x.11)) ∧
          (x.12 = x.13)) ∧
         (x.14 = x.15)) ∧
        (x.16 = x.17)) ∧
       (x.18 = x.19)))"
  // safety formula

rule (modulo E) ifPermitsattwrapwtattunwrapwtattencwtattdecwtattsenswtattextrwtatttruswtattwwtwtattwtwtattutwtattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_1111112111111[color=#806040,
                                                                                                                                                                                                                                        process="if Permits( attwrap(wt), attunwrap(wt), attenc(wt), attdec(wt),
         attsens(wt), attextr(wt), atttrus(wt), attwwt(wt), attwt(wt),
         attut(wt), attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)),
         attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)),
         atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))
)"]:
   [ State_1111112111111( h1, h2, v1, v2, wt, lock.3 ) ]
  --[
  Restr_ifPermitsattwrapwtattunwrapwtattencwtattdecwtattsenswtattextrwtatttruswtattwwtwtattwtwtattutwtattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_1111112111111_1( attwrap(wt),
                                                                                                                                                                                                                                   attwrap(tem(v2)),
                                                                                                                                                                                                                                   attunwrap(wt),
                                                                                                                                                                                                                                   attunwrap(tem(v2)),
                                                                                                                                                                                                                                   attenc(wt),
                                                                                                                                                                                                                                   attenc(tem(v2)),
                                                                                                                                                                                                                                   attdec(wt),
                                                                                                                                                                                                                                   attdec(tem(v2)),
                                                                                                                                                                                                                                   attsens(wt),
                                                                                                                                                                                                                                   attsens(tem(v2)),
                                                                                                                                                                                                                                   attextr(wt),
                                                                                                                                                                                                                                   attextr(tem(v2)),
                                                                                                                                                                                                                                   atttrus(wt),
                                                                                                                                                                                                                                   atttrus(tem(v2)),
                                                                                                                                                                                                                                   attwwt(wt),
                                                                                                                                                                                                                                   attwwt(tem(v2)),
                                                                                                                                                                                                                                   attwt(wt),
                                                                                                                                                                                                                                   attwt(tem(v2)),
                                                                                                                                                                                                                                   attut(wt),
                                                                                                                                                                                                                                   attut(tem(v2))
  )
  ]->
   [ State_11111121111112( h1, h2, v1, v2, wt, lock.3 ) ]

  /*
  rule (modulo AC) ifPermitsattwrapwtattunwrapwtattencwtattdecwtattsenswtattextrwtatttruswtattwwtwtattwtwtattutwtattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_1111112111111[color=#806040,
                                                                                                                                                                                                                                           process="if Permits( attwrap(wt), attunwrap(wt), attenc(wt), attdec(wt),
         attsens(wt), attextr(wt), atttrus(wt), attwwt(wt), attwt(wt),
         attut(wt), attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)),
         attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)),
         atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))
)"]:
     [ State_1111112111111( h1, h2, v1, v2, wt, lock ) ]
    --[
    Restr_ifPermitsattwrapwtattunwrapwtattencwtattdecwtattsenswtattextrwtatttruswtattwwtwtattwtwtattutwtattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_1111112111111_1( z,
                                                                                                                                                                                                                                     z.1,
                                                                                                                                                                                                                                     z.2,
                                                                                                                                                                                                                                     z.3,
                                                                                                                                                                                                                                     z.4,
                                                                                                                                                                                                                                     z.5,
                                                                                                                                                                                                                                     z.6,
                                                                                                                                                                                                                                     z.7,
                                                                                                                                                                                                                                     z.8,
                                                                                                                                                                                                                                     z.9,
                                                                                                                                                                                                                                     z.10,
                                                                                                                                                                                                                                     z.11,
                                                                                                                                                                                                                                     z.12,
                                                                                                                                                                                                                                     z.13,
                                                                                                                                                                                                                                     z.14,
                                                                                                                                                                                                                                     z.15,
                                                                                                                                                                                                                                     z.16,
                                                                                                                                                                                                                                     z.17,
                                                                                                                                                                                                                                     z.18,
                                                                                                                                                                                                                                     z.19
    )
    ]->
     [ State_11111121111112( h1, h2, v1, v2, wt, lock ) ]
    variants (modulo AC)
    1. v2    = v2.30
       wt    = wt.30
       z     = attwrap(wt.30)
       z.1   = attwrap(tem(v2.30))
       z.2   = attunwrap(wt.30)
       z.3   = attunwrap(tem(v2.30))
       z.4   = attenc(wt.30)
       z.5   = attenc(tem(v2.30))
       z.6   = attdec(wt.30)
       z.7   = attdec(tem(v2.30))
       z.8   = attsens(wt.30)
       z.9   = attsens(tem(v2.30))
       z.10  = attextr(wt.30)
       z.11  = attextr(tem(v2.30))
       z.12  = atttrus(wt.30)
       z.13  = atttrus(tem(v2.30))
       z.14  = attwwt(wt.30)
       z.15  = attwwt(tem(v2.30))
       z.16  = attwt(wt.30)
       z.17  = attwt(tem(v2.30))
       z.18  = attut(wt.30)
       z.19  = attut(tem(v2.30))
    
    2. v2    = v2.40
       wt    = <x.30, x.31, x.32, x.33, x.34, x.35, x.36, x.37, x.38, x.39>
       z     = x.30
       z.1   = attwrap(tem(v2.40))
       z.2   = x.31
       z.3   = attunwrap(tem(v2.40))
       z.4   = x.32
       z.5   = attenc(tem(v2.40))
       z.6   = x.33
       z.7   = attdec(tem(v2.40))
       z.8   = x.34
       z.9   = attsens(tem(v2.40))
       z.10  = x.35
       z.11  = attextr(tem(v2.40))
       z.12  = x.36
       z.13  = atttrus(tem(v2.40))
       z.14  = x.37
       z.15  = attwwt(tem(v2.40))
       z.16  = x.38
       z.17  = attwt(tem(v2.40))
       z.18  = x.39
       z.19  = attut(tem(v2.40))
    
    3. v2    = <x.30, x.31>
       wt    = wt.32
       z     = attwrap(wt.32)
       z.1   = attwrap(x.31)
       z.2   = attunwrap(wt.32)
       z.3   = attunwrap(x.31)
       z.4   = attenc(wt.32)
       z.5   = attenc(x.31)
       z.6   = attdec(wt.32)
       z.7   = attdec(x.31)
       z.8   = attsens(wt.32)
       z.9   = attsens(x.31)
       z.10  = attextr(wt.32)
       z.11  = attextr(x.31)
       z.12  = atttrus(wt.32)
       z.13  = atttrus(x.31)
       z.14  = attwwt(wt.32)
       z.15  = attwwt(x.31)
       z.16  = attwt(wt.32)
       z.17  = attwt(x.31)
       z.18  = attut(wt.32)
       z.19  = attut(x.31)
    
    4. v2    = <x.30, x.31>
       wt    = <x.32, x.33, x.34, x.35, x.36, x.37, x.38, x.39, x.40, x.41>
       z     = x.32
       z.1   = attwrap(x.31)
       z.2   = x.33
       z.3   = attunwrap(x.31)
       z.4   = x.34
       z.5   = attenc(x.31)
       z.6   = x.35
       z.7   = attdec(x.31)
       z.8   = x.36
       z.9   = attsens(x.31)
       z.10  = x.37
       z.11  = attextr(x.31)
       z.12  = x.38
       z.13  = atttrus(x.31)
       z.14  = x.39
       z.15  = attwwt(x.31)
       z.16  = x.40
       z.17  = attwt(x.31)
       z.18  = x.41
       z.19  = attut(x.31)
    
    5. v2    = <x.30, x.31, x.32, x.33, x.34, x.35, x.36, x.37, x.38, x.39, 
                x.40>
       wt    = wt.41
       z     = attwrap(wt.41)
       z.1   = x.31
       z.2   = attunwrap(wt.41)
       z.3   = x.32
       z.4   = attenc(wt.41)
       z.5   = x.33
       z.6   = attdec(wt.41)
       z.7   = x.34
       z.8   = attsens(wt.41)
       z.9   = x.35
       z.10  = attextr(wt.41)
       z.11  = x.36
       z.12  = atttrus(wt.41)
       z.13  = x.37
       z.14  = attwwt(wt.41)
       z.15  = x.38
       z.16  = attwt(wt.41)
       z.17  = x.39
       z.18  = attut(wt.41)
       z.19  = x.40
    
    6. v2    = <x.30, x.31, x.32, x.33, x.34, x.35, x.36, x.37, x.38, x.39, 
                x.40>
       wt    = <x.41, x.42, x.43, x.44, x.45, x.46, x.47, x.48, x.49, x.50>
       z     = x.41
       z.1   = x.31
       z.2   = x.42
       z.3   = x.32
       z.4   = x.43
       z.5   = x.33
       z.6   = x.44
       z.7   = x.34
       z.8   = x.45
       z.9   = x.35
       z.10  = x.46
       z.11  = x.36
       z.12  = x.47
       z.13  = x.37
       z.14  = x.48
       z.15  = x.38
       z.16  = x.49
       z.17  = x.39
       z.18  = x.50
       z.19  = x.40
  */

rule (modulo E) eventWrapkeyvkeyv_0_11111121111111[color=#806040,
                                                   process="event Wrap( key(v1), key(v2) );"]:
   [ State_11111121111111( h1, h2, v1, v2, wt, lock.3 ) ]
  --[ Wrap( key(v1), key(v2) ) ]->
   [ State_111111211111111( h1, h2, v1, v2, wt, lock.3 ) ]

  /*
  rule (modulo AC) eventWrapkeyvkeyv_0_11111121111111[color=#806040,
                                                      process="event Wrap( key(v1), key(v2) );"]:
     [ State_11111121111111( h1, h2, v1, v2, wt, lock ) ]
    --[ Wrap( z, z.1 ) ]->
     [ State_111111211111111( h1, h2, v1, v2, wt, lock ) ]
    variants (modulo AC)
    1. v1    = v1.12
       v2    = v2.12
       z     = key(v1.12)
       z.1   = key(v2.12)
    
    2. v1    = v1.14
       v2    = <x.12, x.13>
       z     = key(v1.14)
       z.1   = x.12
    
    3. v1    = <x.12, x.13>
       v2    = v2.14
       z     = x.12
       z.1   = key(v2.14)
    
    4. v1    = <x.12, x.13>
       v2    = <x.14, x.15>
       z     = x.12
       z.1   = x.14
  */

rule (modulo E) outsenckeyvkeyv_0_111111211111111[color=#806040,
                                                  process="out(senc(key(v2), key(v1)));"]:
   [ State_111111211111111( h1, h2, v1, v2, wt, lock.3 ) ]
  -->
   [
   State_1111112111111111( h1, h2, v1, v2, wt, lock.3 ),
   Out( senc(key(v2), key(v1)) )
   ]

  /*
  rule (modulo AC) outsenckeyvkeyv_0_111111211111111[color=#806040,
                                                     process="out(senc(key(v2), key(v1)));"]:
     [ State_111111211111111( h1, h2, v1, v2, wt, lock ) ]
    -->
     [ State_1111112111111111( h1, h2, v1, v2, wt, lock ), Out( senc(z, z.1) )
     ]
    variants (modulo AC)
    1. v1    = v1.12
       v2    = v2.12
       z     = key(v2.12)
       z.1   = key(v1.12)
    
    2. v1    = v1.14
       v2    = <x.12, x.13>
       z     = x.12
       z.1   = key(v1.14)
    
    3. v1    = <x.12, x.13>
       v2    = v2.14
       z     = key(v2.14)
       z.1   = x.12
    
    4. v1    = <x.12, x.13>
       v2    = <x.14, x.15>
       z     = x.14
       z.1   = x.12
  */

rule (modulo E) unlockdevice_0_1111112111111111[color=#806040,
                                                process="unlock 'device';"]:
   [ State_1111112111111111( h1, h2, v1, v2, wt, lock.3 ) ]
  --[ Unlock_3( '3', lock.3, 'device' ), Unlock( '3', lock.3, 'device' )
  ]->
   [ State_11111121111111111( h1, h2, v1, v2, wt, lock.3 ) ]

  /*
  rule (modulo AC) unlockdevice_0_1111112111111111[color=#806040,
                                                   process="unlock 'device';"]:
     [ State_1111112111111111( h1, h2, v1, v2, wt, lock ) ]
    --[ Unlock_3( '3', lock, 'device' ), Unlock( '3', lock, 'device' ) ]->
     [ State_11111121111111111( h1, h2, v1, v2, wt, lock ) ]
  */

rule (modulo E) p_0_11111121111111111[color=#806040, process="0"]:
   [ State_11111121111111111( h1, h2, v1, v2, wt, lock.3 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_11111121111111111[color=#806040, process="0"]:
     [ State_11111121111111111( h1, h2, v1, v2, wt, lock ) ] --> [ ]
  */

rule (modulo E) p_0_11111121111112[color=#806040, process="0"]:
   [ State_11111121111112( h1, h2, v1, v2, wt, lock.3 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_11111121111112[color=#806040, process="0"]:
     [ State_11111121111112( h1, h2, v1, v2, wt, lock ) ] --> [ ]
  */

rule (modulo E) p_0_1111112111112[color=#806040, process="0"]:
   [ State_1111112111112( h1, h2, v1, v2, lock.3 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_1111112111112[color=#806040, process="0"]:
     [ State_1111112111112( h1, h2, v1, v2, lock ) ] --> [ ]
  */

rule (modulo E) p_0_111111211112[color=#806040, process="0"]:
   [ State_111111211112( h1, h2, v1, v2, lock.3 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_111111211112[color=#806040, process="0"]:
     [ State_111111211112( h1, h2, v1, v2, lock ) ] --> [ ]
  */

rule (modulo E) p_0_11111121112[color=#806040, process="0"]:
   [ State_11111121112( h1, h2, v1, lock.3 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_11111121112[color=#806040, process="0"]:
     [ State_11111121112( h1, h2, v1, lock ) ] --> [ ]
  */

rule (modulo E) p_0_1111112112[color=#806040, process="0"]:
   [ State_1111112112( h1, h2, lock.3 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_1111112112[color=#806040, process="0"]:
     [ State_1111112112( h1, h2, lock ) ] --> [ ]
  */

rule (modulo E) inLhsencmkatts_0_111112[color=#7e8040,
                                        process="in(<L_h, senc(m, k), atts>);"]:
   [ State_111112( ), In( <L_h, senc(m, k), atts> ) ]
  -->
   [ State_1111121( L_h, atts, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lockdevice_0_1111121[color=#7e8040,
                                     process="lock 'device';"]:
   [ State_1111121( L_h, atts, k, m ), Fr( lock.4 ) ]
  --[ Lock_4( '4', lock.4, 'device' ), Lock( '4', lock.4, 'device' ) ]->
   [ State_11111211( L_h, atts, k, m, lock.4 ) ]

  /*
  rule (modulo AC) lockdevice_0_1111121[color=#7e8040,
                                        process="lock 'device';"]:
     [ State_1111121( L_h, atts, k, m ), Fr( lock ) ]
    --[ Lock_4( '4', lock, 'device' ), Lock( '4', lock, 'device' ) ]->
     [ State_11111211( L_h, atts, k, m, lock ) ]
  */

rule (modulo E) lookupobjLhasv_0_11111211[color=#7e8040,
                                          process="lookup <'obj', L_h> as v"]:
   [ State_11111211( L_h, atts, k, m, lock.4 ) ]
  --[ IsIn( <'obj', L_h>, v ) ]->
   [ State_111112111( L_h, atts, k, m, v, lock.4 ) ]

  /*
  rule (modulo AC) lookupobjLhasv_0_11111211[color=#7e8040,
                                             process="lookup <'obj', L_h> as v"]:
     [ State_11111211( L_h, atts, k, m, lock ) ]
    --[ IsIn( <'obj', L_h>, v ) ]->
     [ State_111112111( L_h, atts, k, m, v, lock ) ]
  */

rule (modulo E) lookupobjLhasv_1_11111211[color=#7e8040,
                                          process="lookup <'obj', L_h> as v"]:
   [ State_11111211( L_h, atts, k, m, lock.4 ) ]
  --[ IsNotSet( <'obj', L_h> ) ]->
   [ State_111112112( L_h, atts, k, m, lock.4 ) ]

  /*
  rule (modulo AC) lookupobjLhasv_1_11111211[color=#7e8040,
                                             process="lookup <'obj', L_h> as v"]:
     [ State_11111211( L_h, atts, k, m, lock ) ]
    --[ IsNotSet( <'obj', L_h> ) ]->
     [ State_111112112( L_h, atts, k, m, lock ) ]
  */

restriction Restr_ifCanunwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_111112111_1:
  "∀ x #NOW.
    (Restr_ifCanunwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_111112111_1( x
     ) @ #NOW) ⇒
    (x = 'on')"
  // safety formula

rule (modulo E) ifCanunwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_111112111[color=#7e8040,
                                                                                                                                                 process="if Can_unwrap( attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)),
            attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)),
            attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
   [ State_111112111( L_h, atts, k, m, v, lock.4 ) ]
  --[
  Restr_ifCanunwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_111112111_1( attunwrap(tem(v))
  )
  ]->
   [ State_1111121111( L_h, atts, k, m, v, lock.4 ) ]

  /*
  rule (modulo AC) ifCanunwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_111112111[color=#7e8040,
                                                                                                                                                    process="if Can_unwrap( attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)),
            attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)),
            attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
     [ State_111112111( L_h, atts, k, m, v, lock ) ]
    --[
    Restr_ifCanunwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_111112111_1( z
    )
    ]->
     [ State_1111121111( L_h, atts, k, m, v, lock ) ]
    variants (modulo AC)
    1. v     = v.12
       z     = attunwrap(tem(v.12))
    
    2. v     = <x.12, x.13>
       z     = attunwrap(x.13)
    
    3. v     = <x.12, x.13, x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, 
                x.22>
       z     = x.14
  */

restriction Restr_ifCanunwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_111112111_1:
  "∀ x #NOW.
    (Restr_ifCanunwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_111112111_1( x
     ) @ #NOW) ⇒
    (¬(x = 'on'))"
  // safety formula

rule (modulo E) ifCanunwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_111112111[color=#7e8040,
                                                                                                                                                 process="if Can_unwrap( attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)),
            attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)),
            attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
   [ State_111112111( L_h, atts, k, m, v, lock.4 ) ]
  --[
  Restr_ifCanunwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_111112111_1( attunwrap(tem(v))
  )
  ]->
   [ State_1111121112( L_h, atts, k, m, v, lock.4 ) ]

  /*
  rule (modulo AC) ifCanunwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_111112111[color=#7e8040,
                                                                                                                                                    process="if Can_unwrap( attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)),
            attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)),
            attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
     [ State_111112111( L_h, atts, k, m, v, lock ) ]
    --[
    Restr_ifCanunwrapattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_111112111_1( z
    )
    ]->
     [ State_1111121112( L_h, atts, k, m, v, lock ) ]
    variants (modulo AC)
    1. v     = v.12
       z     = attunwrap(tem(v.12))
    
    2. v     = <x.12, x.13>
       z     = attunwrap(x.13)
    
    3. v     = <x.12, x.13, x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, 
                x.22>
       z     = x.14
  */

rule (modulo E) ifkeyvk_0_1111121111[color=#7e8040,
                                     process="if key(v)=k"]:
   [ State_1111121111( L_h, atts, k, m, v, lock.4 ) ]
  --[ Pred_Eq( key(v), k ) ]->
   [ State_11111211111( L_h, atts, k, m, v, lock.4 ) ]

  /*
  rule (modulo AC) ifkeyvk_0_1111121111[color=#7e8040,
                                        process="if key(v)=k"]:
     [ State_1111121111( L_h, atts, k, m, v, lock ) ]
    --[ Pred_Eq( z, k ) ]->
     [ State_11111211111( L_h, atts, k, m, v, lock ) ]
    variants (modulo AC)
    1. v     = v.12
       z     = key(v.12)
    
    2. v     = <x.12, x.13>
       z     = x.12
  */

rule (modulo E) ifkeyvk_1_1111121111[color=#7e8040,
                                     process="if key(v)=k"]:
   [ State_1111121111( L_h, atts, k, m, v, lock.4 ) ]
  --[ Pred_Not_Eq( key(v), k ) ]->
   [ State_11111211112( L_h, atts, k, m, v, lock.4 ) ]

  /*
  rule (modulo AC) ifkeyvk_1_1111121111[color=#7e8040,
                                        process="if key(v)=k"]:
     [ State_1111121111( L_h, atts, k, m, v, lock ) ]
    --[ Pred_Not_Eq( z, k ) ]->
     [ State_11111211112( L_h, atts, k, m, v, lock ) ]
    variants (modulo AC)
    1. v     = v.12
       z     = key(v.12)
    
    2. v     = <x.12, x.13>
       z     = x.12
  */

rule (modulo E) lookupFtemplateattuttemvasut_0_11111211111[color=#7e8040,
                                                           process="lookup <'F_template', attut(tem(v))> as ut"]:
   [ State_11111211111( L_h, atts, k, m, v, lock.4 ) ]
  --[ IsIn( <'F_template', attut(tem(v))>, ut ) ]->
   [ State_111112111111( L_h, atts, k, m, ut, v, lock.4 ) ]

  /*
  rule (modulo AC) lookupFtemplateattuttemvasut_0_11111211111[color=#7e8040,
                                                              process="lookup <'F_template', attut(tem(v))> as ut"]:
     [ State_11111211111( L_h, atts, k, m, v, lock ) ]
    --[ IsIn( <'F_template', z>, ut ) ]->
     [ State_111112111111( L_h, atts, k, m, ut, v, lock ) ]
    variants (modulo AC)
    1. v     = v.15
       z     = attut(tem(v.15))
    
    2. v     = <x.16, x.17>
       z     = attut(x.17)
    
    3. v     = <x.26, x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, x.35, 
                z.25>
       z     = z.25
  */

rule (modulo E) lookupFtemplateattuttemvasut_1_11111211111[color=#7e8040,
                                                           process="lookup <'F_template', attut(tem(v))> as ut"]:
   [ State_11111211111( L_h, atts, k, m, v, lock.4 ) ]
  --[ IsNotSet( <'F_template', attut(tem(v))> ) ]->
   [ State_111112111112( L_h, atts, k, m, v, lock.4 ) ]

  /*
  rule (modulo AC) lookupFtemplateattuttemvasut_1_11111211111[color=#7e8040,
                                                              process="lookup <'F_template', attut(tem(v))> as ut"]:
     [ State_11111211111( L_h, atts, k, m, v, lock ) ]
    --[ IsNotSet( <'F_template', z> ) ]->
     [ State_111112111112( L_h, atts, k, m, v, lock ) ]
    variants (modulo AC)
    1. v     = v.14
       z     = attut(tem(v.14))
    
    2. v     = <x.15, x.16>
       z     = attut(x.16)
    
    3. v     = <x.25, x.26, x.27, x.28, x.29, x.30, x.31, x.32, x.33, x.34, 
                z.24>
       z     = z.24
  */

restriction Restr_ifPermitsattwraputattunwraputattencutattdecutattsensutattextrutatttrusutattwwtutattwtutattututattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_111112111111_1:
  "∀ x #NOW x.1 x.2 x.3 x.4 x.5 x.6 x.7 x.8 x.9 x.10 x.11 x.12 x.13 x.14
     x.15 x.16 x.17 x.18 x.19.
    (Restr_ifPermitsattwraputattunwraputattencutattdecutattsensutattextrutatttrusutattwwtutattwtutattututattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_111112111111_1( x,
                                                                                                                                                                                                                                     x.1,
                                                                                                                                                                                                                                     x.2,
                                                                                                                                                                                                                                     x.3,
                                                                                                                                                                                                                                     x.4,
                                                                                                                                                                                                                                     x.5,
                                                                                                                                                                                                                                     x.6,
                                                                                                                                                                                                                                     x.7,
                                                                                                                                                                                                                                     x.8,
                                                                                                                                                                                                                                     x.9,
                                                                                                                                                                                                                                     x.10,
                                                                                                                                                                                                                                     x.11,
                                                                                                                                                                                                                                     x.12,
                                                                                                                                                                                                                                     x.13,
                                                                                                                                                                                                                                     x.14,
                                                                                                                                                                                                                                     x.15,
                                                                                                                                                                                                                                     x.16,
                                                                                                                                                                                                                                     x.17,
                                                                                                                                                                                                                                     x.18,
                                                                                                                                                                                                                                     x.19
     ) @ #NOW) ⇒
    ((((((((((x = x.1) ∧ (x.2 = x.3)) ∧ (x.4 = x.5)) ∧ (x.6 = x.7)) ∧
          (x.8 = x.9)) ∧
         (x.10 = x.11)) ∧
        (x.12 = x.13)) ∧
       (x.14 = x.15)) ∧
      (x.16 = x.17)) ∧
     (x.18 = x.19))"
  // safety formula

rule (modulo E) ifPermitsattwraputattunwraputattencutattdecutattsensutattextrutatttrusutattwwtutattwtutattututattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_111112111111[color=#7e8040,
                                                                                                                                                                                                                                       process="if Permits( attwrap(ut), attunwrap(ut), attenc(ut), attdec(ut),
         attsens(ut), attextr(ut), atttrus(ut), attwwt(ut), attwt(ut),
         attut(ut), attwrap(atts), attunwrap(atts), attenc(atts),
         attdec(atts), attsens(atts), attextr(atts), atttrus(atts),
         attwwt(atts), attwt(atts), attut(atts)
)"]:
   [ State_111112111111( L_h, atts, k, m, ut, v, lock.4 ) ]
  --[
  Restr_ifPermitsattwraputattunwraputattencutattdecutattsensutattextrutatttrusutattwwtutattwtutattututattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_111112111111_1( attwrap(ut),
                                                                                                                                                                                                                                  attwrap(atts),
                                                                                                                                                                                                                                  attunwrap(ut),
                                                                                                                                                                                                                                  attunwrap(atts),
                                                                                                                                                                                                                                  attenc(ut),
                                                                                                                                                                                                                                  attenc(atts),
                                                                                                                                                                                                                                  attdec(ut),
                                                                                                                                                                                                                                  attdec(atts),
                                                                                                                                                                                                                                  attsens(ut),
                                                                                                                                                                                                                                  attsens(atts),
                                                                                                                                                                                                                                  attextr(ut),
                                                                                                                                                                                                                                  attextr(atts),
                                                                                                                                                                                                                                  atttrus(ut),
                                                                                                                                                                                                                                  atttrus(atts),
                                                                                                                                                                                                                                  attwwt(ut),
                                                                                                                                                                                                                                  attwwt(atts),
                                                                                                                                                                                                                                  attwt(ut),
                                                                                                                                                                                                                                  attwt(atts),
                                                                                                                                                                                                                                  attut(ut),
                                                                                                                                                                                                                                  attut(atts)
  )
  ]->
   [ State_1111121111111( L_h, atts, k, m, ut, v, lock.4 ) ]

  /*
  rule (modulo AC) ifPermitsattwraputattunwraputattencutattdecutattsensutattextrutatttrusutattwwtutattwtutattututattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_111112111111[color=#7e8040,
                                                                                                                                                                                                                                          process="if Permits( attwrap(ut), attunwrap(ut), attenc(ut), attdec(ut),
         attsens(ut), attextr(ut), atttrus(ut), attwwt(ut), attwt(ut),
         attut(ut), attwrap(atts), attunwrap(atts), attenc(atts),
         attdec(atts), attsens(atts), attextr(atts), atttrus(atts),
         attwwt(atts), attwt(atts), attut(atts)
)"]:
     [ State_111112111111( L_h, atts, k, m, ut, v, lock ) ]
    --[
    Restr_ifPermitsattwraputattunwraputattencutattdecutattsensutattextrutatttrusutattwwtutattwtutattututattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_0_111112111111_1( z,
                                                                                                                                                                                                                                    z.1,
                                                                                                                                                                                                                                    z.2,
                                                                                                                                                                                                                                    z.3,
                                                                                                                                                                                                                                    z.4,
                                                                                                                                                                                                                                    z.5,
                                                                                                                                                                                                                                    z.6,
                                                                                                                                                                                                                                    z.7,
                                                                                                                                                                                                                                    z.8,
                                                                                                                                                                                                                                    z.9,
                                                                                                                                                                                                                                    z.10,
                                                                                                                                                                                                                                    z.11,
                                                                                                                                                                                                                                    z.12,
                                                                                                                                                                                                                                    z.13,
                                                                                                                                                                                                                                    z.14,
                                                                                                                                                                                                                                    z.15,
                                                                                                                                                                                                                                    z.16,
                                                                                                                                                                                                                                    z.17,
                                                                                                                                                                                                                                    z.18,
                                                                                                                                                                                                                                    z.19
    )
    ]->
     [ State_1111121111111( L_h, atts, k, m, ut, v, lock ) ]
    variants (modulo AC)
    1. atts  = atts.32
       ut    = ut.32
       z     = attwrap(ut.32)
       z.1   = attwrap(atts.32)
       z.2   = attunwrap(ut.32)
       z.3   = attunwrap(atts.32)
       z.4   = attenc(ut.32)
       z.5   = attenc(atts.32)
       z.6   = attdec(ut.32)
       z.7   = attdec(atts.32)
       z.8   = attsens(ut.32)
       z.9   = attsens(atts.32)
       z.10  = attextr(ut.32)
       z.11  = attextr(atts.32)
       z.12  = atttrus(ut.32)
       z.13  = atttrus(atts.32)
       z.14  = attwwt(ut.32)
       z.15  = attwwt(atts.32)
       z.16  = attwt(ut.32)
       z.17  = attwt(atts.32)
       z.18  = attut(ut.32)
       z.19  = attut(atts.32)
    
    2. atts  = atts.42
       ut    = <x.32, x.33, x.34, x.35, x.36, x.37, x.38, x.39, x.40, x.41>
       z     = x.32
       z.1   = attwrap(atts.42)
       z.2   = x.33
       z.3   = attunwrap(atts.42)
       z.4   = x.34
       z.5   = attenc(atts.42)
       z.6   = x.35
       z.7   = attdec(atts.42)
       z.8   = x.36
       z.9   = attsens(atts.42)
       z.10  = x.37
       z.11  = attextr(atts.42)
       z.12  = x.38
       z.13  = atttrus(atts.42)
       z.14  = x.39
       z.15  = attwwt(atts.42)
       z.16  = x.40
       z.17  = attwt(atts.42)
       z.18  = x.41
       z.19  = attut(atts.42)
    
    3. atts  = <x.32, x.33, x.34, x.35, x.36, x.37, x.38, x.39, x.40, x.41>
       ut    = ut.42
       z     = attwrap(ut.42)
       z.1   = x.32
       z.2   = attunwrap(ut.42)
       z.3   = x.33
       z.4   = attenc(ut.42)
       z.5   = x.34
       z.6   = attdec(ut.42)
       z.7   = x.35
       z.8   = attsens(ut.42)
       z.9   = x.36
       z.10  = attextr(ut.42)
       z.11  = x.37
       z.12  = atttrus(ut.42)
       z.13  = x.38
       z.14  = attwwt(ut.42)
       z.15  = x.39
       z.16  = attwt(ut.42)
       z.17  = x.40
       z.18  = attut(ut.42)
       z.19  = x.41
    
    4. atts  = <x.32, x.33, x.34, x.35, x.36, x.37, x.38, x.39, x.40, x.41>
       ut    = <x.44, x.45, x.46, x.47, x.48, x.49, x.50, x.51, x.52, x.53>
       z     = x.44
       z.1   = x.32
       z.2   = x.45
       z.3   = x.33
       z.4   = x.46
       z.5   = x.34
       z.6   = x.47
       z.7   = x.35
       z.8   = x.48
       z.9   = x.36
       z.10  = x.49
       z.11  = x.37
       z.12  = x.50
       z.13  = x.38
       z.14  = x.51
       z.15  = x.39
       z.16  = x.52
       z.17  = x.40
       z.18  = x.53
       z.19  = x.41
  */

restriction Restr_ifPermitsattwraputattunwraputattencutattdecutattsensutattextrutatttrusutattwwtutattwtutattututattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_1_111112111111_1:
  "∀ x #NOW x.1 x.2 x.3 x.4 x.5 x.6 x.7 x.8 x.9 x.10 x.11 x.12 x.13 x.14
     x.15 x.16 x.17 x.18 x.19.
    (Restr_ifPermitsattwraputattunwraputattencutattdecutattsensutattextrutatttrusutattwwtutattwtutattututattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_1_111112111111_1( x,
                                                                                                                                                                                                                                     x.1,
                                                                                                                                                                                                                                     x.2,
                                                                                                                                                                                                                                     x.3,
                                                                                                                                                                                                                                     x.4,
                                                                                                                                                                                                                                     x.5,
                                                                                                                                                                                                                                     x.6,
                                                                                                                                                                                                                                     x.7,
                                                                                                                                                                                                                                     x.8,
                                                                                                                                                                                                                                     x.9,
                                                                                                                                                                                                                                     x.10,
                                                                                                                                                                                                                                     x.11,
                                                                                                                                                                                                                                     x.12,
                                                                                                                                                                                                                                     x.13,
                                                                                                                                                                                                                                     x.14,
                                                                                                                                                                                                                                     x.15,
                                                                                                                                                                                                                                     x.16,
                                                                                                                                                                                                                                     x.17,
                                                                                                                                                                                                                                     x.18,
                                                                                                                                                                                                                                     x.19
     ) @ #NOW) ⇒
    (¬((((((((((x = x.1) ∧ (x.2 = x.3)) ∧ (x.4 = x.5)) ∧ (x.6 = x.7)) ∧
            (x.8 = x.9)) ∧
           (x.10 = x.11)) ∧
          (x.12 = x.13)) ∧
         (x.14 = x.15)) ∧
        (x.16 = x.17)) ∧
       (x.18 = x.19)))"
  // safety formula

rule (modulo E) ifPermitsattwraputattunwraputattencutattdecutattsensutattextrutatttrusutattwwtutattwtutattututattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_1_111112111111[color=#7e8040,
                                                                                                                                                                                                                                       process="if Permits( attwrap(ut), attunwrap(ut), attenc(ut), attdec(ut),
         attsens(ut), attextr(ut), atttrus(ut), attwwt(ut), attwt(ut),
         attut(ut), attwrap(atts), attunwrap(atts), attenc(atts),
         attdec(atts), attsens(atts), attextr(atts), atttrus(atts),
         attwwt(atts), attwt(atts), attut(atts)
)"]:
   [ State_111112111111( L_h, atts, k, m, ut, v, lock.4 ) ]
  --[
  Restr_ifPermitsattwraputattunwraputattencutattdecutattsensutattextrutatttrusutattwwtutattwtutattututattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_1_111112111111_1( attwrap(ut),
                                                                                                                                                                                                                                  attwrap(atts),
                                                                                                                                                                                                                                  attunwrap(ut),
                                                                                                                                                                                                                                  attunwrap(atts),
                                                                                                                                                                                                                                  attenc(ut),
                                                                                                                                                                                                                                  attenc(atts),
                                                                                                                                                                                                                                  attdec(ut),
                                                                                                                                                                                                                                  attdec(atts),
                                                                                                                                                                                                                                  attsens(ut),
                                                                                                                                                                                                                                  attsens(atts),
                                                                                                                                                                                                                                  attextr(ut),
                                                                                                                                                                                                                                  attextr(atts),
                                                                                                                                                                                                                                  atttrus(ut),
                                                                                                                                                                                                                                  atttrus(atts),
                                                                                                                                                                                                                                  attwwt(ut),
                                                                                                                                                                                                                                  attwwt(atts),
                                                                                                                                                                                                                                  attwt(ut),
                                                                                                                                                                                                                                  attwt(atts),
                                                                                                                                                                                                                                  attut(ut),
                                                                                                                                                                                                                                  attut(atts)
  )
  ]->
   [ State_1111121111112( L_h, atts, k, m, ut, v, lock.4 ) ]

  /*
  rule (modulo AC) ifPermitsattwraputattunwraputattencutattdecutattsensutattextrutatttrusutattwwtutattwtutattututattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_1_111112111111[color=#7e8040,
                                                                                                                                                                                                                                          process="if Permits( attwrap(ut), attunwrap(ut), attenc(ut), attdec(ut),
         attsens(ut), attextr(ut), atttrus(ut), attwwt(ut), attwt(ut),
         attut(ut), attwrap(atts), attunwrap(atts), attenc(atts),
         attdec(atts), attsens(atts), attextr(atts), atttrus(atts),
         attwwt(atts), attwt(atts), attut(atts)
)"]:
     [ State_111112111111( L_h, atts, k, m, ut, v, lock ) ]
    --[
    Restr_ifPermitsattwraputattunwraputattencutattdecutattsensutattextrutatttrusutattwwtutattwtutattututattwrapattsattunwrapattsattencattsattdecattsattsensattsattextrattsatttrusattsattwwtattsattwtattsattutatts_1_111112111111_1( z,
                                                                                                                                                                                                                                    z.1,
                                                                                                                                                                                                                                    z.2,
                                                                                                                                                                                                                                    z.3,
                                                                                                                                                                                                                                    z.4,
                                                                                                                                                                                                                                    z.5,
                                                                                                                                                                                                                                    z.6,
                                                                                                                                                                                                                                    z.7,
                                                                                                                                                                                                                                    z.8,
                                                                                                                                                                                                                                    z.9,
                                                                                                                                                                                                                                    z.10,
                                                                                                                                                                                                                                    z.11,
                                                                                                                                                                                                                                    z.12,
                                                                                                                                                                                                                                    z.13,
                                                                                                                                                                                                                                    z.14,
                                                                                                                                                                                                                                    z.15,
                                                                                                                                                                                                                                    z.16,
                                                                                                                                                                                                                                    z.17,
                                                                                                                                                                                                                                    z.18,
                                                                                                                                                                                                                                    z.19
    )
    ]->
     [ State_1111121111112( L_h, atts, k, m, ut, v, lock ) ]
    variants (modulo AC)
    1. atts  = atts.32
       ut    = ut.32
       z     = attwrap(ut.32)
       z.1   = attwrap(atts.32)
       z.2   = attunwrap(ut.32)
       z.3   = attunwrap(atts.32)
       z.4   = attenc(ut.32)
       z.5   = attenc(atts.32)
       z.6   = attdec(ut.32)
       z.7   = attdec(atts.32)
       z.8   = attsens(ut.32)
       z.9   = attsens(atts.32)
       z.10  = attextr(ut.32)
       z.11  = attextr(atts.32)
       z.12  = atttrus(ut.32)
       z.13  = atttrus(atts.32)
       z.14  = attwwt(ut.32)
       z.15  = attwwt(atts.32)
       z.16  = attwt(ut.32)
       z.17  = attwt(atts.32)
       z.18  = attut(ut.32)
       z.19  = attut(atts.32)
    
    2. atts  = atts.42
       ut    = <x.32, x.33, x.34, x.35, x.36, x.37, x.38, x.39, x.40, x.41>
       z     = x.32
       z.1   = attwrap(atts.42)
       z.2   = x.33
       z.3   = attunwrap(atts.42)
       z.4   = x.34
       z.5   = attenc(atts.42)
       z.6   = x.35
       z.7   = attdec(atts.42)
       z.8   = x.36
       z.9   = attsens(atts.42)
       z.10  = x.37
       z.11  = attextr(atts.42)
       z.12  = x.38
       z.13  = atttrus(atts.42)
       z.14  = x.39
       z.15  = attwwt(atts.42)
       z.16  = x.40
       z.17  = attwt(atts.42)
       z.18  = x.41
       z.19  = attut(atts.42)
    
    3. atts  = <x.32, x.33, x.34, x.35, x.36, x.37, x.38, x.39, x.40, x.41>
       ut    = ut.42
       z     = attwrap(ut.42)
       z.1   = x.32
       z.2   = attunwrap(ut.42)
       z.3   = x.33
       z.4   = attenc(ut.42)
       z.5   = x.34
       z.6   = attdec(ut.42)
       z.7   = x.35
       z.8   = attsens(ut.42)
       z.9   = x.36
       z.10  = attextr(ut.42)
       z.11  = x.37
       z.12  = atttrus(ut.42)
       z.13  = x.38
       z.14  = attwwt(ut.42)
       z.15  = x.39
       z.16  = attwt(ut.42)
       z.17  = x.40
       z.18  = attut(ut.42)
       z.19  = x.41
    
    4. atts  = <x.32, x.33, x.34, x.35, x.36, x.37, x.38, x.39, x.40, x.41>
       ut    = <x.44, x.45, x.46, x.47, x.48, x.49, x.50, x.51, x.52, x.53>
       z     = x.44
       z.1   = x.32
       z.2   = x.45
       z.3   = x.33
       z.4   = x.46
       z.5   = x.34
       z.6   = x.47
       z.7   = x.35
       z.8   = x.48
       z.9   = x.36
       z.10  = x.49
       z.11  = x.37
       z.12  = x.50
       z.13  = x.38
       z.14  = x.51
       z.15  = x.39
       z.16  = x.52
       z.17  = x.40
       z.18  = x.53
       z.19  = x.41
  */

rule (modulo E) newh_0_1111121111111[color=#7e8040, process="new h2;"]:
   [ State_1111121111111( L_h, atts, k, m, ut, v, lock.4 ), Fr( h2 ) ]
  -->
   [ State_11111211111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]

  /*
  rule (modulo AC) newh_0_1111121111111[color=#7e8040, process="new h2;"]:
     [ State_1111121111111( L_h, atts, k, m, ut, v, lock ), Fr( h2 ) ]
    -->
     [ State_11111211111111( L_h, atts, h2, k, m, ut, v, lock ) ]
  */

rule (modulo E) insertobjhmatts_0_11111211111111[color=#7e8040,
                                                 process="insert <'obj', h2>,<m, atts>;"]:
   [ State_11111211111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]
  --[ Insert( <'obj', h2>, <m, atts> ) ]->
   [ State_111112111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]

  /*
  rule (modulo AC) insertobjhmatts_0_11111211111111[color=#7e8040,
                                                    process="insert <'obj', h2>,<m, atts>;"]:
     [ State_11111211111111( L_h, atts, h2, k, m, ut, v, lock ) ]
    --[ Insert( <'obj', h2>, <m, atts> ) ]->
     [ State_111112111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
  */

rule (modulo E) eventUnwrappedhmatts_0_111112111111111[color=#7e8040,
                                                       process="event Unwrapped( h2, m, atts );"]:
   [ State_111112111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]
  --[ Unwrapped( h2, m, atts ) ]->
   [ State_1111121111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]

  /*
  rule (modulo AC) eventUnwrappedhmatts_0_111112111111111[color=#7e8040,
                                                          process="event Unwrapped( h2, m, atts );"]:
     [ State_111112111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
    --[ Unwrapped( h2, m, atts ) ]->
     [ State_1111121111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
  */

rule (modulo E) eventWrapKeyhmattwrapatts_0_1111121111111111[color=#7e8040,
                                                             process="event WrapKey( h2, m, attwrap(atts) );"]:
   [ State_1111121111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]
  --[ WrapKey( h2, m, attwrap(atts) ) ]->
   [ State_11111211111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]

  /*
  rule (modulo AC) eventWrapKeyhmattwrapatts_0_1111121111111111[color=#7e8040,
                                                                process="event WrapKey( h2, m, attwrap(atts) );"]:
     [ State_1111121111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
    --[ WrapKey( h2, m, z ) ]->
     [ State_11111211111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
    variants (modulo AC)
    1. atts  = atts.14
       z     = attwrap(atts.14)
    
    2. atts  = <x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, x.23>
       z     = x.14
  */

rule (modulo E) eventDecKeyhmattdecatts_0_11111211111111111[color=#7e8040,
                                                            process="event DecKey( h2, m, attdec(atts) );"]:
   [ State_11111211111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]
  --[ DecKey( h2, m, attdec(atts) ) ]->
   [ State_111112111111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]

  /*
  rule (modulo AC) eventDecKeyhmattdecatts_0_11111211111111111[color=#7e8040,
                                                               process="event DecKey( h2, m, attdec(atts) );"]:
     [ State_11111211111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
    --[ DecKey( h2, m, z ) ]->
     [ State_111112111111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
    variants (modulo AC)
    1. atts  = atts.14
       z     = attdec(atts.14)
    
    2. atts  = <x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, x.23>
       z     = x.17
  */

rule (modulo E) eventEncKeyhmattencatts_0_111112111111111111[color=#7e8040,
                                                             process="event EncKey( h2, m, attenc(atts) );"]:
   [ State_111112111111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]
  --[ EncKey( h2, m, attenc(atts) ) ]->
   [ State_1111121111111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]

  /*
  rule (modulo AC) eventEncKeyhmattencatts_0_111112111111111111[color=#7e8040,
                                                                process="event EncKey( h2, m, attenc(atts) );"]:
     [ State_111112111111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
    --[ EncKey( h2, m, z ) ]->
     [ State_1111121111111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
    variants (modulo AC)
    1. atts  = atts.14
       z     = attenc(atts.14)
    
    2. atts  = <x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, x.23>
       z     = x.16
  */

rule (modulo E) eventUnwrapKeyhmattunwrapatts_0_1111121111111111111[color=#7e8040,
                                                                    process="event UnwrapKey( h2, m, attunwrap(atts) );"]:
   [ State_1111121111111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]
  --[ UnwrapKey( h2, m, attunwrap(atts) ) ]->
   [ State_11111211111111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]

  /*
  rule (modulo AC) eventUnwrapKeyhmattunwrapatts_0_1111121111111111111[color=#7e8040,
                                                                       process="event UnwrapKey( h2, m, attunwrap(atts) );"]:
     [ State_1111121111111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
    --[ UnwrapKey( h2, m, z ) ]->
     [ State_11111211111111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
    variants (modulo AC)
    1. atts  = atts.14
       z     = attunwrap(atts.14)
    
    2. atts  = <x.14, x.15, x.16, x.17, x.18, x.19, x.20, x.21, x.22, x.23>
       z     = x.15
  */

rule (modulo E) outh_0_11111211111111111111[color=#7e8040,
                                            process="out(h2);"]:
   [ State_11111211111111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]
  -->
   [
   State_111112111111111111111( L_h, atts, h2, k, m, ut, v, lock.4 ),
   Out( h2 )
   ]

  /*
  rule (modulo AC) outh_0_11111211111111111111[color=#7e8040,
                                               process="out(h2);"]:
     [ State_11111211111111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
    -->
     [
     State_111112111111111111111( L_h, atts, h2, k, m, ut, v, lock ),
     Out( h2 )
     ]
  */

rule (modulo E) unlockdevice_0_111112111111111111111[color=#7e8040,
                                                     process="unlock 'device';"]:
   [ State_111112111111111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]
  --[ Unlock_4( '4', lock.4, 'device' ), Unlock( '4', lock.4, 'device' )
  ]->
   [ State_1111121111111111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]

  /*
  rule (modulo AC) unlockdevice_0_111112111111111111111[color=#7e8040,
                                                        process="unlock 'device';"]:
     [ State_111112111111111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
    --[ Unlock_4( '4', lock, 'device' ), Unlock( '4', lock, 'device' ) ]->
     [ State_1111121111111111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
  */

rule (modulo E) p_0_1111121111111111111111[color=#7e8040, process="0"]:
   [ State_1111121111111111111111( L_h, atts, h2, k, m, ut, v, lock.4 ) ]
  -->
   [ ]

  /*
  rule (modulo AC) p_0_1111121111111111111111[color=#7e8040, process="0"]:
     [ State_1111121111111111111111( L_h, atts, h2, k, m, ut, v, lock ) ]
    -->
     [ ]
  */

rule (modulo E) p_0_1111121111112[color=#7e8040, process="0"]:
   [ State_1111121111112( L_h, atts, k, m, ut, v, lock.4 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_1111121111112[color=#7e8040, process="0"]:
     [ State_1111121111112( L_h, atts, k, m, ut, v, lock ) ] --> [ ]
  */

rule (modulo E) p_0_111112111112[color=#7e8040, process="0"]:
   [ State_111112111112( L_h, atts, k, m, v, lock.4 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_111112111112[color=#7e8040, process="0"]:
     [ State_111112111112( L_h, atts, k, m, v, lock ) ] --> [ ]
  */

rule (modulo E) p_0_11111211112[color=#7e8040, process="0"]:
   [ State_11111211112( L_h, atts, k, m, v, lock.4 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_11111211112[color=#7e8040, process="0"]:
     [ State_11111211112( L_h, atts, k, m, v, lock ) ] --> [ ]
  */

rule (modulo E) p_0_1111121112[color=#7e8040, process="0"]:
   [ State_1111121112( L_h, atts, k, m, v, lock.4 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_1111121112[color=#7e8040, process="0"]:
     [ State_1111121112( L_h, atts, k, m, v, lock ) ] --> [ ]
  */

rule (modulo E) p_0_111112112[color=#7e8040, process="0"]:
   [ State_111112112( L_h, atts, k, m, lock.4 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_111112112[color=#7e8040, process="0"]:
     [ State_111112112( L_h, atts, k, m, lock ) ] --> [ ]
  */

rule (modulo E) inLh_0_11112[color=#805640, process="in(L_h);"]:
   [ State_11112( ), In( L_h ) ] --> [ State_111121( L_h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lockdevice_0_111121[color=#805640,
                                    process="lock 'device';"]:
   [ State_111121( L_h ), Fr( lock.5 ) ]
  --[ Lock_5( '5', lock.5, 'device' ), Lock( '5', lock.5, 'device' ) ]->
   [ State_1111211( L_h, lock.5 ) ]

  /*
  rule (modulo AC) lockdevice_0_111121[color=#805640,
                                       process="lock 'device';"]:
     [ State_111121( L_h ), Fr( lock ) ]
    --[ Lock_5( '5', lock, 'device' ), Lock( '5', lock, 'device' ) ]->
     [ State_1111211( L_h, lock ) ]
  */

rule (modulo E) lookupobjLhasv_0_1111211[color=#805640,
                                         process="lookup <'obj', L_h> as v"]:
   [ State_1111211( L_h, lock.5 ) ]
  --[ IsIn( <'obj', L_h>, v ) ]->
   [ State_11112111( L_h, v, lock.5 ) ]

  /*
  rule (modulo AC) lookupobjLhasv_0_1111211[color=#805640,
                                            process="lookup <'obj', L_h> as v"]:
     [ State_1111211( L_h, lock ) ]
    --[ IsIn( <'obj', L_h>, v ) ]->
     [ State_11112111( L_h, v, lock ) ]
  */

rule (modulo E) lookupobjLhasv_1_1111211[color=#805640,
                                         process="lookup <'obj', L_h> as v"]:
   [ State_1111211( L_h, lock.5 ) ]
  --[ IsNotSet( <'obj', L_h> ) ]->
   [ State_11112112( L_h, lock.5 ) ]

  /*
  rule (modulo AC) lookupobjLhasv_1_1111211[color=#805640,
                                            process="lookup <'obj', L_h> as v"]:
     [ State_1111211( L_h, lock ) ]
    --[ IsNotSet( <'obj', L_h> ) ]->
     [ State_11112112( L_h, lock ) ]
  */

restriction Restr_ifCangetkeyvalueattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11112111_1:
  "∀ x #NOW.
    (Restr_ifCangetkeyvalueattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11112111_1( x
     ) @ #NOW) ⇒
    (x = 'off')"
  // safety formula

rule (modulo E) ifCangetkeyvalueattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11112111[color=#805640,
                                                                                                                                                     process="if Can_get_keyvalue( attwrap(tem(v)), attunwrap(tem(v)),
                  attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)),
                  atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
   [ State_11112111( L_h, v, lock.5 ) ]
  --[
  Restr_ifCangetkeyvalueattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11112111_1( attsens(tem(v))
  )
  ]->
   [ State_111121111( L_h, v, lock.5 ) ]

  /*
  rule (modulo AC) ifCangetkeyvalueattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11112111[color=#805640,
                                                                                                                                                        process="if Can_get_keyvalue( attwrap(tem(v)), attunwrap(tem(v)),
                  attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)),
                  atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
     [ State_11112111( L_h, v, lock ) ]
    --[
    Restr_ifCangetkeyvalueattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_0_11112111_1( z
    )
    ]->
     [ State_111121111( L_h, v, lock ) ]
    variants (modulo AC)
    1. v     = v.10
       z     = attsens(tem(v.10))
    
    2. v     = <x.10, x.11>
       z     = attsens(x.11)
    
    3. v     = <x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17, x.18, x.19, 
                x.20>
       z     = x.15
  */

restriction Restr_ifCangetkeyvalueattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11112111_1:
  "∀ x #NOW.
    (Restr_ifCangetkeyvalueattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11112111_1( x
     ) @ #NOW) ⇒
    (¬(x = 'off'))"
  // safety formula

rule (modulo E) ifCangetkeyvalueattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11112111[color=#805640,
                                                                                                                                                     process="if Can_get_keyvalue( attwrap(tem(v)), attunwrap(tem(v)),
                  attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)),
                  atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
   [ State_11112111( L_h, v, lock.5 ) ]
  --[
  Restr_ifCangetkeyvalueattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11112111_1( attsens(tem(v))
  )
  ]->
   [ State_111121112( L_h, v, lock.5 ) ]

  /*
  rule (modulo AC) ifCangetkeyvalueattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11112111[color=#805640,
                                                                                                                                                        process="if Can_get_keyvalue( attwrap(tem(v)), attunwrap(tem(v)),
                  attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)),
                  atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))
)"]:
     [ State_11112111( L_h, v, lock ) ]
    --[
    Restr_ifCangetkeyvalueattwraptemvattunwraptemvattenctemvattdectemvattsenstemvattextrtemvatttrustemvattwwttemvattwttemvattuttemv_1_11112111_1( z
    )
    ]->
     [ State_111121112( L_h, v, lock ) ]
    variants (modulo AC)
    1. v     = v.10
       z     = attsens(tem(v.10))
    
    2. v     = <x.10, x.11>
       z     = attsens(x.11)
    
    3. v     = <x.10, x.11, x.12, x.13, x.14, x.15, x.16, x.17, x.18, x.19, 
                x.20>
       z     = x.15
  */

rule (modulo E) eventGetKeyValuekeyv_0_111121111[color=#805640,
                                                 process="event GetKeyValue( key(v) );"]:
   [ State_111121111( L_h, v, lock.5 ) ]
  --[ GetKeyValue( key(v) ) ]->
   [ State_1111211111( L_h, v, lock.5 ) ]

  /*
  rule (modulo AC) eventGetKeyValuekeyv_0_111121111[color=#805640,
                                                    process="event GetKeyValue( key(v) );"]:
     [ State_111121111( L_h, v, lock ) ]
    --[ GetKeyValue( z ) ]->
     [ State_1111211111( L_h, v, lock ) ]
    variants (modulo AC)
    1. v     = v.10
       z     = key(v.10)
    
    2. v     = <x.10, x.11>
       z     = x.10
  */

rule (modulo E) outkeyv_0_1111211111[color=#805640,
                                     process="out(key(v));"]:
   [ State_1111211111( L_h, v, lock.5 ) ]
  -->
   [ State_11112111111( L_h, v, lock.5 ), Out( key(v) ) ]

  /*
  rule (modulo AC) outkeyv_0_1111211111[color=#805640,
                                        process="out(key(v));"]:
     [ State_1111211111( L_h, v, lock ) ]
    -->
     [ State_11112111111( L_h, v, lock ), Out( z ) ]
    variants (modulo AC)
    1. v     = v.10
       z     = key(v.10)
    
    2. v     = <x.10, x.11>
       z     = x.10
  */

rule (modulo E) unlockdevice_0_11112111111[color=#805640,
                                           process="unlock 'device';"]:
   [ State_11112111111( L_h, v, lock.5 ) ]
  --[ Unlock_5( '5', lock.5, 'device' ), Unlock( '5', lock.5, 'device' )
  ]->
   [ State_111121111111( L_h, v, lock.5 ) ]

  /*
  rule (modulo AC) unlockdevice_0_11112111111[color=#805640,
                                              process="unlock 'device';"]:
     [ State_11112111111( L_h, v, lock ) ]
    --[ Unlock_5( '5', lock, 'device' ), Unlock( '5', lock, 'device' ) ]->
     [ State_111121111111( L_h, v, lock ) ]
  */

rule (modulo E) p_0_111121111111[color=#805640, process="0"]:
   [ State_111121111111( L_h, v, lock.5 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_111121111111[color=#805640, process="0"]:
     [ State_111121111111( L_h, v, lock ) ] --> [ ]
  */

rule (modulo E) p_0_111121112[color=#805640, process="0"]:
   [ State_111121112( L_h, v, lock.5 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_111121112[color=#805640, process="0"]:
     [ State_111121112( L_h, v, lock ) ] --> [ ]
  */

rule (modulo E) p_0_11112112[color=#805640, process="0"]:
   [ State_11112112( L_h, lock.5 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_11112112[color=#805640, process="0"]:
     [ State_11112112( L_h, lock ) ] --> [ ]
  */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒ (∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1))"
  // safety formula

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction locking_0:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_0( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_1:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_1( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_2:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_2( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_3:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_3( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_4:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_4( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_5:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_5( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/slow/PKCS11/pkcs11-templates.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/slow/PKCS11/pkcs11-templates.spthy

  output:          examples/sapic/slow/PKCS11/pkcs11-templates.spthy.tmp
  processing time: 255.363117622s
  dec_limits (all-traces): verified (1417 steps)
  trusted_as_ut_impossible (all-traces): verified (2 steps)
  untrusted_as_ut_impossible (all-traces): verified (2 steps)
  untrusted_as_wt_impossible (all-traces): verified (2 steps)
  trusted_as_wt_impossible (all-traces): verified (2 steps)
  bad_keys (all-traces): verified (319 steps)
  no_key_is_wrap_and_dec__or_unwrap_and_dec_ind (all-traces): verified (910 steps)
  no_key_is_enc_and_unwrap (all-traces): verified (322 steps)
  cannot_obtain_key_ind (all-traces): verified (723 steps)
  cannot_obtain_key (all-traces): verified (2 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/slow/PKCS11/pkcs11-templates.spthy

  output:          examples/sapic/slow/PKCS11/pkcs11-templates.spthy.tmp
  processing time: 255.363117622s
  dec_limits (all-traces): verified (1417 steps)
  trusted_as_ut_impossible (all-traces): verified (2 steps)
  untrusted_as_ut_impossible (all-traces): verified (2 steps)
  untrusted_as_wt_impossible (all-traces): verified (2 steps)
  trusted_as_wt_impossible (all-traces): verified (2 steps)
  bad_keys (all-traces): verified (319 steps)
  no_key_is_wrap_and_dec__or_unwrap_and_dec_ind (all-traces): verified (910 steps)
  no_key_is_enc_and_unwrap (all-traces): verified (322 steps)
  cannot_obtain_key_ind (all-traces): verified (723 steps)
  cannot_obtain_key (all-traces): verified (2 steps)

==============================================================================
*/
