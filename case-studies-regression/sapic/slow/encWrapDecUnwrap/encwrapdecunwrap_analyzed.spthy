theory EncWrapDecUnwrap begin

// Function signature and definition of the equational theory E

functions: attC/1, fst/1, key/1, pair/2, sdec/2, senc/2, sencSucc/2,
           snd/1, true/0
equations:
    attC(<k, a>) = a,
    fst(<x.1, x.2>) = x.1,
    key(<k, a>) = k,
    sdec(senc(x.1, x.2), x.2) = x.1,
    sencSucc(senc(m, k), k) = true,
    snd(<x.1, x.2>) = x.2



heuristic: p





lemma dec_limits [sources]:
  all-traces
  "∀ k m #t1.
    (DecUsing( k, m ) @ #t1) ⇒
    (((((∃ h2 k2 #t2 #t3.
          (((NewKey( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)) ∧ (#t2 < #t1)) ∧
          (#t3 < #t1)) ∨
        (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (#t2 < #t1))) ∨
       (∃ h2 k2 #t2 #t3.
         (((Unwrapped( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)) ∧ (#t2 < #t1)) ∧
         (#t3 < #t1))) ∨
      (∃ #t2 #t3 h1 h2 k2.
        (((WrapKey( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)) ∧ (#t2 < #t1)) ∧
        (#t3 < #t1))) ∨
     (∃ #t2 #t3 h1 h2 k2.
       (((Unwrapped( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)) ∧
        (#t2 < #t1)) ∧
       (#t3 < #t1)))"
/*
guarded formula characterizing all counter-examples:
"∃ k m #t1.
  (DecUsing( k, m ) @ #t1)
 ∧
  (∀ h2 k2 #t2 #t3.
    (NewKey( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
   ⇒
    ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)))) ∧
  (∀ #t2. (EncUsing( k, m ) @ #t2) ⇒ ¬(#t2 < #t1)) ∧
  (∀ h2 k2 #t2 #t3.
    (Unwrapped( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
   ⇒
    ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)))) ∧
  (∀ #t2 #t3 h1 h2 k2.
    (WrapKey( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
   ⇒
    ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)))) ∧
  (∀ #t2 #t3 h1 h2 k2.
    (Unwrapped( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
   ⇒
    ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ k m #t1.
           (DecUsing( k, m ) @ #t1)
          ⇒
           ((last(#t1)) ∨
            (∃ h2 k2 #t2 #t3.
              (NewKey( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
             ∧
              (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
            (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (¬(last(#t2))) ∧ (#t2 < #t1)) ∨
            (∃ h2 k2 #t2 #t3.
              (Unwrapped( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
             ∧
              (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
            (∃ #t2 #t3 h1 h2 k2.
              (WrapKey( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
             ∧
              (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) ∨
            (∃ #t2 #t3 h1 h2 k2.
              (Unwrapped( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
             ∧
              (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1))))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t1 yp.
                (Insert( x, yp ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (¬(#t1 = #t2)) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_0( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_1( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_2( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_3( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_4( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_5( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_6( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_6( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3))) )
    case case_1
    solve( (last(#t1))  ∥
           (∃ h2 k2 #t2 #t3.
             (NewKey( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
            ∧
             (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1))  ∥
           (∃ #t2. (EncUsing( k, m ) @ #t2) ∧ (¬(last(#t2))) ∧ (#t2 < #t1))  ∥
           (∃ h2 k2 #t2 #t3.
             (Unwrapped( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
            ∧
             (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1))  ∥
           (∃ #t2 #t3 h1 h2 k2.
             (WrapKey( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
            ∧
             (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1))  ∥
           (∃ #t2 #t3 h1 h2 k2.
             (Unwrapped( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
            ∧
             (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) )
      case case_1
      solve( State_1111211111( c, lock, v, L_h ) ▶₀ #t1 )
        case ifsencSuccckeyvtrue_0_111121111
        solve( !KU( senc(m, k) ) @ #vk.2 )
          case c_senc
          solve( Insert( L_h, <k, 'dec'> ) @ #t2 )
            case insertLhkeyvdec_0_11111211111
            solve( State_11111211111( lock, v, L_h ) ▶₀ #t2 )
              case eventDecKeyLhkeyv_0_1111121111
              solve( ((#vr.3 < #vr.9) ∧
                      (∃ #t2.
                        (Unlock_3( '3', ~n, L_h ) @ #t2)
                       ∧
                        (#vr.3 < #t2) ∧
                        (#t2 < #vr.9) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, L_h ) @ #t0)
                         ⇒
                          ((#t0 < #vr.3) ∨ (#t0 = #vr.3) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, L_h ) @ #t0)
                         ⇒
                          ((#t0 < #vr.3) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.9 < #vr.3) )
                case case_1
                solve( State_111121111111( c, ~n, v, L_h ) ▶₀ #t2.1 )
                  case eventDecUsingkeyvsdecckeyv_0_1111211111
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( State_111112111111( ~n.1, v, L_h ) ▶₀ #t2.1 )
                  case insertLhkeyvdec_0_11111211111
                  solve( (#t2.2 < #t2.3)  ∥ (#t2.2 = #t2.3) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( Insert( L_h, <k, 'init'> ) @ #t2.2 )
                      case insertLhkinit_0_111111111111
                      solve( State_111111111111( lock, L_h, k ) ▶₀ #t2.2 )
                        case eventNewKeyLhk_0_11111111111
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case eventDecUsingkeyvsdecckeyv_0_1111211111
          solve( (∃ h2 k2 #t2 #t3.
                   (NewKey( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                  ∧
                   (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #vr.6) ∧ (#t3 < #vr.6))  ∥
                 (∃ #t2. (EncUsing( z, t ) @ #t2) ∧ (¬(last(#t2))) ∧ (#t2 < #vr.6))  ∥
                 (∃ h2 k2 #t2 #t3.
                   (Unwrapped( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                  ∧
                   (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #vr.6) ∧ (#t3 < #vr.6))  ∥
                 (∃ #t2 #t3 h1 h2 k2.
                   (WrapKey( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
                  ∧
                   (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #vr.6) ∧ (#t3 < #vr.6))  ∥
                 (∃ #t2 #t3 h1 h2 k2.
                   (Unwrapped( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
                  ∧
                   (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #vr.6) ∧ (#t3 < #vr.6)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( State_11121111( t, lock, v, L_h.2 ) ▶₀ #t2 )
              case ifattCvdec_0_1112111
              by contradiction /* cyclic */
            qed
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case eventEncUsingkeyvm_0_11121111
          by contradiction /* from formulas */
        next
          case eventWrapkeyvkeyv_0_112111111_case_1
          solve( Insert( L_h, <k, 'dec'> ) @ #t2 )
            case insertLhkeyvdec_0_11111211111
            solve( State_11111211111( lock, v, L_h ) ▶₀ #t2 )
              case eventDecKeyLhkeyv_0_1111121111
              solve( ((#vr.3 < #vr.16) ∧
                      (∃ #t2.
                        (Unlock_3( '3', ~n, L_h ) @ #t2)
                       ∧
                        (#vr.3 < #t2) ∧
                        (#t2 < #vr.16) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, L_h ) @ #t0)
                         ⇒
                          ((#t0 < #vr.3) ∨ (#t0 = #vr.3) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, L_h ) @ #t0)
                         ⇒
                          ((#t0 < #vr.3) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.16 < #vr.3) )
                case case_1
                solve( State_111121111111( c, ~n, v, L_h ) ▶₀ #t2.1 )
                  case eventDecUsingkeyvsdecckeyv_0_1111211111
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( State_111112111111( ~n.1, v, L_h ) ▶₀ #t2.1 )
                  case insertLhkeyvdec_0_11111211111
                  solve( (#t2.4 < #t2.5)  ∥ (#t2.4 = #t2.5) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( Insert( L_h2, <m, 'wrap'> ) @ #t2.2 )
                      case insertLhkeyvwrap_0_111111211111
                      solve( State_111111211111( lock, v, L_h2 ) ▶₀ #t2.2 )
                        case eventWrapKeyLhkeyv_0_11111121111
                        solve( Insert( L_h1, <k, 'wrap'> ) @ #t2.3 )
                          case insertLhkeyvwrap_0_111111211111
                          solve( State_111111211111( lock, v, L_h1 ) ▶₀ #t2.3 )
                            case eventWrapKeyLhkeyv_0_11111121111
                            by contradiction /* from formulas */
                          qed
                        next
                          case insertLhmwrap_0_121111111
                          solve( State_121111111( L_h1, k.1, k, v, L_h.1, lock ) ▶₀ #t2.3 )
                            case eventUnwrappedLhm_0_12111111
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case insertLhmwrap_0_121111111
                      solve( State_121111111( L_h2, k.1, m, v, L_h.1, lock ) ▶₀ #t2.2 )
                        case eventUnwrappedLhm_0_12111111
                        solve( Insert( L_h1, <k, 'wrap'> ) @ #t2.3 )
                          case insertLhkeyvwrap_0_111111211111
                          solve( State_111111211111( lock, v, L_h1 ) ▶₀ #t2.3 )
                            case eventWrapKeyLhkeyv_0_11111121111
                            by contradiction /* from formulas */
                          qed
                        next
                          case insertLhmwrap_0_121111111
                          solve( State_121111111( L_h1, k.2, k, v, L_h.2, lock ) ▶₀ #t2.3 )
                            case eventUnwrappedLhm_0_12111111
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case eventWrapkeyvkeyv_0_112111111_case_2
          solve( Insert( L_h, <k, 'dec'> ) @ #t2 )
            case insertLhkeyvdec_0_11111211111
            solve( State_11111211111( lock, v, L_h ) ▶₀ #t2 )
              case eventDecKeyLhkeyv_0_1111121111
              solve( ((#vr.3 < #vr.17) ∧
                      (∃ #t2.
                        (Unlock_3( '3', ~n, L_h ) @ #t2)
                       ∧
                        (#vr.3 < #t2) ∧
                        (#t2 < #vr.17) ∧
                        (∀ #t0 pp. (Unlock( pp, ~n, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, L_h ) @ #t0)
                         ⇒
                          ((#t0 < #vr.3) ∨ (#t0 = #vr.3) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, L_h ) @ #t0)
                         ⇒
                          ((#t0 < #vr.3) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.17 < #vr.3) )
                case case_1
                solve( State_111121111111( c, ~n, v, L_h ) ▶₀ #t2.1 )
                  case eventDecUsingkeyvsdecckeyv_0_1111211111
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( State_111112111111( ~n.1, v, L_h ) ▶₀ #t2.1 )
                  case insertLhkeyvdec_0_11111211111
                  solve( (#t2.4 < #t2.5)  ∥ (#t2.4 = #t2.5) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( Insert( L_h2, <z, 'wrap'> ) @ #t2.2 )
                      case insertLhkeyvwrap_0_111111211111
                      solve( State_111111211111( lock, v, L_h2 ) ▶₀ #t2.2 )
                        case eventWrapKeyLhkeyv_0_11111121111
                        solve( Insert( L_h1, <z.1, 'wrap'> ) @ #t2.3 )
                          case insertLhkeyvwrap_0_111111211111
                          solve( State_111111211111( lock, v, L_h1 ) ▶₀ #t2.3 )
                            case eventWrapKeyLhkeyv_0_11111121111
                            solve( ((#vr.12 < #vr.27) ∧
                                    (∃ #t2.
                                      (Unlock_5( '5', ~n.4, L_h1 ) @ #t2)
                                     ∧
                                      (#vr.12 < #t2) ∧
                                      (#t2 < #vr.27) ∧
                                      (∀ #t0 pp. (Unlock( pp, ~n.4, L_h1 ) @ #t0) ⇒ #t0 = #t2) ∧
                                      (∀ pp lpp #t0.
                                        (Lock( pp, lpp, L_h1 ) @ #t0)
                                       ⇒
                                        ((#t0 < #vr.12) ∨ (#t0 = #vr.12) ∨ (#t2 < #t0))) ∧
                                      (∀ pp lpp #t0.
                                        (Unlock( pp, lpp, L_h1 ) @ #t0)
                                       ⇒
                                        ((#t0 < #vr.12) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                   (#vr.27 < #vr.12) )
                              case case_1
                              solve( State_11211111111( L_h1, L_h2.1, v1, v2, ~n.4 ) ▶₀ #t2.4 )
                                case eventWrapkeyvkeyv_0_112111111
                                by contradiction /* cyclic */
                              qed
                            next
                              case case_2
                              solve( State_11111121111111( ~n.3, v, L_h1 ) ▶₀ #t2.4 )
                                case eventWrapHandleLh_0_1111112111111
                                solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  solve( Insert( L_h, <k, 'init'> ) @ #t2.5 )
                                    case insertLhkinit_0_111111111111
                                    solve( State_111111111111( lock, L_h, k ) ▶₀ #t2.5 )
                                      case eventNewKeyLhk_0_11111111111
                                      solve( State_11111111111111( ~n.7, ~n.2, k ) ▶₀ #t2.6 )
                                        case insertLhkinit_0_111111111111
                                        solve( Insert( L_h2, <z, 'init'> ) @ #t2.7 )
                                          case insertLhkinit_0_111111111111
                                          solve( State_111111111111( lock, L_h2, z ) ▶₀ #t2.7 )
                                            case eventNewKeyLhk_0_11111111111
                                            by contradiction /* impossible chain */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case insertLhmwrap_0_121111111
                          solve( State_121111111( L_h1, k.1, z.1, v, L_h.1, lock ) ▶₀ #t2.3 )
                            case eventUnwrappedLhm_0_12111111
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case insertLhmwrap_0_121111111
                      solve( State_121111111( L_h2, k.1, z, v, L_h.1, lock ) ▶₀ #t2.2 )
                        case eventUnwrappedLhm_0_12111111
                        solve( Insert( L_h1, <z.1, 'wrap'> ) @ #t2.3 )
                          case insertLhkeyvwrap_0_111111211111
                          solve( State_111111211111( lock, v, L_h1 ) ▶₀ #t2.3 )
                            case eventWrapKeyLhkeyv_0_11111121111
                            solve( ((#vr.12 < #vr.28) ∧
                                    (∃ #t2.
                                      (Unlock_5( '5', ~n.5, L_h1 ) @ #t2)
                                     ∧
                                      (#vr.12 < #t2) ∧
                                      (#t2 < #vr.28) ∧
                                      (∀ #t0 pp. (Unlock( pp, ~n.5, L_h1 ) @ #t0) ⇒ #t0 = #t2) ∧
                                      (∀ pp lpp #t0.
                                        (Lock( pp, lpp, L_h1 ) @ #t0)
                                       ⇒
                                        ((#t0 < #vr.12) ∨ (#t0 = #vr.12) ∨ (#t2 < #t0))) ∧
                                      (∀ pp lpp #t0.
                                        (Unlock( pp, lpp, L_h1 ) @ #t0)
                                       ⇒
                                        ((#t0 < #vr.12) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                   (#vr.28 < #vr.12) )
                              case case_1
                              solve( State_11211111111( L_h1, L_h2, v1, v2, ~n.5 ) ▶₀ #t2.4 )
                                case eventWrapkeyvkeyv_0_112111111
                                by contradiction /* cyclic */
                              qed
                            next
                              case case_2
                              solve( State_11111121111111( ~n.4, v, L_h1 ) ▶₀ #t2.4 )
                                case eventWrapHandleLh_0_1111112111111
                                solve( (#t2.7 < #t2.8)  ∥ (#t2.7 = #t2.8) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  solve( Insert( L_h, <k, 'init'> ) @ #t2.5 )
                                    case insertLhkinit_0_111111111111
                                    solve( State_111111111111( lock, L_h, k ) ▶₀ #t2.5 )
                                      case eventNewKeyLhk_0_11111111111
                                      solve( State_11111111111111( ~n.8, ~n.2, k.1 ) ▶₀ #t2.6 )
                                        case insertLhkinit_0_111111111111
                                        solve( !KU( senc(z, k) ) @ #vk.12 )
                                          case c_senc
                                          by contradiction /* cyclic */
                                        next
                                          case eventDecUsingkeyvsdecckeyv_0_1111211111
                                          solve( (∃ h2 k2 #t2 #t3.
                                                   (NewKey( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                                                  ∧
                                                   (¬(last(#t3))) ∧
                                                   (¬(last(#t2))) ∧
                                                   (#t2 < #vr.34) ∧
                                                   (#t3 < #vr.34))  ∥
                                                 (∃ #t2.
                                                   (EncUsing( z.2, t ) @ #t2)
                                                  ∧
                                                   (¬(last(#t2))) ∧ (#t2 < #vr.34))  ∥
                                                 (∃ h2 k2 #t2 #t3.
                                                   (Unwrapped( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                                                  ∧
                                                   (¬(last(#t3))) ∧
                                                   (¬(last(#t2))) ∧
                                                   (#t2 < #vr.34) ∧
                                                   (#t3 < #vr.34))  ∥
                                                 (∃ #t2 #t3 h1 h2 k2.
                                                   (WrapKey( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
                                                  ∧
                                                   (¬(last(#t3))) ∧
                                                   (¬(last(#t2))) ∧
                                                   (#t2 < #vr.34) ∧
                                                   (#t3 < #vr.34))  ∥
                                                 (∃ #t2 #t3 h1 h2 k2.
                                                   (Unwrapped( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
                                                  ∧
                                                   (¬(last(#t3))) ∧
                                                   (¬(last(#t2))) ∧
                                                   (#t2 < #vr.34) ∧
                                                   (#t3 < #vr.34)) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( State_11121111( t, lock, v, L_h.2 ) ▶₀ #t2.7 )
                                              case ifattCvdec_0_1112111
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case case_3
                                            by contradiction /* from formulas */
                                          next
                                            case case_4
                                            by contradiction /* from formulas */
                                          next
                                            case case_5
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case eventEncUsingkeyvm_0_11121111
                                          by contradiction /* cyclic */
                                        next
                                          case eventWrapkeyvkeyv_0_112111111_case_1
                                          solve( !KU( ~n.4 ) @ #vk.9 )
                                            case eventDecUsingkeyvsdecckeyv_0_1111211111
                                            solve( (∃ h2 k2 #t2 #t3.
                                                     (NewKey( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                                                    ∧
                                                     (¬(last(#t3))) ∧
                                                     (¬(last(#t2))) ∧
                                                     (#t2 < #vr.41) ∧
                                                     (#t3 < #vr.41))  ∥
                                                   (∃ #t2.
                                                     (EncUsing( z.2, t ) @ #t2)
                                                    ∧
                                                     (¬(last(#t2))) ∧ (#t2 < #vr.41))  ∥
                                                   (∃ h2 k2 #t2 #t3.
                                                     (Unwrapped( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                                                    ∧
                                                     (¬(last(#t3))) ∧
                                                     (¬(last(#t2))) ∧
                                                     (#t2 < #vr.41) ∧
                                                     (#t3 < #vr.41))  ∥
                                                   (∃ #t2 #t3 h1 h2 k2.
                                                     (WrapKey( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
                                                    ∧
                                                     (¬(last(#t3))) ∧
                                                     (¬(last(#t2))) ∧
                                                     (#t2 < #vr.41) ∧
                                                     (#t3 < #vr.41))  ∥
                                                   (∃ #t2 #t3 h1 h2 k2.
                                                     (Unwrapped( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
                                                    ∧
                                                     (¬(last(#t3))) ∧
                                                     (¬(last(#t2))) ∧
                                                     (#t2 < #vr.41) ∧
                                                     (#t3 < #vr.41)) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              solve( State_11121111( t, lock, v, L_h.2 ) ▶₀ #t2.7 )
                                                case ifattCvdec_0_1112111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case case_3
                                              by contradiction /* from formulas */
                                            next
                                              case case_4
                                              by contradiction /* from formulas */
                                            next
                                              case case_5
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case eventWrapkeyvkeyv_0_112111111
                                            solve( Insert( L_h, <k, 'wrap'> ) @ #t2.7 )
                                              case insertLhkeyvwrap_0_111111211111
                                              solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.7 )
                                                case eventWrapKeyLhkeyv_0_11111121111
                                                solve( ((#vr.23 < #vr.52) ∧
                                                        (∃ #t2.
                                                          (Unlock_6( '6', ~n.5, L_h ) @ #t2)
                                                         ∧
                                                          (#vr.23 < #t2) ∧
                                                          (#t2 < #vr.52) ∧
                                                          (∀ #t0 pp.
                                                            (Unlock( pp, ~n.5, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                          (∀ pp lpp #t0.
                                                            (Lock( pp, lpp, L_h ) @ #t0)
                                                           ⇒
                                                            ((#t0 < #vr.23) ∨ (#t0 = #vr.23) ∨ (#t2 < #t0))) ∧
                                                          (∀ pp lpp #t0.
                                                            (Unlock( pp, lpp, L_h ) @ #t0)
                                                           ⇒
                                                            ((#t0 < #vr.23) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                       (#vr.52 < #vr.23) )
                                                  case case_1
                                                  solve( State_12111111111( L_h2.2, k.1, m.1, v, L_h, ~n.5
                                                         ) ▶₀ #t2.8 )
                                                    case insertLhmwrap_0_121111111
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case case_2
                                                  solve( State_11111121111111( ~n.9, v, L_h ) ▶₀ #t2.8 )
                                                    case eventWrapHandleLh_0_1111112111111
                                                    solve( (#t2.14 < #t2.15)  ∥ (#t2.14 = #t2.15) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( Insert( L_h1, <z.1, 'init'> ) @ #t2.9 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( State_111111111111( lock, L_h1, z.1
                                                               ) ▶₀ #t2.9 )
                                                          case eventNewKeyLhk_0_11111111111
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case insertLhmwrap_0_121111111
                                              solve( State_121111111( L_h, k.1, k, v, L_h.1, lock ) ▶₀ #t2.7 )
                                                case eventUnwrappedLhm_0_12111111
                                                solve( Insert( L_h1, <z.1, 'init'> ) @ #t2.8 )
                                                  case insertLhkinit_0_111111111111
                                                  solve( State_111111111111( lock, L_h1, z.1 ) ▶₀ #t2.8 )
                                                    case eventNewKeyLhk_0_11111111111
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case insertLhmwrap_0_121111111
                                            solve( (#t2.7 < #t2.11)  ∥ (#t2.7 = #t2.11) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              solve( Insert( L_h, <k, 'wrap'> ) @ #t2.7 )
                                                case insertLhkeyvwrap_0_111111211111
                                                solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.7 )
                                                  case eventWrapKeyLhkeyv_0_11111121111
                                                  solve( ((#vr.23 < #vr.44) ∧
                                                          (∃ #t2.
                                                            (Unlock_6( '6', ~n.5, L_h ) @ #t2)
                                                           ∧
                                                            (#vr.23 < #t2) ∧
                                                            (#t2 < #vr.44) ∧
                                                            (∀ #t0 pp.
                                                              (Unlock( pp, ~n.5, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                            (∀ pp lpp #t0.
                                                              (Lock( pp, lpp, L_h ) @ #t0)
                                                             ⇒
                                                              ((#t0 < #vr.23) ∨
                                                               (#t0 = #vr.23) ∨
                                                               (#t2 < #t0))) ∧
                                                            (∀ pp lpp #t0.
                                                              (Unlock( pp, lpp, L_h ) @ #t0)
                                                             ⇒
                                                              ((#t0 < #vr.23) ∨
                                                               (#t2 < #t0) ∨
                                                               (#t2 = #t0)))))  ∥
                                                         (#vr.44 < #vr.23) )
                                                    case case_1
                                                    solve( State_12111111111( L_h2.1, k.1, m.1, v, L_h, ~n.5
                                                           ) ▶₀ #t2.8 )
                                                      case insertLhmwrap_0_121111111
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( State_11111121111111( ~n.9, v, L_h ) ▶₀ #t2.8 )
                                                      case eventWrapHandleLh_0_1111112111111
                                                      solve( (#t2.12 < #t2.13)  ∥ (#t2.12 = #t2.13) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( Insert( L_h1, <z.1, 'init'> ) @ #t2.9 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h1, z.1
                                                                 ) ▶₀ #t2.9 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case insertLhmwrap_0_121111111
                                                solve( State_121111111( L_h, k.1, k, v, L_h.1, lock
                                                       ) ▶₀ #t2.7 )
                                                  case eventUnwrappedLhm_0_12111111
                                                  solve( Insert( L_h1, <z.1, 'init'> ) @ #t2.8 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, L_h1, z.1 ) ▶₀ #t2.8 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case eventWrapkeyvkeyv_0_112111111_case_2
                                          solve( !KU( ~n.4 ) @ #vk.9 )
                                            case eventDecUsingkeyvsdecckeyv_0_1111211111
                                            solve( (∃ h2 k2 #t2 #t3.
                                                     (NewKey( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                                                    ∧
                                                     (¬(last(#t3))) ∧
                                                     (¬(last(#t2))) ∧
                                                     (#t2 < #vr.42) ∧
                                                     (#t3 < #vr.42))  ∥
                                                   (∃ #t2.
                                                     (EncUsing( z.4, t ) @ #t2)
                                                    ∧
                                                     (¬(last(#t2))) ∧ (#t2 < #vr.42))  ∥
                                                   (∃ h2 k2 #t2 #t3.
                                                     (Unwrapped( h2, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
                                                    ∧
                                                     (¬(last(#t3))) ∧
                                                     (¬(last(#t2))) ∧
                                                     (#t2 < #vr.42) ∧
                                                     (#t3 < #vr.42))  ∥
                                                   (∃ #t2 #t3 h1 h2 k2.
                                                     (WrapKey( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
                                                    ∧
                                                     (¬(last(#t3))) ∧
                                                     (¬(last(#t2))) ∧
                                                     (#t2 < #vr.42) ∧
                                                     (#t3 < #vr.42))  ∥
                                                   (∃ #t2 #t3 h1 h2 k2.
                                                     (Unwrapped( h2, k2 ) @ #t2) ∧ (DecKey( h1, k2 ) @ #t3)
                                                    ∧
                                                     (¬(last(#t3))) ∧
                                                     (¬(last(#t2))) ∧
                                                     (#t2 < #vr.42) ∧
                                                     (#t3 < #vr.42)) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              solve( State_11121111( t, lock, v, L_h.2 ) ▶₀ #t2.7 )
                                                case ifattCvdec_0_1112111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case case_3
                                              by contradiction /* from formulas */
                                            next
                                              case case_4
                                              by contradiction /* from formulas */
                                            next
                                              case case_5
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case eventWrapkeyvkeyv_0_112111111
                                            solve( Insert( L_h, <k, 'wrap'> ) @ #t2.7 )
                                              case insertLhkeyvwrap_0_111111211111
                                              solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.7 )
                                                case eventWrapKeyLhkeyv_0_11111121111
                                                solve( ((#vr.23 < #vr.53) ∧
                                                        (∃ #t2.
                                                          (Unlock_6( '6', ~n.5, L_h ) @ #t2)
                                                         ∧
                                                          (#vr.23 < #t2) ∧
                                                          (#t2 < #vr.53) ∧
                                                          (∀ #t0 pp.
                                                            (Unlock( pp, ~n.5, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                          (∀ pp lpp #t0.
                                                            (Lock( pp, lpp, L_h ) @ #t0)
                                                           ⇒
                                                            ((#t0 < #vr.23) ∨ (#t0 = #vr.23) ∨ (#t2 < #t0))) ∧
                                                          (∀ pp lpp #t0.
                                                            (Unlock( pp, lpp, L_h ) @ #t0)
                                                           ⇒
                                                            ((#t0 < #vr.23) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                       (#vr.53 < #vr.23) )
                                                  case case_1
                                                  solve( State_12111111111( L_h2.2, k.1, m.1, v, L_h, ~n.5
                                                         ) ▶₀ #t2.8 )
                                                    case insertLhmwrap_0_121111111
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case case_2
                                                  solve( State_11111121111111( ~n.9, v, L_h ) ▶₀ #t2.8 )
                                                    case eventWrapHandleLh_0_1111112111111
                                                    solve( (#t2.14 < #t2.15)  ∥ (#t2.14 = #t2.15) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( Insert( L_h1, <z.1, 'init'> ) @ #t2.9 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( State_111111111111( lock, L_h1, z.1
                                                               ) ▶₀ #t2.9 )
                                                          case eventNewKeyLhk_0_11111111111
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case insertLhmwrap_0_121111111
                                              solve( State_121111111( L_h, k.1, k, v, L_h.1, lock ) ▶₀ #t2.7 )
                                                case eventUnwrappedLhm_0_12111111
                                                solve( Insert( L_h1, <z.1, 'init'> ) @ #t2.8 )
                                                  case insertLhkinit_0_111111111111
                                                  solve( State_111111111111( lock, L_h1, z.1 ) ▶₀ #t2.8 )
                                                    case eventNewKeyLhk_0_11111111111
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case insertLhmwrap_0_121111111
                                            solve( (#t2.7 < #t2.11)  ∥ (#t2.7 = #t2.11) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              solve( Insert( L_h, <k, 'wrap'> ) @ #t2.7 )
                                                case insertLhkeyvwrap_0_111111211111
                                                solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.7 )
                                                  case eventWrapKeyLhkeyv_0_11111121111
                                                  solve( ((#vr.23 < #vr.45) ∧
                                                          (∃ #t2.
                                                            (Unlock_6( '6', ~n.5, L_h ) @ #t2)
                                                           ∧
                                                            (#vr.23 < #t2) ∧
                                                            (#t2 < #vr.45) ∧
                                                            (∀ #t0 pp.
                                                              (Unlock( pp, ~n.5, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                            (∀ pp lpp #t0.
                                                              (Lock( pp, lpp, L_h ) @ #t0)
                                                             ⇒
                                                              ((#t0 < #vr.23) ∨
                                                               (#t0 = #vr.23) ∨
                                                               (#t2 < #t0))) ∧
                                                            (∀ pp lpp #t0.
                                                              (Unlock( pp, lpp, L_h ) @ #t0)
                                                             ⇒
                                                              ((#t0 < #vr.23) ∨
                                                               (#t2 < #t0) ∨
                                                               (#t2 = #t0)))))  ∥
                                                         (#vr.45 < #vr.23) )
                                                    case case_1
                                                    solve( State_12111111111( L_h2.1, k.1, m.1, v, L_h, ~n.5
                                                           ) ▶₀ #t2.8 )
                                                      case insertLhmwrap_0_121111111
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( State_11111121111111( ~n.9, v, L_h ) ▶₀ #t2.8 )
                                                      case eventWrapHandleLh_0_1111112111111
                                                      solve( (#t2.12 < #t2.13)  ∥ (#t2.12 = #t2.13) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( Insert( L_h1, <z.1, 'init'> ) @ #t2.9 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h1, z.1
                                                                 ) ▶₀ #t2.9 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case insertLhmwrap_0_121111111
                                                solve( State_121111111( L_h, k.1, k, v, L_h.1, lock
                                                       ) ▶₀ #t2.7 )
                                                  case eventUnwrappedLhm_0_12111111
                                                  solve( Insert( L_h1, <z.1, 'init'> ) @ #t2.8 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, L_h1, z.1 ) ▶₀ #t2.8 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case insertLhmwrap_0_121111111
                          solve( State_121111111( L_h1, k.2, z.1, v, L_h.2, lock ) ▶₀ #t2.3 )
                            case eventUnwrappedLhm_0_12111111
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    next
      case case_5
      by contradiction /* from formulas */
    next
      case case_6
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (#t1.1 = #t2)  ∥ (#t2 < #t1.1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
           (∀ #t2.
             (Unlock_0( '0', ~n.1, ~n ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1.1 = #t2) ∨
              (#t2 < #t1.1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, ~n ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (¬(#t0 = #t1.1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, ~n ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, ~n ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (¬(#t0 = #t1.1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, ~n ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_4
    solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
           (∀ #t2.
             (Unlock_1( '1', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1.1 = #t2) ∨
              (#t2 < #t1.1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (¬(#t0 = #t1.1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (¬(#t0 = #t1.1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_5
    solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
           (∀ #t2.
             (Unlock_2( '2', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1.1 = #t2) ∨
              (#t2 < #t1.1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (¬(#t0 = #t1.1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (¬(#t0 = #t1.1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_6
    solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
           (∀ #t2.
             (Unlock_3( '3', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1.1 = #t2) ∨
              (#t2 < #t1.1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (¬(#t0 = #t1.1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (¬(#t0 = #t1.1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_7
    solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
           (∀ #t2.
             (Unlock_4( '4', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1.1 = #t2) ∨
              (#t2 < #t1.1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (¬(#t0 = #t1.1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (¬(#t0 = #t1.1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_8
    solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
           (∀ #t2.
             (Unlock_5( '5', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1.1 = #t2) ∨
              (#t2 < #t1.1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (¬(#t0 = #t1.1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (¬(#t0 = #t1.1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_9
    solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
           (∀ #t2.
             (Unlock_6( '6', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1.1 = #t2) ∨
              (#t2 < #t1.1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (¬(#t0 = #t1.1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (¬(#t0 = #t1.1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma wrap_key_origins [use_induction, reuse]:
  all-traces
  "∀ h2 k #t2.
    (Unwrapped( h2, k ) @ #t2) ⇒
    (((((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ (#t1 < #t2)) ∧
        (∃ hp #t0.
          ((WrapKey( hp, k ) @ #t0) ∧ ((#t0 = #t2) ∨ (#t0 < #t2))) ∧
          (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ (#t0 < #t1)))) ∨
       (∃ h k2 #t1 #t0.
         (((NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)) ∧ (#t1 < #t2)) ∧
         (#t0 < #t2))) ∨
      (∃ #t0 #t1 h1 h2.1 k.1.
        (((WrapKey( h2.1, k.1 ) @ #t0) ∧ (DecKey( h1, k.1 ) @ #t1)) ∧
         (#t0 < #t2)) ∧
        (#t1 < #t2))) ∨
     (∃ #t0 #t1 h1 h2.1 k.1.
       (((Unwrapped( h2.1, k.1 ) @ #t0) ∧ (DecKey( h1, k.1 ) @ #t1)) ∧
        (#t0 < #t2)) ∧
       (#t1 < #t2)))"
/*
guarded formula characterizing all counter-examples:
"∃ h2 k #t2.
  (Unwrapped( h2, k ) @ #t2)
 ∧
  (((∀ h1 #t1. (NewKey( h1, k ) @ #t1) ⇒ ¬(#t1 < #t2)) ∨
    (∀ hp #t0.
      (WrapKey( hp, k ) @ #t0)
     ⇒
      (((¬(#t0 = #t2)) ∧ (¬(#t0 < #t2))) ∨
       (∃ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ∧ ¬(#t0 < #t1)))))) ∧
  (∀ h k2 #t1 #t0.
    (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
   ⇒
    ((¬(#t1 < #t2)) ∨ (¬(#t0 < #t2)))) ∧
  (∀ #t0 #t1 h1 h2.1 k.1.
    (WrapKey( h2.1, k.1 ) @ #t0) ∧ (DecKey( h1, k.1 ) @ #t1)
   ⇒
    ((¬(#t0 < #t2)) ∨ (¬(#t1 < #t2)))) ∧
  (∀ #t0 #t1 h1 h2.1 k.1.
    (Unwrapped( h2.1, k.1 ) @ #t0) ∧ (DecKey( h1, k.1 ) @ #t1)
   ⇒
    ((¬(#t0 < #t2)) ∨ (¬(#t1 < #t2))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ h1 #t1. (NewKey( h1, k.1 ) @ #t1) ⇒ ¬(#t1 < #t2))  ∥
         (∀ hp #t0.
           (WrapKey( hp, k.1 ) @ #t0)
          ⇒
           (((¬(#t0 = #t2)) ∧ (¬(#t0 < #t2))) ∨
            (∃ hpp #t1. (Unwrapped( hpp, k.1 ) @ #t1) ∧ ¬(#t0 < #t1)))) )
    case case_1
    solve( (∀ h2 k #t2.
             (Unwrapped( h2, k ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2)) ∧
               (∃ hp #t0.
                 (WrapKey( hp, k ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t2) ∨ (#t0 < #t2))) ∧
                 (∀ hpp #t1.
                   (Unwrapped( hpp, k ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1))))) ∨
              (∃ h k2 #t1 #t0.
                (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
               ∧
                (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2) ∧ (#t0 < #t2)) ∨
              (∃ #t0 #t1 h1 h2.1 k.1.
                (WrapKey( h2.1, k.1 ) @ #t0) ∧ (DecKey( h1, k.1 ) @ #t1)
               ∧
                (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2)) ∨
              (∃ #t0 #t1 h1 h2.1 k.1.
                (Unwrapped( h2.1, k.1 ) @ #t0) ∧ (DecKey( h1, k.1 ) @ #t1)
               ∧
                (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2))))  ∥
           (∃ x y #t3.
             (IsIn( x, y ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (∀ #t2.
               (Insert( x, y ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t1 yp.
                  (Insert( x, yp ) @ #t1)
                 ∧
                  (¬(last(#t1))) ∧
                  (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                  (¬(#t1 = #t2)) ∧
                  (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_0( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_1( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_2( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_3( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_4( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_5( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_6( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_6( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3))) )
      case case_1
      solve( (last(#t2))  ∥
             ((∃ h1 #t1. (NewKey( h1, k.1 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2)) ∧
              (∃ hp #t0.
                (WrapKey( hp, k.1 ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t2) ∨ (#t0 < #t2))) ∧
                (∀ hpp #t1.
                  (Unwrapped( hpp, k.1 ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
             (∃ h k2 #t1 #t0.
               (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
              ∧
               (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2) ∧ (#t0 < #t2))  ∥
             (∃ #t0 #t1 h1 h2 k.
               (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
              ∧
               (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2))  ∥
             (∃ #t0 #t1 h1 h2 k.
               (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
              ∧
               (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2)) )
        case case_1
        solve( State_12111111( h2, k, k.1, v, L_h, lock ) ▶₀ #t2 )
          case ifkeyvk_0_121111
          solve( !KU( senc(k.1, k) ) @ #vk.2 )
            case c_senc
            solve( Insert( L_h, <k, 'wrap'> ) @ #t2.1 )
              case insertLhkeyvwrap_0_111111211111
              solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.1 )
                case eventWrapKeyLhkeyv_0_11111121111
                solve( ((#vr.3 < #vr.9) ∧
                        (∃ #t2.
                          (Unlock_6( '6', ~n.1, L_h ) @ #t2)
                         ∧
                          (#vr.3 < #t2) ∧
                          (#t2 < #vr.9) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.1, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t0 = #vr.3) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.9 < #vr.3) )
                  case case_1
                  solve( State_12111111111( L_h2, k.2, m, v, L_h, ~n.1 ) ▶₀ #t2.2 )
                    case insertLhmwrap_0_121111111
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( State_11111121111111( ~n.2, v, L_h ) ▶₀ #t2.2 )
                    case eventWrapHandleLh_0_1111112111111
                    solve( (#t2.3 < #t2.4)  ∥ (#t2.3 = #t2.4) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( Insert( L_h, <k, 'init'> ) @ #t2.3 )
                        case insertLhkinit_0_111111111111
                        solve( State_111111111111( lock, L_h, k ) ▶₀ #t2.3 )
                          case eventNewKeyLhk_0_11111111111
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case insertLhmwrap_0_121111111
              solve( State_121111111( L_h, k.2, k, v, L_h.1, lock ) ▶₀ #t2.1 )
                case eventUnwrappedLhm_0_12111111
                solve( ((∃ h1 #t1.
                          (NewKey( h1, k ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.6)) ∧
                        (∃ hp #t0.
                          (WrapKey( hp, k ) @ #t0)
                         ∧
                          (¬(last(#t0))) ∧
                          (((#t0 = #vr.6) ∨ (#t0 < #vr.6))) ∧
                          (∀ hpp #t1.
                            (Unwrapped( hpp, k ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                       (∃ h k2 #t1 #t0.
                         (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                        ∧
                         (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.6) ∧ (#t0 < #vr.6))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.6) ∧ (#t1 < #vr.6))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.6) ∧ (#t1 < #vr.6)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                next
                  case case_4
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
            by contradiction /* from formulas */
          next
            case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
            solve( ((∃ h1 #t1.
                      (NewKey( h1, k2 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.1)) ∧
                    (∃ hp #t0.
                      (WrapKey( hp, k2 ) @ #t0)
                     ∧
                      (¬(last(#t0))) ∧
                      (((#t0 = #t2.1) ∨ (#t0 < #t2.1))) ∧
                      (∀ hpp #t1.
                        (Unwrapped( hpp, k2 ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                   (∃ h k2 #t1 #t0.
                     (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                    ∧
                     (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.1) ∧ (#t0 < #t2.1))  ∥
                   (∃ #t0 #t1 h1 h2 k.
                     (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                    ∧
                     (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2.1) ∧ (#t1 < #t2.1))  ∥
                   (∃ #t0 #t1 h1 h2 k.
                     (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                    ∧
                     (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2.1) ∧ (#t1 < #t2.1)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            next
              case case_4
              by contradiction /* from formulas */
            qed
          next
            case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
            by contradiction /* from formulas */
          next
            case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
            by contradiction /* from formulas */
          next
            case eventEncUsingkeyvm_0_11121111
            solve( Insert( L_h, <k, 'wrap'> ) @ #t2.1 )
              case insertLhkeyvwrap_0_111111211111
              solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.1 )
                case eventWrapKeyLhkeyv_0_11111121111
                solve( ((#vr.3 < #vr.14) ∧
                        (∃ #t2.
                          (Unlock_6( '6', ~n.1, L_h ) @ #t2)
                         ∧
                          (#vr.3 < #t2) ∧
                          (#t2 < #vr.14) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.1, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t0 = #vr.3) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.14 < #vr.3) )
                  case case_1
                  solve( State_12111111111( L_h2, k.2, m, v, L_h, ~n.1 ) ▶₀ #t2.2 )
                    case insertLhmwrap_0_121111111
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( State_11111121111111( ~n.2, v, L_h ) ▶₀ #t2.2 )
                    case eventWrapHandleLh_0_1111112111111
                    solve( (#t2.4 < #t2.5)  ∥ (#t2.4 = #t2.5) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( Insert( L_h.1, <k, 'dec'> ) @ #t2.3 )
                        case insertLhkeyvdec_0_11111211111
                        solve( State_11111211111( lock, v, L_h.1 ) ▶₀ #t2.3 )
                          case eventDecKeyLhkeyv_0_1111121111
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case insertLhmwrap_0_121111111
              solve( State_121111111( L_h, k.2, k, v, L_h.1, lock ) ▶₀ #t2.1 )
                case eventUnwrappedLhm_0_12111111
                solve( ((∃ h1 #t1.
                          (NewKey( h1, k ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.11)) ∧
                        (∃ hp #t0.
                          (WrapKey( hp, k ) @ #t0)
                         ∧
                          (¬(last(#t0))) ∧
                          (((#t0 = #vr.11) ∨ (#t0 < #vr.11))) ∧
                          (∀ hpp #t1.
                            (Unwrapped( hpp, k ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                       (∃ h k2 #t1 #t0.
                         (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                        ∧
                         (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.11) ∧ (#t0 < #vr.11))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.11) ∧ (#t1 < #vr.11))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.11) ∧ (#t1 < #vr.11)) )
                  case case_1
                  solve( State_11111111111( lock, h1, k ) ▶₀ #t1 )
                    case increate_0_1111111
                    solve( State_11111121111( lock, <~n, x>, hp ) ▶₀ #t0 )
                      case ifattCvinit_0_1111112111
                      solve( Insert( L_h.1, <~n.1, 'dec'> ) @ #t2.2 )
                        case insertLhkeyvdec_0_11111211111
                        solve( State_11111211111( lock, <~n.1, x>, L_h.1 ) ▶₀ #t2.2 )
                          case eventDecKeyLhkeyv_0_1111121111
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                next
                  case case_4
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case eventWrapkeyvkeyv_0_112111111_case_1
            solve( Insert( L_h, <k, 'wrap'> ) @ #t2.1 )
              case insertLhkeyvwrap_0_111111211111
              solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.1 )
                case eventWrapKeyLhkeyv_0_11111121111
                solve( ((#vr.3 < #vr.16) ∧
                        (∃ #t2.
                          (Unlock_6( '6', ~n.1, L_h ) @ #t2)
                         ∧
                          (#vr.3 < #t2) ∧
                          (#t2 < #vr.16) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.1, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t0 = #vr.3) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.16 < #vr.3) )
                  case case_1
                  solve( State_12111111111( L_h2.1, k.2, m, v, L_h, ~n.1 ) ▶₀ #t2.2 )
                    case insertLhmwrap_0_121111111
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( State_11111121111111( ~n.2, v, L_h ) ▶₀ #t2.2 )
                    case eventWrapHandleLh_0_1111112111111
                    solve( (#t2.5 < #t2.6)  ∥ (#t2.5 = #t2.6) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( Insert( L_h2, <k.1, 'wrap'> ) @ #t2.3 )
                        case insertLhkeyvwrap_0_111111211111
                        solve( State_111111211111( lock, v, L_h2 ) ▶₀ #t2.3 )
                          case eventWrapKeyLhkeyv_0_11111121111
                          solve( Insert( L_h1, <k, 'wrap'> ) @ #t2.4 )
                            case insertLhkeyvwrap_0_111111211111
                            solve( State_111111211111( lock, v, L_h1 ) ▶₀ #t2.4 )
                              case eventWrapKeyLhkeyv_0_11111121111
                              solve( ((#vr.11 < #vr.27) ∧
                                      (∃ #t2.
                                        (Unlock_5( '5', ~n.5, L_h1 ) @ #t2)
                                       ∧
                                        (#vr.11 < #t2) ∧
                                        (#t2 < #vr.27) ∧
                                        (∀ #t0 pp. (Unlock( pp, ~n.5, L_h1 ) @ #t0) ⇒ #t0 = #t2) ∧
                                        (∀ pp lpp #t0.
                                          (Lock( pp, lpp, L_h1 ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.11) ∨ (#t0 = #vr.11) ∨ (#t2 < #t0))) ∧
                                        (∀ pp lpp #t0.
                                          (Unlock( pp, lpp, L_h1 ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.11) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                     (#vr.27 < #vr.11) )
                                case case_1
                                solve( State_11211111111( L_h1, L_h2.1, v1, v2, ~n.5 ) ▶₀ #t2.5 )
                                  case eventWrapkeyvkeyv_0_112111111
                                  by contradiction /* cyclic */
                                qed
                              next
                                case case_2
                                solve( State_11111121111111( ~n.4, v, L_h1 ) ▶₀ #t2.5 )
                                  case eventWrapHandleLh_0_1111112111111
                                  solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( Insert( L_h, <k, 'init'> ) @ #t2.6 )
                                      case insertLhkinit_0_111111111111
                                      solve( State_111111111111( lock, L_h, k ) ▶₀ #t2.6 )
                                        case eventNewKeyLhk_0_11111111111
                                        solve( State_11111111111111( ~n.8, ~n.2, k.1 ) ▶₀ #t2.7 )
                                          case insertLhkinit_0_111111111111
                                          solve( Insert( L_h2, <k, 'init'> ) @ #t2.8 )
                                            case insertLhkinit_0_111111111111
                                            solve( State_111111111111( lock, L_h2, k ) ▶₀ #t2.8 )
                                              case eventNewKeyLhk_0_11111111111
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case insertLhmwrap_0_121111111
                            solve( State_121111111( L_h1, k.2, k, v, L_h.1, lock ) ▶₀ #t2.4 )
                              case eventUnwrappedLhm_0_12111111
                              solve( ((∃ h1 #t1.
                                        (NewKey( h1, k ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.24)) ∧
                                      (∃ hp #t0.
                                        (WrapKey( hp, k ) @ #t0)
                                       ∧
                                        (¬(last(#t0))) ∧
                                        (((#t0 = #vr.24) ∨ (#t0 < #vr.24))) ∧
                                        (∀ hpp #t1.
                                          (Unwrapped( hpp, k ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                     (∃ h k2 #t1 #t0.
                                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                      ∧
                                       (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.24) ∧ (#t0 < #vr.24))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.24) ∧ (#t1 < #vr.24))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.24) ∧ (#t1 < #vr.24)) )
                                case case_1
                                solve( State_11111111111( lock, h1, k ) ▶₀ #t1 )
                                  case increate_0_1111111
                                  solve( State_11111121111( lock, <~n, x>, hp ) ▶₀ #t0 )
                                    case ifattCvinit_0_1111112111
                                    solve( Insert( L_h, <~n.1, 'init'> ) @ #t2.5 )
                                      case insertLhkinit_0_111111111111
                                      solve( State_111111111111( lock, L_h, ~n.1 ) ▶₀ #t2.5 )
                                        case eventNewKeyLhk_0_11111111111
                                        solve( State_11111111111111( ~n.2, ~n.3, k.2 ) ▶₀ #t2.6 )
                                          case insertLhkinit_0_111111111111
                                          solve( Insert( L_h2, <k, 'init'> ) @ #t2.7 )
                                            case insertLhkinit_0_111111111111
                                            solve( State_111111111111( lock, L_h2, k ) ▶₀ #t2.7 )
                                              case eventNewKeyLhk_0_11111111111
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              next
                                case case_4
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      next
                        case insertLhmwrap_0_121111111
                        solve( State_121111111( L_h2, k.2, k.1, v, L_h.1, lock ) ▶₀ #t2.3 )
                          case eventUnwrappedLhm_0_12111111
                          solve( ((∃ h1 #t1.
                                    (NewKey( h1, k.1 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.19)) ∧
                                  (∃ hp #t0.
                                    (WrapKey( hp, k.1 ) @ #t0)
                                   ∧
                                    (¬(last(#t0))) ∧
                                    (((#t0 = #vr.19) ∨ (#t0 < #vr.19))) ∧
                                    (∀ hpp #t1.
                                      (Unwrapped( hpp, k.1 ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                 (∃ h k2 #t1 #t0.
                                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.19) ∧ (#t0 < #vr.19))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.19) ∧ (#t1 < #vr.19))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.19) ∧ (#t1 < #vr.19)) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          next
                            case case_4
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case insertLhmwrap_0_121111111
              solve( State_121111111( L_h, k.2, k, v, L_h.1, lock ) ▶₀ #t2.1 )
                case eventUnwrappedLhm_0_12111111
                solve( ((∃ h1 #t1.
                          (NewKey( h1, k ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.13)) ∧
                        (∃ hp #t0.
                          (WrapKey( hp, k ) @ #t0)
                         ∧
                          (¬(last(#t0))) ∧
                          (((#t0 = #vr.13) ∨ (#t0 < #vr.13))) ∧
                          (∀ hpp #t1.
                            (Unwrapped( hpp, k ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                       (∃ h k2 #t1 #t0.
                         (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                        ∧
                         (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.13) ∧ (#t0 < #vr.13))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.13) ∧ (#t1 < #vr.13))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.13) ∧ (#t1 < #vr.13)) )
                  case case_1
                  solve( State_11111111111( lock, h1, k ) ▶₀ #t1 )
                    case increate_0_1111111
                    solve( State_11111121111( lock, <~n, x>, hp ) ▶₀ #t0 )
                      case ifattCvinit_0_1111112111
                      solve( Insert( L_h2, <k, 'wrap'> ) @ #t2.2 )
                        case insertLhkeyvwrap_0_111111211111
                        solve( State_111111211111( lock, v, L_h2 ) ▶₀ #t2.2 )
                          case eventWrapKeyLhkeyv_0_11111121111
                          solve( Insert( L_h1, <~n.1, 'wrap'> ) @ #t2.3 )
                            case insertLhkeyvwrap_0_111111211111
                            solve( State_111111211111( lock, <~n.1, x>, L_h1 ) ▶₀ #t2.3 )
                              case eventWrapKeyLhkeyv_0_11111121111
                              solve( ((#vr.11 < #vr.33) ∧
                                      (∃ #t2.
                                        (Unlock_5( '5', ~n.10, L_h1 ) @ #t2)
                                       ∧
                                        (#vr.11 < #t2) ∧
                                        (#t2 < #vr.33) ∧
                                        (∀ #t0 pp. (Unlock( pp, ~n.10, L_h1 ) @ #t0) ⇒ #t0 = #t2) ∧
                                        (∀ pp lpp #t0.
                                          (Lock( pp, lpp, L_h1 ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.11) ∨ (#t0 = #vr.11) ∨ (#t2 < #t0))) ∧
                                        (∀ pp lpp #t0.
                                          (Unlock( pp, lpp, L_h1 ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.11) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                     (#vr.33 < #vr.11) )
                                case case_1
                                solve( State_11211111111( L_h1, L_h2.1, v1, v2, ~n.10 ) ▶₀ #t2.4 )
                                  case eventWrapkeyvkeyv_0_112111111
                                  by contradiction /* cyclic */
                                qed
                              next
                                case case_2
                                solve( State_11111121111111( ~n.9, v, L_h1 ) ▶₀ #t2.4 )
                                  case eventWrapHandleLh_0_1111112111111
                                  solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( !KU( senc(~n.1, k.1) ) @ #vk.10 )
                                      case c_senc
                                      by contradiction /* from formulas */
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                      by contradiction /* from formulas */
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                      solve( ((∃ h1 #t1.
                                                (NewKey( h1, k2 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.5)) ∧
                                              (∃ hp #t0.
                                                (WrapKey( hp, k2 ) @ #t0)
                                               ∧
                                                (¬(last(#t0))) ∧
                                                (((#t0 = #t2.5) ∨ (#t0 < #t2.5))) ∧
                                                (∀ hpp #t1.
                                                  (Unwrapped( hpp, k2 ) @ #t1)
                                                 ⇒
                                                  ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                             (∃ h k2 #t1 #t0.
                                               (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                              ∧
                                               (¬(last(#t0))) ∧
                                               (¬(last(#t1))) ∧
                                               (#t1 < #t2.5) ∧
                                               (#t0 < #t2.5))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧
                                               (¬(last(#t0))) ∧
                                               (#t0 < #t2.5) ∧
                                               (#t1 < #t2.5))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧
                                               (¬(last(#t0))) ∧
                                               (#t0 < #t2.5) ∧
                                               (#t1 < #t2.5)) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      next
                                        case case_3
                                        by contradiction /* from formulas */
                                      next
                                        case case_4
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                      by contradiction /* from formulas */
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                      by contradiction /* from formulas */
                                    next
                                      case eventEncUsingkeyvm_0_11121111
                                      by contradiction /* from formulas */
                                    next
                                      case eventWrapkeyvkeyv_0_112111111_case_1
                                      solve( !KU( ~n.5 ) @ #vk.3 )
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                        solve( ((∃ h1 #t1.
                                                  (NewKey( h1, k2 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.5)) ∧
                                                (∃ hp #t0.
                                                  (WrapKey( hp, k2 ) @ #t0)
                                                 ∧
                                                  (¬(last(#t0))) ∧
                                                  (((#t0 = #t2.5) ∨ (#t0 < #t2.5))) ∧
                                                  (∀ hpp #t1.
                                                    (Unwrapped( hpp, k2 ) @ #t1)
                                                   ⇒
                                                    ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                               (∃ h k2 #t1 #t0.
                                                 (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                ∧
                                                 (¬(last(#t0))) ∧
                                                 (¬(last(#t1))) ∧
                                                 (#t1 < #t2.5) ∧
                                                 (#t0 < #t2.5))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.5) ∧
                                                 (#t1 < #t2.5))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.5) ∧
                                                 (#t1 < #t2.5)) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        next
                                          case case_3
                                          by contradiction /* from formulas */
                                        next
                                          case case_4
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                        by contradiction /* from formulas */
                                      next
                                        case eventWrapkeyvkeyv_0_112111111
                                        solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.5 )
                                          case insertLhkeyvwrap_0_111111211111
                                          solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.5 )
                                            case eventWrapKeyLhkeyv_0_11111121111
                                            solve( ((#vr.17 < #vr.54) ∧
                                                    (∃ #t2.
                                                      (Unlock_6( '6', ~n.7, L_h ) @ #t2)
                                                     ∧
                                                      (#vr.17 < #t2) ∧
                                                      (#t2 < #vr.54) ∧
                                                      (∀ #t0 pp.
                                                        (Unlock( pp, ~n.7, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                      (∀ pp lpp #t0.
                                                        (Lock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.17) ∨ (#t0 = #vr.17) ∨ (#t2 < #t0))) ∧
                                                      (∀ pp lpp #t0.
                                                        (Unlock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.17) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                   (#vr.54 < #vr.17) )
                                              case case_1
                                              solve( State_12111111111( L_h2.3, k.2, m, v, L_h, ~n.7
                                                     ) ▶₀ #t2.6 )
                                                case insertLhmwrap_0_121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case case_2
                                              solve( State_11111121111111( ~n.11, v, L_h ) ▶₀ #t2.6 )
                                                case eventWrapHandleLh_0_1111112111111
                                                solve( (#t2.14 < #t2.15)  ∥ (#t2.14 = #t2.15) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.7 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.7 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                             ) ▶₀ #t2.8 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <k, 'init'> ) @ #t2.9 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, k
                                                                 ) ▶₀ #t2.9 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case insertLhmwrap_0_121111111
                                          solve( State_121111111( L_h, k.2, k.1, v, L_h.1, lock ) ▶₀ #t2.5 )
                                            case eventUnwrappedLhm_0_12111111
                                            solve( ((∃ h1 #t1.
                                                      (NewKey( h1, k.1 ) @ #t1)
                                                     ∧
                                                      (¬(last(#t1))) ∧ (#t1 < #vr.51)) ∧
                                                    (∃ hp #t0.
                                                      (WrapKey( hp, k.1 ) @ #t0)
                                                     ∧
                                                      (¬(last(#t0))) ∧
                                                      (((#t0 = #vr.51) ∨ (#t0 < #vr.51))) ∧
                                                      (∀ hpp #t1.
                                                        (Unwrapped( hpp, k.1 ) @ #t1)
                                                       ⇒
                                                        ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                   (∃ h k2 #t1 #t0.
                                                     (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                    ∧
                                                     (¬(last(#t0))) ∧
                                                     (¬(last(#t1))) ∧
                                                     (#t1 < #vr.51) ∧
                                                     (#t0 < #vr.51))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.51) ∧
                                                     (#t1 < #vr.51))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.51) ∧
                                                     (#t1 < #vr.51)) )
                                              case case_1
                                              solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                case increate_0_1111111
                                                solve( State_11111121111( lock, <~n.7, x>, hp.1 ) ▶₀ #t0.1 )
                                                  case ifattCvinit_0_1111112111
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                             ) ▶₀ #t2.7 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <k, 'init'> ) @ #t2.8 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, k
                                                                 ) ▶₀ #t2.8 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              by contradiction /* from formulas */
                                            next
                                              case case_3
                                              by contradiction /* from formulas */
                                            next
                                              case case_4
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      next
                                        case insertLhmwrap_0_121111111
                                        solve( (#t2.5 < #t2.11)  ∥ (#t2.5 = #t2.11) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.5 )
                                            case insertLhkeyvwrap_0_111111211111
                                            solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.5 )
                                              case eventWrapKeyLhkeyv_0_11111121111
                                              solve( ((#vr.17 < #vr.46) ∧
                                                      (∃ #t2.
                                                        (Unlock_6( '6', ~n.7, L_h ) @ #t2)
                                                       ∧
                                                        (#vr.17 < #t2) ∧
                                                        (#t2 < #vr.46) ∧
                                                        (∀ #t0 pp.
                                                          (Unlock( pp, ~n.7, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                        (∀ pp lpp #t0.
                                                          (Lock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.17) ∨ (#t0 = #vr.17) ∨ (#t2 < #t0))) ∧
                                                        (∀ pp lpp #t0.
                                                          (Unlock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.17) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                     (#vr.46 < #vr.17) )
                                                case case_1
                                                solve( State_12111111111( L_h2.2, k.2, m, v, L_h, ~n.7
                                                       ) ▶₀ #t2.6 )
                                                  case insertLhmwrap_0_121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case case_2
                                                solve( State_11111121111111( ~n.11, v, L_h ) ▶₀ #t2.6 )
                                                  case eventWrapHandleLh_0_1111112111111
                                                  solve( (#t2.12 < #t2.13)  ∥ (#t2.12 = #t2.13) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.7 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.7 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                               ) ▶₀ #t2.8 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <k, 'init'> ) @ #t2.9 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, k
                                                                   ) ▶₀ #t2.9 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case insertLhmwrap_0_121111111
                                            solve( State_121111111( L_h, k.2, k.1, v, L_h.1, lock ) ▶₀ #t2.5 )
                                              case eventUnwrappedLhm_0_12111111
                                              solve( ((∃ h1 #t1.
                                                        (NewKey( h1, k.1 ) @ #t1)
                                                       ∧
                                                        (¬(last(#t1))) ∧ (#t1 < #vr.43)) ∧
                                                      (∃ hp #t0.
                                                        (WrapKey( hp, k.1 ) @ #t0)
                                                       ∧
                                                        (¬(last(#t0))) ∧
                                                        (((#t0 = #vr.43) ∨ (#t0 < #vr.43))) ∧
                                                        (∀ hpp #t1.
                                                          (Unwrapped( hpp, k.1 ) @ #t1)
                                                         ⇒
                                                          ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #vr.43) ∧
                                                       (#t0 < #vr.43))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.43) ∧
                                                       (#t1 < #vr.43))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.43) ∧
                                                       (#t1 < #vr.43)) )
                                                case case_1
                                                solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                  case increate_0_1111111
                                                  solve( State_11111121111( lock, <~n.7, x>, hp.1 ) ▶₀ #t0.1 )
                                                    case ifattCvinit_0_1111112111
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                               ) ▶₀ #t2.7 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <k, 'init'> ) @ #t2.8 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, k
                                                                   ) ▶₀ #t2.8 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              next
                                                case case_4
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case eventWrapkeyvkeyv_0_112111111_case_2
                                      solve( !KU( ~n.5 ) @ #vk.3 )
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                        solve( ((∃ h1 #t1.
                                                  (NewKey( h1, k2 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.5)) ∧
                                                (∃ hp #t0.
                                                  (WrapKey( hp, k2 ) @ #t0)
                                                 ∧
                                                  (¬(last(#t0))) ∧
                                                  (((#t0 = #t2.5) ∨ (#t0 < #t2.5))) ∧
                                                  (∀ hpp #t1.
                                                    (Unwrapped( hpp, k2 ) @ #t1)
                                                   ⇒
                                                    ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                               (∃ h k2 #t1 #t0.
                                                 (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                ∧
                                                 (¬(last(#t0))) ∧
                                                 (¬(last(#t1))) ∧
                                                 (#t1 < #t2.5) ∧
                                                 (#t0 < #t2.5))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.5) ∧
                                                 (#t1 < #t2.5))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.5) ∧
                                                 (#t1 < #t2.5)) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        next
                                          case case_3
                                          by contradiction /* from formulas */
                                        next
                                          case case_4
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                        by contradiction /* from formulas */
                                      next
                                        case eventWrapkeyvkeyv_0_112111111
                                        solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.5 )
                                          case insertLhkeyvwrap_0_111111211111
                                          solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.5 )
                                            case eventWrapKeyLhkeyv_0_11111121111
                                            solve( ((#vr.17 < #vr.55) ∧
                                                    (∃ #t2.
                                                      (Unlock_6( '6', ~n.7, L_h ) @ #t2)
                                                     ∧
                                                      (#vr.17 < #t2) ∧
                                                      (#t2 < #vr.55) ∧
                                                      (∀ #t0 pp.
                                                        (Unlock( pp, ~n.7, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                      (∀ pp lpp #t0.
                                                        (Lock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.17) ∨ (#t0 = #vr.17) ∨ (#t2 < #t0))) ∧
                                                      (∀ pp lpp #t0.
                                                        (Unlock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.17) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                   (#vr.55 < #vr.17) )
                                              case case_1
                                              solve( State_12111111111( L_h2.3, k.2, m, v, L_h, ~n.7
                                                     ) ▶₀ #t2.6 )
                                                case insertLhmwrap_0_121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case case_2
                                              solve( State_11111121111111( ~n.11, v, L_h ) ▶₀ #t2.6 )
                                                case eventWrapHandleLh_0_1111112111111
                                                solve( (#t2.14 < #t2.15)  ∥ (#t2.14 = #t2.15) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.7 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.7 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                             ) ▶₀ #t2.8 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <k, 'init'> ) @ #t2.9 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, k
                                                                 ) ▶₀ #t2.9 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case insertLhmwrap_0_121111111
                                          solve( State_121111111( L_h, k.2, k.1, v, L_h.1, lock ) ▶₀ #t2.5 )
                                            case eventUnwrappedLhm_0_12111111
                                            solve( ((∃ h1 #t1.
                                                      (NewKey( h1, k.1 ) @ #t1)
                                                     ∧
                                                      (¬(last(#t1))) ∧ (#t1 < #vr.52)) ∧
                                                    (∃ hp #t0.
                                                      (WrapKey( hp, k.1 ) @ #t0)
                                                     ∧
                                                      (¬(last(#t0))) ∧
                                                      (((#t0 = #vr.52) ∨ (#t0 < #vr.52))) ∧
                                                      (∀ hpp #t1.
                                                        (Unwrapped( hpp, k.1 ) @ #t1)
                                                       ⇒
                                                        ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                   (∃ h k2 #t1 #t0.
                                                     (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                    ∧
                                                     (¬(last(#t0))) ∧
                                                     (¬(last(#t1))) ∧
                                                     (#t1 < #vr.52) ∧
                                                     (#t0 < #vr.52))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.52) ∧
                                                     (#t1 < #vr.52))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.52) ∧
                                                     (#t1 < #vr.52)) )
                                              case case_1
                                              solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                case increate_0_1111111
                                                solve( State_11111121111( lock, <~n.7, x>, hp.1 ) ▶₀ #t0.1 )
                                                  case ifattCvinit_0_1111112111
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                             ) ▶₀ #t2.7 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <k, 'init'> ) @ #t2.8 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, k
                                                                 ) ▶₀ #t2.8 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              by contradiction /* from formulas */
                                            next
                                              case case_3
                                              by contradiction /* from formulas */
                                            next
                                              case case_4
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      next
                                        case insertLhmwrap_0_121111111
                                        solve( (#t2.5 < #t2.11)  ∥ (#t2.5 = #t2.11) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.5 )
                                            case insertLhkeyvwrap_0_111111211111
                                            solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.5 )
                                              case eventWrapKeyLhkeyv_0_11111121111
                                              solve( ((#vr.17 < #vr.47) ∧
                                                      (∃ #t2.
                                                        (Unlock_6( '6', ~n.7, L_h ) @ #t2)
                                                       ∧
                                                        (#vr.17 < #t2) ∧
                                                        (#t2 < #vr.47) ∧
                                                        (∀ #t0 pp.
                                                          (Unlock( pp, ~n.7, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                        (∀ pp lpp #t0.
                                                          (Lock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.17) ∨ (#t0 = #vr.17) ∨ (#t2 < #t0))) ∧
                                                        (∀ pp lpp #t0.
                                                          (Unlock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.17) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                     (#vr.47 < #vr.17) )
                                                case case_1
                                                solve( State_12111111111( L_h2.2, k.2, m, v, L_h, ~n.7
                                                       ) ▶₀ #t2.6 )
                                                  case insertLhmwrap_0_121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case case_2
                                                solve( State_11111121111111( ~n.11, v, L_h ) ▶₀ #t2.6 )
                                                  case eventWrapHandleLh_0_1111112111111
                                                  solve( (#t2.12 < #t2.13)  ∥ (#t2.12 = #t2.13) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.7 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.7 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                               ) ▶₀ #t2.8 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <k, 'init'> ) @ #t2.9 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, k
                                                                   ) ▶₀ #t2.9 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case insertLhmwrap_0_121111111
                                            solve( State_121111111( L_h, k.2, k.1, v, L_h.1, lock ) ▶₀ #t2.5 )
                                              case eventUnwrappedLhm_0_12111111
                                              solve( ((∃ h1 #t1.
                                                        (NewKey( h1, k.1 ) @ #t1)
                                                       ∧
                                                        (¬(last(#t1))) ∧ (#t1 < #vr.44)) ∧
                                                      (∃ hp #t0.
                                                        (WrapKey( hp, k.1 ) @ #t0)
                                                       ∧
                                                        (¬(last(#t0))) ∧
                                                        (((#t0 = #vr.44) ∨ (#t0 < #vr.44))) ∧
                                                        (∀ hpp #t1.
                                                          (Unwrapped( hpp, k.1 ) @ #t1)
                                                         ⇒
                                                          ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #vr.44) ∧
                                                       (#t0 < #vr.44))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.44) ∧
                                                       (#t1 < #vr.44))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.44) ∧
                                                       (#t1 < #vr.44)) )
                                                case case_1
                                                solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                  case increate_0_1111111
                                                  solve( State_11111121111( lock, <~n.7, x>, hp.1 ) ▶₀ #t0.1 )
                                                    case ifattCvinit_0_1111112111
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                               ) ▶₀ #t2.7 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <k, 'init'> ) @ #t2.8 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, k
                                                                   ) ▶₀ #t2.8 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              next
                                                case case_4
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case insertLhmwrap_0_121111111
                            solve( State_121111111( L_h1, k.2, ~n.1, v, L_h.1, lock ) ▶₀ #t2.3 )
                              case eventUnwrappedLhm_0_12111111
                              solve( ((∃ h1 #t1.
                                        (NewKey( h1, ~n.1 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.30)) ∧
                                      (∃ hp #t0.
                                        (WrapKey( hp, ~n.1 ) @ #t0)
                                       ∧
                                        (¬(last(#t0))) ∧
                                        (((#t0 = #vr.30) ∨ (#t0 < #vr.30))) ∧
                                        (∀ hpp #t1.
                                          (Unwrapped( hpp, ~n.1 ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                     (∃ h k2 #t1 #t0.
                                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                      ∧
                                       (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.30) ∧ (#t0 < #vr.30))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.30) ∧ (#t1 < #vr.30))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.30) ∧ (#t1 < #vr.30)) )
                                case case_1
                                solve( State_11111111111( lock, h1, ~n.1 ) ▶₀ #t1.1 )
                                  case increate_0_1111111
                                  solve( State_11111121111( lock, <~n.1, x>, hp.1 ) ▶₀ #t0.1 )
                                    case ifattCvinit_0_1111112111
                                    solve( !KU( senc(~n.1, k.1) ) @ #vk.9 )
                                      case c_senc
                                      by contradiction /* from formulas */
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                      by contradiction /* from formulas */
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                      solve( ((∃ h1 #t1.
                                                (NewKey( h1, k2 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.4)) ∧
                                              (∃ hp #t0.
                                                (WrapKey( hp, k2 ) @ #t0)
                                               ∧
                                                (¬(last(#t0))) ∧
                                                (((#t0 = #t2.4) ∨ (#t0 < #t2.4))) ∧
                                                (∀ hpp #t1.
                                                  (Unwrapped( hpp, k2 ) @ #t1)
                                                 ⇒
                                                  ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                             (∃ h k2 #t1 #t0.
                                               (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                              ∧
                                               (¬(last(#t0))) ∧
                                               (¬(last(#t1))) ∧
                                               (#t1 < #t2.4) ∧
                                               (#t0 < #t2.4))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧
                                               (¬(last(#t0))) ∧
                                               (#t0 < #t2.4) ∧
                                               (#t1 < #t2.4))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧
                                               (¬(last(#t0))) ∧
                                               (#t0 < #t2.4) ∧
                                               (#t1 < #t2.4)) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      next
                                        case case_3
                                        by contradiction /* from formulas */
                                      next
                                        case case_4
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                      by contradiction /* from formulas */
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                      by contradiction /* from formulas */
                                    next
                                      case eventEncUsingkeyvm_0_11121111
                                      by contradiction /* from formulas */
                                    next
                                      case eventWrapkeyvkeyv_0_112111111_case_1
                                      solve( !KU( ~n.5 ) @ #vk.3 )
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                        solve( ((∃ h1 #t1.
                                                  (NewKey( h1, k2 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.4)) ∧
                                                (∃ hp #t0.
                                                  (WrapKey( hp, k2 ) @ #t0)
                                                 ∧
                                                  (¬(last(#t0))) ∧
                                                  (((#t0 = #t2.4) ∨ (#t0 < #t2.4))) ∧
                                                  (∀ hpp #t1.
                                                    (Unwrapped( hpp, k2 ) @ #t1)
                                                   ⇒
                                                    ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                               (∃ h k2 #t1 #t0.
                                                 (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                ∧
                                                 (¬(last(#t0))) ∧
                                                 (¬(last(#t1))) ∧
                                                 (#t1 < #t2.4) ∧
                                                 (#t0 < #t2.4))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.4) ∧
                                                 (#t1 < #t2.4))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.4) ∧
                                                 (#t1 < #t2.4)) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        next
                                          case case_3
                                          by contradiction /* from formulas */
                                        next
                                          case case_4
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                        by contradiction /* from formulas */
                                      next
                                        case eventWrapkeyvkeyv_0_112111111
                                        solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.4 )
                                          case insertLhkeyvwrap_0_111111211111
                                          solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.4 )
                                            case eventWrapKeyLhkeyv_0_11111121111
                                            solve( ((#vr.17 < #vr.58) ∧
                                                    (∃ #t2.
                                                      (Unlock_6( '6', ~n.8, L_h ) @ #t2)
                                                     ∧
                                                      (#vr.17 < #t2) ∧
                                                      (#t2 < #vr.58) ∧
                                                      (∀ #t0 pp.
                                                        (Unlock( pp, ~n.8, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                      (∀ pp lpp #t0.
                                                        (Lock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.17) ∨ (#t0 = #vr.17) ∨ (#t2 < #t0))) ∧
                                                      (∀ pp lpp #t0.
                                                        (Unlock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.17) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                   (#vr.58 < #vr.17) )
                                              case case_1
                                              solve( State_12111111111( L_h2.3, k.3, m, v, L_h, ~n.8
                                                     ) ▶₀ #t2.5 )
                                                case insertLhmwrap_0_121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case case_2
                                              solve( State_11111121111111( ~n.12, v, L_h ) ▶₀ #t2.5 )
                                                case eventWrapHandleLh_0_1111112111111
                                                solve( (#t2.14 < #t2.15)  ∥ (#t2.14 = #t2.15) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.3
                                                             ) ▶₀ #t2.7 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <k, 'init'> ) @ #t2.8 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, k
                                                                 ) ▶₀ #t2.8 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case insertLhmwrap_0_121111111
                                          solve( State_121111111( L_h, k.3, k.1, v, L_h.2, lock ) ▶₀ #t2.4 )
                                            case eventUnwrappedLhm_0_12111111
                                            solve( ((∃ h1 #t1.
                                                      (NewKey( h1, k.1 ) @ #t1)
                                                     ∧
                                                      (¬(last(#t1))) ∧ (#t1 < #vr.55)) ∧
                                                    (∃ hp #t0.
                                                      (WrapKey( hp, k.1 ) @ #t0)
                                                     ∧
                                                      (¬(last(#t0))) ∧
                                                      (((#t0 = #vr.55) ∨ (#t0 < #vr.55))) ∧
                                                      (∀ hpp #t1.
                                                        (Unwrapped( hpp, k.1 ) @ #t1)
                                                       ⇒
                                                        ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                   (∃ h k2 #t1 #t0.
                                                     (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                    ∧
                                                     (¬(last(#t0))) ∧
                                                     (¬(last(#t1))) ∧
                                                     (#t1 < #vr.55) ∧
                                                     (#t0 < #vr.55))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.55) ∧
                                                     (#t1 < #vr.55))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.55) ∧
                                                     (#t1 < #vr.55)) )
                                              case case_1
                                              solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                case increate_0_1111111
                                                solve( State_11111121111( lock, <~n.10, x>, hp.2 ) ▶₀ #t0.2 )
                                                  case ifattCvinit_0_1111112111
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.5 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.5 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.3
                                                             ) ▶₀ #t2.6 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <k, 'init'> ) @ #t2.7 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, k
                                                                 ) ▶₀ #t2.7 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              by contradiction /* from formulas */
                                            next
                                              case case_3
                                              by contradiction /* from formulas */
                                            next
                                              case case_4
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      next
                                        case insertLhmwrap_0_121111111
                                        solve( (#t2.4 < #t2.11)  ∥ (#t2.4 = #t2.11) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.4 )
                                            case insertLhkeyvwrap_0_111111211111
                                            solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.4 )
                                              case eventWrapKeyLhkeyv_0_11111121111
                                              solve( ((#vr.17 < #vr.50) ∧
                                                      (∃ #t2.
                                                        (Unlock_6( '6', ~n.8, L_h ) @ #t2)
                                                       ∧
                                                        (#vr.17 < #t2) ∧
                                                        (#t2 < #vr.50) ∧
                                                        (∀ #t0 pp.
                                                          (Unlock( pp, ~n.8, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                        (∀ pp lpp #t0.
                                                          (Lock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.17) ∨ (#t0 = #vr.17) ∨ (#t2 < #t0))) ∧
                                                        (∀ pp lpp #t0.
                                                          (Unlock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.17) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                     (#vr.50 < #vr.17) )
                                                case case_1
                                                solve( State_12111111111( L_h2.2, k.3, m, v, L_h, ~n.8
                                                       ) ▶₀ #t2.5 )
                                                  case insertLhmwrap_0_121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case case_2
                                                solve( State_11111121111111( ~n.12, v, L_h ) ▶₀ #t2.5 )
                                                  case eventWrapHandleLh_0_1111112111111
                                                  solve( (#t2.12 < #t2.13)  ∥ (#t2.12 = #t2.13) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.3
                                                               ) ▶₀ #t2.7 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <k, 'init'> ) @ #t2.8 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, k
                                                                   ) ▶₀ #t2.8 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case insertLhmwrap_0_121111111
                                            solve( State_121111111( L_h, k.3, k.1, v, L_h.2, lock ) ▶₀ #t2.4 )
                                              case eventUnwrappedLhm_0_12111111
                                              solve( ((∃ h1 #t1.
                                                        (NewKey( h1, k.1 ) @ #t1)
                                                       ∧
                                                        (¬(last(#t1))) ∧ (#t1 < #vr.47)) ∧
                                                      (∃ hp #t0.
                                                        (WrapKey( hp, k.1 ) @ #t0)
                                                       ∧
                                                        (¬(last(#t0))) ∧
                                                        (((#t0 = #vr.47) ∨ (#t0 < #vr.47))) ∧
                                                        (∀ hpp #t1.
                                                          (Unwrapped( hpp, k.1 ) @ #t1)
                                                         ⇒
                                                          ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #vr.47) ∧
                                                       (#t0 < #vr.47))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.47) ∧
                                                       (#t1 < #vr.47))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.47) ∧
                                                       (#t1 < #vr.47)) )
                                                case case_1
                                                solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                  case increate_0_1111111
                                                  solve( State_11111121111( lock, <~n.10, x>, hp.2
                                                         ) ▶₀ #t0.2 )
                                                    case ifattCvinit_0_1111112111
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.5 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.5 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.3
                                                               ) ▶₀ #t2.6 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <k, 'init'> ) @ #t2.7 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, k
                                                                   ) ▶₀ #t2.7 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              next
                                                case case_4
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case eventWrapkeyvkeyv_0_112111111_case_2
                                      solve( !KU( ~n.5 ) @ #vk.3 )
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                        solve( ((∃ h1 #t1.
                                                  (NewKey( h1, k2 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.4)) ∧
                                                (∃ hp #t0.
                                                  (WrapKey( hp, k2 ) @ #t0)
                                                 ∧
                                                  (¬(last(#t0))) ∧
                                                  (((#t0 = #t2.4) ∨ (#t0 < #t2.4))) ∧
                                                  (∀ hpp #t1.
                                                    (Unwrapped( hpp, k2 ) @ #t1)
                                                   ⇒
                                                    ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                               (∃ h k2 #t1 #t0.
                                                 (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                ∧
                                                 (¬(last(#t0))) ∧
                                                 (¬(last(#t1))) ∧
                                                 (#t1 < #t2.4) ∧
                                                 (#t0 < #t2.4))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.4) ∧
                                                 (#t1 < #t2.4))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.4) ∧
                                                 (#t1 < #t2.4)) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        next
                                          case case_3
                                          by contradiction /* from formulas */
                                        next
                                          case case_4
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                        by contradiction /* from formulas */
                                      next
                                        case eventWrapkeyvkeyv_0_112111111
                                        solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.4 )
                                          case insertLhkeyvwrap_0_111111211111
                                          solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.4 )
                                            case eventWrapKeyLhkeyv_0_11111121111
                                            solve( ((#vr.17 < #vr.59) ∧
                                                    (∃ #t2.
                                                      (Unlock_6( '6', ~n.8, L_h ) @ #t2)
                                                     ∧
                                                      (#vr.17 < #t2) ∧
                                                      (#t2 < #vr.59) ∧
                                                      (∀ #t0 pp.
                                                        (Unlock( pp, ~n.8, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                      (∀ pp lpp #t0.
                                                        (Lock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.17) ∨ (#t0 = #vr.17) ∨ (#t2 < #t0))) ∧
                                                      (∀ pp lpp #t0.
                                                        (Unlock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.17) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                   (#vr.59 < #vr.17) )
                                              case case_1
                                              solve( State_12111111111( L_h2.3, k.3, m, v, L_h, ~n.8
                                                     ) ▶₀ #t2.5 )
                                                case insertLhmwrap_0_121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case case_2
                                              solve( State_11111121111111( ~n.12, v, L_h ) ▶₀ #t2.5 )
                                                case eventWrapHandleLh_0_1111112111111
                                                solve( (#t2.14 < #t2.15)  ∥ (#t2.14 = #t2.15) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.3
                                                             ) ▶₀ #t2.7 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <k, 'init'> ) @ #t2.8 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, k
                                                                 ) ▶₀ #t2.8 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case insertLhmwrap_0_121111111
                                          solve( State_121111111( L_h, k.3, k.1, v, L_h.2, lock ) ▶₀ #t2.4 )
                                            case eventUnwrappedLhm_0_12111111
                                            solve( ((∃ h1 #t1.
                                                      (NewKey( h1, k.1 ) @ #t1)
                                                     ∧
                                                      (¬(last(#t1))) ∧ (#t1 < #vr.56)) ∧
                                                    (∃ hp #t0.
                                                      (WrapKey( hp, k.1 ) @ #t0)
                                                     ∧
                                                      (¬(last(#t0))) ∧
                                                      (((#t0 = #vr.56) ∨ (#t0 < #vr.56))) ∧
                                                      (∀ hpp #t1.
                                                        (Unwrapped( hpp, k.1 ) @ #t1)
                                                       ⇒
                                                        ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                   (∃ h k2 #t1 #t0.
                                                     (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                    ∧
                                                     (¬(last(#t0))) ∧
                                                     (¬(last(#t1))) ∧
                                                     (#t1 < #vr.56) ∧
                                                     (#t0 < #vr.56))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.56) ∧
                                                     (#t1 < #vr.56))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.56) ∧
                                                     (#t1 < #vr.56)) )
                                              case case_1
                                              solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                case increate_0_1111111
                                                solve( State_11111121111( lock, <~n.10, x>, hp.2 ) ▶₀ #t0.2 )
                                                  case ifattCvinit_0_1111112111
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.5 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.5 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.3
                                                             ) ▶₀ #t2.6 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <k, 'init'> ) @ #t2.7 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, k
                                                                 ) ▶₀ #t2.7 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              by contradiction /* from formulas */
                                            next
                                              case case_3
                                              by contradiction /* from formulas */
                                            next
                                              case case_4
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      next
                                        case insertLhmwrap_0_121111111
                                        solve( (#t2.4 < #t2.11)  ∥ (#t2.4 = #t2.11) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.4 )
                                            case insertLhkeyvwrap_0_111111211111
                                            solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.4 )
                                              case eventWrapKeyLhkeyv_0_11111121111
                                              solve( ((#vr.17 < #vr.51) ∧
                                                      (∃ #t2.
                                                        (Unlock_6( '6', ~n.8, L_h ) @ #t2)
                                                       ∧
                                                        (#vr.17 < #t2) ∧
                                                        (#t2 < #vr.51) ∧
                                                        (∀ #t0 pp.
                                                          (Unlock( pp, ~n.8, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                        (∀ pp lpp #t0.
                                                          (Lock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.17) ∨ (#t0 = #vr.17) ∨ (#t2 < #t0))) ∧
                                                        (∀ pp lpp #t0.
                                                          (Unlock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.17) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                     (#vr.51 < #vr.17) )
                                                case case_1
                                                solve( State_12111111111( L_h2.2, k.3, m, v, L_h, ~n.8
                                                       ) ▶₀ #t2.5 )
                                                  case insertLhmwrap_0_121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case case_2
                                                solve( State_11111121111111( ~n.12, v, L_h ) ▶₀ #t2.5 )
                                                  case eventWrapHandleLh_0_1111112111111
                                                  solve( (#t2.12 < #t2.13)  ∥ (#t2.12 = #t2.13) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.3
                                                               ) ▶₀ #t2.7 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <k, 'init'> ) @ #t2.8 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, k
                                                                   ) ▶₀ #t2.8 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case insertLhmwrap_0_121111111
                                            solve( State_121111111( L_h, k.3, k.1, v, L_h.2, lock ) ▶₀ #t2.4 )
                                              case eventUnwrappedLhm_0_12111111
                                              solve( ((∃ h1 #t1.
                                                        (NewKey( h1, k.1 ) @ #t1)
                                                       ∧
                                                        (¬(last(#t1))) ∧ (#t1 < #vr.48)) ∧
                                                      (∃ hp #t0.
                                                        (WrapKey( hp, k.1 ) @ #t0)
                                                       ∧
                                                        (¬(last(#t0))) ∧
                                                        (((#t0 = #vr.48) ∨ (#t0 < #vr.48))) ∧
                                                        (∀ hpp #t1.
                                                          (Unwrapped( hpp, k.1 ) @ #t1)
                                                         ⇒
                                                          ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #vr.48) ∧
                                                       (#t0 < #vr.48))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.48) ∧
                                                       (#t1 < #vr.48))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.48) ∧
                                                       (#t1 < #vr.48)) )
                                                case case_1
                                                solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                  case increate_0_1111111
                                                  solve( State_11111121111( lock, <~n.10, x>, hp.2
                                                         ) ▶₀ #t0.2 )
                                                    case ifattCvinit_0_1111112111
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.5 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.5 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.3
                                                               ) ▶₀ #t2.6 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <k, 'init'> ) @ #t2.7 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, k
                                                                   ) ▶₀ #t2.7 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              next
                                                case case_4
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              next
                                case case_4
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      next
                        case insertLhmwrap_0_121111111
                        solve( State_121111111( L_h2, k.2, k, v, L_h.1, lock ) ▶₀ #t2.2 )
                          case eventUnwrappedLhm_0_12111111
                          solve( ((∃ h1 #t1.
                                    (NewKey( h1, k ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.25)) ∧
                                  (∃ hp #t0.
                                    (WrapKey( hp, k ) @ #t0)
                                   ∧
                                    (¬(last(#t0))) ∧
                                    (((#t0 = #vr.25) ∨ (#t0 < #vr.25))) ∧
                                    (∀ hpp #t1.
                                      (Unwrapped( hpp, k ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                 (∃ h k2 #t1 #t0.
                                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.25) ∧ (#t0 < #vr.25))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.25) ∧ (#t1 < #vr.25))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.25) ∧ (#t1 < #vr.25)) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          next
                            case case_4
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                next
                  case case_4
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case eventWrapkeyvkeyv_0_112111111_case_2
            solve( Insert( L_h, <k, 'wrap'> ) @ #t2.1 )
              case insertLhkeyvwrap_0_111111211111
              solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.1 )
                case eventWrapKeyLhkeyv_0_11111121111
                solve( ((#vr.3 < #vr.17) ∧
                        (∃ #t2.
                          (Unlock_6( '6', ~n.1, L_h ) @ #t2)
                         ∧
                          (#vr.3 < #t2) ∧
                          (#t2 < #vr.17) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.1, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t0 = #vr.3) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.17 < #vr.3) )
                  case case_1
                  solve( State_12111111111( L_h2.1, k.2, m, v, L_h, ~n.1 ) ▶₀ #t2.2 )
                    case insertLhmwrap_0_121111111
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( State_11111121111111( ~n.2, v, L_h ) ▶₀ #t2.2 )
                    case eventWrapHandleLh_0_1111112111111
                    solve( (#t2.5 < #t2.6)  ∥ (#t2.5 = #t2.6) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( Insert( L_h2, <z, 'wrap'> ) @ #t2.3 )
                        case insertLhkeyvwrap_0_111111211111
                        solve( State_111111211111( lock, v, L_h2 ) ▶₀ #t2.3 )
                          case eventWrapKeyLhkeyv_0_11111121111
                          solve( Insert( L_h1, <z.1, 'wrap'> ) @ #t2.4 )
                            case insertLhkeyvwrap_0_111111211111
                            solve( State_111111211111( lock, v, L_h1 ) ▶₀ #t2.4 )
                              case eventWrapKeyLhkeyv_0_11111121111
                              solve( ((#vr.12 < #vr.28) ∧
                                      (∃ #t2.
                                        (Unlock_5( '5', ~n.5, L_h1 ) @ #t2)
                                       ∧
                                        (#vr.12 < #t2) ∧
                                        (#t2 < #vr.28) ∧
                                        (∀ #t0 pp. (Unlock( pp, ~n.5, L_h1 ) @ #t0) ⇒ #t0 = #t2) ∧
                                        (∀ pp lpp #t0.
                                          (Lock( pp, lpp, L_h1 ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.12) ∨ (#t0 = #vr.12) ∨ (#t2 < #t0))) ∧
                                        (∀ pp lpp #t0.
                                          (Unlock( pp, lpp, L_h1 ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.12) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                     (#vr.28 < #vr.12) )
                                case case_1
                                solve( State_11211111111( L_h1, L_h2.1, v1, v2, ~n.5 ) ▶₀ #t2.5 )
                                  case eventWrapkeyvkeyv_0_112111111
                                  by contradiction /* cyclic */
                                qed
                              next
                                case case_2
                                solve( State_11111121111111( ~n.4, v, L_h1 ) ▶₀ #t2.5 )
                                  case eventWrapHandleLh_0_1111112111111
                                  solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( Insert( L_h, <k, 'init'> ) @ #t2.6 )
                                      case insertLhkinit_0_111111111111
                                      solve( State_111111111111( lock, L_h, k ) ▶₀ #t2.6 )
                                        case eventNewKeyLhk_0_11111111111
                                        solve( State_11111111111111( ~n.8, ~n.2, k.1 ) ▶₀ #t2.7 )
                                          case insertLhkinit_0_111111111111
                                          solve( Insert( L_h2, <z, 'init'> ) @ #t2.8 )
                                            case insertLhkinit_0_111111111111
                                            solve( State_111111111111( lock, L_h2, z ) ▶₀ #t2.8 )
                                              case eventNewKeyLhk_0_11111111111
                                              by contradiction /* impossible chain */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case insertLhmwrap_0_121111111
                            solve( State_121111111( L_h1, k.2, z.1, v, L_h.1, lock ) ▶₀ #t2.4 )
                              case eventUnwrappedLhm_0_12111111
                              solve( ((∃ h1 #t1.
                                        (NewKey( h1, z.1 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.25)) ∧
                                      (∃ hp #t0.
                                        (WrapKey( hp, z.1 ) @ #t0)
                                       ∧
                                        (¬(last(#t0))) ∧
                                        (((#t0 = #vr.25) ∨ (#t0 < #vr.25))) ∧
                                        (∀ hpp #t1.
                                          (Unwrapped( hpp, z.1 ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                     (∃ h k2 #t1 #t0.
                                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                      ∧
                                       (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.25) ∧ (#t0 < #vr.25))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.25) ∧ (#t1 < #vr.25))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.25) ∧ (#t1 < #vr.25)) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              next
                                case case_4
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      next
                        case insertLhmwrap_0_121111111
                        solve( State_121111111( L_h2, k.2, z, v, L_h.1, lock ) ▶₀ #t2.3 )
                          case eventUnwrappedLhm_0_12111111
                          solve( ((∃ h1 #t1.
                                    (NewKey( h1, z ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.20)) ∧
                                  (∃ hp #t0.
                                    (WrapKey( hp, z ) @ #t0)
                                   ∧
                                    (¬(last(#t0))) ∧
                                    (((#t0 = #vr.20) ∨ (#t0 < #vr.20))) ∧
                                    (∀ hpp #t1.
                                      (Unwrapped( hpp, z ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                 (∃ h k2 #t1 #t0.
                                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.20) ∧ (#t0 < #vr.20))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.20) ∧ (#t1 < #vr.20))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.20) ∧ (#t1 < #vr.20)) )
                            case case_1
                            solve( State_11111111111( lock, h1, z ) ▶₀ #t1 )
                              case increate_0_1111111
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          next
                            case case_4
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case insertLhmwrap_0_121111111
              solve( State_121111111( L_h, k.2, k, v, L_h.1, lock ) ▶₀ #t2.1 )
                case eventUnwrappedLhm_0_12111111
                solve( ((∃ h1 #t1.
                          (NewKey( h1, k ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.14)) ∧
                        (∃ hp #t0.
                          (WrapKey( hp, k ) @ #t0)
                         ∧
                          (¬(last(#t0))) ∧
                          (((#t0 = #vr.14) ∨ (#t0 < #vr.14))) ∧
                          (∀ hpp #t1.
                            (Unwrapped( hpp, k ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                       (∃ h k2 #t1 #t0.
                         (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                        ∧
                         (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.14) ∧ (#t0 < #vr.14))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.14) ∧ (#t1 < #vr.14))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.14) ∧ (#t1 < #vr.14)) )
                  case case_1
                  solve( State_11111111111( lock, h1, k ) ▶₀ #t1 )
                    case increate_0_1111111
                    solve( State_11111121111( lock, <~n, x>, hp ) ▶₀ #t0 )
                      case ifattCvinit_0_1111112111
                      solve( Insert( L_h2, <z, 'wrap'> ) @ #t2.2 )
                        case insertLhkeyvwrap_0_111111211111
                        solve( State_111111211111( lock, v, L_h2 ) ▶₀ #t2.2 )
                          case eventWrapKeyLhkeyv_0_11111121111
                          solve( Insert( L_h1, <z.1, 'wrap'> ) @ #t2.3 )
                            case insertLhkeyvwrap_0_111111211111
                            solve( State_111111211111( lock, v, L_h1 ) ▶₀ #t2.3 )
                              case eventWrapKeyLhkeyv_0_11111121111
                              solve( ((#vr.12 < #vr.34) ∧
                                      (∃ #t2.
                                        (Unlock_5( '5', ~n.10, L_h1 ) @ #t2)
                                       ∧
                                        (#vr.12 < #t2) ∧
                                        (#t2 < #vr.34) ∧
                                        (∀ #t0 pp. (Unlock( pp, ~n.10, L_h1 ) @ #t0) ⇒ #t0 = #t2) ∧
                                        (∀ pp lpp #t0.
                                          (Lock( pp, lpp, L_h1 ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.12) ∨ (#t0 = #vr.12) ∨ (#t2 < #t0))) ∧
                                        (∀ pp lpp #t0.
                                          (Unlock( pp, lpp, L_h1 ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.12) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                     (#vr.34 < #vr.12) )
                                case case_1
                                solve( State_11211111111( L_h1, L_h2.1, v1, v2, ~n.10 ) ▶₀ #t2.4 )
                                  case eventWrapkeyvkeyv_0_112111111
                                  by contradiction /* cyclic */
                                qed
                              next
                                case case_2
                                solve( State_11111121111111( ~n.9, v, L_h1 ) ▶₀ #t2.4 )
                                  case eventWrapHandleLh_0_1111112111111
                                  solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( !KU( senc(~n.1, k.1) ) @ #vk.11 )
                                      case c_senc
                                      by contradiction /* from formulas */
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                      by contradiction /* from formulas */
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                      solve( ((∃ h1 #t1.
                                                (NewKey( h1, k2 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.5)) ∧
                                              (∃ hp #t0.
                                                (WrapKey( hp, k2 ) @ #t0)
                                               ∧
                                                (¬(last(#t0))) ∧
                                                (((#t0 = #t2.5) ∨ (#t0 < #t2.5))) ∧
                                                (∀ hpp #t1.
                                                  (Unwrapped( hpp, k2 ) @ #t1)
                                                 ⇒
                                                  ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                             (∃ h k2 #t1 #t0.
                                               (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                              ∧
                                               (¬(last(#t0))) ∧
                                               (¬(last(#t1))) ∧
                                               (#t1 < #t2.5) ∧
                                               (#t0 < #t2.5))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧
                                               (¬(last(#t0))) ∧
                                               (#t0 < #t2.5) ∧
                                               (#t1 < #t2.5))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧
                                               (¬(last(#t0))) ∧
                                               (#t0 < #t2.5) ∧
                                               (#t1 < #t2.5)) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      next
                                        case case_3
                                        by contradiction /* from formulas */
                                      next
                                        case case_4
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                      by contradiction /* from formulas */
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                      by contradiction /* from formulas */
                                    next
                                      case eventEncUsingkeyvm_0_11121111
                                      by contradiction /* from formulas */
                                    next
                                      case eventWrapkeyvkeyv_0_112111111_case_1
                                      solve( !KU( ~n.5 ) @ #vk.3 )
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                        solve( ((∃ h1 #t1.
                                                  (NewKey( h1, k2 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.5)) ∧
                                                (∃ hp #t0.
                                                  (WrapKey( hp, k2 ) @ #t0)
                                                 ∧
                                                  (¬(last(#t0))) ∧
                                                  (((#t0 = #t2.5) ∨ (#t0 < #t2.5))) ∧
                                                  (∀ hpp #t1.
                                                    (Unwrapped( hpp, k2 ) @ #t1)
                                                   ⇒
                                                    ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                               (∃ h k2 #t1 #t0.
                                                 (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                ∧
                                                 (¬(last(#t0))) ∧
                                                 (¬(last(#t1))) ∧
                                                 (#t1 < #t2.5) ∧
                                                 (#t0 < #t2.5))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.5) ∧
                                                 (#t1 < #t2.5))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.5) ∧
                                                 (#t1 < #t2.5)) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        next
                                          case case_3
                                          by contradiction /* from formulas */
                                        next
                                          case case_4
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                        by contradiction /* from formulas */
                                      next
                                        case eventWrapkeyvkeyv_0_112111111
                                        solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.5 )
                                          case insertLhkeyvwrap_0_111111211111
                                          solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.5 )
                                            case eventWrapKeyLhkeyv_0_11111121111
                                            solve( ((#vr.18 < #vr.55) ∧
                                                    (∃ #t2.
                                                      (Unlock_6( '6', ~n.7, L_h ) @ #t2)
                                                     ∧
                                                      (#vr.18 < #t2) ∧
                                                      (#t2 < #vr.55) ∧
                                                      (∀ #t0 pp.
                                                        (Unlock( pp, ~n.7, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                      (∀ pp lpp #t0.
                                                        (Lock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.18) ∨ (#t0 = #vr.18) ∨ (#t2 < #t0))) ∧
                                                      (∀ pp lpp #t0.
                                                        (Unlock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.18) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                   (#vr.55 < #vr.18) )
                                              case case_1
                                              solve( State_12111111111( L_h2.3, k.2, m, v, L_h, ~n.7
                                                     ) ▶₀ #t2.6 )
                                                case insertLhmwrap_0_121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case case_2
                                              solve( State_11111121111111( ~n.11, v, L_h ) ▶₀ #t2.6 )
                                                case eventWrapHandleLh_0_1111112111111
                                                solve( (#t2.14 < #t2.15)  ∥ (#t2.14 = #t2.15) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.7 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.7 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                             ) ▶₀ #t2.8 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <z, 'init'> ) @ #t2.9 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, z
                                                                 ) ▶₀ #t2.9 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* impossible chain */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case insertLhmwrap_0_121111111
                                          solve( State_121111111( L_h, k.2, k.1, v, L_h.1, lock ) ▶₀ #t2.5 )
                                            case eventUnwrappedLhm_0_12111111
                                            solve( ((∃ h1 #t1.
                                                      (NewKey( h1, k.1 ) @ #t1)
                                                     ∧
                                                      (¬(last(#t1))) ∧ (#t1 < #vr.52)) ∧
                                                    (∃ hp #t0.
                                                      (WrapKey( hp, k.1 ) @ #t0)
                                                     ∧
                                                      (¬(last(#t0))) ∧
                                                      (((#t0 = #vr.52) ∨ (#t0 < #vr.52))) ∧
                                                      (∀ hpp #t1.
                                                        (Unwrapped( hpp, k.1 ) @ #t1)
                                                       ⇒
                                                        ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                   (∃ h k2 #t1 #t0.
                                                     (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                    ∧
                                                     (¬(last(#t0))) ∧
                                                     (¬(last(#t1))) ∧
                                                     (#t1 < #vr.52) ∧
                                                     (#t0 < #vr.52))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.52) ∧
                                                     (#t1 < #vr.52))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.52) ∧
                                                     (#t1 < #vr.52)) )
                                              case case_1
                                              solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                case increate_0_1111111
                                                solve( State_11111121111( lock, <~n.7, x>, hp.1 ) ▶₀ #t0.1 )
                                                  case ifattCvinit_0_1111112111
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                             ) ▶₀ #t2.7 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <z, 'init'> ) @ #t2.8 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, z
                                                                 ) ▶₀ #t2.8 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* impossible chain */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              by contradiction /* from formulas */
                                            next
                                              case case_3
                                              by contradiction /* from formulas */
                                            next
                                              case case_4
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      next
                                        case insertLhmwrap_0_121111111
                                        solve( (#t2.5 < #t2.11)  ∥ (#t2.5 = #t2.11) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.5 )
                                            case insertLhkeyvwrap_0_111111211111
                                            solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.5 )
                                              case eventWrapKeyLhkeyv_0_11111121111
                                              solve( ((#vr.18 < #vr.47) ∧
                                                      (∃ #t2.
                                                        (Unlock_6( '6', ~n.7, L_h ) @ #t2)
                                                       ∧
                                                        (#vr.18 < #t2) ∧
                                                        (#t2 < #vr.47) ∧
                                                        (∀ #t0 pp.
                                                          (Unlock( pp, ~n.7, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                        (∀ pp lpp #t0.
                                                          (Lock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.18) ∨ (#t0 = #vr.18) ∨ (#t2 < #t0))) ∧
                                                        (∀ pp lpp #t0.
                                                          (Unlock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.18) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                     (#vr.47 < #vr.18) )
                                                case case_1
                                                solve( State_12111111111( L_h2.2, k.2, m, v, L_h, ~n.7
                                                       ) ▶₀ #t2.6 )
                                                  case insertLhmwrap_0_121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case case_2
                                                solve( State_11111121111111( ~n.11, v, L_h ) ▶₀ #t2.6 )
                                                  case eventWrapHandleLh_0_1111112111111
                                                  solve( (#t2.12 < #t2.13)  ∥ (#t2.12 = #t2.13) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.7 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.7 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                               ) ▶₀ #t2.8 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <z, 'init'> ) @ #t2.9 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, z
                                                                   ) ▶₀ #t2.9 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* impossible chain */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case insertLhmwrap_0_121111111
                                            solve( State_121111111( L_h, k.2, k.1, v, L_h.1, lock ) ▶₀ #t2.5 )
                                              case eventUnwrappedLhm_0_12111111
                                              solve( ((∃ h1 #t1.
                                                        (NewKey( h1, k.1 ) @ #t1)
                                                       ∧
                                                        (¬(last(#t1))) ∧ (#t1 < #vr.44)) ∧
                                                      (∃ hp #t0.
                                                        (WrapKey( hp, k.1 ) @ #t0)
                                                       ∧
                                                        (¬(last(#t0))) ∧
                                                        (((#t0 = #vr.44) ∨ (#t0 < #vr.44))) ∧
                                                        (∀ hpp #t1.
                                                          (Unwrapped( hpp, k.1 ) @ #t1)
                                                         ⇒
                                                          ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #vr.44) ∧
                                                       (#t0 < #vr.44))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.44) ∧
                                                       (#t1 < #vr.44))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.44) ∧
                                                       (#t1 < #vr.44)) )
                                                case case_1
                                                solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                  case increate_0_1111111
                                                  solve( State_11111121111( lock, <~n.7, x>, hp.1 ) ▶₀ #t0.1 )
                                                    case ifattCvinit_0_1111112111
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                               ) ▶₀ #t2.7 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <z, 'init'> ) @ #t2.8 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, z
                                                                   ) ▶₀ #t2.8 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* impossible chain */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              next
                                                case case_4
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case eventWrapkeyvkeyv_0_112111111_case_2
                                      solve( !KU( ~n.5 ) @ #vk.3 )
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                        solve( ((∃ h1 #t1.
                                                  (NewKey( h1, k2 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.5)) ∧
                                                (∃ hp #t0.
                                                  (WrapKey( hp, k2 ) @ #t0)
                                                 ∧
                                                  (¬(last(#t0))) ∧
                                                  (((#t0 = #t2.5) ∨ (#t0 < #t2.5))) ∧
                                                  (∀ hpp #t1.
                                                    (Unwrapped( hpp, k2 ) @ #t1)
                                                   ⇒
                                                    ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                               (∃ h k2 #t1 #t0.
                                                 (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                ∧
                                                 (¬(last(#t0))) ∧
                                                 (¬(last(#t1))) ∧
                                                 (#t1 < #t2.5) ∧
                                                 (#t0 < #t2.5))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.5) ∧
                                                 (#t1 < #t2.5))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.5) ∧
                                                 (#t1 < #t2.5)) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        next
                                          case case_3
                                          by contradiction /* from formulas */
                                        next
                                          case case_4
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                        by contradiction /* from formulas */
                                      next
                                        case eventWrapkeyvkeyv_0_112111111
                                        solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.5 )
                                          case insertLhkeyvwrap_0_111111211111
                                          solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.5 )
                                            case eventWrapKeyLhkeyv_0_11111121111
                                            solve( ((#vr.18 < #vr.56) ∧
                                                    (∃ #t2.
                                                      (Unlock_6( '6', ~n.7, L_h ) @ #t2)
                                                     ∧
                                                      (#vr.18 < #t2) ∧
                                                      (#t2 < #vr.56) ∧
                                                      (∀ #t0 pp.
                                                        (Unlock( pp, ~n.7, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                      (∀ pp lpp #t0.
                                                        (Lock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.18) ∨ (#t0 = #vr.18) ∨ (#t2 < #t0))) ∧
                                                      (∀ pp lpp #t0.
                                                        (Unlock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.18) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                   (#vr.56 < #vr.18) )
                                              case case_1
                                              solve( State_12111111111( L_h2.3, k.2, m, v, L_h, ~n.7
                                                     ) ▶₀ #t2.6 )
                                                case insertLhmwrap_0_121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case case_2
                                              solve( State_11111121111111( ~n.11, v, L_h ) ▶₀ #t2.6 )
                                                case eventWrapHandleLh_0_1111112111111
                                                solve( (#t2.14 < #t2.15)  ∥ (#t2.14 = #t2.15) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.7 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.7 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                             ) ▶₀ #t2.8 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <z, 'init'> ) @ #t2.9 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, z
                                                                 ) ▶₀ #t2.9 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* impossible chain */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case insertLhmwrap_0_121111111
                                          solve( State_121111111( L_h, k.2, k.1, v, L_h.1, lock ) ▶₀ #t2.5 )
                                            case eventUnwrappedLhm_0_12111111
                                            solve( ((∃ h1 #t1.
                                                      (NewKey( h1, k.1 ) @ #t1)
                                                     ∧
                                                      (¬(last(#t1))) ∧ (#t1 < #vr.53)) ∧
                                                    (∃ hp #t0.
                                                      (WrapKey( hp, k.1 ) @ #t0)
                                                     ∧
                                                      (¬(last(#t0))) ∧
                                                      (((#t0 = #vr.53) ∨ (#t0 < #vr.53))) ∧
                                                      (∀ hpp #t1.
                                                        (Unwrapped( hpp, k.1 ) @ #t1)
                                                       ⇒
                                                        ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                   (∃ h k2 #t1 #t0.
                                                     (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                    ∧
                                                     (¬(last(#t0))) ∧
                                                     (¬(last(#t1))) ∧
                                                     (#t1 < #vr.53) ∧
                                                     (#t0 < #vr.53))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.53) ∧
                                                     (#t1 < #vr.53))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.53) ∧
                                                     (#t1 < #vr.53)) )
                                              case case_1
                                              solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                case increate_0_1111111
                                                solve( State_11111121111( lock, <~n.7, x>, hp.1 ) ▶₀ #t0.1 )
                                                  case ifattCvinit_0_1111112111
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                             ) ▶₀ #t2.7 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <z, 'init'> ) @ #t2.8 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, z
                                                                 ) ▶₀ #t2.8 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* impossible chain */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              by contradiction /* from formulas */
                                            next
                                              case case_3
                                              by contradiction /* from formulas */
                                            next
                                              case case_4
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      next
                                        case insertLhmwrap_0_121111111
                                        solve( (#t2.5 < #t2.11)  ∥ (#t2.5 = #t2.11) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.5 )
                                            case insertLhkeyvwrap_0_111111211111
                                            solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.5 )
                                              case eventWrapKeyLhkeyv_0_11111121111
                                              solve( ((#vr.18 < #vr.48) ∧
                                                      (∃ #t2.
                                                        (Unlock_6( '6', ~n.7, L_h ) @ #t2)
                                                       ∧
                                                        (#vr.18 < #t2) ∧
                                                        (#t2 < #vr.48) ∧
                                                        (∀ #t0 pp.
                                                          (Unlock( pp, ~n.7, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                        (∀ pp lpp #t0.
                                                          (Lock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.18) ∨ (#t0 = #vr.18) ∨ (#t2 < #t0))) ∧
                                                        (∀ pp lpp #t0.
                                                          (Unlock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.18) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                     (#vr.48 < #vr.18) )
                                                case case_1
                                                solve( State_12111111111( L_h2.2, k.2, m, v, L_h, ~n.7
                                                       ) ▶₀ #t2.6 )
                                                  case insertLhmwrap_0_121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case case_2
                                                solve( State_11111121111111( ~n.11, v, L_h ) ▶₀ #t2.6 )
                                                  case eventWrapHandleLh_0_1111112111111
                                                  solve( (#t2.12 < #t2.13)  ∥ (#t2.12 = #t2.13) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.7 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.7 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                               ) ▶₀ #t2.8 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <z, 'init'> ) @ #t2.9 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, z
                                                                   ) ▶₀ #t2.9 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* impossible chain */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case insertLhmwrap_0_121111111
                                            solve( State_121111111( L_h, k.2, k.1, v, L_h.1, lock ) ▶₀ #t2.5 )
                                              case eventUnwrappedLhm_0_12111111
                                              solve( ((∃ h1 #t1.
                                                        (NewKey( h1, k.1 ) @ #t1)
                                                       ∧
                                                        (¬(last(#t1))) ∧ (#t1 < #vr.45)) ∧
                                                      (∃ hp #t0.
                                                        (WrapKey( hp, k.1 ) @ #t0)
                                                       ∧
                                                        (¬(last(#t0))) ∧
                                                        (((#t0 = #vr.45) ∨ (#t0 < #vr.45))) ∧
                                                        (∀ hpp #t1.
                                                          (Unwrapped( hpp, k.1 ) @ #t1)
                                                         ⇒
                                                          ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #vr.45) ∧
                                                       (#t0 < #vr.45))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.45) ∧
                                                       (#t1 < #vr.45))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.45) ∧
                                                       (#t1 < #vr.45)) )
                                                case case_1
                                                solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                  case increate_0_1111111
                                                  solve( State_11111121111( lock, <~n.7, x>, hp.1 ) ▶₀ #t0.1 )
                                                    case ifattCvinit_0_1111112111
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                               ) ▶₀ #t2.7 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <z, 'init'> ) @ #t2.8 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, z
                                                                   ) ▶₀ #t2.8 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* impossible chain */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              next
                                                case case_4
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case insertLhmwrap_0_121111111
                            solve( State_121111111( L_h1, k.2, z.1, v, L_h.1, lock ) ▶₀ #t2.3 )
                              case eventUnwrappedLhm_0_12111111
                              solve( ((∃ h1 #t1.
                                        (NewKey( h1, z.1 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.31)) ∧
                                      (∃ hp #t0.
                                        (WrapKey( hp, z.1 ) @ #t0)
                                       ∧
                                        (¬(last(#t0))) ∧
                                        (((#t0 = #vr.31) ∨ (#t0 < #vr.31))) ∧
                                        (∀ hpp #t1.
                                          (Unwrapped( hpp, z.1 ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                     (∃ h k2 #t1 #t0.
                                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                      ∧
                                       (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.31) ∧ (#t0 < #vr.31))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.31) ∧ (#t1 < #vr.31))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.31) ∧ (#t1 < #vr.31)) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              next
                                case case_4
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      next
                        case insertLhmwrap_0_121111111
                        solve( State_121111111( L_h2, k.2, z, v, L_h.1, lock ) ▶₀ #t2.2 )
                          case eventUnwrappedLhm_0_12111111
                          solve( ((∃ h1 #t1.
                                    (NewKey( h1, z ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.26)) ∧
                                  (∃ hp #t0.
                                    (WrapKey( hp, z ) @ #t0)
                                   ∧
                                    (¬(last(#t0))) ∧
                                    (((#t0 = #vr.26) ∨ (#t0 < #vr.26))) ∧
                                    (∀ hpp #t1.
                                      (Unwrapped( hpp, z ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                 (∃ h k2 #t1 #t0.
                                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.26) ∧ (#t0 < #vr.26))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.26) ∧ (#t1 < #vr.26))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.26) ∧ (#t1 < #vr.26)) )
                            case case_1
                            solve( State_11111111111( lock, h1, z ) ▶₀ #t1.1 )
                              case increate_0_1111111
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          next
                            case case_4
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                next
                  case case_4
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        by contradiction /* from formulas */
      next
        case case_4
        by contradiction /* from formulas */
      next
        case case_5
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (#t1 = #t2.1)  ∥ (#t2.1 < #t1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_3
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_0( '0', ~n.1, ~n ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, ~n ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, ~n ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, ~n ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, ~n ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_1( '1', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_5
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_2( '2', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_6
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_3( '3', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_7
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_4( '4', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_8
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_5( '5', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_9
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_6( '6', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( (∀ h2 k #t2.
             (Unwrapped( h2, k ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2)) ∧
               (∃ hp #t0.
                 (WrapKey( hp, k ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t2) ∨ (#t0 < #t2))) ∧
                 (∀ hpp #t1.
                   (Unwrapped( hpp, k ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1))))) ∨
              (∃ h k2 #t1 #t0.
                (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
               ∧
                (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2) ∧ (#t0 < #t2)) ∨
              (∃ #t0 #t1 h1 h2.1 k.1.
                (WrapKey( h2.1, k.1 ) @ #t0) ∧ (DecKey( h1, k.1 ) @ #t1)
               ∧
                (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2)) ∨
              (∃ #t0 #t1 h1 h2.1 k.1.
                (Unwrapped( h2.1, k.1 ) @ #t0) ∧ (DecKey( h1, k.1 ) @ #t1)
               ∧
                (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2))))  ∥
           (∃ x y #t3.
             (IsIn( x, y ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (∀ #t2.
               (Insert( x, y ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t1 yp.
                  (Insert( x, yp ) @ #t1)
                 ∧
                  (¬(last(#t1))) ∧
                  (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                  (¬(#t1 = #t2)) ∧
                  (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_0( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_1( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_2( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_3( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_4( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_5( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3)))  ∥
           (∃ p pp l x lp #t1 #t3.
             (Lock_6( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock_6( p, l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0 pp.1.
                    (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ pp.1 lpp #t0.
                    (Lock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ pp.1 lpp #t0.
                    (Unlock( pp.1, lpp, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3))) )
      case case_1
      solve( (last(#t2))  ∥
             ((∃ h1 #t1. (NewKey( h1, k.1 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2)) ∧
              (∃ hp #t0.
                (WrapKey( hp, k.1 ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t2) ∨ (#t0 < #t2))) ∧
                (∀ hpp #t1.
                  (Unwrapped( hpp, k.1 ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
             (∃ h k2 #t1 #t0.
               (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
              ∧
               (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2) ∧ (#t0 < #t2))  ∥
             (∃ #t0 #t1 h1 h2 k.
               (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
              ∧
               (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2))  ∥
             (∃ #t0 #t1 h1 h2 k.
               (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
              ∧
               (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2) ∧ (#t1 < #t2)) )
        case case_1
        solve( State_12111111( h2, k, k.1, v, L_h, lock ) ▶₀ #t2 )
          case ifkeyvk_0_121111
          solve( !KU( senc(k.1, k) ) @ #vk.2 )
            case c_senc
            solve( Insert( L_h, <k, 'wrap'> ) @ #t2.1 )
              case insertLhkeyvwrap_0_111111211111
              solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.1 )
                case eventWrapKeyLhkeyv_0_11111121111
                solve( ((#vr.3 < #vr.9) ∧
                        (∃ #t2.
                          (Unlock_6( '6', ~n.1, L_h ) @ #t2)
                         ∧
                          (#vr.3 < #t2) ∧
                          (#t2 < #vr.9) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.1, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t0 = #vr.3) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.9 < #vr.3) )
                  case case_1
                  solve( State_12111111111( L_h2, k.2, m, v, L_h, ~n.1 ) ▶₀ #t2.2 )
                    case insertLhmwrap_0_121111111
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( State_11111121111111( ~n.2, v, L_h ) ▶₀ #t2.2 )
                    case eventWrapHandleLh_0_1111112111111
                    solve( (#t2.3 < #t2.4)  ∥ (#t2.3 = #t2.4) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( Insert( L_h, <k, 'init'> ) @ #t2.3 )
                        case insertLhkinit_0_111111111111
                        solve( State_111111111111( lock, L_h, k ) ▶₀ #t2.3 )
                          case eventNewKeyLhk_0_11111111111
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case insertLhmwrap_0_121111111
              solve( State_121111111( L_h, k.2, k, v, L_h.1, lock ) ▶₀ #t2.1 )
                case eventUnwrappedLhm_0_12111111
                solve( ((∃ h1 #t1.
                          (NewKey( h1, k ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.6)) ∧
                        (∃ hp #t0.
                          (WrapKey( hp, k ) @ #t0)
                         ∧
                          (¬(last(#t0))) ∧
                          (((#t0 = #vr.6) ∨ (#t0 < #vr.6))) ∧
                          (∀ hpp #t1.
                            (Unwrapped( hpp, k ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                       (∃ h k2 #t1 #t0.
                         (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                        ∧
                         (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.6) ∧ (#t0 < #vr.6))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.6) ∧ (#t1 < #vr.6))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.6) ∧ (#t1 < #vr.6)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                next
                  case case_4
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
            by contradiction /* from formulas */
          next
            case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
            solve( ((∃ h1 #t1.
                      (NewKey( h1, k2 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.1)) ∧
                    (∃ hp #t0.
                      (WrapKey( hp, k2 ) @ #t0)
                     ∧
                      (¬(last(#t0))) ∧
                      (((#t0 = #t2.1) ∨ (#t0 < #t2.1))) ∧
                      (∀ hpp #t1.
                        (Unwrapped( hpp, k2 ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                   (∃ h k2 #t1 #t0.
                     (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                    ∧
                     (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.1) ∧ (#t0 < #t2.1))  ∥
                   (∃ #t0 #t1 h1 h2 k.
                     (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                    ∧
                     (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2.1) ∧ (#t1 < #t2.1))  ∥
                   (∃ #t0 #t1 h1 h2 k.
                     (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                    ∧
                     (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t2.1) ∧ (#t1 < #t2.1)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            next
              case case_4
              by contradiction /* from formulas */
            qed
          next
            case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
            by contradiction /* from formulas */
          next
            case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
            by contradiction /* from formulas */
          next
            case eventEncUsingkeyvm_0_11121111
            solve( Insert( L_h, <k, 'wrap'> ) @ #t2.1 )
              case insertLhkeyvwrap_0_111111211111
              solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.1 )
                case eventWrapKeyLhkeyv_0_11111121111
                solve( ((#vr.3 < #vr.14) ∧
                        (∃ #t2.
                          (Unlock_6( '6', ~n.1, L_h ) @ #t2)
                         ∧
                          (#vr.3 < #t2) ∧
                          (#t2 < #vr.14) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.1, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t0 = #vr.3) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.14 < #vr.3) )
                  case case_1
                  solve( State_12111111111( L_h2, k.2, m, v, L_h, ~n.1 ) ▶₀ #t2.2 )
                    case insertLhmwrap_0_121111111
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( State_11111121111111( ~n.2, v, L_h ) ▶₀ #t2.2 )
                    case eventWrapHandleLh_0_1111112111111
                    solve( (#t2.4 < #t2.5)  ∥ (#t2.4 = #t2.5) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( Insert( L_h.1, <k, 'dec'> ) @ #t2.3 )
                        case insertLhkeyvdec_0_11111211111
                        solve( State_11111211111( lock, v, L_h.1 ) ▶₀ #t2.3 )
                          case eventDecKeyLhkeyv_0_1111121111
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case insertLhmwrap_0_121111111
              solve( State_121111111( L_h, k.2, k, v, L_h.1, lock ) ▶₀ #t2.1 )
                case eventUnwrappedLhm_0_12111111
                solve( ((∃ h1 #t1.
                          (NewKey( h1, k ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.11)) ∧
                        (∃ hp #t0.
                          (WrapKey( hp, k ) @ #t0)
                         ∧
                          (¬(last(#t0))) ∧
                          (((#t0 = #vr.11) ∨ (#t0 < #vr.11))) ∧
                          (∀ hpp #t1.
                            (Unwrapped( hpp, k ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                       (∃ h k2 #t1 #t0.
                         (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                        ∧
                         (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.11) ∧ (#t0 < #vr.11))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.11) ∧ (#t1 < #vr.11))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.11) ∧ (#t1 < #vr.11)) )
                  case case_1
                  solve( State_11111111111( lock, h1, k ) ▶₀ #t1 )
                    case increate_0_1111111
                    solve( State_11111121111( lock, <~n, x>, hp ) ▶₀ #t0 )
                      case ifattCvinit_0_1111112111
                      solve( Insert( L_h.1, <~n.1, 'dec'> ) @ #t2.2 )
                        case insertLhkeyvdec_0_11111211111
                        solve( State_11111211111( lock, <~n.1, x>, L_h.1 ) ▶₀ #t2.2 )
                          case eventDecKeyLhkeyv_0_1111121111
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                next
                  case case_4
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case eventWrapkeyvkeyv_0_112111111_case_1
            solve( Insert( L_h, <k, 'wrap'> ) @ #t2.1 )
              case insertLhkeyvwrap_0_111111211111
              solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.1 )
                case eventWrapKeyLhkeyv_0_11111121111
                solve( ((#vr.3 < #vr.16) ∧
                        (∃ #t2.
                          (Unlock_6( '6', ~n.1, L_h ) @ #t2)
                         ∧
                          (#vr.3 < #t2) ∧
                          (#t2 < #vr.16) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.1, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t0 = #vr.3) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.16 < #vr.3) )
                  case case_1
                  solve( State_12111111111( L_h2.1, k.2, m, v, L_h, ~n.1 ) ▶₀ #t2.2 )
                    case insertLhmwrap_0_121111111
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( State_11111121111111( ~n.2, v, L_h ) ▶₀ #t2.2 )
                    case eventWrapHandleLh_0_1111112111111
                    solve( (#t2.5 < #t2.6)  ∥ (#t2.5 = #t2.6) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( Insert( L_h2, <k.1, 'wrap'> ) @ #t2.3 )
                        case insertLhkeyvwrap_0_111111211111
                        solve( State_111111211111( lock, v, L_h2 ) ▶₀ #t2.3 )
                          case eventWrapKeyLhkeyv_0_11111121111
                          solve( ((∃ h1 #t1.1.
                                    (NewKey( h1, k.1 ) @ #t1.1) ∧ (¬(last(#t1.1))) ∧ (#t1.1 < #t1)) ∧
                                  (∃ hp #t0.
                                    (WrapKey( hp, k.1 ) @ #t0)
                                   ∧
                                    (¬(last(#t0))) ∧
                                    (((#t0 = #t1) ∨ (#t0 < #t1))) ∧
                                    (∀ hpp #t1.1.
                                      (Unwrapped( hpp, k.1 ) @ #t1.1) ⇒ ((last(#t1.1)) ∨ (#t0 < #t1.1)))))  ∥
                                 (∃ h k2 #t1.1 #t0.
                                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1.1)
                                  ∧
                                   (¬(last(#t0))) ∧ (¬(last(#t1.1))) ∧ (#t1.1 < #t1) ∧ (#t0 < #t1))  ∥
                                 (∃ #t0 #t1.1 h1 h2 k.
                                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1.1)
                                  ∧
                                   (¬(last(#t1.1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t1) ∧ (#t1.1 < #t1))  ∥
                                 (∃ #t0 #t1.1 h1 h2 k.
                                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1.1)
                                  ∧
                                   (¬(last(#t1.1))) ∧ (¬(last(#t0))) ∧ (#t0 < #t1) ∧ (#t1.1 < #t1)) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          next
                            case case_4
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case insertLhmwrap_0_121111111
                        solve( State_121111111( L_h2, k.2, k.1, v, L_h.1, lock ) ▶₀ #t2.3 )
                          case eventUnwrappedLhm_0_12111111
                          solve( ((∃ h1 #t1.
                                    (NewKey( h1, k.1 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.19)) ∧
                                  (∃ hp #t0.
                                    (WrapKey( hp, k.1 ) @ #t0)
                                   ∧
                                    (¬(last(#t0))) ∧
                                    (((#t0 = #vr.19) ∨ (#t0 < #vr.19))) ∧
                                    (∀ hpp #t1.
                                      (Unwrapped( hpp, k.1 ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                 (∃ h k2 #t1 #t0.
                                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.19) ∧ (#t0 < #vr.19))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.19) ∧ (#t1 < #vr.19))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.19) ∧ (#t1 < #vr.19)) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          next
                            case case_4
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case insertLhmwrap_0_121111111
              solve( State_121111111( L_h, k.2, k, v, L_h.1, lock ) ▶₀ #t2.1 )
                case eventUnwrappedLhm_0_12111111
                solve( ((∃ h1 #t1.
                          (NewKey( h1, k ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.13)) ∧
                        (∃ hp #t0.
                          (WrapKey( hp, k ) @ #t0)
                         ∧
                          (¬(last(#t0))) ∧
                          (((#t0 = #vr.13) ∨ (#t0 < #vr.13))) ∧
                          (∀ hpp #t1.
                            (Unwrapped( hpp, k ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                       (∃ h k2 #t1 #t0.
                         (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                        ∧
                         (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.13) ∧ (#t0 < #vr.13))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.13) ∧ (#t1 < #vr.13))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.13) ∧ (#t1 < #vr.13)) )
                  case case_1
                  solve( State_11111111111( lock, h1, k ) ▶₀ #t1 )
                    case increate_0_1111111
                    solve( State_11111121111( lock, <~n, x>, hp ) ▶₀ #t0 )
                      case ifattCvinit_0_1111112111
                      solve( Insert( L_h2, <k, 'wrap'> ) @ #t2.2 )
                        case insertLhkeyvwrap_0_111111211111
                        solve( State_111111211111( lock, v, L_h2 ) ▶₀ #t2.2 )
                          case eventWrapKeyLhkeyv_0_11111121111
                          solve( ((∃ h1 #t1.2.
                                    (NewKey( h1, k ) @ #t1.2) ∧ (¬(last(#t1.2))) ∧ (#t1.2 < #t1.1)) ∧
                                  (∃ hp #t0.
                                    (WrapKey( hp, k ) @ #t0)
                                   ∧
                                    (¬(last(#t0))) ∧
                                    (((#t0 = #t1.1) ∨ (#t0 < #t1.1))) ∧
                                    (∀ hpp #t1.2.
                                      (Unwrapped( hpp, k ) @ #t1.2) ⇒ ((last(#t1.2)) ∨ (#t0 < #t1.2)))))  ∥
                                 (∃ h k2 #t1.2 #t0.
                                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1.2)
                                  ∧
                                   (¬(last(#t0))) ∧ (¬(last(#t1.2))) ∧ (#t1.2 < #t1.1) ∧ (#t0 < #t1.1))  ∥
                                 (∃ #t0 #t1.2 h1 h2 k.
                                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1.2)
                                  ∧
                                   (¬(last(#t1.2))) ∧ (¬(last(#t0))) ∧ (#t0 < #t1.1) ∧ (#t1.2 < #t1.1))  ∥
                                 (∃ #t0 #t1.2 h1 h2 k.
                                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1.2)
                                  ∧
                                   (¬(last(#t1.2))) ∧ (¬(last(#t0))) ∧ (#t0 < #t1.1) ∧ (#t1.2 < #t1.1)) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          next
                            case case_4
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case insertLhmwrap_0_121111111
                        solve( State_121111111( L_h2, k.2, k, v, L_h.1, lock ) ▶₀ #t2.2 )
                          case eventUnwrappedLhm_0_12111111
                          solve( ((∃ h1 #t1.
                                    (NewKey( h1, k ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.25)) ∧
                                  (∃ hp #t0.
                                    (WrapKey( hp, k ) @ #t0)
                                   ∧
                                    (¬(last(#t0))) ∧
                                    (((#t0 = #vr.25) ∨ (#t0 < #vr.25))) ∧
                                    (∀ hpp #t1.
                                      (Unwrapped( hpp, k ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                 (∃ h k2 #t1 #t0.
                                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.25) ∧ (#t0 < #vr.25))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.25) ∧ (#t1 < #vr.25))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.25) ∧ (#t1 < #vr.25)) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          next
                            case case_4
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                next
                  case case_4
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case eventWrapkeyvkeyv_0_112111111_case_2
            solve( Insert( L_h, <k, 'wrap'> ) @ #t2.1 )
              case insertLhkeyvwrap_0_111111211111
              solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.1 )
                case eventWrapKeyLhkeyv_0_11111121111
                solve( ((#vr.3 < #vr.17) ∧
                        (∃ #t2.
                          (Unlock_6( '6', ~n.1, L_h ) @ #t2)
                         ∧
                          (#vr.3 < #t2) ∧
                          (#t2 < #vr.17) ∧
                          (∀ #t0 pp. (Unlock( pp, ~n.1, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t0 = #vr.3) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, L_h ) @ #t0)
                           ⇒
                            ((#t0 < #vr.3) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.17 < #vr.3) )
                  case case_1
                  solve( State_12111111111( L_h2.1, k.2, m, v, L_h, ~n.1 ) ▶₀ #t2.2 )
                    case insertLhmwrap_0_121111111
                    by contradiction /* cyclic */
                  qed
                next
                  case case_2
                  solve( State_11111121111111( ~n.2, v, L_h ) ▶₀ #t2.2 )
                    case eventWrapHandleLh_0_1111112111111
                    solve( (#t2.5 < #t2.6)  ∥ (#t2.5 = #t2.6) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( Insert( L_h2, <z, 'wrap'> ) @ #t2.3 )
                        case insertLhkeyvwrap_0_111111211111
                        solve( State_111111211111( lock, v, L_h2 ) ▶₀ #t2.3 )
                          case eventWrapKeyLhkeyv_0_11111121111
                          solve( Insert( L_h1, <z.1, 'wrap'> ) @ #t2.4 )
                            case insertLhkeyvwrap_0_111111211111
                            solve( State_111111211111( lock, v, L_h1 ) ▶₀ #t2.4 )
                              case eventWrapKeyLhkeyv_0_11111121111
                              solve( ((#vr.12 < #vr.28) ∧
                                      (∃ #t2.
                                        (Unlock_5( '5', ~n.5, L_h1 ) @ #t2)
                                       ∧
                                        (#vr.12 < #t2) ∧
                                        (#t2 < #vr.28) ∧
                                        (∀ #t0 pp. (Unlock( pp, ~n.5, L_h1 ) @ #t0) ⇒ #t0 = #t2) ∧
                                        (∀ pp lpp #t0.
                                          (Lock( pp, lpp, L_h1 ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.12) ∨ (#t0 = #vr.12) ∨ (#t2 < #t0))) ∧
                                        (∀ pp lpp #t0.
                                          (Unlock( pp, lpp, L_h1 ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.12) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                     (#vr.28 < #vr.12) )
                                case case_1
                                solve( State_11211111111( L_h1, L_h2.1, v1, v2, ~n.5 ) ▶₀ #t2.5 )
                                  case eventWrapkeyvkeyv_0_112111111
                                  by contradiction /* cyclic */
                                qed
                              next
                                case case_2
                                solve( State_11111121111111( ~n.4, v, L_h1 ) ▶₀ #t2.5 )
                                  case eventWrapHandleLh_0_1111112111111
                                  solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( Insert( L_h, <k, 'init'> ) @ #t2.6 )
                                      case insertLhkinit_0_111111111111
                                      solve( State_111111111111( lock, L_h, k ) ▶₀ #t2.6 )
                                        case eventNewKeyLhk_0_11111111111
                                        solve( State_11111111111111( ~n.8, ~n.2, k.1 ) ▶₀ #t2.7 )
                                          case insertLhkinit_0_111111111111
                                          solve( Insert( L_h2, <z, 'init'> ) @ #t2.8 )
                                            case insertLhkinit_0_111111111111
                                            solve( State_111111111111( lock, L_h2, z ) ▶₀ #t2.8 )
                                              case eventNewKeyLhk_0_11111111111
                                              by contradiction /* impossible chain */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case insertLhmwrap_0_121111111
                            solve( State_121111111( L_h1, k.2, z.1, v, L_h.1, lock ) ▶₀ #t2.4 )
                              case eventUnwrappedLhm_0_12111111
                              solve( ((∃ h1 #t1.
                                        (NewKey( h1, z.1 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.25)) ∧
                                      (∃ hp #t0.
                                        (WrapKey( hp, z.1 ) @ #t0)
                                       ∧
                                        (¬(last(#t0))) ∧
                                        (((#t0 = #vr.25) ∨ (#t0 < #vr.25))) ∧
                                        (∀ hpp #t1.
                                          (Unwrapped( hpp, z.1 ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                     (∃ h k2 #t1 #t0.
                                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                      ∧
                                       (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.25) ∧ (#t0 < #vr.25))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.25) ∧ (#t1 < #vr.25))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.25) ∧ (#t1 < #vr.25)) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              next
                                case case_4
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      next
                        case insertLhmwrap_0_121111111
                        solve( State_121111111( L_h2, k.2, z, v, L_h.1, lock ) ▶₀ #t2.3 )
                          case eventUnwrappedLhm_0_12111111
                          solve( ((∃ h1 #t1.
                                    (NewKey( h1, z ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.20)) ∧
                                  (∃ hp #t0.
                                    (WrapKey( hp, z ) @ #t0)
                                   ∧
                                    (¬(last(#t0))) ∧
                                    (((#t0 = #vr.20) ∨ (#t0 < #vr.20))) ∧
                                    (∀ hpp #t1.
                                      (Unwrapped( hpp, z ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                 (∃ h k2 #t1 #t0.
                                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.20) ∧ (#t0 < #vr.20))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.20) ∧ (#t1 < #vr.20))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.20) ∧ (#t1 < #vr.20)) )
                            case case_1
                            solve( State_11111111111( lock, h1, z ) ▶₀ #t1 )
                              case increate_0_1111111
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          next
                            case case_4
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case insertLhmwrap_0_121111111
              solve( State_121111111( L_h, k.2, k, v, L_h.1, lock ) ▶₀ #t2.1 )
                case eventUnwrappedLhm_0_12111111
                solve( ((∃ h1 #t1.
                          (NewKey( h1, k ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.14)) ∧
                        (∃ hp #t0.
                          (WrapKey( hp, k ) @ #t0)
                         ∧
                          (¬(last(#t0))) ∧
                          (((#t0 = #vr.14) ∨ (#t0 < #vr.14))) ∧
                          (∀ hpp #t1.
                            (Unwrapped( hpp, k ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                       (∃ h k2 #t1 #t0.
                         (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                        ∧
                         (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.14) ∧ (#t0 < #vr.14))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.14) ∧ (#t1 < #vr.14))  ∥
                       (∃ #t0 #t1 h1 h2 k.
                         (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.14) ∧ (#t1 < #vr.14)) )
                  case case_1
                  solve( State_11111111111( lock, h1, k ) ▶₀ #t1 )
                    case increate_0_1111111
                    solve( State_11111121111( lock, <~n, x>, hp ) ▶₀ #t0 )
                      case ifattCvinit_0_1111112111
                      solve( Insert( L_h2, <z, 'wrap'> ) @ #t2.2 )
                        case insertLhkeyvwrap_0_111111211111
                        solve( State_111111211111( lock, v, L_h2 ) ▶₀ #t2.2 )
                          case eventWrapKeyLhkeyv_0_11111121111
                          solve( Insert( L_h1, <z.1, 'wrap'> ) @ #t2.3 )
                            case insertLhkeyvwrap_0_111111211111
                            solve( State_111111211111( lock, v, L_h1 ) ▶₀ #t2.3 )
                              case eventWrapKeyLhkeyv_0_11111121111
                              solve( ((#vr.12 < #vr.34) ∧
                                      (∃ #t2.
                                        (Unlock_5( '5', ~n.10, L_h1 ) @ #t2)
                                       ∧
                                        (#vr.12 < #t2) ∧
                                        (#t2 < #vr.34) ∧
                                        (∀ #t0 pp. (Unlock( pp, ~n.10, L_h1 ) @ #t0) ⇒ #t0 = #t2) ∧
                                        (∀ pp lpp #t0.
                                          (Lock( pp, lpp, L_h1 ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.12) ∨ (#t0 = #vr.12) ∨ (#t2 < #t0))) ∧
                                        (∀ pp lpp #t0.
                                          (Unlock( pp, lpp, L_h1 ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.12) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                     (#vr.34 < #vr.12) )
                                case case_1
                                solve( State_11211111111( L_h1, L_h2.1, v1, v2, ~n.10 ) ▶₀ #t2.4 )
                                  case eventWrapkeyvkeyv_0_112111111
                                  by contradiction /* cyclic */
                                qed
                              next
                                case case_2
                                solve( State_11111121111111( ~n.9, v, L_h1 ) ▶₀ #t2.4 )
                                  case eventWrapHandleLh_0_1111112111111
                                  solve( (#t2.8 < #t2.9)  ∥ (#t2.8 = #t2.9) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( !KU( senc(~n.1, k.1) ) @ #vk.11 )
                                      case c_senc
                                      by contradiction /* from formulas */
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                      by contradiction /* from formulas */
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                      solve( ((∃ h1 #t1.
                                                (NewKey( h1, k2 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.5)) ∧
                                              (∃ hp #t0.
                                                (WrapKey( hp, k2 ) @ #t0)
                                               ∧
                                                (¬(last(#t0))) ∧
                                                (((#t0 = #t2.5) ∨ (#t0 < #t2.5))) ∧
                                                (∀ hpp #t1.
                                                  (Unwrapped( hpp, k2 ) @ #t1)
                                                 ⇒
                                                  ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                             (∃ h k2 #t1 #t0.
                                               (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                              ∧
                                               (¬(last(#t0))) ∧
                                               (¬(last(#t1))) ∧
                                               (#t1 < #t2.5) ∧
                                               (#t0 < #t2.5))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧
                                               (¬(last(#t0))) ∧
                                               (#t0 < #t2.5) ∧
                                               (#t1 < #t2.5))  ∥
                                             (∃ #t0 #t1 h1 h2 k.
                                               (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                              ∧
                                               (¬(last(#t1))) ∧
                                               (¬(last(#t0))) ∧
                                               (#t0 < #t2.5) ∧
                                               (#t1 < #t2.5)) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      next
                                        case case_3
                                        by contradiction /* from formulas */
                                      next
                                        case case_4
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                      by contradiction /* from formulas */
                                    next
                                      case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                      by contradiction /* from formulas */
                                    next
                                      case eventEncUsingkeyvm_0_11121111
                                      by contradiction /* from formulas */
                                    next
                                      case eventWrapkeyvkeyv_0_112111111_case_1
                                      solve( !KU( ~n.5 ) @ #vk.3 )
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                        solve( ((∃ h1 #t1.
                                                  (NewKey( h1, k2 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.5)) ∧
                                                (∃ hp #t0.
                                                  (WrapKey( hp, k2 ) @ #t0)
                                                 ∧
                                                  (¬(last(#t0))) ∧
                                                  (((#t0 = #t2.5) ∨ (#t0 < #t2.5))) ∧
                                                  (∀ hpp #t1.
                                                    (Unwrapped( hpp, k2 ) @ #t1)
                                                   ⇒
                                                    ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                               (∃ h k2 #t1 #t0.
                                                 (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                ∧
                                                 (¬(last(#t0))) ∧
                                                 (¬(last(#t1))) ∧
                                                 (#t1 < #t2.5) ∧
                                                 (#t0 < #t2.5))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.5) ∧
                                                 (#t1 < #t2.5))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.5) ∧
                                                 (#t1 < #t2.5)) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        next
                                          case case_3
                                          by contradiction /* from formulas */
                                        next
                                          case case_4
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                        by contradiction /* from formulas */
                                      next
                                        case eventWrapkeyvkeyv_0_112111111
                                        solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.5 )
                                          case insertLhkeyvwrap_0_111111211111
                                          solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.5 )
                                            case eventWrapKeyLhkeyv_0_11111121111
                                            solve( ((#vr.18 < #vr.55) ∧
                                                    (∃ #t2.
                                                      (Unlock_6( '6', ~n.7, L_h ) @ #t2)
                                                     ∧
                                                      (#vr.18 < #t2) ∧
                                                      (#t2 < #vr.55) ∧
                                                      (∀ #t0 pp.
                                                        (Unlock( pp, ~n.7, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                      (∀ pp lpp #t0.
                                                        (Lock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.18) ∨ (#t0 = #vr.18) ∨ (#t2 < #t0))) ∧
                                                      (∀ pp lpp #t0.
                                                        (Unlock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.18) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                   (#vr.55 < #vr.18) )
                                              case case_1
                                              solve( State_12111111111( L_h2.3, k.2, m, v, L_h, ~n.7
                                                     ) ▶₀ #t2.6 )
                                                case insertLhmwrap_0_121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case case_2
                                              solve( State_11111121111111( ~n.11, v, L_h ) ▶₀ #t2.6 )
                                                case eventWrapHandleLh_0_1111112111111
                                                solve( (#t2.14 < #t2.15)  ∥ (#t2.14 = #t2.15) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.7 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.7 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                             ) ▶₀ #t2.8 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <z, 'init'> ) @ #t2.9 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, z
                                                                 ) ▶₀ #t2.9 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* impossible chain */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case insertLhmwrap_0_121111111
                                          solve( State_121111111( L_h, k.2, k.1, v, L_h.1, lock ) ▶₀ #t2.5 )
                                            case eventUnwrappedLhm_0_12111111
                                            solve( ((∃ h1 #t1.
                                                      (NewKey( h1, k.1 ) @ #t1)
                                                     ∧
                                                      (¬(last(#t1))) ∧ (#t1 < #vr.52)) ∧
                                                    (∃ hp #t0.
                                                      (WrapKey( hp, k.1 ) @ #t0)
                                                     ∧
                                                      (¬(last(#t0))) ∧
                                                      (((#t0 = #vr.52) ∨ (#t0 < #vr.52))) ∧
                                                      (∀ hpp #t1.
                                                        (Unwrapped( hpp, k.1 ) @ #t1)
                                                       ⇒
                                                        ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                   (∃ h k2 #t1 #t0.
                                                     (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                    ∧
                                                     (¬(last(#t0))) ∧
                                                     (¬(last(#t1))) ∧
                                                     (#t1 < #vr.52) ∧
                                                     (#t0 < #vr.52))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.52) ∧
                                                     (#t1 < #vr.52))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.52) ∧
                                                     (#t1 < #vr.52)) )
                                              case case_1
                                              solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                case increate_0_1111111
                                                solve( State_11111121111( lock, <~n.7, x>, hp.1 ) ▶₀ #t0.1 )
                                                  case ifattCvinit_0_1111112111
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                             ) ▶₀ #t2.7 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <z, 'init'> ) @ #t2.8 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, z
                                                                 ) ▶₀ #t2.8 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* impossible chain */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              by contradiction /* from formulas */
                                            next
                                              case case_3
                                              by contradiction /* from formulas */
                                            next
                                              case case_4
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      next
                                        case insertLhmwrap_0_121111111
                                        solve( (#t2.5 < #t2.11)  ∥ (#t2.5 = #t2.11) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.5 )
                                            case insertLhkeyvwrap_0_111111211111
                                            solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.5 )
                                              case eventWrapKeyLhkeyv_0_11111121111
                                              solve( ((#vr.18 < #vr.47) ∧
                                                      (∃ #t2.
                                                        (Unlock_6( '6', ~n.7, L_h ) @ #t2)
                                                       ∧
                                                        (#vr.18 < #t2) ∧
                                                        (#t2 < #vr.47) ∧
                                                        (∀ #t0 pp.
                                                          (Unlock( pp, ~n.7, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                        (∀ pp lpp #t0.
                                                          (Lock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.18) ∨ (#t0 = #vr.18) ∨ (#t2 < #t0))) ∧
                                                        (∀ pp lpp #t0.
                                                          (Unlock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.18) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                     (#vr.47 < #vr.18) )
                                                case case_1
                                                solve( State_12111111111( L_h2.2, k.2, m, v, L_h, ~n.7
                                                       ) ▶₀ #t2.6 )
                                                  case insertLhmwrap_0_121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case case_2
                                                solve( State_11111121111111( ~n.11, v, L_h ) ▶₀ #t2.6 )
                                                  case eventWrapHandleLh_0_1111112111111
                                                  solve( (#t2.12 < #t2.13)  ∥ (#t2.12 = #t2.13) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.7 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.7 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                               ) ▶₀ #t2.8 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <z, 'init'> ) @ #t2.9 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, z
                                                                   ) ▶₀ #t2.9 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* impossible chain */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case insertLhmwrap_0_121111111
                                            solve( State_121111111( L_h, k.2, k.1, v, L_h.1, lock ) ▶₀ #t2.5 )
                                              case eventUnwrappedLhm_0_12111111
                                              solve( ((∃ h1 #t1.
                                                        (NewKey( h1, k.1 ) @ #t1)
                                                       ∧
                                                        (¬(last(#t1))) ∧ (#t1 < #vr.44)) ∧
                                                      (∃ hp #t0.
                                                        (WrapKey( hp, k.1 ) @ #t0)
                                                       ∧
                                                        (¬(last(#t0))) ∧
                                                        (((#t0 = #vr.44) ∨ (#t0 < #vr.44))) ∧
                                                        (∀ hpp #t1.
                                                          (Unwrapped( hpp, k.1 ) @ #t1)
                                                         ⇒
                                                          ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #vr.44) ∧
                                                       (#t0 < #vr.44))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.44) ∧
                                                       (#t1 < #vr.44))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.44) ∧
                                                       (#t1 < #vr.44)) )
                                                case case_1
                                                solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                  case increate_0_1111111
                                                  solve( State_11111121111( lock, <~n.7, x>, hp.1 ) ▶₀ #t0.1 )
                                                    case ifattCvinit_0_1111112111
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                               ) ▶₀ #t2.7 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <z, 'init'> ) @ #t2.8 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, z
                                                                   ) ▶₀ #t2.8 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* impossible chain */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              next
                                                case case_4
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case eventWrapkeyvkeyv_0_112111111_case_2
                                      solve( !KU( ~n.5 ) @ #vk.3 )
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                        solve( ((∃ h1 #t1.
                                                  (NewKey( h1, k2 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2.5)) ∧
                                                (∃ hp #t0.
                                                  (WrapKey( hp, k2 ) @ #t0)
                                                 ∧
                                                  (¬(last(#t0))) ∧
                                                  (((#t0 = #t2.5) ∨ (#t0 < #t2.5))) ∧
                                                  (∀ hpp #t1.
                                                    (Unwrapped( hpp, k2 ) @ #t1)
                                                   ⇒
                                                    ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                               (∃ h k2 #t1 #t0.
                                                 (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                ∧
                                                 (¬(last(#t0))) ∧
                                                 (¬(last(#t1))) ∧
                                                 (#t1 < #t2.5) ∧
                                                 (#t0 < #t2.5))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.5) ∧
                                                 (#t1 < #t2.5))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (¬(last(#t1))) ∧
                                                 (¬(last(#t0))) ∧
                                                 (#t0 < #t2.5) ∧
                                                 (#t1 < #t2.5)) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        next
                                          case case_3
                                          by contradiction /* from formulas */
                                        next
                                          case case_4
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                        by contradiction /* from formulas */
                                      next
                                        case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                        by contradiction /* from formulas */
                                      next
                                        case eventWrapkeyvkeyv_0_112111111
                                        solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.5 )
                                          case insertLhkeyvwrap_0_111111211111
                                          solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.5 )
                                            case eventWrapKeyLhkeyv_0_11111121111
                                            solve( ((#vr.18 < #vr.56) ∧
                                                    (∃ #t2.
                                                      (Unlock_6( '6', ~n.7, L_h ) @ #t2)
                                                     ∧
                                                      (#vr.18 < #t2) ∧
                                                      (#t2 < #vr.56) ∧
                                                      (∀ #t0 pp.
                                                        (Unlock( pp, ~n.7, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                      (∀ pp lpp #t0.
                                                        (Lock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.18) ∨ (#t0 = #vr.18) ∨ (#t2 < #t0))) ∧
                                                      (∀ pp lpp #t0.
                                                        (Unlock( pp, lpp, L_h ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.18) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                   (#vr.56 < #vr.18) )
                                              case case_1
                                              solve( State_12111111111( L_h2.3, k.2, m, v, L_h, ~n.7
                                                     ) ▶₀ #t2.6 )
                                                case insertLhmwrap_0_121111111
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case case_2
                                              solve( State_11111121111111( ~n.11, v, L_h ) ▶₀ #t2.6 )
                                                case eventWrapHandleLh_0_1111112111111
                                                solve( (#t2.14 < #t2.15)  ∥ (#t2.14 = #t2.15) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.7 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.7 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                             ) ▶₀ #t2.8 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <z, 'init'> ) @ #t2.9 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, z
                                                                 ) ▶₀ #t2.9 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* impossible chain */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case insertLhmwrap_0_121111111
                                          solve( State_121111111( L_h, k.2, k.1, v, L_h.1, lock ) ▶₀ #t2.5 )
                                            case eventUnwrappedLhm_0_12111111
                                            solve( ((∃ h1 #t1.
                                                      (NewKey( h1, k.1 ) @ #t1)
                                                     ∧
                                                      (¬(last(#t1))) ∧ (#t1 < #vr.53)) ∧
                                                    (∃ hp #t0.
                                                      (WrapKey( hp, k.1 ) @ #t0)
                                                     ∧
                                                      (¬(last(#t0))) ∧
                                                      (((#t0 = #vr.53) ∨ (#t0 < #vr.53))) ∧
                                                      (∀ hpp #t1.
                                                        (Unwrapped( hpp, k.1 ) @ #t1)
                                                       ⇒
                                                        ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                   (∃ h k2 #t1 #t0.
                                                     (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                    ∧
                                                     (¬(last(#t0))) ∧
                                                     (¬(last(#t1))) ∧
                                                     (#t1 < #vr.53) ∧
                                                     (#t0 < #vr.53))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.53) ∧
                                                     (#t1 < #vr.53))  ∥
                                                   (∃ #t0 #t1 h1 h2 k.
                                                     (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                    ∧
                                                     (¬(last(#t1))) ∧
                                                     (¬(last(#t0))) ∧
                                                     (#t0 < #vr.53) ∧
                                                     (#t1 < #vr.53)) )
                                              case case_1
                                              solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                case increate_0_1111111
                                                solve( State_11111121111( lock, <~n.7, x>, hp.1 ) ▶₀ #t0.1 )
                                                  case ifattCvinit_0_1111112111
                                                  solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                      case eventNewKeyLhk_0_11111111111
                                                      solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                             ) ▶₀ #t2.7 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( Insert( L_h2, <z, 'init'> ) @ #t2.8 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( State_111111111111( lock, L_h2, z
                                                                 ) ▶₀ #t2.8 )
                                                            case eventNewKeyLhk_0_11111111111
                                                            by contradiction /* impossible chain */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              by contradiction /* from formulas */
                                            next
                                              case case_3
                                              by contradiction /* from formulas */
                                            next
                                              case case_4
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      next
                                        case insertLhmwrap_0_121111111
                                        solve( (#t2.5 < #t2.11)  ∥ (#t2.5 = #t2.11) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( Insert( L_h, <k.1, 'wrap'> ) @ #t2.5 )
                                            case insertLhkeyvwrap_0_111111211111
                                            solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.5 )
                                              case eventWrapKeyLhkeyv_0_11111121111
                                              solve( ((#vr.18 < #vr.48) ∧
                                                      (∃ #t2.
                                                        (Unlock_6( '6', ~n.7, L_h ) @ #t2)
                                                       ∧
                                                        (#vr.18 < #t2) ∧
                                                        (#t2 < #vr.48) ∧
                                                        (∀ #t0 pp.
                                                          (Unlock( pp, ~n.7, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                        (∀ pp lpp #t0.
                                                          (Lock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.18) ∨ (#t0 = #vr.18) ∨ (#t2 < #t0))) ∧
                                                        (∀ pp lpp #t0.
                                                          (Unlock( pp, lpp, L_h ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.18) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                     (#vr.48 < #vr.18) )
                                                case case_1
                                                solve( State_12111111111( L_h2.2, k.2, m, v, L_h, ~n.7
                                                       ) ▶₀ #t2.6 )
                                                  case insertLhmwrap_0_121111111
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case case_2
                                                solve( State_11111121111111( ~n.11, v, L_h ) ▶₀ #t2.6 )
                                                  case eventWrapHandleLh_0_1111112111111
                                                  solve( (#t2.12 < #t2.13)  ∥ (#t2.12 = #t2.13) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.7 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.7 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                               ) ▶₀ #t2.8 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <z, 'init'> ) @ #t2.9 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, z
                                                                   ) ▶₀ #t2.9 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* impossible chain */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case insertLhmwrap_0_121111111
                                            solve( State_121111111( L_h, k.2, k.1, v, L_h.1, lock ) ▶₀ #t2.5 )
                                              case eventUnwrappedLhm_0_12111111
                                              solve( ((∃ h1 #t1.
                                                        (NewKey( h1, k.1 ) @ #t1)
                                                       ∧
                                                        (¬(last(#t1))) ∧ (#t1 < #vr.45)) ∧
                                                      (∃ hp #t0.
                                                        (WrapKey( hp, k.1 ) @ #t0)
                                                       ∧
                                                        (¬(last(#t0))) ∧
                                                        (((#t0 = #vr.45) ∨ (#t0 < #vr.45))) ∧
                                                        (∀ hpp #t1.
                                                          (Unwrapped( hpp, k.1 ) @ #t1)
                                                         ⇒
                                                          ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                                     (∃ h k2 #t1 #t0.
                                                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                      ∧
                                                       (¬(last(#t0))) ∧
                                                       (¬(last(#t1))) ∧
                                                       (#t1 < #vr.45) ∧
                                                       (#t0 < #vr.45))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.45) ∧
                                                       (#t1 < #vr.45))  ∥
                                                     (∃ #t0 #t1 h1 h2 k.
                                                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                      ∧
                                                       (¬(last(#t1))) ∧
                                                       (¬(last(#t0))) ∧
                                                       (#t0 < #vr.45) ∧
                                                       (#t1 < #vr.45)) )
                                                case case_1
                                                solve( State_11111111111( lock, h1, k.1 ) ▶₀ #t1.1 )
                                                  case increate_0_1111111
                                                  solve( State_11111121111( lock, <~n.7, x>, hp.1 ) ▶₀ #t0.1 )
                                                    case ifattCvinit_0_1111112111
                                                    solve( Insert( hp, <~n.1, 'init'> ) @ #t2.6 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, hp, ~n.1 ) ▶₀ #t2.6 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        solve( State_11111111111111( ~n.3, ~n.2, k.2
                                                               ) ▶₀ #t2.7 )
                                                          case insertLhkinit_0_111111111111
                                                          solve( Insert( L_h2, <z, 'init'> ) @ #t2.8 )
                                                            case insertLhkinit_0_111111111111
                                                            solve( State_111111111111( lock, L_h2, z
                                                                   ) ▶₀ #t2.8 )
                                                              case eventNewKeyLhk_0_11111111111
                                                              by contradiction /* impossible chain */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              next
                                                case case_4
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case insertLhmwrap_0_121111111
                            solve( State_121111111( L_h1, k.2, z.1, v, L_h.1, lock ) ▶₀ #t2.3 )
                              case eventUnwrappedLhm_0_12111111
                              solve( ((∃ h1 #t1.
                                        (NewKey( h1, z.1 ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.31)) ∧
                                      (∃ hp #t0.
                                        (WrapKey( hp, z.1 ) @ #t0)
                                       ∧
                                        (¬(last(#t0))) ∧
                                        (((#t0 = #vr.31) ∨ (#t0 < #vr.31))) ∧
                                        (∀ hpp #t1.
                                          (Unwrapped( hpp, z.1 ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                     (∃ h k2 #t1 #t0.
                                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                      ∧
                                       (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.31) ∧ (#t0 < #vr.31))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.31) ∧ (#t1 < #vr.31))  ∥
                                     (∃ #t0 #t1 h1 h2 k.
                                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                      ∧
                                       (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.31) ∧ (#t1 < #vr.31)) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              next
                                case case_4
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      next
                        case insertLhmwrap_0_121111111
                        solve( State_121111111( L_h2, k.2, z, v, L_h.1, lock ) ▶₀ #t2.2 )
                          case eventUnwrappedLhm_0_12111111
                          solve( ((∃ h1 #t1.
                                    (NewKey( h1, z ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.26)) ∧
                                  (∃ hp #t0.
                                    (WrapKey( hp, z ) @ #t0)
                                   ∧
                                    (¬(last(#t0))) ∧
                                    (((#t0 = #vr.26) ∨ (#t0 < #vr.26))) ∧
                                    (∀ hpp #t1.
                                      (Unwrapped( hpp, z ) @ #t1) ⇒ ((last(#t1)) ∨ (#t0 < #t1)))))  ∥
                                 (∃ h k2 #t1 #t0.
                                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (¬(last(#t0))) ∧ (¬(last(#t1))) ∧ (#t1 < #vr.26) ∧ (#t0 < #vr.26))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.26) ∧ (#t1 < #vr.26))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (¬(last(#t1))) ∧ (¬(last(#t0))) ∧ (#t0 < #vr.26) ∧ (#t1 < #vr.26)) )
                            case case_1
                            solve( State_11111111111( lock, h1, z ) ▶₀ #t1.1 )
                              case increate_0_1111111
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          next
                            case case_4
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                next
                  case case_4
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        by contradiction /* from formulas */
      next
        case case_4
        by contradiction /* from formulas */
      next
        case case_5
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (#t1 = #t2.1)  ∥ (#t2.1 < #t1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_3
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_0( '0', ~n.1, ~n ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, ~n ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, ~n ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, ~n ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, ~n ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_1( '1', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_5
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_2( '2', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_6
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_3( '3', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_7
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_4( '4', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_8
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_5( '5', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_9
      solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
             (∀ #t2.
               (Unlock_6( '6', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (∃ #t0 pp.
                   (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                 (∃ pp lpp #t0.
                   (Lock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (¬(#t0 = #t1)) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                 (∃ pp lpp #t0.
                   (Unlock( pp, lpp, x ) @ #t0)
                  ∧
                   (¬(last(#t0))) ∧
                   (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                   (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                   (¬(#t2.1 = #t0))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma no_key_is_wrap_and_dec_ind [use_induction, reuse]:
  all-traces
  "∀ #t2 #t3 h1 h2 k.
    ((DecKey( h1, k ) @ #t2) ∧ (WrapKey( h2, k ) @ #t3)) ⇒
    (∃ h k2 #t1 #t0.
      ((NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)) ∧
      (((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))"
/*
guarded formula characterizing all counter-examples:
"∃ #t2 #t3 h1 h2 k.
  (DecKey( h1, k ) @ #t2) ∧ (WrapKey( h2, k ) @ #t3)
 ∧
  ∀ h k2 #t1 #t0.
   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
  ⇒
   (((¬(#t1 < #t3)) ∨ (¬(#t0 < #t3)))) ∧
   (((¬(#t1 < #t2)) ∨ (¬(#t0 < #t2))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ #t2 #t3 h1 h2 k.
           (DecKey( h1, k ) @ #t2) ∧ (WrapKey( h2, k ) @ #t3)
          ⇒
           ((last(#t3)) ∨
            (last(#t2)) ∨
            (∃ h k2 #t1 #t0.
              (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
             ∧
              (¬(last(#t0))) ∧
              (¬(last(#t1))) ∧
              ((((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2)))))))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t1 yp.
                (Insert( x, yp ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (¬(#t1 = #t2)) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_0( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_1( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_2( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_3( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_4( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_5( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_6( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_6( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3))) )
    case case_1
    solve( (last(#t3))  ∥ (last(#t2))  ∥
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (¬(last(#t0))) ∧
             (¬(last(#t1))) ∧
             ((((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))) )
      case case_1
      solve( State_1111121111( lock, v, h1 ) ▶₀ #t2 )
        case ifattCvinit_0_111112111
        solve( State_11111121111( lock, v, h2 ) ▶₀ #t3 )
          case ifattCvinit_0_1111112111
          solve( Insert( h1, <k, 'init'> ) @ #t2.1 )
            case insertLhkinit_0_111111111111
            solve( State_111111111111( lock, h1, k ) ▶₀ #t2.1 )
              case eventNewKeyLhk_0_11111111111
              solve( State_11111111111111( ~n.4, ~n.2, k ) ▶₀ #t2.2 )
                case insertLhkinit_0_111111111111
                solve( Insert( h2, <~n.1, 'init'> ) @ #t2.3 )
                  case insertLhkinit_0_111111111111
                  solve( State_111111111111( lock, h2, ~n.1 ) ▶₀ #t2.3 )
                    case eventNewKeyLhk_0_11111111111
                    solve( ((#vr.2 < #vr.7) ∧
                            (∃ #t2.
                              (Unlock_2( '2', ~n, ~n.2 ) @ #t2)
                             ∧
                              (#vr.2 < #t2) ∧
                              (#t2 < #vr.7) ∧
                              (∀ #t0 pp. (Unlock( pp, ~n, ~n.2 ) @ #t0) ⇒ #t0 = #t2) ∧
                              (∀ pp lpp #t0.
                                (Lock( pp, lpp, ~n.2 ) @ #t0)
                               ⇒
                                ((#t0 < #vr.2) ∨ (#t0 = #vr.2) ∨ (#t2 < #t0))) ∧
                              (∀ pp lpp #t0.
                                (Unlock( pp, lpp, ~n.2 ) @ #t0)
                               ⇒
                                ((#t0 < #vr.2) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                           (#vr.7 < #vr.2) )
                      case case_1
                      solve( State_111112111111( ~n, v, ~n.2 ) ▶₀ #t2.3 )
                        case insertLhkeyvdec_0_11111211111
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( State_11111121111111( ~n.3, v, ~n.2 ) ▶₀ #t2.3 )
                        case eventWrapHandleLh_0_1111112111111
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( State_1111121111( lock, v, h1 ) ▶₀ #t2 )
        case ifattCvinit_0_111112111
        solve( State_11111121111( lock, v, h2 ) ▶₀ #t3 )
          case ifattCvinit_0_1111112111
          solve( Insert( h1, <k, 'init'> ) @ #t2.1 )
            case insertLhkinit_0_111111111111
            solve( State_111111111111( lock, h1, k ) ▶₀ #t2.1 )
              case eventNewKeyLhk_0_11111111111
              solve( State_11111111111111( ~n.4, ~n.2, k ) ▶₀ #t2.2 )
                case insertLhkinit_0_111111111111
                solve( Insert( h2, <~n.1, 'init'> ) @ #t2.3 )
                  case insertLhkinit_0_111111111111
                  solve( State_111111111111( lock, h2, ~n.1 ) ▶₀ #t2.3 )
                    case eventNewKeyLhk_0_11111111111
                    solve( ((#vr.2 < #vr.7) ∧
                            (∃ #t2.
                              (Unlock_2( '2', ~n, ~n.2 ) @ #t2)
                             ∧
                              (#vr.2 < #t2) ∧
                              (#t2 < #vr.7) ∧
                              (∀ #t0 pp. (Unlock( pp, ~n, ~n.2 ) @ #t0) ⇒ #t0 = #t2) ∧
                              (∀ pp lpp #t0.
                                (Lock( pp, lpp, ~n.2 ) @ #t0)
                               ⇒
                                ((#t0 < #vr.2) ∨ (#t0 = #vr.2) ∨ (#t2 < #t0))) ∧
                              (∀ pp lpp #t0.
                                (Unlock( pp, lpp, ~n.2 ) @ #t0)
                               ⇒
                                ((#t0 < #vr.2) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                           (#vr.7 < #vr.2) )
                      case case_1
                      solve( State_111112111111( ~n, v, ~n.2 ) ▶₀ #t2.3 )
                        case insertLhkeyvdec_0_11111211111
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( State_11111121111111( ~n.3, v, ~n.2 ) ▶₀ #t2.3 )
                        case eventWrapHandleLh_0_1111112111111
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_3
      solve( ((#t1 < #t3) ∧ (#t0 < #t3))  ∥ ((#t1 < #t2) ∧ (#t0 < #t2)) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_2
    solve( (#t1 = #t2.1)  ∥ (#t2.1 < #t1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
           (∀ #t2.
             (Unlock_0( '0', ~n.1, ~n ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3.1) ∨
              (#t3.1 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, ~n ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, ~n ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, ~n ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, ~n ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                 (¬(#t2.1 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_4
    solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
           (∀ #t2.
             (Unlock_1( '1', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3.1) ∨
              (#t3.1 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                 (¬(#t2.1 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_5
    solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
           (∀ #t2.
             (Unlock_2( '2', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3.1) ∨
              (#t3.1 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                 (¬(#t2.1 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_6
    solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
           (∀ #t2.
             (Unlock_3( '3', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3.1) ∨
              (#t3.1 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                 (¬(#t2.1 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_7
    solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
           (∀ #t2.
             (Unlock_4( '4', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3.1) ∨
              (#t3.1 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                 (¬(#t2.1 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_8
    solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
           (∀ #t2.
             (Unlock_5( '5', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3.1) ∨
              (#t3.1 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                 (¬(#t2.1 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_9
    solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
           (∀ #t2.
             (Unlock_6( '6', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3.1) ∨
              (#t3.1 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                 (¬(#t2.1 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2.1 = #t0)  ∥ (#t0 < #t2.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma no_key_is_wrap_and_dec_ind2 [use_induction, reuse]:
  all-traces
  "∀ #t2 #t3 h1 h2 k.
    ((DecKey( h1, k ) @ #t2) ∧ (Unwrapped( h2, k ) @ #t3)) ⇒
    (∃ h k2 #t1 #t0.
      ((NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)) ∧
      (((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))"
/*
guarded formula characterizing all counter-examples:
"∃ #t2 #t3 h1 h2 k.
  (DecKey( h1, k ) @ #t2) ∧ (Unwrapped( h2, k ) @ #t3)
 ∧
  ∀ h k2 #t1 #t0.
   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
  ⇒
   (((¬(#t1 < #t3)) ∨ (¬(#t0 < #t3)))) ∧
   (((¬(#t1 < #t2)) ∨ (¬(#t0 < #t2))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ #t2 #t3 h1 h2 k.
           (DecKey( h1, k ) @ #t2) ∧ (Unwrapped( h2, k ) @ #t3)
          ⇒
           ((last(#t3)) ∨
            (last(#t2)) ∨
            (∃ h k2 #t1 #t0.
              (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
             ∧
              (¬(last(#t0))) ∧
              (¬(last(#t1))) ∧
              ((((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2)))))))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t1 yp.
                (Insert( x, yp ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (¬(#t1 = #t2)) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_0( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_1( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_2( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_3( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_4( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_5( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_6( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_6( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3))) )
    case case_1
    solve( ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ #t1 < #t3) ∧
            (∃ hp #t0.
              (WrapKey( hp, k ) @ #t0)
             ∧
              (((#t0 = #t3) ∨ (#t0 < #t3))) ∧
              (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ #t0 < #t1)))  ∥
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (#t1 < #t3) ∧ (#t0 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3)) )
      case case_1
      solve( (last(#t3))  ∥ (last(#t2))  ∥
             (∃ h k2 #t1 #t0.
               (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
              ∧
               (¬(last(#t0))) ∧
               (¬(last(#t1))) ∧
               ((((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
               ((#t1.2 < #t2) ∧ (#t0.1 < #t2)) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (last(#t3))  ∥ (last(#t2))  ∥
             (∃ h k2 #t1 #t0.
               (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
              ∧
               (¬(last(#t0))) ∧
               (¬(last(#t1))) ∧
               ((((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
               ((#t1.2 < #t1) ∧ (#t0.1 < #t1)) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_4
      solve( (last(#t3))  ∥ (last(#t2))  ∥
             (∃ h k2 #t1 #t0.
               (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
              ∧
               (¬(last(#t0))) ∧
               (¬(last(#t1))) ∧
               ((((#t1 < #t3) ∧ (#t0 < #t3)) ∨ ((#t1 < #t2) ∧ (#t0 < #t2))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( ((∃ h1 #t1. (NewKey( h1, k.1 ) @ #t1) ∧ #t1 < #t0) ∧
                (∃ hp #t0.1.
                  (WrapKey( hp, k.1 ) @ #t0.1)
                 ∧
                  (((#t0.1 = #t0) ∨ (#t0.1 < #t0))) ∧
                  (∀ hpp #t1. (Unwrapped( hpp, k.1 ) @ #t1) ⇒ #t0.1 < #t1)))  ∥
               (∃ h k2 #t1 #t0.1.
                 (NewKey( h, k2 ) @ #t0.1) ∧ (!KU( k2 ) @ #t1)
                ∧
                 (#t1 < #t0) ∧ (#t0.1 < #t0))  ∥
               (∃ #t0.1 #t1 h1 h2 k.
                 (WrapKey( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                ∧
                 (#t0.1 < #t0) ∧ (#t1 < #t0))  ∥
               (∃ #t0.1 #t1 h1 h2 k.
                 (Unwrapped( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                ∧
                 (#t0.1 < #t0) ∧ (#t1 < #t0)) )
          case case_1
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t1) ∧ (#t0.1 < #t1)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t1) ∧ (#t0.1 < #t1)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_4
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t1) ∧ (#t0.1 < #t1)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ #t1 < #t3) ∧
            (∃ hp #t0.
              (WrapKey( hp, k ) @ #t0)
             ∧
              (((#t0 = #t3) ∨ (#t0 < #t3))) ∧
              (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ #t0 < #t1)))  ∥
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (#t1 < #t3) ∧ (#t0 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3)) )
      case case_1
      solve( (#t1.1 = #t2.1)  ∥ (#t2.1 < #t1.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t1.1 = #t2.1)  ∥ (#t2.1 < #t1.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_4
      solve( (#t1.1 = #t2.1)  ∥ (#t2.1 < #t1.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_3
    solve( ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ #t1 < #t3) ∧
            (∃ hp #t0.
              (WrapKey( hp, k ) @ #t0)
             ∧
              (((#t0 = #t3) ∨ (#t0 < #t3))) ∧
              (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ #t0 < #t1)))  ∥
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (#t1 < #t3) ∧ (#t0 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3)) )
      case case_1
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_0( '0', ~n.1, ~n ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, ~n ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, ~n ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t2) ∧ (#t0.1 < #t2)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_0( '0', ~n.1, ~n ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, ~n ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, ~n ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_0( '0', ~n.1, ~n ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, ~n ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, ~n ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((∃ h1 #t1. (NewKey( h1, k.1 ) @ #t1) ∧ #t1 < #t0) ∧
                  (∃ hp #t0.1.
                    (WrapKey( hp, k.1 ) @ #t0.1)
                   ∧
                    (((#t0.1 = #t0) ∨ (#t0.1 < #t0))) ∧
                    (∀ hpp #t1. (Unwrapped( hpp, k.1 ) @ #t1) ⇒ #t0.1 < #t1)))  ∥
                 (∃ h k2 #t1 #t0.1.
                   (NewKey( h, k2 ) @ #t0.1) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (#t1 < #t0) ∧ (#t0.1 < #t0))  ∥
                 (∃ #t0.1 #t1 h1 h2 k.
                   (WrapKey( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0.1 < #t0) ∧ (#t1 < #t0))  ∥
                 (∃ #t0.1 #t1 h1 h2 k.
                   (Unwrapped( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0.1 < #t0) ∧ (#t1 < #t0)) )
            case case_1
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, ~n ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, ~n ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.1) ∧ (#t0.2 < #t1.1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.1) ∧ (#t0.2 < #t1.1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, ~n ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, ~n ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.2) ∧ (#t0.2 < #t1.2)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.2) ∧ (#t0.2 < #t1.2)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_4
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, ~n ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, ~n ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((∃ h1 #t1. (NewKey( h1, k.5 ) @ #t1) ∧ #t1 < #t0.1) ∧
                      (∃ hp #t0.2.
                        (WrapKey( hp, k.5 ) @ #t0.2)
                       ∧
                        (((#t0.2 = #t0.1) ∨ (#t0.2 < #t0.1))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, k.5 ) @ #t1) ⇒ #t0.2 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.2.
                       (NewKey( h, k2 ) @ #t0.2) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1)) )
                case case_1
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                solve( (#t0.3 = #t1)  ∥ (#t1 < #t0.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              solve( ((∃ h1 #t1. (NewKey( h1, k.5 ) @ #t1) ∧ #t1 < #t0.1) ∧
                      (∃ hp #t0.2.
                        (WrapKey( hp, k.5 ) @ #t0.2)
                       ∧
                        (((#t0.2 = #t0.1) ∨ (#t0.2 < #t0.1))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, k.5 ) @ #t1) ⇒ #t0.2 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.2.
                       (NewKey( h, k2 ) @ #t0.2) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1)) )
                case case_1
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.4)  ∥ (#t0.4 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.4)  ∥ (#t0.4 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_4
                solve( (#t0.3 = #t1)  ∥ (#t1 < #t0.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.3)  ∥ (#t0.3 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_4
    solve( ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ #t1 < #t3) ∧
            (∃ hp #t0.
              (WrapKey( hp, k ) @ #t0)
             ∧
              (((#t0 = #t3) ∨ (#t0 < #t3))) ∧
              (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ #t0 < #t1)))  ∥
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (#t1 < #t3) ∧ (#t0 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3)) )
      case case_1
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_1( '1', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t2) ∧ (#t0.1 < #t2)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_1( '1', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_1( '1', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((∃ h1 #t1. (NewKey( h1, k.1 ) @ #t1) ∧ #t1 < #t0) ∧
                  (∃ hp #t0.1.
                    (WrapKey( hp, k.1 ) @ #t0.1)
                   ∧
                    (((#t0.1 = #t0) ∨ (#t0.1 < #t0))) ∧
                    (∀ hpp #t1. (Unwrapped( hpp, k.1 ) @ #t1) ⇒ #t0.1 < #t1)))  ∥
                 (∃ h k2 #t1 #t0.1.
                   (NewKey( h, k2 ) @ #t0.1) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (#t1 < #t0) ∧ (#t0.1 < #t0))  ∥
                 (∃ #t0.1 #t1 h1 h2 k.
                   (WrapKey( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0.1 < #t0) ∧ (#t1 < #t0))  ∥
                 (∃ #t0.1 #t1 h1 h2 k.
                   (Unwrapped( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0.1 < #t0) ∧ (#t1 < #t0)) )
            case case_1
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.1) ∧ (#t0.2 < #t1.1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.1) ∧ (#t0.2 < #t1.1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.2) ∧ (#t0.2 < #t1.2)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.2) ∧ (#t0.2 < #t1.2)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_4
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((∃ h1 #t1. (NewKey( h1, k.5 ) @ #t1) ∧ #t1 < #t0.1) ∧
                      (∃ hp #t0.2.
                        (WrapKey( hp, k.5 ) @ #t0.2)
                       ∧
                        (((#t0.2 = #t0.1) ∨ (#t0.2 < #t0.1))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, k.5 ) @ #t1) ⇒ #t0.2 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.2.
                       (NewKey( h, k2 ) @ #t0.2) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1)) )
                case case_1
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                solve( (#t0.3 = #t1)  ∥ (#t1 < #t0.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              solve( ((∃ h1 #t1. (NewKey( h1, k.5 ) @ #t1) ∧ #t1 < #t0.1) ∧
                      (∃ hp #t0.2.
                        (WrapKey( hp, k.5 ) @ #t0.2)
                       ∧
                        (((#t0.2 = #t0.1) ∨ (#t0.2 < #t0.1))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, k.5 ) @ #t1) ⇒ #t0.2 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.2.
                       (NewKey( h, k2 ) @ #t0.2) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1)) )
                case case_1
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.4)  ∥ (#t0.4 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.4)  ∥ (#t0.4 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_4
                solve( (#t0.3 = #t1)  ∥ (#t1 < #t0.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.3)  ∥ (#t0.3 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_5
    solve( ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ #t1 < #t3) ∧
            (∃ hp #t0.
              (WrapKey( hp, k ) @ #t0)
             ∧
              (((#t0 = #t3) ∨ (#t0 < #t3))) ∧
              (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ #t0 < #t1)))  ∥
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (#t1 < #t3) ∧ (#t0 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3)) )
      case case_1
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_2( '2', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t2) ∧ (#t0.1 < #t2)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_2( '2', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_2( '2', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((∃ h1 #t1. (NewKey( h1, k.1 ) @ #t1) ∧ #t1 < #t0) ∧
                  (∃ hp #t0.1.
                    (WrapKey( hp, k.1 ) @ #t0.1)
                   ∧
                    (((#t0.1 = #t0) ∨ (#t0.1 < #t0))) ∧
                    (∀ hpp #t1. (Unwrapped( hpp, k.1 ) @ #t1) ⇒ #t0.1 < #t1)))  ∥
                 (∃ h k2 #t1 #t0.1.
                   (NewKey( h, k2 ) @ #t0.1) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (#t1 < #t0) ∧ (#t0.1 < #t0))  ∥
                 (∃ #t0.1 #t1 h1 h2 k.
                   (WrapKey( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0.1 < #t0) ∧ (#t1 < #t0))  ∥
                 (∃ #t0.1 #t1 h1 h2 k.
                   (Unwrapped( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0.1 < #t0) ∧ (#t1 < #t0)) )
            case case_1
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.1) ∧ (#t0.2 < #t1.1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.1) ∧ (#t0.2 < #t1.1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.2) ∧ (#t0.2 < #t1.2)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.2) ∧ (#t0.2 < #t1.2)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_4
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((∃ h1 #t1. (NewKey( h1, k.5 ) @ #t1) ∧ #t1 < #t0.1) ∧
                      (∃ hp #t0.2.
                        (WrapKey( hp, k.5 ) @ #t0.2)
                       ∧
                        (((#t0.2 = #t0.1) ∨ (#t0.2 < #t0.1))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, k.5 ) @ #t1) ⇒ #t0.2 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.2.
                       (NewKey( h, k2 ) @ #t0.2) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1)) )
                case case_1
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                solve( (#t0.3 = #t1)  ∥ (#t1 < #t0.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              solve( ((∃ h1 #t1. (NewKey( h1, k.5 ) @ #t1) ∧ #t1 < #t0.1) ∧
                      (∃ hp #t0.2.
                        (WrapKey( hp, k.5 ) @ #t0.2)
                       ∧
                        (((#t0.2 = #t0.1) ∨ (#t0.2 < #t0.1))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, k.5 ) @ #t1) ⇒ #t0.2 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.2.
                       (NewKey( h, k2 ) @ #t0.2) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1)) )
                case case_1
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.4)  ∥ (#t0.4 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.4)  ∥ (#t0.4 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_4
                solve( (#t0.3 = #t1)  ∥ (#t1 < #t0.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.3)  ∥ (#t0.3 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_6
    solve( ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ #t1 < #t3) ∧
            (∃ hp #t0.
              (WrapKey( hp, k ) @ #t0)
             ∧
              (((#t0 = #t3) ∨ (#t0 < #t3))) ∧
              (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ #t0 < #t1)))  ∥
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (#t1 < #t3) ∧ (#t0 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3)) )
      case case_1
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_3( '3', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t2) ∧ (#t0.1 < #t2)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_3( '3', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_3( '3', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((∃ h1 #t1. (NewKey( h1, k.1 ) @ #t1) ∧ #t1 < #t0) ∧
                  (∃ hp #t0.1.
                    (WrapKey( hp, k.1 ) @ #t0.1)
                   ∧
                    (((#t0.1 = #t0) ∨ (#t0.1 < #t0))) ∧
                    (∀ hpp #t1. (Unwrapped( hpp, k.1 ) @ #t1) ⇒ #t0.1 < #t1)))  ∥
                 (∃ h k2 #t1 #t0.1.
                   (NewKey( h, k2 ) @ #t0.1) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (#t1 < #t0) ∧ (#t0.1 < #t0))  ∥
                 (∃ #t0.1 #t1 h1 h2 k.
                   (WrapKey( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0.1 < #t0) ∧ (#t1 < #t0))  ∥
                 (∃ #t0.1 #t1 h1 h2 k.
                   (Unwrapped( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0.1 < #t0) ∧ (#t1 < #t0)) )
            case case_1
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.1) ∧ (#t0.2 < #t1.1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.1) ∧ (#t0.2 < #t1.1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.2) ∧ (#t0.2 < #t1.2)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.2) ∧ (#t0.2 < #t1.2)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_4
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((∃ h1 #t1. (NewKey( h1, k.5 ) @ #t1) ∧ #t1 < #t0.1) ∧
                      (∃ hp #t0.2.
                        (WrapKey( hp, k.5 ) @ #t0.2)
                       ∧
                        (((#t0.2 = #t0.1) ∨ (#t0.2 < #t0.1))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, k.5 ) @ #t1) ⇒ #t0.2 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.2.
                       (NewKey( h, k2 ) @ #t0.2) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1)) )
                case case_1
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                solve( (#t0.3 = #t1)  ∥ (#t1 < #t0.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              solve( ((∃ h1 #t1. (NewKey( h1, k.5 ) @ #t1) ∧ #t1 < #t0.1) ∧
                      (∃ hp #t0.2.
                        (WrapKey( hp, k.5 ) @ #t0.2)
                       ∧
                        (((#t0.2 = #t0.1) ∨ (#t0.2 < #t0.1))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, k.5 ) @ #t1) ⇒ #t0.2 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.2.
                       (NewKey( h, k2 ) @ #t0.2) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1)) )
                case case_1
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.4)  ∥ (#t0.4 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.4)  ∥ (#t0.4 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_4
                solve( (#t0.3 = #t1)  ∥ (#t1 < #t0.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.3)  ∥ (#t0.3 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_7
    solve( ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ #t1 < #t3) ∧
            (∃ hp #t0.
              (WrapKey( hp, k ) @ #t0)
             ∧
              (((#t0 = #t3) ∨ (#t0 < #t3))) ∧
              (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ #t0 < #t1)))  ∥
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (#t1 < #t3) ∧ (#t0 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3)) )
      case case_1
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_4( '4', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t2) ∧ (#t0.1 < #t2)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_4( '4', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_4( '4', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((∃ h1 #t1. (NewKey( h1, k.1 ) @ #t1) ∧ #t1 < #t0) ∧
                  (∃ hp #t0.1.
                    (WrapKey( hp, k.1 ) @ #t0.1)
                   ∧
                    (((#t0.1 = #t0) ∨ (#t0.1 < #t0))) ∧
                    (∀ hpp #t1. (Unwrapped( hpp, k.1 ) @ #t1) ⇒ #t0.1 < #t1)))  ∥
                 (∃ h k2 #t1 #t0.1.
                   (NewKey( h, k2 ) @ #t0.1) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (#t1 < #t0) ∧ (#t0.1 < #t0))  ∥
                 (∃ #t0.1 #t1 h1 h2 k.
                   (WrapKey( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0.1 < #t0) ∧ (#t1 < #t0))  ∥
                 (∃ #t0.1 #t1 h1 h2 k.
                   (Unwrapped( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0.1 < #t0) ∧ (#t1 < #t0)) )
            case case_1
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.1) ∧ (#t0.2 < #t1.1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.1) ∧ (#t0.2 < #t1.1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.2) ∧ (#t0.2 < #t1.2)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.2) ∧ (#t0.2 < #t1.2)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_4
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((∃ h1 #t1. (NewKey( h1, k.5 ) @ #t1) ∧ #t1 < #t0.1) ∧
                      (∃ hp #t0.2.
                        (WrapKey( hp, k.5 ) @ #t0.2)
                       ∧
                        (((#t0.2 = #t0.1) ∨ (#t0.2 < #t0.1))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, k.5 ) @ #t1) ⇒ #t0.2 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.2.
                       (NewKey( h, k2 ) @ #t0.2) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1)) )
                case case_1
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                solve( (#t0.3 = #t1)  ∥ (#t1 < #t0.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              solve( ((∃ h1 #t1. (NewKey( h1, k.5 ) @ #t1) ∧ #t1 < #t0.1) ∧
                      (∃ hp #t0.2.
                        (WrapKey( hp, k.5 ) @ #t0.2)
                       ∧
                        (((#t0.2 = #t0.1) ∨ (#t0.2 < #t0.1))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, k.5 ) @ #t1) ⇒ #t0.2 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.2.
                       (NewKey( h, k2 ) @ #t0.2) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1)) )
                case case_1
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.4)  ∥ (#t0.4 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.4)  ∥ (#t0.4 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_4
                solve( (#t0.3 = #t1)  ∥ (#t1 < #t0.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.3)  ∥ (#t0.3 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_8
    solve( ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ #t1 < #t3) ∧
            (∃ hp #t0.
              (WrapKey( hp, k ) @ #t0)
             ∧
              (((#t0 = #t3) ∨ (#t0 < #t3))) ∧
              (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ #t0 < #t1)))  ∥
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (#t1 < #t3) ∧ (#t0 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3)) )
      case case_1
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_5( '5', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t2) ∧ (#t0.1 < #t2)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_5( '5', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_5( '5', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((∃ h1 #t1. (NewKey( h1, k.1 ) @ #t1) ∧ #t1 < #t0) ∧
                  (∃ hp #t0.1.
                    (WrapKey( hp, k.1 ) @ #t0.1)
                   ∧
                    (((#t0.1 = #t0) ∨ (#t0.1 < #t0))) ∧
                    (∀ hpp #t1. (Unwrapped( hpp, k.1 ) @ #t1) ⇒ #t0.1 < #t1)))  ∥
                 (∃ h k2 #t1 #t0.1.
                   (NewKey( h, k2 ) @ #t0.1) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (#t1 < #t0) ∧ (#t0.1 < #t0))  ∥
                 (∃ #t0.1 #t1 h1 h2 k.
                   (WrapKey( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0.1 < #t0) ∧ (#t1 < #t0))  ∥
                 (∃ #t0.1 #t1 h1 h2 k.
                   (Unwrapped( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0.1 < #t0) ∧ (#t1 < #t0)) )
            case case_1
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.1) ∧ (#t0.2 < #t1.1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.1) ∧ (#t0.2 < #t1.1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.2) ∧ (#t0.2 < #t1.2)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.2) ∧ (#t0.2 < #t1.2)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_4
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((∃ h1 #t1. (NewKey( h1, k.5 ) @ #t1) ∧ #t1 < #t0.1) ∧
                      (∃ hp #t0.2.
                        (WrapKey( hp, k.5 ) @ #t0.2)
                       ∧
                        (((#t0.2 = #t0.1) ∨ (#t0.2 < #t0.1))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, k.5 ) @ #t1) ⇒ #t0.2 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.2.
                       (NewKey( h, k2 ) @ #t0.2) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1)) )
                case case_1
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                solve( (#t0.3 = #t1)  ∥ (#t1 < #t0.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              solve( ((∃ h1 #t1. (NewKey( h1, k.5 ) @ #t1) ∧ #t1 < #t0.1) ∧
                      (∃ hp #t0.2.
                        (WrapKey( hp, k.5 ) @ #t0.2)
                       ∧
                        (((#t0.2 = #t0.1) ∨ (#t0.2 < #t0.1))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, k.5 ) @ #t1) ⇒ #t0.2 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.2.
                       (NewKey( h, k2 ) @ #t0.2) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1)) )
                case case_1
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.4)  ∥ (#t0.4 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.4)  ∥ (#t0.4 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_4
                solve( (#t0.3 = #t1)  ∥ (#t1 < #t0.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.3)  ∥ (#t0.3 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_9
    solve( ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ #t1 < #t3) ∧
            (∃ hp #t0.
              (WrapKey( hp, k ) @ #t0)
             ∧
              (((#t0 = #t3) ∨ (#t0 < #t3))) ∧
              (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ #t0 < #t1)))  ∥
           (∃ h k2 #t1 #t0.
             (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
            ∧
             (#t1 < #t3) ∧ (#t0 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3))  ∥
           (∃ #t0 #t1 h1 h2 k.
             (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
            ∧
             (#t0 < #t3) ∧ (#t1 < #t3)) )
      case case_1
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_6( '6', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t2) ∧ (#t0.1 < #t2)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_6( '6', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                 ((#t1.2 < #t1.1) ∧ (#t0.1 < #t1.1)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_4
      solve( (#t1 = #t3.1)  ∥ (#t3.1 < #t1)  ∥
             (∀ #t2.
               (Unlock_6( '6', ~n, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3.1) ∨
                (#t3.1 < #t2) ∨
                (∃ #t0 pp.
                  (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp lpp #t0.
                  (Lock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp lpp #t0.
                  (Unlock( pp, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        solve( (#t3.1 = #t1)  ∥ (#t1 < #t3.1) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( ((∃ h1 #t1. (NewKey( h1, k.1 ) @ #t1) ∧ #t1 < #t0) ∧
                  (∃ hp #t0.1.
                    (WrapKey( hp, k.1 ) @ #t0.1)
                   ∧
                    (((#t0.1 = #t0) ∨ (#t0.1 < #t0))) ∧
                    (∀ hpp #t1. (Unwrapped( hpp, k.1 ) @ #t1) ⇒ #t0.1 < #t1)))  ∥
                 (∃ h k2 #t1 #t0.1.
                   (NewKey( h, k2 ) @ #t0.1) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (#t1 < #t0) ∧ (#t0.1 < #t0))  ∥
                 (∃ #t0.1 #t1 h1 h2 k.
                   (WrapKey( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0.1 < #t0) ∧ (#t1 < #t0))  ∥
                 (∃ #t0.1 #t1 h1 h2 k.
                   (Unwrapped( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0.1 < #t0) ∧ (#t1 < #t0)) )
            case case_1
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.1) ∧ (#t0.2 < #t1.1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.1) ∧ (#t0.2 < #t1.1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.2) ∧ (#t0.2 < #t1.2)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( ((#t1.3 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     ((#t1.3 < #t1.2) ∧ (#t0.2 < #t1.2)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_4
            solve( (∃ #t0 pp.
                     (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2.1)))  ∥
                   (∃ pp lpp #t0.
                     (Lock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (¬(#t0 = #t1)) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))))  ∥
                   (∃ pp lpp #t0.
                     (Unlock( pp, lpp, x ) @ #t0)
                    ∧
                     (¬(last(#t0))) ∧
                     (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                     (((#t2.1 = #t0) ∨ (#t0 < #t2.1))) ∧
                     (¬(#t2.1 = #t0))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( ((∃ h1 #t1. (NewKey( h1, k.6 ) @ #t1) ∧ #t1 < #t0.1) ∧
                      (∃ hp #t0.2.
                        (WrapKey( hp, k.6 ) @ #t0.2)
                       ∧
                        (((#t0.2 = #t0.1) ∨ (#t0.2 < #t0.1))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, k.6 ) @ #t1) ⇒ #t0.2 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.2.
                       (NewKey( h, k2 ) @ #t0.2) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1)) )
                case case_1
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                solve( (#t0.3 = #t1)  ∥ (#t1 < #t0.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              solve( ((∃ h1 #t1. (NewKey( h1, k.6 ) @ #t1) ∧ #t1 < #t0.1) ∧
                      (∃ hp #t0.2.
                        (WrapKey( hp, k.6 ) @ #t0.2)
                       ∧
                        (((#t0.2 = #t0.1) ∨ (#t0.2 < #t0.1))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, k.6 ) @ #t1) ⇒ #t0.2 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.2.
                       (NewKey( h, k2 ) @ #t0.2) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #t0.1) ∧ (#t0.2 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1))  ∥
                     (∃ #t0.2 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0.2) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0.2 < #t0.1) ∧ (#t1 < #t0.1)) )
                case case_1
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.4)  ∥ (#t0.4 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( (#t0.4 = #t1)  ∥ (#t1 < #t0.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.4)  ∥ (#t0.4 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_4
                solve( (#t0.3 = #t1)  ∥ (#t1 < #t0.3) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( (#t2.1 = #t0.3)  ∥ (#t0.3 < #t2.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cannot_obtain_key_ind [reuse, use_induction]:
  all-traces "¬(∃ #i #j h k. (NewKey( h, k ) @ #i) ∧ (!KU( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j h k. (NewKey( h, k ) @ #i) ∧ (!KU( k ) @ #j)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ #i #j h k.
           (NewKey( h, k ) @ #i) ∧ (!KU( k ) @ #j) ⇒ ((last(#j)) ∨ (last(#i))))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t1 yp.
                (Insert( x, yp ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (¬(#t1 = #t2)) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_0( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_1( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_2( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_3( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_4( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_5( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_6( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_6( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3))) )
    case case_1
    solve( (last(#j))  ∥ (last(#i)) )
      case case_1
      solve( State_11111111111( lock, h, k ) ▶₀ #i )
        case increate_0_1111111
        solve( !KU( ~n.2 ) @ #j )
          case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
          by contradiction /* from formulas */
        next
          case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
          solve( ((∃ h1 #t1. (NewKey( h1, k2 ) @ #t1) ∧ #t1 < #t2) ∧
                  (∃ hp #t0.
                    (WrapKey( hp, k2 ) @ #t0)
                   ∧
                    (((#t0 = #t2) ∨ (#t0 < #t2))) ∧
                    (∀ hpp #t1. (Unwrapped( hpp, k2 ) @ #t1) ⇒ #t0 < #t1)))  ∥
                 (∃ h k2 #t1 #t0.
                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (#t1 < #t2) ∧ (#t0 < #t2))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0 < #t2) ∧ (#t1 < #t2))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0 < #t2) ∧ (#t1 < #t2)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          qed
        next
          case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
          by contradiction /* from formulas */
        next
          case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
          by contradiction /* from formulas */
        next
          case eventWrapkeyvkeyv_0_112111111
          solve( Insert( L_h2, <z, 'wrap'> ) @ #t2 )
            case insertLhkeyvwrap_0_111111211111
            solve( State_111111211111( lock, v, L_h2 ) ▶₀ #t2 )
              case eventWrapKeyLhkeyv_0_11111121111
              solve( Insert( L_h1, <z.1, 'wrap'> ) @ #t2.1 )
                case insertLhkeyvwrap_0_111111211111
                solve( State_111111211111( lock, v, L_h1 ) ▶₀ #t2.1 )
                  case eventWrapKeyLhkeyv_0_11111121111
                  solve( ((#vr.9 < #vr.19) ∧
                          (∃ #t2.
                            (Unlock_5( '5', ~n.5, L_h1 ) @ #t2)
                           ∧
                            (#vr.9 < #t2) ∧
                            (#t2 < #vr.19) ∧
                            (∀ #t0 pp. (Unlock( pp, ~n.5, L_h1 ) @ #t0) ⇒ #t0 = #t2) ∧
                            (∀ pp lpp #t0.
                              (Lock( pp, lpp, L_h1 ) @ #t0)
                             ⇒
                              ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                            (∀ pp lpp #t0.
                              (Unlock( pp, lpp, L_h1 ) @ #t0)
                             ⇒
                              ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                         (#vr.19 < #vr.9) )
                    case case_1
                    solve( State_11211111111( L_h1, L_h2.1, v1, v2, ~n.5 ) ▶₀ #t2.2 )
                      case eventWrapkeyvkeyv_0_112111111
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_2
                    solve( State_11111121111111( ~n.4, v, L_h1 ) ▶₀ #t2.2 )
                      case eventWrapHandleLh_0_1111112111111
                      solve( (#t2.4 < #t2.5)  ∥ (#t2.4 = #t2.5) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( Insert( L_h2, <z, 'init'> ) @ #t2.3 )
                          case insertLhkinit_0_111111111111
                          solve( State_111111111111( lock, L_h2, z ) ▶₀ #t2.3 )
                            case eventNewKeyLhk_0_11111111111
                            solve( (#vr.4, 0) ~~> (#j, 0) )
                              case Var_fresh_4_n
                              solve( State_11111111111111( ~n, ~n.1, k ) ▶₀ #t2.4 )
                                case insertLhkinit_0_111111111111
                                solve( Insert( L_h1, <z, 'init'> ) @ #t2.5 )
                                  case insertLhkinit_0_111111111111
                                  solve( State_111111111111( lock, L_h1, z ) ▶₀ #t2.5 )
                                    case eventNewKeyLhk_0_11111111111
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case insertLhmwrap_0_121111111
                solve( State_121111111( L_h1, k, z.1, v, L_h, lock ) ▶₀ #t2.1 )
                  case eventUnwrappedLhm_0_12111111
                  solve( ((∃ h1 #t1. (NewKey( h1, z.1 ) @ #t1) ∧ #t1 < #vr.16) ∧
                          (∃ hp #t0.
                            (WrapKey( hp, z.1 ) @ #t0)
                           ∧
                            (((#t0 = #vr.16) ∨ (#t0 < #vr.16))) ∧
                            (∀ hpp #t1. (Unwrapped( hpp, z.1 ) @ #t1) ⇒ #t0 < #t1)))  ∥
                         (∃ h k2 #t1 #t0.
                           (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #vr.16) ∧ (#t0 < #vr.16))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                          ∧
                           (#t0 < #vr.16) ∧ (#t1 < #vr.16))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                          ∧
                           (#t0 < #vr.16) ∧ (#t1 < #vr.16)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case insertLhmwrap_0_121111111
            solve( State_121111111( L_h2, k, z, v, L_h, lock ) ▶₀ #t2 )
              case eventUnwrappedLhm_0_12111111
              solve( ((∃ h1 #t1. (NewKey( h1, z ) @ #t1) ∧ #t1 < #vr.11) ∧
                      (∃ hp #t0.
                        (WrapKey( hp, z ) @ #t0)
                       ∧
                        (((#t0 = #vr.11) ∨ (#t0 < #vr.11))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, z ) @ #t1) ⇒ #t0 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.
                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #vr.11) ∧ (#t0 < #vr.11))  ∥
                     (∃ #t0 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0 < #vr.11) ∧ (#t1 < #vr.11))  ∥
                     (∃ #t0 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0 < #vr.11) ∧ (#t1 < #vr.11)) )
                case case_1
                solve( State_11111111111( lock, h1, z ) ▶₀ #t1 )
                  case increate_0_1111111
                  solve( (#vr.4, 0) ~~> (#j, 0) )
                    case Var_fresh_3_n
                    solve( State_11111121111( lock, <~n.2, x>, hp ) ▶₀ #t0 )
                      case ifattCvinit_0_1111112111
                      solve( Insert( L_h1, <z, 'wrap'> ) @ #t2.1 )
                        case insertLhkeyvwrap_0_111111211111
                        solve( State_111111211111( lock, v, L_h1 ) ▶₀ #t2.1 )
                          case eventWrapKeyLhkeyv_0_11111121111
                          solve( ((#vr.9 < #vr.24) ∧
                                  (∃ #t2.
                                    (Unlock_5( '5', ~n.7, L_h1 ) @ #t2)
                                   ∧
                                    (#vr.9 < #t2) ∧
                                    (#t2 < #vr.24) ∧
                                    (∀ #t0 pp. (Unlock( pp, ~n.7, L_h1 ) @ #t0) ⇒ #t0 = #t2) ∧
                                    (∀ pp lpp #t0.
                                      (Lock( pp, lpp, L_h1 ) @ #t0)
                                     ⇒
                                      ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                                    (∀ pp lpp #t0.
                                      (Unlock( pp, lpp, L_h1 ) @ #t0)
                                     ⇒
                                      ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                 (#vr.24 < #vr.9) )
                            case case_1
                            solve( State_11211111111( L_h1, L_h2, v1, v2, ~n.7 ) ▶₀ #t2.2 )
                              case eventWrapkeyvkeyv_0_112111111
                              by contradiction /* cyclic */
                            qed
                          next
                            case case_2
                            solve( State_11111121111111( ~n.6, v, L_h1 ) ▶₀ #t2.2 )
                              case eventWrapHandleLh_0_1111112111111
                              solve( (#t2.5 < #t2.6)  ∥ (#t2.5 = #t2.6) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                solve( !KU( senc(~n.2, k) ) @ #vk.8 )
                                  case c_senc
                                  by contradiction /* cyclic */
                                next
                                  case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                  by contradiction /* from formulas */
                                next
                                  case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                  solve( ((∃ h1 #t1. (NewKey( h1, k2 ) @ #t1) ∧ #t1 < #t2.3) ∧
                                          (∃ hp #t0.
                                            (WrapKey( hp, k2 ) @ #t0)
                                           ∧
                                            (((#t0 = #t2.3) ∨ (#t0 < #t2.3))) ∧
                                            (∀ hpp #t1. (Unwrapped( hpp, k2 ) @ #t1) ⇒ #t0 < #t1)))  ∥
                                         (∃ h k2 #t1 #t0.
                                           (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                          ∧
                                           (#t1 < #t2.3) ∧ (#t0 < #t2.3))  ∥
                                         (∃ #t0 #t1 h1 h2 k.
                                           (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                          ∧
                                           (#t0 < #t2.3) ∧ (#t1 < #t2.3))  ∥
                                         (∃ #t0 #t1 h1 h2 k.
                                           (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                          ∧
                                           (#t0 < #t2.3) ∧ (#t1 < #t2.3)) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    by contradiction /* from formulas */
                                  next
                                    case case_3
                                    by contradiction /* from formulas */
                                  next
                                    case case_4
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                  by contradiction /* from formulas */
                                next
                                  case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                  by contradiction /* from formulas */
                                next
                                  case eventEncUsingkeyvm_0_11121111
                                  by contradiction /* cyclic */
                                next
                                  case eventWrapkeyvkeyv_0_112111111_case_1
                                  solve( !KU( ~n.4 ) @ #vk.6 )
                                    case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                    by contradiction /* from formulas */
                                  next
                                    case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                    solve( ((∃ h1 #t1. (NewKey( h1, k2 ) @ #t1) ∧ #t1 < #t2.3) ∧
                                            (∃ hp #t0.
                                              (WrapKey( hp, k2 ) @ #t0)
                                             ∧
                                              (((#t0 = #t2.3) ∨ (#t0 < #t2.3))) ∧
                                              (∀ hpp #t1. (Unwrapped( hpp, k2 ) @ #t1) ⇒ #t0 < #t1)))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (#t1 < #t2.3) ∧ (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                            ∧
                                             (#t0 < #t2.3) ∧ (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                            ∧
                                             (#t0 < #t2.3) ∧ (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    next
                                      case case_3
                                      by contradiction /* from formulas */
                                    next
                                      case case_4
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                    by contradiction /* from formulas */
                                  next
                                    case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                    by contradiction /* from formulas */
                                  next
                                    case eventWrapkeyvkeyv_0_112111111
                                    solve( Insert( L_h, <k, 'wrap'> ) @ #t2.3 )
                                      case insertLhkeyvwrap_0_111111211111
                                      solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.3 )
                                        case eventWrapKeyLhkeyv_0_11111121111
                                        solve( ((#vr.15 < #vr.45) ∧
                                                (∃ #t2.
                                                  (Unlock_6( '6', ~n.5, L_h ) @ #t2)
                                                 ∧
                                                  (#vr.15 < #t2) ∧
                                                  (#t2 < #vr.45) ∧
                                                  (∀ #t0 pp. (Unlock( pp, ~n.5, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ pp lpp #t0.
                                                    (Lock( pp, lpp, L_h ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.15) ∨ (#t0 = #vr.15) ∨ (#t2 < #t0))) ∧
                                                  (∀ pp lpp #t0.
                                                    (Unlock( pp, lpp, L_h ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.15) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                               (#vr.45 < #vr.15) )
                                          case case_1
                                          solve( State_12111111111( L_h2.2, k.1, m, v, L_h, ~n.5 ) ▶₀ #t2.4 )
                                            case insertLhmwrap_0_121111111
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case case_2
                                          solve( State_11111121111111( ~n.7, v, L_h ) ▶₀ #t2.4 )
                                            case eventWrapHandleLh_0_1111112111111
                                            solve( (#t2.11 < #t2.12)  ∥ (#t2.11 = #t2.12) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              solve( Insert( hp, <~n.2, 'init'> ) @ #t2.5 )
                                                case insertLhkinit_0_111111111111
                                                solve( State_111111111111( lock, hp, ~n.2 ) ▶₀ #t2.5 )
                                                  case eventNewKeyLhk_0_11111111111
                                                  solve( State_11111111111111( ~n, ~n.1, k.1 ) ▶₀ #t2.6 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( Insert( L_h1, <z, 'init'> ) @ #t2.7 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, L_h1, z ) ▶₀ #t2.7 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case insertLhmwrap_0_121111111
                                      solve( State_121111111( L_h, k.1, k, v, L_h.1, lock ) ▶₀ #t2.3 )
                                        case eventUnwrappedLhm_0_12111111
                                        solve( ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ #t1 < #vr.42) ∧
                                                (∃ hp #t0.
                                                  (WrapKey( hp, k ) @ #t0)
                                                 ∧
                                                  (((#t0 = #vr.42) ∨ (#t0 < #vr.42))) ∧
                                                  (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ #t0 < #t1)))  ∥
                                               (∃ h k2 #t1 #t0.
                                                 (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                ∧
                                                 (#t1 < #vr.42) ∧ (#t0 < #vr.42))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (#t0 < #vr.42) ∧ (#t1 < #vr.42))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (#t0 < #vr.42) ∧ (#t1 < #vr.42)) )
                                          case case_1
                                          solve( State_11111111111( lock, h1, k ) ▶₀ #t1 )
                                            case increate_0_1111111
                                            solve( State_11111121111( lock, <~n.6, x>, hp.1 ) ▶₀ #t0.1 )
                                              case ifattCvinit_0_1111112111
                                              solve( Insert( hp, <~n.2, 'init'> ) @ #t2.4 )
                                                case insertLhkinit_0_111111111111
                                                solve( State_111111111111( lock, hp, ~n.2 ) ▶₀ #t2.4 )
                                                  case eventNewKeyLhk_0_11111111111
                                                  solve( State_11111111111111( ~n, ~n.1, k.1 ) ▶₀ #t2.5 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( Insert( L_h1, <z, 'init'> ) @ #t2.6 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, L_h1, z ) ▶₀ #t2.6 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        next
                                          case case_3
                                          by contradiction /* from formulas */
                                        next
                                          case case_4
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  next
                                    case insertLhmwrap_0_121111111
                                    solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      solve( Insert( L_h, <k, 'wrap'> ) @ #t2.3 )
                                        case insertLhkeyvwrap_0_111111211111
                                        solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.3 )
                                          case eventWrapKeyLhkeyv_0_11111121111
                                          solve( ((#vr.15 < #vr.37) ∧
                                                  (∃ #t2.
                                                    (Unlock_6( '6', ~n.5, L_h ) @ #t2)
                                                   ∧
                                                    (#vr.15 < #t2) ∧
                                                    (#t2 < #vr.37) ∧
                                                    (∀ #t0 pp. (Unlock( pp, ~n.5, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                    (∀ pp lpp #t0.
                                                      (Lock( pp, lpp, L_h ) @ #t0)
                                                     ⇒
                                                      ((#t0 < #vr.15) ∨ (#t0 = #vr.15) ∨ (#t2 < #t0))) ∧
                                                    (∀ pp lpp #t0.
                                                      (Unlock( pp, lpp, L_h ) @ #t0)
                                                     ⇒
                                                      ((#t0 < #vr.15) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                 (#vr.37 < #vr.15) )
                                            case case_1
                                            solve( State_12111111111( L_h2.1, k.1, m, v, L_h, ~n.5
                                                   ) ▶₀ #t2.4 )
                                              case insertLhmwrap_0_121111111
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case case_2
                                            solve( State_11111121111111( ~n.7, v, L_h ) ▶₀ #t2.4 )
                                              case eventWrapHandleLh_0_1111112111111
                                              solve( (#t2.9 < #t2.10)  ∥ (#t2.9 = #t2.10) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( Insert( hp, <~n.2, 'init'> ) @ #t2.5 )
                                                  case insertLhkinit_0_111111111111
                                                  solve( State_111111111111( lock, hp, ~n.2 ) ▶₀ #t2.5 )
                                                    case eventNewKeyLhk_0_11111111111
                                                    solve( State_11111111111111( ~n, ~n.1, k.1 ) ▶₀ #t2.6 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( Insert( L_h1, <z, 'init'> ) @ #t2.7 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( State_111111111111( lock, L_h1, z ) ▶₀ #t2.7 )
                                                          case eventNewKeyLhk_0_11111111111
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case insertLhmwrap_0_121111111
                                        solve( State_121111111( L_h, k.1, k, v, L_h.1, lock ) ▶₀ #t2.3 )
                                          case eventUnwrappedLhm_0_12111111
                                          solve( ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ #t1 < #vr.34) ∧
                                                  (∃ hp #t0.
                                                    (WrapKey( hp, k ) @ #t0)
                                                   ∧
                                                    (((#t0 = #vr.34) ∨ (#t0 < #vr.34))) ∧
                                                    (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ #t0 < #t1)))  ∥
                                                 (∃ h k2 #t1 #t0.
                                                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                  ∧
                                                   (#t1 < #vr.34) ∧ (#t0 < #vr.34))  ∥
                                                 (∃ #t0 #t1 h1 h2 k.
                                                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                  ∧
                                                   (#t0 < #vr.34) ∧ (#t1 < #vr.34))  ∥
                                                 (∃ #t0 #t1 h1 h2 k.
                                                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                  ∧
                                                   (#t0 < #vr.34) ∧ (#t1 < #vr.34)) )
                                            case case_1
                                            solve( State_11111111111( lock, h1, k ) ▶₀ #t1 )
                                              case increate_0_1111111
                                              solve( State_11111121111( lock, <~n.6, x>, hp.1 ) ▶₀ #t0.1 )
                                                case ifattCvinit_0_1111112111
                                                solve( Insert( hp, <~n.2, 'init'> ) @ #t2.4 )
                                                  case insertLhkinit_0_111111111111
                                                  solve( State_111111111111( lock, hp, ~n.2 ) ▶₀ #t2.4 )
                                                    case eventNewKeyLhk_0_11111111111
                                                    solve( State_11111111111111( ~n, ~n.1, k.1 ) ▶₀ #t2.5 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( Insert( L_h1, <z, 'init'> ) @ #t2.6 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( State_111111111111( lock, L_h1, z ) ▶₀ #t2.6 )
                                                          case eventNewKeyLhk_0_11111111111
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            by contradiction /* from formulas */
                                          next
                                            case case_3
                                            by contradiction /* from formulas */
                                          next
                                            case case_4
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case eventWrapkeyvkeyv_0_112111111_case_2
                                  solve( !KU( ~n.4 ) @ #vk.6 )
                                    case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
                                    by contradiction /* from formulas */
                                  next
                                    case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
                                    solve( ((∃ h1 #t1. (NewKey( h1, k2 ) @ #t1) ∧ #t1 < #t2.3) ∧
                                            (∃ hp #t0.
                                              (WrapKey( hp, k2 ) @ #t0)
                                             ∧
                                              (((#t0 = #t2.3) ∨ (#t0 < #t2.3))) ∧
                                              (∀ hpp #t1. (Unwrapped( hpp, k2 ) @ #t1) ⇒ #t0 < #t1)))  ∥
                                           (∃ h k2 #t1 #t0.
                                             (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                            ∧
                                             (#t1 < #t2.3) ∧ (#t0 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                            ∧
                                             (#t0 < #t2.3) ∧ (#t1 < #t2.3))  ∥
                                           (∃ #t0 #t1 h1 h2 k.
                                             (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                            ∧
                                             (#t0 < #t2.3) ∧ (#t1 < #t2.3)) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    next
                                      case case_3
                                      by contradiction /* from formulas */
                                    next
                                      case case_4
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
                                    by contradiction /* from formulas */
                                  next
                                    case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
                                    by contradiction /* from formulas */
                                  next
                                    case eventWrapkeyvkeyv_0_112111111
                                    solve( Insert( L_h, <k, 'wrap'> ) @ #t2.3 )
                                      case insertLhkeyvwrap_0_111111211111
                                      solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.3 )
                                        case eventWrapKeyLhkeyv_0_11111121111
                                        solve( ((#vr.15 < #vr.46) ∧
                                                (∃ #t2.
                                                  (Unlock_6( '6', ~n.5, L_h ) @ #t2)
                                                 ∧
                                                  (#vr.15 < #t2) ∧
                                                  (#t2 < #vr.46) ∧
                                                  (∀ #t0 pp. (Unlock( pp, ~n.5, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                  (∀ pp lpp #t0.
                                                    (Lock( pp, lpp, L_h ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.15) ∨ (#t0 = #vr.15) ∨ (#t2 < #t0))) ∧
                                                  (∀ pp lpp #t0.
                                                    (Unlock( pp, lpp, L_h ) @ #t0)
                                                   ⇒
                                                    ((#t0 < #vr.15) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                               (#vr.46 < #vr.15) )
                                          case case_1
                                          solve( State_12111111111( L_h2.2, k.1, m, v, L_h, ~n.5 ) ▶₀ #t2.4 )
                                            case insertLhmwrap_0_121111111
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case case_2
                                          solve( State_11111121111111( ~n.7, v, L_h ) ▶₀ #t2.4 )
                                            case eventWrapHandleLh_0_1111112111111
                                            solve( (#t2.11 < #t2.12)  ∥ (#t2.11 = #t2.12) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            next
                                              case case_2
                                              solve( Insert( hp, <~n.2, 'init'> ) @ #t2.5 )
                                                case insertLhkinit_0_111111111111
                                                solve( State_111111111111( lock, hp, ~n.2 ) ▶₀ #t2.5 )
                                                  case eventNewKeyLhk_0_11111111111
                                                  solve( State_11111111111111( ~n, ~n.1, k.1 ) ▶₀ #t2.6 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( Insert( L_h1, <z, 'init'> ) @ #t2.7 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, L_h1, z ) ▶₀ #t2.7 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case insertLhmwrap_0_121111111
                                      solve( State_121111111( L_h, k.1, k, v, L_h.1, lock ) ▶₀ #t2.3 )
                                        case eventUnwrappedLhm_0_12111111
                                        solve( ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ #t1 < #vr.43) ∧
                                                (∃ hp #t0.
                                                  (WrapKey( hp, k ) @ #t0)
                                                 ∧
                                                  (((#t0 = #vr.43) ∨ (#t0 < #vr.43))) ∧
                                                  (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ #t0 < #t1)))  ∥
                                               (∃ h k2 #t1 #t0.
                                                 (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                ∧
                                                 (#t1 < #vr.43) ∧ (#t0 < #vr.43))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (#t0 < #vr.43) ∧ (#t1 < #vr.43))  ∥
                                               (∃ #t0 #t1 h1 h2 k.
                                                 (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                ∧
                                                 (#t0 < #vr.43) ∧ (#t1 < #vr.43)) )
                                          case case_1
                                          solve( State_11111111111( lock, h1, k ) ▶₀ #t1 )
                                            case increate_0_1111111
                                            solve( State_11111121111( lock, <~n.6, x>, hp.1 ) ▶₀ #t0.1 )
                                              case ifattCvinit_0_1111112111
                                              solve( Insert( hp, <~n.2, 'init'> ) @ #t2.4 )
                                                case insertLhkinit_0_111111111111
                                                solve( State_111111111111( lock, hp, ~n.2 ) ▶₀ #t2.4 )
                                                  case eventNewKeyLhk_0_11111111111
                                                  solve( State_11111111111111( ~n, ~n.1, k.1 ) ▶₀ #t2.5 )
                                                    case insertLhkinit_0_111111111111
                                                    solve( Insert( L_h1, <z, 'init'> ) @ #t2.6 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( State_111111111111( lock, L_h1, z ) ▶₀ #t2.6 )
                                                        case eventNewKeyLhk_0_11111111111
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        next
                                          case case_3
                                          by contradiction /* from formulas */
                                        next
                                          case case_4
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  next
                                    case insertLhmwrap_0_121111111
                                    solve( (#t2.3 < #t2.8)  ∥ (#t2.3 = #t2.8) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      solve( Insert( L_h, <k, 'wrap'> ) @ #t2.3 )
                                        case insertLhkeyvwrap_0_111111211111
                                        solve( State_111111211111( lock, v, L_h ) ▶₀ #t2.3 )
                                          case eventWrapKeyLhkeyv_0_11111121111
                                          solve( ((#vr.15 < #vr.38) ∧
                                                  (∃ #t2.
                                                    (Unlock_6( '6', ~n.5, L_h ) @ #t2)
                                                   ∧
                                                    (#vr.15 < #t2) ∧
                                                    (#t2 < #vr.38) ∧
                                                    (∀ #t0 pp. (Unlock( pp, ~n.5, L_h ) @ #t0) ⇒ #t0 = #t2) ∧
                                                    (∀ pp lpp #t0.
                                                      (Lock( pp, lpp, L_h ) @ #t0)
                                                     ⇒
                                                      ((#t0 < #vr.15) ∨ (#t0 = #vr.15) ∨ (#t2 < #t0))) ∧
                                                    (∀ pp lpp #t0.
                                                      (Unlock( pp, lpp, L_h ) @ #t0)
                                                     ⇒
                                                      ((#t0 < #vr.15) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                 (#vr.38 < #vr.15) )
                                            case case_1
                                            solve( State_12111111111( L_h2.1, k.1, m, v, L_h, ~n.5
                                                   ) ▶₀ #t2.4 )
                                              case insertLhmwrap_0_121111111
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case case_2
                                            solve( State_11111121111111( ~n.7, v, L_h ) ▶₀ #t2.4 )
                                              case eventWrapHandleLh_0_1111112111111
                                              solve( (#t2.9 < #t2.10)  ∥ (#t2.9 = #t2.10) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                solve( Insert( hp, <~n.2, 'init'> ) @ #t2.5 )
                                                  case insertLhkinit_0_111111111111
                                                  solve( State_111111111111( lock, hp, ~n.2 ) ▶₀ #t2.5 )
                                                    case eventNewKeyLhk_0_11111111111
                                                    solve( State_11111111111111( ~n, ~n.1, k.1 ) ▶₀ #t2.6 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( Insert( L_h1, <z, 'init'> ) @ #t2.7 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( State_111111111111( lock, L_h1, z ) ▶₀ #t2.7 )
                                                          case eventNewKeyLhk_0_11111111111
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case insertLhmwrap_0_121111111
                                        solve( State_121111111( L_h, k.1, k, v, L_h.1, lock ) ▶₀ #t2.3 )
                                          case eventUnwrappedLhm_0_12111111
                                          solve( ((∃ h1 #t1. (NewKey( h1, k ) @ #t1) ∧ #t1 < #vr.35) ∧
                                                  (∃ hp #t0.
                                                    (WrapKey( hp, k ) @ #t0)
                                                   ∧
                                                    (((#t0 = #vr.35) ∨ (#t0 < #vr.35))) ∧
                                                    (∀ hpp #t1. (Unwrapped( hpp, k ) @ #t1) ⇒ #t0 < #t1)))  ∥
                                                 (∃ h k2 #t1 #t0.
                                                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                                  ∧
                                                   (#t1 < #vr.35) ∧ (#t0 < #vr.35))  ∥
                                                 (∃ #t0 #t1 h1 h2 k.
                                                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                  ∧
                                                   (#t0 < #vr.35) ∧ (#t1 < #vr.35))  ∥
                                                 (∃ #t0 #t1 h1 h2 k.
                                                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                                  ∧
                                                   (#t0 < #vr.35) ∧ (#t1 < #vr.35)) )
                                            case case_1
                                            solve( State_11111111111( lock, h1, k ) ▶₀ #t1 )
                                              case increate_0_1111111
                                              solve( State_11111121111( lock, <~n.6, x>, hp.1 ) ▶₀ #t0.1 )
                                                case ifattCvinit_0_1111112111
                                                solve( Insert( hp, <~n.2, 'init'> ) @ #t2.4 )
                                                  case insertLhkinit_0_111111111111
                                                  solve( State_111111111111( lock, hp, ~n.2 ) ▶₀ #t2.4 )
                                                    case eventNewKeyLhk_0_11111111111
                                                    solve( State_11111111111111( ~n, ~n.1, k.1 ) ▶₀ #t2.5 )
                                                      case insertLhkinit_0_111111111111
                                                      solve( Insert( L_h1, <z, 'init'> ) @ #t2.6 )
                                                        case insertLhkinit_0_111111111111
                                                        solve( State_111111111111( lock, L_h1, z ) ▶₀ #t2.6 )
                                                          case eventNewKeyLhk_0_11111111111
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_2
                                            by contradiction /* from formulas */
                                          next
                                            case case_3
                                            by contradiction /* from formulas */
                                          next
                                            case case_4
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case insertLhmwrap_0_121111111
                        solve( State_121111111( L_h1, k.1, z, v, L_h.1, lock ) ▶₀ #t2.1 )
                          case eventUnwrappedLhm_0_12111111
                          solve( ((∃ h1 #t1. (NewKey( h1, z ) @ #t1) ∧ #t1 < #vr.21) ∧
                                  (∃ hp #t0.
                                    (WrapKey( hp, z ) @ #t0)
                                   ∧
                                    (((#t0 = #vr.21) ∨ (#t0 < #vr.21))) ∧
                                    (∀ hpp #t1. (Unwrapped( hpp, z ) @ #t1) ⇒ #t0 < #t1)))  ∥
                                 (∃ h k2 #t1 #t0.
                                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                                  ∧
                                   (#t1 < #vr.21) ∧ (#t0 < #vr.21))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (#t0 < #vr.21) ∧ (#t1 < #vr.21))  ∥
                                 (∃ #t0 #t1 h1 h2 k.
                                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                                  ∧
                                   (#t0 < #vr.21) ∧ (#t1 < #vr.21)) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          next
                            case case_4
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                by contradiction /* from formulas */
              next
                case case_4
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( State_11111111111( lock, h, k ) ▶₀ #i )
        case increate_0_1111111
        solve( !KU( ~n.2 ) @ #j )
          case eventDecUsingkeyvsdecckeyv_0_1111211111_case_1
          by contradiction /* from formulas */
        next
          case eventDecUsingkeyvsdecckeyv_0_1111211111_case_2
          solve( ((∃ h1 #t1. (NewKey( h1, k2 ) @ #t1) ∧ #t1 < #t2) ∧
                  (∃ hp #t0.
                    (WrapKey( hp, k2 ) @ #t0)
                   ∧
                    (((#t0 = #t2) ∨ (#t0 < #t2))) ∧
                    (∀ hpp #t1. (Unwrapped( hpp, k2 ) @ #t1) ⇒ #t0 < #t1)))  ∥
                 (∃ h k2 #t1 #t0.
                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (#t1 < #t2) ∧ (#t0 < #t2))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0 < #t2) ∧ (#t1 < #t2))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0 < #t2) ∧ (#t1 < #t2)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            solve( ((#t1.1 < #t0) ∧ (#t0.1 < #t0))  ∥
                   ((#t1.1 < #t1) ∧ (#t0.1 < #t1)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_4
            solve( ((∃ h1 #t1. (NewKey( h1, k.2 ) @ #t1) ∧ #t1 < #t0) ∧
                    (∃ hp #t0.1.
                      (WrapKey( hp, k.2 ) @ #t0.1)
                     ∧
                      (((#t0.1 = #t0) ∨ (#t0.1 < #t0))) ∧
                      (∀ hpp #t1. (Unwrapped( hpp, k.2 ) @ #t1) ⇒ #t0.1 < #t1)))  ∥
                   (∃ h k2 #t1 #t0.1.
                     (NewKey( h, k2 ) @ #t0.1) ∧ (!KU( k2 ) @ #t1)
                    ∧
                     (#t1 < #t0) ∧ (#t0.1 < #t0))  ∥
                   (∃ #t0.1 #t1 h1 h2 k.
                     (WrapKey( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                    ∧
                     (#t0.1 < #t0) ∧ (#t1 < #t0))  ∥
                   (∃ #t0.1 #t1 h1 h2 k.
                     (Unwrapped( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                    ∧
                     (#t0.1 < #t0) ∧ (#t1 < #t0)) )
              case case_1
              solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                     ((#t1.2 < #t1) ∧ (#t0.1 < #t1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                     ((#t1.2 < #t1) ∧ (#t0.1 < #t1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_4
              solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                     ((#t1.2 < #t1) ∧ (#t0.1 < #t1)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case eventDecUsingkeyvsdecckeyv_0_1111211111_case_3
          solve( ((#t1 < #t2) ∧ (#t0 < #t2))  ∥ ((#t1 < #t3) ∧ (#t0 < #t3)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case eventDecUsingkeyvsdecckeyv_0_1111211111_case_4
          solve( ((∃ h1 #t1. (NewKey( h1, k2 ) @ #t1) ∧ #t1 < #t2) ∧
                  (∃ hp #t0.
                    (WrapKey( hp, k2 ) @ #t0)
                   ∧
                    (((#t0 = #t2) ∨ (#t0 < #t2))) ∧
                    (∀ hpp #t1. (Unwrapped( hpp, k2 ) @ #t1) ⇒ #t0 < #t1)))  ∥
                 (∃ h k2 #t1 #t0.
                   (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                  ∧
                   (#t1 < #t2) ∧ (#t0 < #t2))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0 < #t2) ∧ (#t1 < #t2))  ∥
                 (∃ #t0 #t1 h1 h2 k.
                   (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                  ∧
                   (#t0 < #t2) ∧ (#t1 < #t2)) )
            case case_1
            solve( ((#t1.1 < #t2) ∧ (#t0 < #t2))  ∥ ((#t1.1 < #t3) ∧ (#t0 < #t3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            solve( ((#t1.1 < #t2) ∧ (#t0 < #t2))  ∥ ((#t1.1 < #t3) ∧ (#t0 < #t3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_4
            solve( ((#t1.1 < #t2) ∧ (#t0 < #t2))  ∥ ((#t1.1 < #t3) ∧ (#t0 < #t3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case eventWrapkeyvkeyv_0_112111111
          solve( Insert( L_h2, <z, 'wrap'> ) @ #t2 )
            case insertLhkeyvwrap_0_111111211111
            solve( State_111111211111( lock, v, L_h2 ) ▶₀ #t2 )
              case eventWrapKeyLhkeyv_0_11111121111
              solve( Insert( L_h1, <z.1, 'wrap'> ) @ #t2.1 )
                case insertLhkeyvwrap_0_111111211111
                solve( State_111111211111( lock, v, L_h1 ) ▶₀ #t2.1 )
                  case eventWrapKeyLhkeyv_0_11111121111
                  solve( ((#vr.9 < #vr.19) ∧
                          (∃ #t2.
                            (Unlock_5( '5', ~n.5, L_h1 ) @ #t2)
                           ∧
                            (#vr.9 < #t2) ∧
                            (#t2 < #vr.19) ∧
                            (∀ #t0 pp. (Unlock( pp, ~n.5, L_h1 ) @ #t0) ⇒ #t0 = #t2) ∧
                            (∀ pp lpp #t0.
                              (Lock( pp, lpp, L_h1 ) @ #t0)
                             ⇒
                              ((#t0 < #vr.9) ∨ (#t0 = #vr.9) ∨ (#t2 < #t0))) ∧
                            (∀ pp lpp #t0.
                              (Unlock( pp, lpp, L_h1 ) @ #t0)
                             ⇒
                              ((#t0 < #vr.9) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                         (#vr.19 < #vr.9) )
                    case case_1
                    solve( State_11211111111( L_h1, L_h2.1, v1, v2, ~n.5 ) ▶₀ #t2.2 )
                      case eventWrapkeyvkeyv_0_112111111
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_2
                    solve( State_11111121111111( ~n.4, v, L_h1 ) ▶₀ #t2.2 )
                      case eventWrapHandleLh_0_1111112111111
                      solve( (#t2.4 < #t2.5)  ∥ (#t2.4 = #t2.5) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( Insert( L_h2, <z, 'init'> ) @ #t2.3 )
                          case insertLhkinit_0_111111111111
                          solve( State_111111111111( lock, L_h2, z ) ▶₀ #t2.3 )
                            case eventNewKeyLhk_0_11111111111
                            solve( (#vr.4, 0) ~~> (#j, 0) )
                              case Var_fresh_4_n
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case insertLhmwrap_0_121111111
                solve( State_121111111( L_h1, k, z.1, v, L_h, lock ) ▶₀ #t2.1 )
                  case eventUnwrappedLhm_0_12111111
                  solve( ((∃ h1 #t1. (NewKey( h1, z.1 ) @ #t1) ∧ #t1 < #vr.16) ∧
                          (∃ hp #t0.
                            (WrapKey( hp, z.1 ) @ #t0)
                           ∧
                            (((#t0 = #vr.16) ∨ (#t0 < #vr.16))) ∧
                            (∀ hpp #t1. (Unwrapped( hpp, z.1 ) @ #t1) ⇒ #t0 < #t1)))  ∥
                         (∃ h k2 #t1 #t0.
                           (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                          ∧
                           (#t1 < #vr.16) ∧ (#t0 < #vr.16))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                          ∧
                           (#t0 < #vr.16) ∧ (#t1 < #vr.16))  ∥
                         (∃ #t0 #t1 h1 h2 k.
                           (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                          ∧
                           (#t0 < #vr.16) ∧ (#t1 < #vr.16)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( ((#t1.1 < #t0) ∧ (#t0.1 < #t0))  ∥
                           ((#t1.1 < #t1) ∧ (#t0.1 < #t1)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_4
                    solve( ((∃ h1 #t1. (NewKey( h1, k.2 ) @ #t1) ∧ #t1 < #t0) ∧
                            (∃ hp #t0.1.
                              (WrapKey( hp, k.2 ) @ #t0.1)
                             ∧
                              (((#t0.1 = #t0) ∨ (#t0.1 < #t0))) ∧
                              (∀ hpp #t1. (Unwrapped( hpp, k.2 ) @ #t1) ⇒ #t0.1 < #t1)))  ∥
                           (∃ h k2 #t1 #t0.1.
                             (NewKey( h, k2 ) @ #t0.1) ∧ (!KU( k2 ) @ #t1)
                            ∧
                             (#t1 < #t0) ∧ (#t0.1 < #t0))  ∥
                           (∃ #t0.1 #t1 h1 h2 k.
                             (WrapKey( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                            ∧
                             (#t0.1 < #t0) ∧ (#t1 < #t0))  ∥
                           (∃ #t0.1 #t1 h1 h2 k.
                             (Unwrapped( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                            ∧
                             (#t0.1 < #t0) ∧ (#t1 < #t0)) )
                      case case_1
                      solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                             ((#t1.2 < #t1) ∧ (#t0.1 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                             ((#t1.2 < #t1) ∧ (#t0.1 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_4
                      solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                             ((#t1.2 < #t1) ∧ (#t0.1 < #t1)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case insertLhmwrap_0_121111111
            solve( State_121111111( L_h2, k, z, v, L_h, lock ) ▶₀ #t2 )
              case eventUnwrappedLhm_0_12111111
              solve( ((∃ h1 #t1. (NewKey( h1, z ) @ #t1) ∧ #t1 < #vr.11) ∧
                      (∃ hp #t0.
                        (WrapKey( hp, z ) @ #t0)
                       ∧
                        (((#t0 = #vr.11) ∨ (#t0 < #vr.11))) ∧
                        (∀ hpp #t1. (Unwrapped( hpp, z ) @ #t1) ⇒ #t0 < #t1)))  ∥
                     (∃ h k2 #t1 #t0.
                       (NewKey( h, k2 ) @ #t0) ∧ (!KU( k2 ) @ #t1)
                      ∧
                       (#t1 < #vr.11) ∧ (#t0 < #vr.11))  ∥
                     (∃ #t0 #t1 h1 h2 k.
                       (WrapKey( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0 < #vr.11) ∧ (#t1 < #vr.11))  ∥
                     (∃ #t0 #t1 h1 h2 k.
                       (Unwrapped( h2, k ) @ #t0) ∧ (DecKey( h1, k ) @ #t1)
                      ∧
                       (#t0 < #vr.11) ∧ (#t1 < #vr.11)) )
                case case_1
                solve( State_11111111111( lock, h1, z ) ▶₀ #t1 )
                  case increate_0_1111111
                  solve( (#vr.4, 0) ~~> (#j, 0) )
                    case Var_fresh_3_n
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( ((#t1.1 < #t0) ∧ (#t0.1 < #t0))  ∥
                       ((#t1.1 < #t1) ∧ (#t0.1 < #t1)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                solve( ((∃ h1 #t1. (NewKey( h1, k.2 ) @ #t1) ∧ #t1 < #t0) ∧
                        (∃ hp #t0.1.
                          (WrapKey( hp, k.2 ) @ #t0.1)
                         ∧
                          (((#t0.1 = #t0) ∨ (#t0.1 < #t0))) ∧
                          (∀ hpp #t1. (Unwrapped( hpp, k.2 ) @ #t1) ⇒ #t0.1 < #t1)))  ∥
                       (∃ h k2 #t1 #t0.1.
                         (NewKey( h, k2 ) @ #t0.1) ∧ (!KU( k2 ) @ #t1)
                        ∧
                         (#t1 < #t0) ∧ (#t0.1 < #t0))  ∥
                       (∃ #t0.1 #t1 h1 h2 k.
                         (WrapKey( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (#t0.1 < #t0) ∧ (#t1 < #t0))  ∥
                       (∃ #t0.1 #t1 h1 h2 k.
                         (Unwrapped( h2, k ) @ #t0.1) ∧ (DecKey( h1, k ) @ #t1)
                        ∧
                         (#t0.1 < #t0) ∧ (#t1 < #t0)) )
                  case case_1
                  solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                         ((#t1.2 < #t1) ∧ (#t0.1 < #t1)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                         ((#t1.2 < #t1) ∧ (#t0.1 < #t1)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case case_4
                  solve( ((#t1.2 < #t0) ∧ (#t0.1 < #t0))  ∥
                         ((#t1.2 < #t1) ∧ (#t0.1 < #t1)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( (#t1 = #t2)  ∥ (#t2 < #t1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_0( '0', ~n.1, ~n ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, ~n ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, ~n ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n.1, ~n ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, ~n ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, ~n ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_4
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_1( '1', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_5
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_2( '2', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_6
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_3( '3', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_7
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_4( '4', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_8
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_5( '5', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_9
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_6( '6', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed



















rule (modulo E) Init[color=#ffffff, process="!"]:
   [ ] --[ Init( ) ]-> [ !Semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) increate_0_1111111[color=#ffffff,
                                   process="in('create');"]:
   [ State_1111111( ), In( 'create' ), Fr( L_h.1 ), Fr( lock ), Fr( k.1 ) ]
  --[ Lock_0( '0', lock, L_h.1 ), Lock( '0', lock, L_h.1 ) ]->
   [ State_11111111111( lock, L_h.1, k.1 ) ]

  /*
  rule (modulo AC) increate_0_1111111[color=#ffffff,
                                      process="in('create');"]:
     [ State_1111111( ), In( 'create' ), Fr( L_h ), Fr( lock ), Fr( k ) ]
    --[ Lock_0( '0', lock, L_h ), Lock( '0', lock, L_h ) ]->
     [ State_11111111111( lock, L_h, k ) ]
  */

rule (modulo E) eventNewKeyLhk_0_11111111111[color=#ffffff,
                                             process="event NewKey( L_h.1, k.1 );"]:
   [ State_11111111111( lock, L_h.1, k.1 ) ]
  --[ NewKey( L_h.1, k.1 ) ]->
   [ State_111111111111( lock, L_h.1, k.1 ) ]

  /*
  rule (modulo AC) eventNewKeyLhk_0_11111111111[color=#ffffff,
                                                process="event NewKey( L_h.1, k.1 );"]:
     [ State_11111111111( lock, L_h, k ) ]
    --[ NewKey( L_h, k ) ]->
     [ State_111111111111( lock, L_h, k ) ]
  */

rule (modulo E) insertLhkinit_0_111111111111[color=#ffffff,
                                             process="insert L_h.1,<k.1, 'init'>;"]:
   [ State_111111111111( lock, L_h.1, k.1 ) ]
  --[ Insert( L_h.1, <k.1, 'init'> ) ]->
   [ State_11111111111111( lock, L_h.1, k.1 ), Out( L_h.1 ) ]

  /*
  rule (modulo AC) insertLhkinit_0_111111111111[color=#ffffff,
                                                process="insert L_h.1,<k.1, 'init'>;"]:
     [ State_111111111111( lock, L_h, k ) ]
    --[ Insert( L_h, <k, 'init'> ) ]->
     [ State_11111111111111( lock, L_h, k ), Out( L_h ) ]
  */

rule (modulo E) unlockLh_0_11111111111111[color=#ffffff,
                                          process="unlock L_h.1;"]:
   [ State_11111111111111( lock, L_h.1, k.1 ) ]
  --[ Unlock_0( '0', lock, L_h.1 ), Unlock( '0', lock, L_h.1 ) ]->
   [ ]

  /*
  rule (modulo AC) unlockLh_0_11111111111111[color=#ffffff,
                                             process="unlock L_h.1;"]:
     [ State_11111111111111( lock, L_h, k ) ]
    --[ Unlock_0( '0', lock, L_h ), Unlock( '0', lock, L_h ) ]->
     [ ]
  */

rule (modulo E) insetwrapLh_0_1111112[color=#ffffff,
                                      process="in(<'set_wrap', L_h.2>);"]:
   [ State_1111112( ), In( <'set_wrap', L_h.2> ), Fr( lock.1 ) ]
  --[ Lock_1( '1', lock.1, L_h.2 ), Lock( '1', lock.1, L_h.2 ) ]->
   [ State_111111211( lock.1, L_h.2 ) ]

  /*
  rule (modulo AC) insetwrapLh_0_1111112[color=#ffffff,
                                         process="in(<'set_wrap', L_h.2>);"]:
     [ State_1111112( ), In( <'set_wrap', L_h> ), Fr( lock ) ]
    --[ Lock_1( '1', lock, L_h ), Lock( '1', lock, L_h ) ]->
     [ State_111111211( lock, L_h ) ]
  */

rule (modulo E) lookupLhasv_0_111111211[color=#ffffff,
                                        process="lookup L_h.2 as v.1"]:
   [ State_111111211( lock.1, L_h.2 ) ]
  --[ IsIn( L_h.2, v.1 ) ]->
   [ State_1111112111( lock.1, v.1, L_h.2 ) ]

  /*
  rule (modulo AC) lookupLhasv_0_111111211[color=#ffffff,
                                           process="lookup L_h.2 as v.1"]:
     [ State_111111211( lock, L_h ) ]
    --[ IsIn( L_h, v ) ]->
     [ State_1111112111( lock, v, L_h ) ]
  */

rule (modulo E) ifattCvinit_0_1111112111[color=#ffffff,
                                         process="if attC(v.1)='init'"]:
   [ State_1111112111( lock.1, v.1, L_h.2 ) ]
  --[ Pred_Eq( attC(v.1), 'init' ) ]->
   [ State_11111121111( lock.1, v.1, L_h.2 ) ]

  /*
  rule (modulo AC) ifattCvinit_0_1111112111[color=#ffffff,
                                            process="if attC(v.1)='init'"]:
     [ State_1111112111( lock, v, L_h ) ]
    --[ Pred_Eq( z, 'init' ) ]->
     [ State_11111121111( lock, v, L_h ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = attC(v.8)
    
    2. v     = <x.10, z.9>
       z     = z.9
  */

rule (modulo E) eventWrapKeyLhkeyv_0_11111121111[color=#ffffff,
                                                 process="event WrapKey( L_h.2, key(v.1) );"]:
   [ State_11111121111( lock.1, v.1, L_h.2 ) ]
  --[ WrapKey( L_h.2, key(v.1) ) ]->
   [ State_111111211111( lock.1, v.1, L_h.2 ) ]

  /*
  rule (modulo AC) eventWrapKeyLhkeyv_0_11111121111[color=#ffffff,
                                                    process="event WrapKey( L_h.2, key(v.1) );"]:
     [ State_11111121111( lock, v, L_h ) ]
    --[ WrapKey( L_h, z ) ]->
     [ State_111111211111( lock, v, L_h ) ]
    variants (modulo AC)
    1. v     = v.7
       z     = key(v.7)
    
    2. v     = <x.7, x.8>
       z     = x.7
  */

rule (modulo E) insertLhkeyvwrap_0_111111211111[color=#ffffff,
                                                process="insert L_h.2,<key(v.1), 'wrap'>;"]:
   [ State_111111211111( lock.1, v.1, L_h.2 ) ]
  --[ Insert( L_h.2, <key(v.1), 'wrap'> ) ]->
   [ State_1111112111111( lock.1, v.1, L_h.2 ) ]

  /*
  rule (modulo AC) insertLhkeyvwrap_0_111111211111[color=#ffffff,
                                                   process="insert L_h.2,<key(v.1), 'wrap'>;"]:
     [ State_111111211111( lock, v, L_h ) ]
    --[ Insert( L_h, <z, 'wrap'> ) ]->
     [ State_1111112111111( lock, v, L_h ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = key(v.8)
    
    2. v     = <z.9, x.11>
       z     = z.9
  */

rule (modulo E) eventWrapHandleLh_0_1111112111111[color=#ffffff,
                                                  process="event WrapHandle( L_h.2 );"]:
   [ State_1111112111111( lock.1, v.1, L_h.2 ) ]
  --[ WrapHandle( L_h.2 ) ]->
   [ State_11111121111111( lock.1, v.1, L_h.2 ) ]

  /*
  rule (modulo AC) eventWrapHandleLh_0_1111112111111[color=#ffffff,
                                                     process="event WrapHandle( L_h.2 );"]:
     [ State_1111112111111( lock, v, L_h ) ]
    --[ WrapHandle( L_h ) ]->
     [ State_11111121111111( lock, v, L_h ) ]
  */

rule (modulo E) unlockLh_0_11111121111111[color=#ffffff,
                                          process="unlock L_h.2;"]:
   [ State_11111121111111( lock.1, v.1, L_h.2 ) ]
  --[ Unlock_1( '1', lock.1, L_h.2 ), Unlock( '1', lock.1, L_h.2 ) ]->
   [ ]

  /*
  rule (modulo AC) unlockLh_0_11111121111111[color=#ffffff,
                                             process="unlock L_h.2;"]:
     [ State_11111121111111( lock, v, L_h ) ]
    --[ Unlock_1( '1', lock, L_h ), Unlock( '1', lock, L_h ) ]->
     [ ]
  */

rule (modulo E) ifattCvinit_1_1111112111[color=#ffffff,
                                         process="if attC(v.1)='init'"]:
   [ State_1111112111( lock.1, v.1, L_h.2 ) ]
  --[ Pred_Not_Eq( attC(v.1), 'init' ) ]->
   [ ]

  /*
  rule (modulo AC) ifattCvinit_1_1111112111[color=#ffffff,
                                            process="if attC(v.1)='init'"]:
     [ State_1111112111( lock, v, L_h ) ] --[ Pred_Not_Eq( z, 'init' ) ]-> [ ]
    variants (modulo AC)
    1. v     = v.8
       z     = attC(v.8)
    
    2. v     = <x.10, z.9>
       z     = z.9
  */

rule (modulo E) lookupLhasv_1_111111211[color=#ffffff,
                                        process="lookup L_h.2 as v.1"]:
   [ State_111111211( lock.1, L_h.2 ) ] --[ IsNotSet( L_h.2 ) ]-> [ ]

  /*
  rule (modulo AC) lookupLhasv_1_111111211[color=#ffffff,
                                           process="lookup L_h.2 as v.1"]:
     [ State_111111211( lock, L_h ) ] --[ IsNotSet( L_h ) ]-> [ ]
  */

rule (modulo E) insetdecLh_0_111112[color=#ffffff,
                                    process="in(<'set_dec', L_h.3>);"]:
   [ State_111112( ), In( <'set_dec', L_h.3> ), Fr( lock.2 ) ]
  --[ Lock_2( '2', lock.2, L_h.3 ), Lock( '2', lock.2, L_h.3 ) ]->
   [ State_11111211( lock.2, L_h.3 ) ]

  /*
  rule (modulo AC) insetdecLh_0_111112[color=#ffffff,
                                       process="in(<'set_dec', L_h.3>);"]:
     [ State_111112( ), In( <'set_dec', L_h> ), Fr( lock ) ]
    --[ Lock_2( '2', lock, L_h ), Lock( '2', lock, L_h ) ]->
     [ State_11111211( lock, L_h ) ]
  */

rule (modulo E) lookupLhasv_0_11111211[color=#ffffff,
                                       process="lookup L_h.3 as v.2"]:
   [ State_11111211( lock.2, L_h.3 ) ]
  --[ IsIn( L_h.3, v.2 ) ]->
   [ State_111112111( lock.2, v.2, L_h.3 ) ]

  /*
  rule (modulo AC) lookupLhasv_0_11111211[color=#ffffff,
                                          process="lookup L_h.3 as v.2"]:
     [ State_11111211( lock, L_h ) ]
    --[ IsIn( L_h, v ) ]->
     [ State_111112111( lock, v, L_h ) ]
  */

rule (modulo E) ifattCvinit_0_111112111[color=#ffffff,
                                        process="if attC(v.2)='init'"]:
   [ State_111112111( lock.2, v.2, L_h.3 ) ]
  --[ Pred_Eq( attC(v.2), 'init' ) ]->
   [ State_1111121111( lock.2, v.2, L_h.3 ) ]

  /*
  rule (modulo AC) ifattCvinit_0_111112111[color=#ffffff,
                                           process="if attC(v.2)='init'"]:
     [ State_111112111( lock, v, L_h ) ]
    --[ Pred_Eq( z, 'init' ) ]->
     [ State_1111121111( lock, v, L_h ) ]
    variants (modulo AC)
    1. v     = v.9
       z     = attC(v.9)
    
    2. v     = <x.11, z.10>
       z     = z.10
  */

rule (modulo E) eventDecKeyLhkeyv_0_1111121111[color=#ffffff,
                                               process="event DecKey( L_h.3, key(v.2) );"]:
   [ State_1111121111( lock.2, v.2, L_h.3 ) ]
  --[ DecKey( L_h.3, key(v.2) ) ]->
   [ State_11111211111( lock.2, v.2, L_h.3 ) ]

  /*
  rule (modulo AC) eventDecKeyLhkeyv_0_1111121111[color=#ffffff,
                                                  process="event DecKey( L_h.3, key(v.2) );"]:
     [ State_1111121111( lock, v, L_h ) ]
    --[ DecKey( L_h, z ) ]->
     [ State_11111211111( lock, v, L_h ) ]
    variants (modulo AC)
    1. v     = v.8
       z     = key(v.8)
    
    2. v     = <x.8, x.9>
       z     = x.8
  */

rule (modulo E) insertLhkeyvdec_0_11111211111[color=#ffffff,
                                              process="insert L_h.3,<key(v.2), 'dec'>;"]:
   [ State_11111211111( lock.2, v.2, L_h.3 ) ]
  --[ Insert( L_h.3, <key(v.2), 'dec'> ) ]->
   [ State_111112111111( lock.2, v.2, L_h.3 ) ]

  /*
  rule (modulo AC) insertLhkeyvdec_0_11111211111[color=#ffffff,
                                                 process="insert L_h.3,<key(v.2), 'dec'>;"]:
     [ State_11111211111( lock, v, L_h ) ]
    --[ Insert( L_h, <z, 'dec'> ) ]->
     [ State_111112111111( lock, v, L_h ) ]
    variants (modulo AC)
    1. v     = v.9
       z     = key(v.9)
    
    2. v     = <z.10, x.12>
       z     = z.10
  */

rule (modulo E) unlockLh_0_111112111111[color=#ffffff,
                                        process="unlock L_h.3;"]:
   [ State_111112111111( lock.2, v.2, L_h.3 ) ]
  --[ Unlock_2( '2', lock.2, L_h.3 ), Unlock( '2', lock.2, L_h.3 ) ]->
   [ ]

  /*
  rule (modulo AC) unlockLh_0_111112111111[color=#ffffff,
                                           process="unlock L_h.3;"]:
     [ State_111112111111( lock, v, L_h ) ]
    --[ Unlock_2( '2', lock, L_h ), Unlock( '2', lock, L_h ) ]->
     [ ]
  */

rule (modulo E) ifattCvinit_1_111112111[color=#ffffff,
                                        process="if attC(v.2)='init'"]:
   [ State_111112111( lock.2, v.2, L_h.3 ) ]
  --[ Pred_Not_Eq( attC(v.2), 'init' ) ]->
   [ ]

  /*
  rule (modulo AC) ifattCvinit_1_111112111[color=#ffffff,
                                           process="if attC(v.2)='init'"]:
     [ State_111112111( lock, v, L_h ) ] --[ Pred_Not_Eq( z, 'init' ) ]-> [ ]
    variants (modulo AC)
    1. v     = v.9
       z     = attC(v.9)
    
    2. v     = <x.11, z.10>
       z     = z.10
  */

rule (modulo E) lookupLhasv_1_11111211[color=#ffffff,
                                       process="lookup L_h.3 as v.2"]:
   [ State_11111211( lock.2, L_h.3 ) ] --[ IsNotSet( L_h.3 ) ]-> [ ]

  /*
  rule (modulo AC) lookupLhasv_1_11111211[color=#ffffff,
                                          process="lookup L_h.3 as v.2"]:
     [ State_11111211( lock, L_h ) ] --[ IsNotSet( L_h ) ]-> [ ]
  */

rule (modulo E) inLhc_0_11112[color=#ffffff,
                              process="in(<L_h.4, c.1>);"]:
   [ State_11112( ), In( <L_h.4, c.1> ), Fr( lock.3 ) ]
  --[ Lock_3( '3', lock.3, L_h.4 ), Lock( '3', lock.3, L_h.4 ) ]->
   [ State_1111211( c.1, lock.3, L_h.4 ) ]

  /*
  rule (modulo AC) inLhc_0_11112[color=#ffffff,
                                 process="in(<L_h.4, c.1>);"]:
     [ State_11112( ), In( <L_h, c> ), Fr( lock ) ]
    --[ Lock_3( '3', lock, L_h ), Lock( '3', lock, L_h ) ]->
     [ State_1111211( c, lock, L_h ) ]
  */

rule (modulo E) lookupLhasv_0_1111211[color=#ffffff,
                                      process="lookup L_h.4 as v.3"]:
   [ State_1111211( c.1, lock.3, L_h.4 ) ]
  --[ IsIn( L_h.4, v.3 ) ]->
   [ State_11112111( c.1, lock.3, v.3, L_h.4 ) ]

  /*
  rule (modulo AC) lookupLhasv_0_1111211[color=#ffffff,
                                         process="lookup L_h.4 as v.3"]:
     [ State_1111211( c, lock, L_h ) ]
    --[ IsIn( L_h, v ) ]->
     [ State_11112111( c, lock, v, L_h ) ]
  */

rule (modulo E) ifattCvdec_0_11112111[color=#ffffff,
                                      process="if attC(v.3)='dec'"]:
   [ State_11112111( c.1, lock.3, v.3, L_h.4 ) ]
  --[ Pred_Eq( attC(v.3), 'dec' ) ]->
   [ State_111121111( c.1, lock.3, v.3, L_h.4 ) ]

  /*
  rule (modulo AC) ifattCvdec_0_11112111[color=#ffffff,
                                         process="if attC(v.3)='dec'"]:
     [ State_11112111( c, lock, v, L_h ) ]
    --[ Pred_Eq( z, 'dec' ) ]->
     [ State_111121111( c, lock, v, L_h ) ]
    variants (modulo AC)
    1. v     = v.11
       z     = attC(v.11)
    
    2. v     = <x.13, z.12>
       z     = z.12
  */

rule (modulo E) ifsencSuccckeyvtrue_0_111121111[color=#ffffff,
                                                process="if sencSucc(c.1, key(v.3))=true"]:
   [ State_111121111( c.1, lock.3, v.3, L_h.4 ) ]
  --[ Pred_Eq( sencSucc(c.1, key(v.3)), true ) ]->
   [ State_1111211111( c.1, lock.3, v.3, L_h.4 ) ]

  /*
  rule (modulo AC) ifsencSuccckeyvtrue_0_111121111[color=#ffffff,
                                                   process="if sencSucc(c.1, key(v.3))=true"]:
     [ State_111121111( c, lock, v, L_h ) ]
    --[ Pred_Eq( z, true ) ]->
     [ State_1111211111( c, lock, v, L_h ) ]
    variants (modulo AC)
    1. c     = c.10
       v     = v.12
       z     = sencSucc(c.10, key(v.12))
    
    2. c     = c.12
       v     = <x.10, x.11>
       z     = sencSucc(c.12, x.10)
    
    3. c     = senc(x.10, x.11)
       v     = <x.11, x.13>
       z     = true
    
    4. c     = senc(x.10, key(x.11))
       v     = x.11
       z     = true
  */

rule (modulo E) eventDecUsingkeyvsdecckeyv_0_1111211111[color=#ffffff,
                                                        process="event DecUsing( key(v.3), sdec(c.1, key(v.3)) );"]:
   [ State_1111211111( c.1, lock.3, v.3, L_h.4 ) ]
  --[ DecUsing( key(v.3), sdec(c.1, key(v.3)) ) ]->
   [
   State_111121111111( c.1, lock.3, v.3, L_h.4 ), Out( sdec(c.1, key(v.3)) )
   ]

  /*
  rule (modulo AC) eventDecUsingkeyvsdecckeyv_0_1111211111[color=#ffffff,
                                                           process="event DecUsing( key(v.3), sdec(c.1, key(v.3)) );"]:
     [ State_1111211111( c, lock, v, L_h ) ]
    --[ DecUsing( z.1, z ) ]->
     [ State_111121111111( c, lock, v, L_h ), Out( z ) ]
    variants (modulo AC)
    1. c     = c.11
       v     = v.13
       z     = sdec(c.11, key(v.13))
       z.1   = key(v.13)
    
    2. c     = c.13
       v     = <x.11, x.12>
       z     = sdec(c.13, x.11)
       z.1   = x.11
    
    3. c     = senc(x.11, x.12)
       v     = <x.12, x.14>
       z     = x.11
       z.1   = x.12
    
    4. c     = senc(x.11, key(x.12))
       v     = x.12
       z     = x.11
       z.1   = key(x.12)
  */

rule (modulo E) unlockLh_0_111121111111[color=#ffffff,
                                        process="unlock L_h.4;"]:
   [ State_111121111111( c.1, lock.3, v.3, L_h.4 ) ]
  --[ Unlock_3( '3', lock.3, L_h.4 ), Unlock( '3', lock.3, L_h.4 ) ]->
   [ ]

  /*
  rule (modulo AC) unlockLh_0_111121111111[color=#ffffff,
                                           process="unlock L_h.4;"]:
     [ State_111121111111( c, lock, v, L_h ) ]
    --[ Unlock_3( '3', lock, L_h ), Unlock( '3', lock, L_h ) ]->
     [ ]
  */

rule (modulo E) ifsencSuccckeyvtrue_1_111121111[color=#ffffff,
                                                process="if sencSucc(c.1, key(v.3))=true"]:
   [ State_111121111( c.1, lock.3, v.3, L_h.4 ) ]
  --[ Pred_Not_Eq( sencSucc(c.1, key(v.3)), true ) ]->
   [ ]

  /*
  rule (modulo AC) ifsencSuccckeyvtrue_1_111121111[color=#ffffff,
                                                   process="if sencSucc(c.1, key(v.3))=true"]:
     [ State_111121111( c, lock, v, L_h ) ] --[ Pred_Not_Eq( z, true ) ]-> [ ]
    variants (modulo AC)
    1. c     = c.10
       v     = v.12
       z     = sencSucc(c.10, key(v.12))
    
    2. c     = c.12
       v     = <x.10, x.11>
       z     = sencSucc(c.12, x.10)
    
    3. c     = senc(x.10, x.11)
       v     = <x.11, x.13>
       z     = true
    
    4. c     = senc(x.10, key(x.11))
       v     = x.11
       z     = true
  */

rule (modulo E) ifattCvdec_1_11112111[color=#ffffff,
                                      process="if attC(v.3)='dec'"]:
   [ State_11112111( c.1, lock.3, v.3, L_h.4 ) ]
  --[ Pred_Not_Eq( attC(v.3), 'dec' ) ]->
   [ ]

  /*
  rule (modulo AC) ifattCvdec_1_11112111[color=#ffffff,
                                         process="if attC(v.3)='dec'"]:
     [ State_11112111( c, lock, v, L_h ) ] --[ Pred_Not_Eq( z, 'dec' ) ]-> [ ]
    variants (modulo AC)
    1. v     = v.11
       z     = attC(v.11)
    
    2. v     = <x.13, z.12>
       z     = z.12
  */

rule (modulo E) lookupLhasv_1_1111211[color=#ffffff,
                                      process="lookup L_h.4 as v.3"]:
   [ State_1111211( c.1, lock.3, L_h.4 ) ] --[ IsNotSet( L_h.4 ) ]-> [ ]

  /*
  rule (modulo AC) lookupLhasv_1_1111211[color=#ffffff,
                                         process="lookup L_h.4 as v.3"]:
     [ State_1111211( c, lock, L_h ) ] --[ IsNotSet( L_h ) ]-> [ ]
  */

rule (modulo E) inLhm_0_1112[color=#ffffff, process="in(<L_h.5, m.2>);"]:
   [ State_1112( ), In( <L_h.5, m.2> ), Fr( lock.4 ) ]
  --[ Lock_4( '4', lock.4, L_h.5 ), Lock( '4', lock.4, L_h.5 ) ]->
   [ State_111211( m.2, lock.4, L_h.5 ) ]

  /*
  rule (modulo AC) inLhm_0_1112[color=#ffffff,
                                process="in(<L_h.5, m.2>);"]:
     [ State_1112( ), In( <L_h, m> ), Fr( lock ) ]
    --[ Lock_4( '4', lock, L_h ), Lock( '4', lock, L_h ) ]->
     [ State_111211( m, lock, L_h ) ]
  */

rule (modulo E) lookupLhasv_0_111211[color=#ffffff,
                                     process="lookup L_h.5 as v.4"]:
   [ State_111211( m.2, lock.4, L_h.5 ) ]
  --[ IsIn( L_h.5, v.4 ) ]->
   [ State_1112111( m.2, lock.4, v.4, L_h.5 ) ]

  /*
  rule (modulo AC) lookupLhasv_0_111211[color=#ffffff,
                                        process="lookup L_h.5 as v.4"]:
     [ State_111211( m, lock, L_h ) ]
    --[ IsIn( L_h, v ) ]->
     [ State_1112111( m, lock, v, L_h ) ]
  */

rule (modulo E) ifattCvdec_0_1112111[color=#ffffff,
                                     process="if attC(v.4)='dec'"]:
   [ State_1112111( m.2, lock.4, v.4, L_h.5 ) ]
  --[ Pred_Eq( attC(v.4), 'dec' ) ]->
   [ State_11121111( m.2, lock.4, v.4, L_h.5 ) ]

  /*
  rule (modulo AC) ifattCvdec_0_1112111[color=#ffffff,
                                        process="if attC(v.4)='dec'"]:
     [ State_1112111( m, lock, v, L_h ) ]
    --[ Pred_Eq( z, 'dec' ) ]->
     [ State_11121111( m, lock, v, L_h ) ]
    variants (modulo AC)
    1. v     = v.12
       z     = attC(v.12)
    
    2. v     = <x.14, z.13>
       z     = z.13
  */

rule (modulo E) eventEncUsingkeyvm_0_11121111[color=#ffffff,
                                              process="event EncUsing( key(v.4), m.2 );"]:
   [ State_11121111( m.2, lock.4, v.4, L_h.5 ) ]
  --[ EncUsing( key(v.4), m.2 ) ]->
   [ State_1112111111( m.2, lock.4, v.4, L_h.5 ), Out( senc(m.2, key(v.4)) )
   ]

  /*
  rule (modulo AC) eventEncUsingkeyvm_0_11121111[color=#ffffff,
                                                 process="event EncUsing( key(v.4), m.2 );"]:
     [ State_11121111( m, lock, v, L_h ) ]
    --[ EncUsing( z, m ) ]->
     [ State_1112111111( m, lock, v, L_h ), Out( senc(m, z) ) ]
    variants (modulo AC)
    1. v     = v.13
       z     = key(v.13)
    
    2. v     = <x.11, x.12>
       z     = x.11
  */

rule (modulo E) unlockLh_0_1112111111[color=#ffffff,
                                      process="unlock L_h.5;"]:
   [ State_1112111111( m.2, lock.4, v.4, L_h.5 ) ]
  --[ Unlock_4( '4', lock.4, L_h.5 ), Unlock( '4', lock.4, L_h.5 ) ]->
   [ ]

  /*
  rule (modulo AC) unlockLh_0_1112111111[color=#ffffff,
                                         process="unlock L_h.5;"]:
     [ State_1112111111( m, lock, v, L_h ) ]
    --[ Unlock_4( '4', lock, L_h ), Unlock( '4', lock, L_h ) ]->
     [ ]
  */

rule (modulo E) ifattCvdec_1_1112111[color=#ffffff,
                                     process="if attC(v.4)='dec'"]:
   [ State_1112111( m.2, lock.4, v.4, L_h.5 ) ]
  --[ Pred_Not_Eq( attC(v.4), 'dec' ) ]->
   [ ]

  /*
  rule (modulo AC) ifattCvdec_1_1112111[color=#ffffff,
                                        process="if attC(v.4)='dec'"]:
     [ State_1112111( m, lock, v, L_h ) ] --[ Pred_Not_Eq( z, 'dec' ) ]-> [ ]
    variants (modulo AC)
    1. v     = v.12
       z     = attC(v.12)
    
    2. v     = <x.14, z.13>
       z     = z.13
  */

rule (modulo E) lookupLhasv_1_111211[color=#ffffff,
                                     process="lookup L_h.5 as v.4"]:
   [ State_111211( m.2, lock.4, L_h.5 ) ] --[ IsNotSet( L_h.5 ) ]-> [ ]

  /*
  rule (modulo AC) lookupLhasv_1_111211[color=#ffffff,
                                        process="lookup L_h.5 as v.4"]:
     [ State_111211( m, lock, L_h ) ] --[ IsNotSet( L_h ) ]-> [ ]
  */

rule (modulo E) inLhLh_0_112[color=#ffffff,
                             process="in(<L_h1.1, L_h2.1>);"]:
   [ State_112( ), In( <L_h1.1, L_h2.1> ), Fr( lock.5 ) ]
  --[ Lock_5( '5', lock.5, L_h1.1 ), Lock( '5', lock.5, L_h1.1 ) ]->
   [ State_11211( L_h1.1, L_h2.1, lock.5 ) ]

  /*
  rule (modulo AC) inLhLh_0_112[color=#ffffff,
                                process="in(<L_h1.1, L_h2.1>);"]:
     [ State_112( ), In( <L_h1, L_h2> ), Fr( lock ) ]
    --[ Lock_5( '5', lock, L_h1 ), Lock( '5', lock, L_h1 ) ]->
     [ State_11211( L_h1, L_h2, lock ) ]
  */

rule (modulo E) lookupLhasv_0_11211[color=#ffffff,
                                    process="lookup L_h1.1 as v1.1"]:
   [ State_11211( L_h1.1, L_h2.1, lock.5 ) ]
  --[ IsIn( L_h1.1, v1.1 ) ]->
   [ State_112111( L_h1.1, L_h2.1, v1.1, lock.5 ) ]

  /*
  rule (modulo AC) lookupLhasv_0_11211[color=#ffffff,
                                       process="lookup L_h1.1 as v1.1"]:
     [ State_11211( L_h1, L_h2, lock ) ]
    --[ IsIn( L_h1, v1 ) ]->
     [ State_112111( L_h1, L_h2, v1, lock ) ]
  */

rule (modulo E) ifattCvwrap_0_112111[color=#ffffff,
                                     process="if attC(v1.1)='wrap'"]:
   [ State_112111( L_h1.1, L_h2.1, v1.1, lock.5 ) ]
  --[ Pred_Eq( attC(v1.1), 'wrap' ) ]->
   [ State_1121111( L_h1.1, L_h2.1, v1.1, lock.5 ) ]

  /*
  rule (modulo AC) ifattCvwrap_0_112111[color=#ffffff,
                                        process="if attC(v1.1)='wrap'"]:
     [ State_112111( L_h1, L_h2, v1, lock ) ]
    --[ Pred_Eq( z, 'wrap' ) ]->
     [ State_1121111( L_h1, L_h2, v1, lock ) ]
    variants (modulo AC)
    1. v1    = v1.12
       z     = attC(v1.12)
    
    2. v1    = <x.14, z.13>
       z     = z.13
  */

rule (modulo E) lookupLhasv_0_1121111[color=#ffffff,
                                      process="lookup L_h2.1 as v2.1"]:
   [ State_1121111( L_h1.1, L_h2.1, v1.1, lock.5 ) ]
  --[ IsIn( L_h2.1, v2.1 ) ]->
   [ State_11211111( L_h1.1, L_h2.1, v1.1, v2.1, lock.5 ) ]

  /*
  rule (modulo AC) lookupLhasv_0_1121111[color=#ffffff,
                                         process="lookup L_h2.1 as v2.1"]:
     [ State_1121111( L_h1, L_h2, v1, lock ) ]
    --[ IsIn( L_h2, v2 ) ]->
     [ State_11211111( L_h1, L_h2, v1, v2, lock ) ]
  */

rule (modulo E) ifattCvwrap_0_11211111[color=#ffffff,
                                       process="if attC(v2.1)='wrap'"]:
   [ State_11211111( L_h1.1, L_h2.1, v1.1, v2.1, lock.5 ) ]
  --[ Pred_Eq( attC(v2.1), 'wrap' ) ]->
   [ State_112111111( L_h1.1, L_h2.1, v1.1, v2.1, lock.5 ) ]

  /*
  rule (modulo AC) ifattCvwrap_0_11211111[color=#ffffff,
                                          process="if attC(v2.1)='wrap'"]:
     [ State_11211111( L_h1, L_h2, v1, v2, lock ) ]
    --[ Pred_Eq( z, 'wrap' ) ]->
     [ State_112111111( L_h1, L_h2, v1, v2, lock ) ]
    variants (modulo AC)
    1. v2    = v2.13
       z     = attC(v2.13)
    
    2. v2    = <x.15, z.14>
       z     = z.14
  */

rule (modulo E) eventWrapkeyvkeyv_0_112111111[color=#ffffff,
                                              process="event Wrap( key(v1.1), key(v2.1) );"]:
   [ State_112111111( L_h1.1, L_h2.1, v1.1, v2.1, lock.5 ) ]
  --[ Wrap( key(v1.1), key(v2.1) ) ]->
   [
   State_11211111111( L_h1.1, L_h2.1, v1.1, v2.1, lock.5 ),
   Out( senc(key(v2.1), key(v1.1)) )
   ]

  /*
  rule (modulo AC) eventWrapkeyvkeyv_0_112111111[color=#ffffff,
                                                 process="event Wrap( key(v1.1), key(v2.1) );"]:
     [ State_112111111( L_h1, L_h2, v1, v2, lock ) ]
    --[ Wrap( z.1, z ) ]->
     [ State_11211111111( L_h1, L_h2, v1, v2, lock ), Out( senc(z, z.1) ) ]
    variants (modulo AC)
    1. v1    = v1.13
       v2    = v2.13
       z     = key(v2.13)
       z.1   = key(v1.13)
    
    2. v1    = v1.15
       v2    = <x.13, x.14>
       z     = x.13
       z.1   = key(v1.15)
    
    3. v1    = <x.13, x.14>
       v2    = v2.15
       z     = key(v2.15)
       z.1   = x.13
    
    4. v1    = <x.13, x.14>
       v2    = <x.15, x.16>
       z     = x.15
       z.1   = x.13
  */

rule (modulo E) unlockLh_0_11211111111[color=#ffffff,
                                       process="unlock L_h1.1;"]:
   [ State_11211111111( L_h1.1, L_h2.1, v1.1, v2.1, lock.5 ) ]
  --[ Unlock_5( '5', lock.5, L_h1.1 ), Unlock( '5', lock.5, L_h1.1 ) ]->
   [ ]

  /*
  rule (modulo AC) unlockLh_0_11211111111[color=#ffffff,
                                          process="unlock L_h1.1;"]:
     [ State_11211111111( L_h1, L_h2, v1, v2, lock ) ]
    --[ Unlock_5( '5', lock, L_h1 ), Unlock( '5', lock, L_h1 ) ]->
     [ ]
  */

rule (modulo E) ifattCvwrap_1_11211111[color=#ffffff,
                                       process="if attC(v2.1)='wrap'"]:
   [ State_11211111( L_h1.1, L_h2.1, v1.1, v2.1, lock.5 ) ]
  --[ Pred_Not_Eq( attC(v2.1), 'wrap' ) ]->
   [ ]

  /*
  rule (modulo AC) ifattCvwrap_1_11211111[color=#ffffff,
                                          process="if attC(v2.1)='wrap'"]:
     [ State_11211111( L_h1, L_h2, v1, v2, lock ) ]
    --[ Pred_Not_Eq( z, 'wrap' ) ]->
     [ ]
    variants (modulo AC)
    1. v2    = v2.13
       z     = attC(v2.13)
    
    2. v2    = <x.15, z.14>
       z     = z.14
  */

rule (modulo E) lookupLhasv_1_1121111[color=#ffffff,
                                      process="lookup L_h2.1 as v2.1"]:
   [ State_1121111( L_h1.1, L_h2.1, v1.1, lock.5 ) ]
  --[ IsNotSet( L_h2.1 ) ]->
   [ ]

  /*
  rule (modulo AC) lookupLhasv_1_1121111[color=#ffffff,
                                         process="lookup L_h2.1 as v2.1"]:
     [ State_1121111( L_h1, L_h2, v1, lock ) ] --[ IsNotSet( L_h2 ) ]-> [ ]
  */

rule (modulo E) ifattCvwrap_1_112111[color=#ffffff,
                                     process="if attC(v1.1)='wrap'"]:
   [ State_112111( L_h1.1, L_h2.1, v1.1, lock.5 ) ]
  --[ Pred_Not_Eq( attC(v1.1), 'wrap' ) ]->
   [ ]

  /*
  rule (modulo AC) ifattCvwrap_1_112111[color=#ffffff,
                                        process="if attC(v1.1)='wrap'"]:
     [ State_112111( L_h1, L_h2, v1, lock ) ]
    --[ Pred_Not_Eq( z, 'wrap' ) ]->
     [ ]
    variants (modulo AC)
    1. v1    = v1.12
       z     = attC(v1.12)
    
    2. v1    = <x.14, z.13>
       z     = z.13
  */

rule (modulo E) lookupLhasv_1_11211[color=#ffffff,
                                    process="lookup L_h1.1 as v1.1"]:
   [ State_11211( L_h1.1, L_h2.1, lock.5 ) ] --[ IsNotSet( L_h1.1 ) ]-> [ ]

  /*
  rule (modulo AC) lookupLhasv_1_11211[color=#ffffff,
                                       process="lookup L_h1.1 as v1.1"]:
     [ State_11211( L_h1, L_h2, lock ) ] --[ IsNotSet( L_h1 ) ]-> [ ]
  */

rule (modulo E) p_1_[color=#ffffff, process="!"]:
   [ !Semistate_1( ) ]
  -->
   [
   State_1111111( ), State_1111112( ), State_111112( ), State_11112( ),
   State_1112( ), State_112( ), State_12( )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) inLhsencmk_0_12[color=#ffffff,
                                process="in(<L_h.6, senc(m.3, k.2)>);"]:
   [ State_12( ), In( <L_h.6, senc(m.3, k.2)> ), Fr( lock.6 ) ]
  --[ Lock_6( '6', lock.6, L_h.6 ), Lock( '6', lock.6, L_h.6 ) ]->
   [ State_1211( k.2, m.3, L_h.6, lock.6 ) ]

  /*
  rule (modulo AC) inLhsencmk_0_12[color=#ffffff,
                                   process="in(<L_h.6, senc(m.3, k.2)>);"]:
     [ State_12( ), In( <L_h, senc(m, k)> ), Fr( lock ) ]
    --[ Lock_6( '6', lock, L_h ), Lock( '6', lock, L_h ) ]->
     [ State_1211( k, m, L_h, lock ) ]
  */

rule (modulo E) lookupLhasv_0_1211[color=#ffffff,
                                   process="lookup L_h.6 as v.5"]:
   [ State_1211( k.2, m.3, L_h.6, lock.6 ) ]
  --[ IsIn( L_h.6, v.5 ) ]->
   [ State_12111( k.2, m.3, v.5, L_h.6, lock.6 ) ]

  /*
  rule (modulo AC) lookupLhasv_0_1211[color=#ffffff,
                                      process="lookup L_h.6 as v.5"]:
     [ State_1211( k, m, L_h, lock ) ]
    --[ IsIn( L_h, v ) ]->
     [ State_12111( k, m, v, L_h, lock ) ]
  */

rule (modulo E) ifattCvwrap_0_12111[color=#ffffff,
                                    process="if attC(v.5)='wrap'"]:
   [ State_12111( k.2, m.3, v.5, L_h.6, lock.6 ) ]
  --[ Pred_Eq( attC(v.5), 'wrap' ) ]->
   [ State_121111( k.2, m.3, v.5, L_h.6, lock.6 ) ]

  /*
  rule (modulo AC) ifattCvwrap_0_12111[color=#ffffff,
                                       process="if attC(v.5)='wrap'"]:
     [ State_12111( k, m, v, L_h, lock ) ]
    --[ Pred_Eq( z, 'wrap' ) ]->
     [ State_121111( k, m, v, L_h, lock ) ]
    variants (modulo AC)
    1. v     = v.14
       z     = attC(v.14)
    
    2. v     = <x.16, z.15>
       z     = z.15
  */

rule (modulo E) ifkeyvk_0_121111[color=#ffffff,
                                 process="if key(v.5)=k.2"]:
   [ State_121111( k.2, m.3, v.5, L_h.6, lock.6 ), Fr( L_h2.2 ) ]
  --[ Pred_Eq( key(v.5), k.2 ) ]->
   [ State_12111111( L_h2.2, k.2, m.3, v.5, L_h.6, lock.6 ) ]

  /*
  rule (modulo AC) ifkeyvk_0_121111[color=#ffffff,
                                    process="if key(v.5)=k.2"]:
     [ State_121111( k, m, v, L_h, lock ), Fr( L_h2 ) ]
    --[ Pred_Eq( z, k ) ]->
     [ State_12111111( L_h2, k, m, v, L_h, lock ) ]
    variants (modulo AC)
    1. v     = v.17
       z     = key(v.17)
    
    2. v     = <x.14, x.15>
       z     = x.14
  */

rule (modulo E) eventUnwrappedLhm_0_12111111[color=#ffffff,
                                             process="event Unwrapped( L_h2.2, m.3 );"]:
   [ State_12111111( L_h2.2, k.2, m.3, v.5, L_h.6, lock.6 ) ]
  --[ Unwrapped( L_h2.2, m.3 ) ]->
   [ State_121111111( L_h2.2, k.2, m.3, v.5, L_h.6, lock.6 ) ]

  /*
  rule (modulo AC) eventUnwrappedLhm_0_12111111[color=#ffffff,
                                                process="event Unwrapped( L_h2.2, m.3 );"]:
     [ State_12111111( L_h2, k, m, v, L_h, lock ) ]
    --[ Unwrapped( L_h2, m ) ]->
     [ State_121111111( L_h2, k, m, v, L_h, lock ) ]
  */

rule (modulo E) insertLhmwrap_0_121111111[color=#ffffff,
                                          process="insert L_h2.2,<m.3, 'wrap'>;"]:
   [ State_121111111( L_h2.2, k.2, m.3, v.5, L_h.6, lock.6 ) ]
  --[ Insert( L_h2.2, <m.3, 'wrap'> ) ]->
   [
   State_12111111111( L_h2.2, k.2, m.3, v.5, L_h.6, lock.6 ), Out( L_h2.2 )
   ]

  /*
  rule (modulo AC) insertLhmwrap_0_121111111[color=#ffffff,
                                             process="insert L_h2.2,<m.3, 'wrap'>;"]:
     [ State_121111111( L_h2, k, m, v, L_h, lock ) ]
    --[ Insert( L_h2, <m, 'wrap'> ) ]->
     [ State_12111111111( L_h2, k, m, v, L_h, lock ), Out( L_h2 ) ]
  */

rule (modulo E) unlockLh_0_12111111111[color=#ffffff,
                                       process="unlock L_h.6;"]:
   [ State_12111111111( L_h2.2, k.2, m.3, v.5, L_h.6, lock.6 ) ]
  --[ Unlock_6( '6', lock.6, L_h.6 ), Unlock( '6', lock.6, L_h.6 ) ]->
   [ ]

  /*
  rule (modulo AC) unlockLh_0_12111111111[color=#ffffff,
                                          process="unlock L_h.6;"]:
     [ State_12111111111( L_h2, k, m, v, L_h, lock ) ]
    --[ Unlock_6( '6', lock, L_h ), Unlock( '6', lock, L_h ) ]->
     [ ]
  */

rule (modulo E) ifkeyvk_1_121111[color=#ffffff,
                                 process="if key(v.5)=k.2"]:
   [ State_121111( k.2, m.3, v.5, L_h.6, lock.6 ) ]
  --[ Pred_Not_Eq( key(v.5), k.2 ) ]->
   [ ]

  /*
  rule (modulo AC) ifkeyvk_1_121111[color=#ffffff,
                                    process="if key(v.5)=k.2"]:
     [ State_121111( k, m, v, L_h, lock ) ] --[ Pred_Not_Eq( z, k ) ]-> [ ]
    variants (modulo AC)
    1. v     = v.16
       z     = key(v.16)
    
    2. v     = <x.13, x.14>
       z     = x.13
  */

rule (modulo E) ifattCvwrap_1_12111[color=#ffffff,
                                    process="if attC(v.5)='wrap'"]:
   [ State_12111( k.2, m.3, v.5, L_h.6, lock.6 ) ]
  --[ Pred_Not_Eq( attC(v.5), 'wrap' ) ]->
   [ ]

  /*
  rule (modulo AC) ifattCvwrap_1_12111[color=#ffffff,
                                       process="if attC(v.5)='wrap'"]:
     [ State_12111( k, m, v, L_h, lock ) ]
    --[ Pred_Not_Eq( z, 'wrap' ) ]->
     [ ]
    variants (modulo AC)
    1. v     = v.14
       z     = attC(v.14)
    
    2. v     = <x.16, z.15>
       z     = z.15
  */

rule (modulo E) lookupLhasv_1_1211[color=#ffffff,
                                   process="lookup L_h.6 as v.5"]:
   [ State_1211( k.2, m.3, L_h.6, lock.6 ) ] --[ IsNotSet( L_h.6 ) ]-> [ ]

  /*
  rule (modulo AC) lookupLhasv_1_1211[color=#ffffff,
                                      process="lookup L_h.6 as v.5"]:
     [ State_1211( k, m, L_h, lock ) ] --[ IsNotSet( L_h ) ]-> [ ]
  */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒ (∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1))"
  // safety formula

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction locking_0:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_0( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_1:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_1( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_2:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_2( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_3:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_3( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_3( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_4:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_4( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_4( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_5:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_5( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_5( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_6:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_6( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_6( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

/*
WARNING: the following wellformedness checks failed!

The variables of the follwing rule(s) are not derivable from their premises, you may be performing unintended pattern matching
  lookupLhasv_0_111111211
Failed to derive Variable(s): v.1
  
  lookupLhasv_0_11111211
Failed to derive Variable(s): v.2
  
  lookupLhasv_0_1111211
Failed to derive Variable(s): v.3
  
  lookupLhasv_0_111211
Failed to derive Variable(s): v.4
  
  lookupLhasv_0_11211
Failed to derive Variable(s): v1.1
  
  lookupLhasv_0_1121111
Failed to derive Variable(s): v2.1
  
  inLhsencmk_0_12
Failed to derive Variable(s): k.2, m.3
  
  lookupLhasv_0_1211
Failed to derive Variable(s): v.5
*/

/*
Generated from:
Tamarin version 1.7.1
Maude version 3.2.1
Git revision: 4b299c253445d7bbc7fce41abf0b0d5659bb1d58, branch: develop
Compiled at: 2023-06-26 11:54:20.223793825 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 3.2.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/sapic/slow/encWrapDecUnwrap/encwrapdecunwrap.spthy

  output:          examples/sapic/slow/encWrapDecUnwrap/encwrapdecunwrap.spthy.tmp
  processing time: 53.96s
  
  WARNING: 8 wellformedness check failed!
           The analysis results might be wrong!
  
  dec_limits (all-traces): verified (290 steps)
  wrap_key_origins (all-traces): verified (1140 steps)
  no_key_is_wrap_and_dec_ind (all-traces): verified (140 steps)
  no_key_is_wrap_and_dec_ind2 (all-traces): verified (540 steps)
  cannot_obtain_key_ind (all-traces): verified (395 steps)

==============================================================================
*/
