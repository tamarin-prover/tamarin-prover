theory mini7 begin

// Function signature and definition of the equational theory E

functions: fst/1, h/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



heuristic: p

section{* small example for progression function *}









lemma A_possible:
  exists-trace "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (A( ) @ #t)"
*/
simplify
solve( State_( ~prog_ ) ▶₀ #t )
  case Init
  solve( State_( ~prog_ ) ▶₀ #t.2 )
    case Init
    solve( State_( ~prog_ ) ▶₀ #t.2 )
      case Init
      SOLVED // trace found
    qed
  qed
qed

lemma B_possible:
  exists-trace "∃ #t. B( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (B( ) @ #t)"
*/
simplify
solve( State_11( ~prog_, ~prog_11 ) ▶₀ #t )
  case p_1_1
  solve( State_( ~prog_ ) ▶₀ #t.2 )
    case Init
    solve( State_( ~prog_ ) ▶₀ #t.3 )
      case Init
      solve( (∃ #t. (ProgressTo_1111( ~prog_11 ) @ #t))  ∥
             (∃ #t. (ProgressTo_11211( ~prog_11 ) @ #t)) )
        case case_1
        solve( State_11( ~prog_.1, ~prog_11 ) ▶₀ #t.3 )
          case p_1_1
          solve( State_( ~prog_ ) ▶₀ #t.3 )
            case Init
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma C_possible:
  exists-trace "∃ #t. C( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (C( ) @ #t)"
*/
simplify
solve( State_1121( ~prog_, ~prog_11 ) ▶₀ #t )
  case p_1_112
  solve( State_( ~prog_ ) ▶₀ #t.2 )
    case Init
    solve( State_( ~prog_ ) ▶₀ #t.3 )
      case Init
      solve( (∃ #t. (ProgressTo_1111( ~prog_11 ) @ #t))  ∥
             (∃ #t. (ProgressTo_11211( ~prog_11 ) @ #t)) )
        case case_2
        solve( State_1121( ~prog_.1, ~prog_11 ) ▶₀ #t.3 )
          case p_1_112
          solve( State_( ~prog_ ) ▶₀ #t.4 )
            case Init
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma A_B_possible:
  exists-trace "∃ #t1 #t2. (A( ) @ #t1) ∧ (B( ) @ #t2)"
/*
guarded formula characterizing all satisfying traces:
"∃ #t1 #t2. (A( ) @ #t1) ∧ (B( ) @ #t2)"
*/
simplify
solve( State_( ~prog_ ) ▶₀ #t1 )
  case Init
  solve( State_11( ~prog_.1, ~prog_11 ) ▶₀ #t2 )
    case p_1_1
    solve( State_( ~prog_ ) ▶₀ #t.1 )
      case Init
      solve( State_( ~prog_ ) ▶₀ #t.1 )
        case Init
        solve( State_( ~prog_ ) ▶₀ #t.1 )
          case Init
          solve( (∃ #t. (ProgressTo_1111( ~prog_11 ) @ #t))  ∥
                 (∃ #t. (ProgressTo_11211( ~prog_11 ) @ #t)) )
            case case_1
            solve( State_11( ~prog_.1, ~prog_11 ) ▶₀ #t.1 )
              case p_1_1
              solve( State_( ~prog_ ) ▶₀ #t.1 )
                case Init
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma A_forced:
  all-traces "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all counter-examples:
"∀ #t. (A( ) @ #t) ⇒ ⊥"
*/
simplify
by contradiction /* from formulas */

















rule (modulo E) MessageIDRule[color=#ffffff, process="event A( );"]:
   [ Fr( ~mid_ ) ] --> [ MID_Receiver( ~mid_ ), MID_Sender( ~mid_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init[color=#ffffff, process="event A( );"]:
   [ Fr( ~prog_ ) ]
  --[ ProgressFrom_( ~prog_ ), Init( ) ]->
   [ State_( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventA_0_[color=#ffffff, process="event A( );"]:
   [ State_( ~prog_ ) ]
  --[ ProgressTo_1( ~prog_ ), A( ) ]->
   [ State_1( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1[color=#ffffff, process="!"]:
   [ State_1( ~prog_ ) ] --> [ !Semistate_11( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_1[color=#ffffff, process="!"]:
   [ Fr( ~prog_11 ), !Semistate_11( ~prog_ ) ]
  --[ ProgressFrom_11( ~prog_11 ) ]->
   [ State_11( ~prog_, ~prog_11 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventB_0_111[color=#ffffff, process="event B( );"]:
   [ State_11( ~prog_, ~prog_11 ) ]
  --[ ProgressTo_1111( ~prog_11 ), B( ) ]->
   [ State_1111( ~prog_, ~prog_11 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1111[color=#ffffff, process="0"]:
   [ State_1111( ~prog_, ~prog_11 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_112[color=#ffffff, process="!"]:
   [ State_11( ~prog_, ~prog_11 ) ]
  -->
   [ !Semistate_1121( ~prog_, ~prog_11 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_112[color=#ffffff, process="!"]:
   [ !Semistate_1121( ~prog_, ~prog_11 ) ]
  -->
   [ State_1121( ~prog_, ~prog_11 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventC_0_1121[color=#ffffff, process="event C( );"]:
   [ State_1121( ~prog_, ~prog_11 ) ]
  --[ ProgressTo_11211( ~prog_11 ), C( ) ]->
   [ State_11211( ~prog_, ~prog_11 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11211[color=#ffffff, process="0"]:
   [ State_11211( ~prog_, ~prog_11 ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction Progress__to_1:
  "∀ prog_ #t.
    (ProgressFrom_( prog_ ) @ #t) ⇒ (∃ #t.1. ProgressTo_1( prog_ ) @ #t.1)"

restriction Progress_11_to_1111_or_11211:
  "∀ prog_11 #t.
    (ProgressFrom_11( prog_11 ) @ #t) ⇒
    ((∃ #t.1. ProgressTo_1111( prog_11 ) @ #t.1) ∨
     (∃ #t.1. ProgressTo_11211( prog_11 ) @ #t.1))"

restriction progressInit:
  "∃ #t. Init( ) @ #t"

/*
WARNING: the following wellformedness checks failed!

The variables of the follwing rule(s) are not derivable from their premises, you may be performing unintended pattern matching
  MessageIDRule
Failed to derive Variable(s): ~mid_
  
  Init
Failed to derive Variable(s): ~prog_
  
  eventA_0_
Failed to derive Variable(s): ~prog_
  
  p_0_1
Failed to derive Variable(s): ~prog_
  
  p_1_1
Failed to derive Variable(s): ~prog_, ~prog_11
  
  eventB_0_111
Failed to derive Variable(s): ~prog_, ~prog_11
  
  p_0_1111
Failed to derive Variable(s): ~prog_, ~prog_11
  
  p_0_112
Failed to derive Variable(s): ~prog_, ~prog_11
  
  p_1_112
Failed to derive Variable(s): ~prog_, ~prog_11
  
  eventC_0_1121
Failed to derive Variable(s): ~prog_, ~prog_11
  
  p_0_11211
Failed to derive Variable(s): ~prog_, ~prog_11
*/

/*
Generated from:
Tamarin version 1.7.1
Maude version 3.2.1
Git revision: 4b299c253445d7bbc7fce41abf0b0d5659bb1d58, branch: develop
Compiled at: 2023-06-26 11:54:20.223793825 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 3.2.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-progress/mini7.spthy

  output:          examples/sapic/fast/feature-progress/mini7.spthy.tmp
  processing time: 0.13s
  
  WARNING: 11 wellformedness check failed!
           The analysis results might be wrong!
  
  A_possible (exists-trace): verified (5 steps)
  B_possible (exists-trace): verified (8 steps)
  C_possible (exists-trace): verified (8 steps)
  A_B_possible (exists-trace): verified (10 steps)
  A_forced (all-traces): verified (2 steps)

==============================================================================
*/
