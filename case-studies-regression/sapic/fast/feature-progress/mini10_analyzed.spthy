theory mini10 begin

// Function signature and definition of the equational theory E

functions: fst/1, h/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



heuristic: p

section{* small example for progression function *}









lemma A_enforced:
  all-traces "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all counter-examples:
"∀ #t. (A( ) @ #t) ⇒ ⊥"
*/
simplify
by contradiction /* from formulas */

lemma B_not_enforced:
  exists-trace "(∃ #t0. A( ) @ #t0) ∧ (¬(∃ #t. B( ) @ #t))"
/*
guarded formula characterizing all satisfying traces:
"(∃ #t0. (A( ) @ #t0)) ∧ (∀ #t. (B( ) @ #t) ⇒ ⊥)"
*/
simplify
solve( State_( ~prog_ ) ▶₀ #t0 )
  case Init
  solve( State_( ~prog_ ) ▶₀ #t.1 )
    case Init
    solve( State_( ~prog_ ) ▶₀ #t.1 )
      case Init
      SOLVED // trace found
    qed
  qed
qed

















rule (modulo E) MessageIDRule[color=#ffffff, process="event A( );"]:
   [ Fr( ~mid_ ) ] --> [ MID_Receiver( ~mid_ ), MID_Sender( ~mid_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init[color=#ffffff, process="event A( );"]:
   [ Fr( ~prog_ ) ]
  --[ ProgressFrom_( ~prog_ ), Init( ) ]->
   [ State_( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventA_0_[color=#ffffff, process="event A( );"]:
   [ State_( ~prog_ ) ]
  --[ ProgressTo_1( ~prog_ ), A( ) ]->
   [ State_1( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inrm_0_1[color=#ffffff, process="in('r',m.1);"]:
   [ Fr( ~prog_11 ), State_1( ~prog_ ), In( m.1 ), MID_Receiver( ~mid_1 ) ]
  --[ ProgressFrom_11( ~prog_11 ), Receive( ~mid_1, m.1 ) ]->
   [ State_11( ~prog_, ~prog_11, m.1 ) ]

  /*
  rule (modulo AC) inrm_0_1[color=#ffffff, process="in('r',m.1);"]:
     [ Fr( ~prog_11 ), State_1( ~prog_ ), In( m ), MID_Receiver( ~mid_1 ) ]
    --[ ProgressFrom_11( ~prog_11 ), Receive( ~mid_1, m ) ]->
     [ State_11( ~prog_, ~prog_11, m ) ]
  */

rule (modulo E) eventB_0_11[color=#ffffff, process="event B( );"]:
   [ State_11( ~prog_, ~prog_11, m.1 ) ]
  --[ ProgressTo_111( ~prog_11 ), B( ) ]->
   [ State_111( ~prog_, ~prog_11, m.1 ) ]

  /*
  rule (modulo AC) eventB_0_11[color=#ffffff, process="event B( );"]:
     [ State_11( ~prog_, ~prog_11, m ) ]
    --[ ProgressTo_111( ~prog_11 ), B( ) ]->
     [ State_111( ~prog_, ~prog_11, m ) ]
  */

rule (modulo E) p_0_111[color=#ffffff, process="0"]:
   [ State_111( ~prog_, ~prog_11, m.1 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_111[color=#ffffff, process="0"]:
     [ State_111( ~prog_, ~prog_11, m ) ] --> [ ]
  */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction Progress__to_1:
  "∀ prog_ #t.
    (ProgressFrom_( prog_ ) @ #t) ⇒ (∃ #t.1. ProgressTo_1( prog_ ) @ #t.1)"

restriction Progress_11_to_111:
  "∀ prog_11 #t.
    (ProgressFrom_11( prog_11 ) @ #t) ⇒
    (∃ #t.1. ProgressTo_111( prog_11 ) @ #t.1)"

restriction progressInit:
  "∃ #t. Init( ) @ #t"

/*
WARNING: the following wellformedness checks failed!

The variables of the follwing rule(s) are not derivable from their premises, you may be performing unintended pattern matching:
  MessageIDRule
Failed to derive Variable(s): ~mid_
  
  Init
Failed to derive Variable(s): ~prog_
  
  eventA_0_
Failed to derive Variable(s): ~prog_
  
  inrm_0_1
Failed to derive Variable(s): ~mid_1, ~prog_, ~prog_11, m.1
  
  eventB_0_11
Failed to derive Variable(s): ~prog_, ~prog_11, m.1
  
  p_0_111
Failed to derive Variable(s): ~prog_, ~prog_11, m.1
*/

/*
Generated from:
Tamarin version 1.7.1
Maude version 3.2.1
Git revision: 4b299c253445d7bbc7fce41abf0b0d5659bb1d58, branch: develop
Compiled at: 2023-06-26 11:54:20.223793825 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 3.2.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-progress/mini10.spthy

  output:          examples/sapic/fast/feature-progress/mini10.spthy.tmp
  processing time: 0.09s
  
  WARNING: 6 wellformedness check failed!
           The analysis results might be wrong!
  
  A_enforced (all-traces): verified (2 steps)
  B_not_enforced (exists-trace): verified (5 steps)

==============================================================================
*/
