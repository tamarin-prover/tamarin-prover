theory mini9 begin

// Function signature and definition of the equational theory E

functions: fst/1, h/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



heuristic: p

section{* small example for progression function *}









lemma A_possible:
  exists-trace "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (A( ) @ #t)"
*/
simplify
solve( State_121( ~prog_, ~prog_121 ) ▶₀ #t )
  case inrHelp_0_12
  solve( State_1( ~prog_ ) ▶₀ #t.2 )
    case eventStart_0_
    solve( State_1( ~prog_ ) ▶₀ #t.2 )
      case eventStart_0_
      solve( State_121( ~prog_.1, ~prog_121 ) ▶₀ #t.2 )
        case inrHelp_0_12
        solve( State_1( ~prog_ ) ▶₀ #t.2 )
          case eventStart_0_
          solve( (∃ #t. (ProgressTo_1111( ~prog_ ) @ #t))  ∥
                 (∃ #t. (ProgressTo_11211( ~prog_ ) @ #t)) )
            case case_1
            solve( MID_Receiver( ~mid_111 ) ▶₃ #j )
              case MessageIDRule
              solve( MID_Sender( ~mid_111 ) ▶₀ #t.2 )
                case MessageIDRule
                solve( State_11( ~prog_.1 ) ▶₁ #t.2 )
                  case p_0_1
                  solve( State_12( ~prog_ ) ▶₁ #j )
                    case p_0_1
                    solve( State_121( ~prog_.1, ~prog_121 ) ▶₀ #t.3 )
                      case inrHelp_0_12
                      solve( State_1( ~prog_ ) ▶₀ #t.3 )
                        case eventStart_0_
                        solve( State_1( ~prog_ ) ▶₀ #t.3 )
                          case eventStart_0_
                          SOLVED // trace found
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma B_possible:
  exists-trace "∃ #t. B( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (B( ) @ #t)"
*/
simplify
solve( State_1121( ~prog_, m ) ▶₀ #t )
  case incm_0_112
  solve( State_1( ~prog_ ) ▶₀ #t.2 )
    case eventStart_0_
    solve( State_1( ~prog_ ) ▶₀ #t.2 )
      case eventStart_0_
      solve( (∃ #t. (ProgressTo_1111( ~prog_ ) @ #t))  ∥
             (∃ #t. (ProgressTo_11211( ~prog_ ) @ #t)) )
        case case_2
        solve( State_1121( ~prog_, m.1 ) ▶₀ #t.2 )
          case incm_0_112
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma A_or_B:
  all-traces
  "∀ #t1. (Start( ) @ #t1) ⇒ ((∃ #t2. A( ) @ #t2) ∨ (∃ #t2. B( ) @ #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1.
  (Start( ) @ #t1) ∧ (∀ #t2. (A( ) @ #t2) ⇒ ⊥) ∧ (∀ #t2. (B( ) @ #t2) ⇒ ⊥)"
*/
simplify
solve( State_( ~prog_ ) ▶₀ #t1 )
  case Init
  solve( State_1( ~prog_ ) ▶₀ #t.1 )
    case eventStart_0_
    solve( State_1( ~prog_ ) ▶₀ #t.2 )
      case eventStart_0_
      solve( (∃ #t. (ProgressTo_1111( ~prog_ ) @ #t))  ∥
             (∃ #t. (ProgressTo_11211( ~prog_ ) @ #t)) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

















rule (modulo E) MessageIDRule[color=#ffffff, process="event Start( );"]:
   [ Fr( ~mid_ ) ] --> [ MID_Receiver( ~mid_ ), MID_Sender( ~mid_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init[color=#ffffff, process="event Start( );"]:
   [ Fr( ~prog_ ) ]
  --[ ProgressFrom_( ~prog_ ), Init( ) ]->
   [ State_( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventStart_0_[color=#ffffff, process="event Start( );"]:
   [ State_( ~prog_ ) ] --[ Start( ) ]-> [ State_1( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1[color=#ffffff, process="|"]:
   [ State_1( ~prog_ ) ]
  --[ ProgressTo_12( ~prog_ ) ]->
   [ State_11( ~prog_ ), State_12( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outrHelp_0_111[color=#ffffff,
                               process="out('r','Help');"]:
   [ MID_Sender( ~mid_111 ), State_11( ~prog_ ) ]
  --[ ProgressTo_1111( ~prog_ ), Send( ~mid_111, 'Help' ) ]->
   [ Out( 'Help' ), State_1111( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1111[color=#ffffff, process="0"]:
   [ State_1111( ~prog_ ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) incm_0_112[color=#ffffff, process="in('c',m.1);"]:
   [ State_11( ~prog_ ), In( <'c', m.1> ) ]
  --[ ChannelIn( <'c', m.1> ) ]->
   [ State_1121( ~prog_, m.1 ) ]

  /*
  rule (modulo AC) incm_0_112[color=#ffffff, process="in('c',m.1);"]:
     [ State_11( ~prog_ ), In( <'c', m> ) ]
    --[ ChannelIn( <'c', m> ) ]->
     [ State_1121( ~prog_, m ) ]
  */

rule (modulo E) eventB_0_1121[color=#ffffff, process="event B( );"]:
   [ State_1121( ~prog_, m.1 ) ]
  --[ ProgressTo_11211( ~prog_ ), B( ) ]->
   [ State_11211( ~prog_, m.1 ) ]

  /*
  rule (modulo AC) eventB_0_1121[color=#ffffff, process="event B( );"]:
     [ State_1121( ~prog_, m ) ]
    --[ ProgressTo_11211( ~prog_ ), B( ) ]->
     [ State_11211( ~prog_, m ) ]
  */

rule (modulo E) p_0_11211[color=#ffffff, process="0"]:
   [ State_11211( ~prog_, m.1 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_11211[color=#ffffff, process="0"]:
     [ State_11211( ~prog_, m ) ] --> [ ]
  */

rule (modulo E) inrHelp_0_12[color=#ffffff, process="in('r','Help');"]:
   [
   Fr( ~prog_121 ), State_12( ~prog_ ), In( 'Help' ),
   MID_Receiver( ~mid_12 )
   ]
  --[ ProgressFrom_121( ~prog_121 ), Receive( ~mid_12, 'Help' ) ]->
   [ State_121( ~prog_, ~prog_121 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventA_0_121[color=#ffffff, process="event A( );"]:
   [ State_121( ~prog_, ~prog_121 ) ]
  --[ ProgressTo_1211( ~prog_121 ), A( ) ]->
   [ State_1211( ~prog_, ~prog_121 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1211[color=#ffffff, process="0"]:
   [ State_1211( ~prog_, ~prog_121 ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction Progress__to_1111_or_11211:
  "∀ prog_ #t.
    (ProgressFrom_( prog_ ) @ #t) ⇒
    ((∃ #t.1. ProgressTo_1111( prog_ ) @ #t.1) ∨
     (∃ #t.1. ProgressTo_11211( prog_ ) @ #t.1))"

restriction Progress__to_12:
  "∀ prog_ #t.
    (ProgressFrom_( prog_ ) @ #t) ⇒ (∃ #t.1. ProgressTo_12( prog_ ) @ #t.1)"

restriction Progress_121_to_1211:
  "∀ prog_121 #t.
    (ProgressFrom_121( prog_121 ) @ #t) ⇒
    (∃ #t.1. ProgressTo_1211( prog_121 ) @ #t.1)"

restriction progressInit:
  "∃ #t. Init( ) @ #t"

restriction reliable:
  "∀ #i x y.
    (Send( x, y ) @ #i) ⇒ (∃ #j. (Receive( x, y ) @ #j) ∧ (#i < #j))"

/*
WARNING: the following wellformedness checks failed!

The variables of the follwing rule(s) are not derivable from their premises, you may be performing unintended pattern matching
  MessageIDRule
Failed to derive Variable(s): ~mid_
  
  Init
Failed to derive Variable(s): ~prog_
  
  eventStart_0_
Failed to derive Variable(s): ~prog_
  
  p_0_1
Failed to derive Variable(s): ~prog_
  
  outrHelp_0_111
Failed to derive Variable(s): ~mid_111, ~prog_
  
  p_0_1111
Failed to derive Variable(s): ~prog_
  
  incm_0_112
Failed to derive Variable(s): ~prog_, m.1
  
  eventB_0_1121
Failed to derive Variable(s): ~prog_, m.1
  
  p_0_11211
Failed to derive Variable(s): ~prog_, m.1
  
  inrHelp_0_12
Failed to derive Variable(s): ~mid_12, ~prog_, ~prog_121
  
  eventA_0_121
Failed to derive Variable(s): ~prog_, ~prog_121
  
  p_0_1211
Failed to derive Variable(s): ~prog_, ~prog_121
*/

/*
Generated from:
Tamarin version 1.7.1
Maude version 3.2.1
Git revision: 4b299c253445d7bbc7fce41abf0b0d5659bb1d58, branch: develop
Compiled at: 2023-06-26 11:54:20.223793825 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 3.2.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-progress/mini9.spthy

  output:          examples/sapic/fast/feature-progress/mini9.spthy.tmp
  processing time: 0.16s
  
  WARNING: 12 wellformedness check failed!
           The analysis results might be wrong!
  
  A_possible (exists-trace): verified (15 steps)
  B_possible (exists-trace): verified (7 steps)
  A_or_B (all-traces): verified (7 steps)

==============================================================================
*/
