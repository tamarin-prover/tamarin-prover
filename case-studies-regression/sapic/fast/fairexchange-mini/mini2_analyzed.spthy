theory mini2 begin

// Function signature and definition of the equational theory E

functions: fst/1, h/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: p

section{* small example for progression function *}

lemma A_impossible:
  all-traces "¬(∃ #t. A( ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"∃ #t. (A( ) @ #t)"
*/
simplify
by solve( State_111( ~prog_, ~prog_111, k, m ) ▶₀ #t )

lemma B_possible:
  exists-trace "∃ #t. B( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (B( ) @ #t)"
*/
simplify
solve( State_1211( ~prog_, ~prog_121, k, m ) ▶₀ #t )
  case outcm_0_121
  solve( State_( ~prog_ ) ▶₀ #t.2 )
    case Init
    solve( State_( ~prog_ ) ▶₀ #t.3 )
      case Init
      solve( State_1211( ~prog_.1, ~prog_121, k, m.1 ) ▶₀ #t.3 )
        case outcm_0_121
        solve( State_( ~prog_ ) ▶₀ #t.3 )
          case Init
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

rule (modulo E) MessageIDRule[color=#ffffff, process="new k;"]:
   [ Fr( ~mid_ ) ] --> [ MID_Receiver( ~mid_ ), MID_Sender( ~mid_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init[color=#ffffff, process="new k;"]:
   [ Fr( ~prog_ ) ]
  --[ ProgressFrom_( ~prog_ ), Init( ) ]->
   [ State_( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newk_0_[color=#ffffff, process="new k;"]:
   [ State_( ~prog_ ), Fr( k ) ]
  --[ ProgressTo_1( ~prog_ ) ]->
   [ State_1( ~prog_, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inrsignmk_0_11[color=#ffffff,
                               process="in('r',sign(m, k));"]:
   [
   Fr( ~prog_111 ), State_1( ~prog_, k ), In( sign(m, k) ),
   MID_Receiver( ~mid_11 )
   ]
  --[ ProgressFrom_111( ~prog_111 ), Receive( ~mid_11, sign(m, k) ) ]->
   [ State_111( ~prog_, ~prog_111, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventA_0_111[color=#ffffff, process="event A( );"]:
   [ State_111( ~prog_, ~prog_111, k, m ) ]
  --[ ProgressTo_1111( ~prog_111 ), A( ) ]->
   [ State_1111( ~prog_, ~prog_111, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1111[color=#ffffff, process="0"]:
   [ State_1111( ~prog_, ~prog_111, k, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) inrm_0_12[color=#ffffff, process="in('r',m);"]:
   [ Fr( ~prog_121 ), State_1( ~prog_, k ), In( m ), MID_Receiver( ~mid_12 )
   ]
  --[ ProgressFrom_121( ~prog_121 ), Receive( ~mid_12, m ) ]->
   [ State_121( ~prog_, ~prog_121, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outcm_0_121[color=#ffffff, process="out('c',m);"]:
   [ State_121( ~prog_, ~prog_121, k, m ), In( 'c' ) ]
  --[ ChannelIn( 'c' ) ]->
   [ State_1211( ~prog_, ~prog_121, k, m ), Out( m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventB_0_1211[color=#ffffff, process="event B( );"]:
   [ State_1211( ~prog_, ~prog_121, k, m ) ]
  --[ ProgressTo_12111( ~prog_121 ), B( ) ]->
   [ State_12111( ~prog_, ~prog_121, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_12111[color=#ffffff, process="0"]:
   [ State_12111( ~prog_, ~prog_121, k, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction Progress__to_1:
  "∀ prog_ #t.
    (ProgressFrom_( prog_ ) @ #t) ⇒ (∃ #t.1. ProgressTo_1( prog_ ) @ #t.1)"

restriction Progress_111_to_1111:
  "∀ prog_111 #t.
    (ProgressFrom_111( prog_111 ) @ #t) ⇒
    (∃ #t.1. ProgressTo_1111( prog_111 ) @ #t.1)"

restriction Progress_121_to_12111:
  "∀ prog_121 #t.
    (ProgressFrom_121( prog_121 ) @ #t) ⇒
    (∃ #t.1. ProgressTo_12111( prog_121 ) @ #t.1)"

restriction progressInit:
  "∃ #t. Init( ) @ #t"

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/fairexchange-mini/mini2.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/fairexchange-mini/mini2.spthy

  output:          examples/sapic/fast/fairexchange-mini/mini2.spthy.tmp
  processing time: 0.121488463s
  A_impossible (all-traces): verified (2 steps)
  B_possible (exists-trace): verified (7 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/fairexchange-mini/mini2.spthy

  output:          examples/sapic/fast/fairexchange-mini/mini2.spthy.tmp
  processing time: 0.121488463s
  A_impossible (all-traces): verified (2 steps)
  B_possible (exists-trace): verified (7 steps)

==============================================================================
*/
