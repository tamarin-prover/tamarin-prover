theory mini3 begin

// Function signature and definition of the equational theory E

functions: fst/1, h/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: p

section{* small example for progression function *}

lemma A_possible:
  exists-trace "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (A( ) @ #t)"
*/
simplify
solve( State_11( ~prog_11, m ) ▶₀ #t )
  case inrm_0_1
  solve( State_11( ~prog_11, m.1 ) ▶₀ #t.2 )
    case inrm_0_1
    SOLVED // trace found
  qed
qed

lemma B_possible:
  exists-trace "∃ #t. B( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (B( ) @ #t)"
*/
simplify
solve( State_211( ~prog_211, m ) ▶₀ #t )
  case inrm_0_21
  solve( State_211( ~prog_211, m.1 ) ▶₀ #t.2 )
    case inrm_0_21
    SOLVED // trace found
  qed
qed

lemma A_once:
  all-traces "¬(∃ #t1 #t2. ((A( ) @ #t1) ∧ (A( ) @ #t2)) ∧ (¬(#t1 = #t2)))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 #t2. (A( ) @ #t1) ∧ (A( ) @ #t2) ∧ ¬(#t1 = #t2)"
*/
simplify
solve( (#t1 < #t2)  ∥ (#t2 < #t1) )
  case case_1
  solve( State_11( ~prog_11, m ) ▶₀ #t1 )
    case inrm_0_1
    solve( State_11( ~prog_11.1, m.1 ) ▶₀ #t2 )
      case inrm_0_1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( State_11( ~prog_11, m ) ▶₀ #t1 )
    case inrm_0_1
    solve( State_11( ~prog_11.1, m.1 ) ▶₀ #t2 )
      case inrm_0_1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma B_multiple:
  exists-trace "∃ #t1 #t2. ((B( ) @ #t1) ∧ (B( ) @ #t2)) ∧ (¬(#t1 = #t2))"
/*
guarded formula characterizing all satisfying traces:
"∃ #t1 #t2. (B( ) @ #t1) ∧ (B( ) @ #t2) ∧ ¬(#t1 = #t2)"
*/
simplify
solve( (#t1 < #t2)  ∥ (#t2 < #t1) )
  case case_1
  solve( State_211( ~prog_211, m ) ▶₀ #t1 )
    case inrm_0_21
    solve( State_211( ~prog_211.1, m.1 ) ▶₀ #t2 )
      case inrm_0_21
      solve( State_211( ~prog_211, m.2 ) ▶₀ #t.1 )
        case inrm_0_21
        solve( State_211( ~prog_211.1, m.2 ) ▶₀ #t.1 )
          case inrm_0_21
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

rule (modulo E) MessageIDRule[color=#ffffff, process="+"]:
   [ Fr( ~mid_ ) ] --> [ MID_Receiver( ~mid_ ), MID_Sender( ~mid_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init[color=#ffffff, process="+"]:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inrm_0_1[color=#ffffff, process="in('r',m);"]:
   [ Fr( ~prog_11 ), State_( ), In( m ), MID_Receiver( ~mid_1 ) ]
  --[ ProgressFrom_11( ~prog_11 ), Receive( ~mid_1, m ) ]->
   [ State_11( ~prog_11, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventA_0_11[color=#ffffff, process="event A( );"]:
   [ State_11( ~prog_11, m ) ]
  --[ ProgressTo_111( ~prog_11 ), A( ) ]->
   [ State_111( ~prog_11, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_111[color=#ffffff, process="0"]:
   [ State_111( ~prog_11, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_2[color=#ffffff, process="!"]:
   [ State_( ) ] --> [ !Semistate_21( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_2[color=#ffffff, process="!"]:
   [ !Semistate_21( ) ] --> [ State_21( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inrm_0_21[color=#ffffff, process="in('r',m);"]:
   [ Fr( ~prog_211 ), State_21( ), In( m ), MID_Receiver( ~mid_21 ) ]
  --[ ProgressFrom_211( ~prog_211 ), Receive( ~mid_21, m ) ]->
   [ State_211( ~prog_211, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventB_0_211[color=#ffffff, process="event B( );"]:
   [ State_211( ~prog_211, m ) ]
  --[ ProgressTo_2111( ~prog_211 ), B( ) ]->
   [ State_2111( ~prog_211, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_2111[color=#ffffff, process="0"]:
   [ State_2111( ~prog_211, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction Progress_11_to_111:
  "∀ prog_11 #t.
    (ProgressFrom_11( prog_11 ) @ #t) ⇒
    (∃ #t.1. ProgressTo_111( prog_11 ) @ #t.1)"

restriction Progress_211_to_2111:
  "∀ prog_211 #t.
    (ProgressFrom_211( prog_211 ) @ #t) ⇒
    (∃ #t.1. ProgressTo_2111( prog_211 ) @ #t.1)"

restriction progressInit:
  "∃ #t. Init( ) @ #t"

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/fairexchange-mini/mini3.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/fairexchange-mini/mini3.spthy

  output:          examples/sapic/fast/fairexchange-mini/mini3.spthy.tmp
  processing time: 0.121131118s
  A_possible (exists-trace): verified (4 steps)
  B_possible (exists-trace): verified (4 steps)
  A_once (all-traces): verified (8 steps)
  B_multiple (exists-trace): verified (7 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/fairexchange-mini/mini3.spthy

  output:          examples/sapic/fast/fairexchange-mini/mini3.spthy.tmp
  processing time: 0.121131118s
  A_possible (exists-trace): verified (4 steps)
  B_possible (exists-trace): verified (4 steps)
  A_once (all-traces): verified (8 steps)
  B_multiple (exists-trace): verified (7 steps)

==============================================================================
*/
