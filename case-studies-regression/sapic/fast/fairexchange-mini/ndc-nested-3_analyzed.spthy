theory nestedNDC3 begin

// Function signature and definition of the equational theory E

functions: fst/1, h/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: p

section{* small example for progression function *}

lemma A_possible:
  exists-trace "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (A( ) @ #t)"
*/
simplify
solve( State_11( ~prog_ ) ▶₀ #t )
  case p_1_1
  solve( (∃ #t. (ProgressTo_111( ~prog_ ) @ #t))  ∥
         (∃ #t. (ProgressTo_2111( ~prog_ ) @ #t))  ∥
         (∃ #t. (ProgressTo_221( ~prog_ ) @ #t)) )
    case case_1
    solve( State_11( ~prog_ ) ▶₀ #t.2 )
      case p_1_1
      SOLVED // trace found
    qed
  qed
qed

lemma B_possible:
  exists-trace "∃ #t. B( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (B( ) @ #t)"
*/
simplify
solve( State_211( ~prog_ ) ▶₀ #t )
  case p_1_21
  solve( (∃ #t. (ProgressTo_111( ~prog_ ) @ #t))  ∥
         (∃ #t. (ProgressTo_2111( ~prog_ ) @ #t))  ∥
         (∃ #t. (ProgressTo_221( ~prog_ ) @ #t)) )
    case case_2
    solve( State_211( ~prog_ ) ▶₀ #t.2 )
      case p_1_21
      SOLVED // trace found
    qed
  qed
qed

lemma C_possible:
  exists-trace "∃ #t. C( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (C( ) @ #t)"
*/
simplify
solve( State_( ~prog_ ) ▶₀ #t )
  case Init
  solve( (∃ #t. (ProgressTo_111( ~prog_ ) @ #t))  ∥
         (∃ #t. (ProgressTo_2111( ~prog_ ) @ #t))  ∥
         (∃ #t. (ProgressTo_221( ~prog_ ) @ #t)) )
    case case_3
    solve( State_( ~prog_ ) ▶₀ #t.2 )
      case Init
      SOLVED // trace found
    qed
  qed
qed

lemma oneEventAlways:
  all-traces "((∃ #t. A( ) @ #t) ∨ (∃ #t. B( ) @ #t)) ∨ (∃ #t. C( ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"(∀ #t. (A( ) @ #t) ⇒ ⊥) ∧
 (∀ #t. (B( ) @ #t) ⇒ ⊥) ∧
 (∀ #t. (C( ) @ #t) ⇒ ⊥)"
*/
simplify
solve( (∃ #t. (ProgressTo_111( ~prog_ ) @ #t))  ∥
       (∃ #t. (ProgressTo_2111( ~prog_ ) @ #t))  ∥
       (∃ #t. (ProgressTo_221( ~prog_ ) @ #t)) )
  case case_1
  by contradiction /* from formulas */
next
  case case_2
  by contradiction /* from formulas */
next
  case case_3
  by contradiction /* from formulas */
qed

rule (modulo E) MessageIDRule[color=#ffffff, process="+"]:
   [ Fr( ~mid_ ) ] --> [ MID_Receiver( ~mid_ ), MID_Sender( ~mid_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init[color=#ffffff, process="+"]:
   [ Fr( ~prog_ ) ]
  --[ ProgressFrom_( ~prog_ ), Init( ) ]->
   [ State_( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1[color=#ffffff, process="!"]:
   [ State_( ~prog_ ) ] --> [ !Semistate_11( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_1[color=#ffffff, process="!"]:
   [ !Semistate_11( ~prog_ ) ] --> [ State_11( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventA_0_11[color=#ffffff, process="event A( );"]:
   [ State_11( ~prog_ ) ]
  --[ ProgressTo_111( ~prog_ ), A( ) ]->
   [ State_111( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_111[color=#ffffff, process="0"]:
   [ State_111( ~prog_ ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_21[color=#ffffff, process="!"]:
   [ State_( ~prog_ ) ] --> [ !Semistate_211( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_21[color=#ffffff, process="!"]:
   [ !Semistate_211( ~prog_ ) ] --> [ State_211( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventB_0_211[color=#ffffff, process="event B( );"]:
   [ State_211( ~prog_ ) ]
  --[ ProgressTo_2111( ~prog_ ), B( ) ]->
   [ State_2111( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_2111[color=#ffffff, process="0"]:
   [ State_2111( ~prog_ ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventC_0_22[color=#ffffff, process="event C( );"]:
   [ State_( ~prog_ ) ]
  --[ ProgressTo_221( ~prog_ ), C( ) ]->
   [ State_221( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_221[color=#ffffff, process="0"]:
   [ State_221( ~prog_ ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction Progress__to_111_or_2111_or_221:
  "∀ prog_ #t.
    (ProgressFrom_( prog_ ) @ #t) ⇒
    ((∃ #t.1. ProgressTo_111( prog_ ) @ #t.1) ∨
     ((∃ #t.1. ProgressTo_2111( prog_ ) @ #t.1) ∨
      (∃ #t.1. ProgressTo_221( prog_ ) @ #t.1)))"

restriction progressInit:
  "∃ #t. Init( ) @ #t"

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/fairexchange-mini/ndc-nested-3.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/fairexchange-mini/ndc-nested-3.spthy

  output:          examples/sapic/fast/fairexchange-mini/ndc-nested-3.spthy.tmp
  processing time: 0.091042543s
  A_possible (exists-trace): verified (5 steps)
  B_possible (exists-trace): verified (5 steps)
  C_possible (exists-trace): verified (5 steps)
  oneEventAlways (all-traces): verified (5 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/fairexchange-mini/ndc-nested-3.spthy

  output:          examples/sapic/fast/fairexchange-mini/ndc-nested-3.spthy.tmp
  processing time: 0.091042543s
  A_possible (exists-trace): verified (5 steps)
  B_possible (exists-trace): verified (5 steps)
  C_possible (exists-trace): verified (5 steps)
  oneEventAlways (all-traces): verified (5 steps)

==============================================================================
*/
