theory ChannelsTestOne begin

// Function signature and definition of the equational theory E

functions: fst/1[destructor], pair/2, pk/1, sign/2, snd/1[destructor],
           true/0, verify/3[destructor]
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: p















lemma secret:
  all-traces "∀ x #i. (Secret( x ) @ #i) ⇒ (¬(∃ #j. K( x ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (Secret( x ) @ #i) ∧ ∃ #j. (K( x ) @ #j)"
*/
simplify
solve( State_111111111( c1, c2, x, skP2 ) ▶₀ #i )
  case Init
  by solve( !KU( ~n.2 ) @ #vk )
qed

lemma auth:
  all-traces
  "∀ x #i. (Accept( x ) @ #i) ⇒ (∃ #j. (#j < #i) ∧ (Received( x ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (Accept( x ) @ #i) ∧ ∀ #j. (Received( x ) @ #j) ⇒ ¬(#j < #i)"
*/
simplify
solve( State_1111121( c1, c2, x, skP2 ) ▶₀ #i )
  case Init
  solve( !KU( sign('test', ~n.2) ) @ #vk )
    case c_sign
    by solve( !KU( ~n.2 ) @ #vk.2 )
  next
    case eventReceivedx_0_1111111211
    by contradiction /* from formulas */
  qed
qed

lemma auth2:
  all-traces
  "∀ x #i. (Accept2( x ) @ #i) ⇒ (∃ #j. (#j < #i) ∧ (Received2( x ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (Accept2( x ) @ #i) ∧ ∀ #j. (Received2( x ) @ #j) ⇒ ¬(#j < #i)"
*/
simplify
solve( State_111121( c1, c2, skP1, x ) ▶₀ #i )
  case Init
  solve( !KU( sign('test', ~n.3) ) @ #vk )
    case c_sign
    by solve( !KU( ~n.3 ) @ #vk.2 )
  next
    case eventReceivedx_0_111111211
    by contradiction /* from formulas */
  qed
qed

lemma accept:
  exists-trace "∃ x #i. Accept( x ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i. (Accept( x ) @ #i)"
*/
simplify
solve( State_1111121( c1, c2, x, skP2 ) ▶₀ #i )
  case Init
  solve( !KU( sign('test', ~n.2) ) @ #vk )
    case eventReceivedx_0_1111111211
    SOLVED // trace found
  qed
qed

lemma accept2:
  exists-trace "∃ x #i. Accept2( x ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i. (Accept2( x ) @ #i)"
*/
simplify
solve( State_111121( c1, c2, skP1, x ) ▶₀ #i )
  case Init
  solve( !KU( sign('test', ~n.3) ) @ #vk )
    case eventReceivedx_0_111111211
    solve( Ack( ~n, ~n.2 ) ▶₁ #vr.4 )
      case incx_0_111111121
      SOLVED // trace found
    qed
  qed
qed



rule (modulo E) eventSecretskP_0_111111111[color=#6c8040,
                                           process="event Secret( skP1.1 );"]:
   [ State_111111111( c1.1, c2.1, skP1.1, skP2.1 ) ]
  --[ Secret( skP1.1 ) ]->
   [
   Message( c1.1, skP1.1 ),
   Semistate_11111111111( c1.1, c2.1, skP1.1, skP2.1 )
   ]

  /*
  rule (modulo AC) eventSecretskP_0_111111111[color=#6c8040,
                                              process="event Secret( skP1.1 );"]:
     [ State_111111111( c1, c2, skP1, skP2 ) ]
    --[ Secret( skP1 ) ]->
     [ Message( c1, skP1 ), Semistate_11111111111( c1, c2, skP1, skP2 ) ]
  */

rule (modulo E) outcskP_1_1111111111[color=#6c8040,
                                     process="out(c1.1,skP1.1);"]:
   [
   Semistate_11111111111( c1.1, c2.1, skP1.1, skP2.1 ), Ack( c1.1, skP1.1 )
   ]
  -->
   [
   Message( c2.1, skP2.1 ),
   Semistate_111111111111( c1.1, c2.1, skP1.1, skP2.1 )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) outcskP_1_1111111111[color=#6c8040,
                                        process="out(c1.1,skP1.1);"]:
     [ Semistate_11111111111( c1, c2, skP1, skP2 ), Ack( c1, skP1 ) ]
    -->
     [ Message( c2, skP2 ), Semistate_111111111111( c1, c2, skP1, skP2 ) ]
    // loop breaker: [1]
  */

rule (modulo E) incx_0_111111121[color=#807140, process="in(c1.1,x.1);"]:
   [ State_111111121( c1.1, c2.1, skP1.1, skP2.1 ), Message( c1.1, x.2 ) ]
  -->
   [ Let_1111111211( x.2, c1.1, c2.1, skP1.1, skP2.1 ), Ack( c1.1, x.2 ) ]

  /*
  rule (modulo AC) incx_0_111111121[color=#807140,
                                    process="in(c1.1,x.1);"]:
     [ State_111111121( c1, c2, skP1, skP2 ), Message( c1, x ) ]
    -->
     [ Let_1111111211( x, c1, c2, skP1, skP2 ), Ack( c1, x ) ]
  */

rule (modulo E) incx_1_111111121[color=#807140, process="in(c1.1,x.1);"]:
   [ Let_1111111211( x.1, c1.1, c2.1, skP1.1, skP2.1 ) ]
  -->
   [ State_1111111211( c1.1, c2.1, skP1.1, skP2.1, x.1 ) ]

  /*
  rule (modulo AC) incx_1_111111121[color=#807140,
                                    process="in(c1.1,x.1);"]:
     [ Let_1111111211( x, c1, c2, skP1, skP2 ) ]
    -->
     [ State_1111111211( c1, c2, skP1, skP2, x ) ]
  */

rule (modulo E) eventReceivedx_0_1111111211[color=#807140,
                                            process="event Received( x.1 );"]:
   [ State_1111111211( c1.1, c2.1, skP1.1, skP2.1, x.1 ) ]
  --[ Received( x.1 ) ]->
   [ Out( sign('test', x.1) ) ]

  /*
  rule (modulo AC) eventReceivedx_0_1111111211[color=#807140,
                                               process="event Received( x.1 );"]:
     [ State_1111111211( c1, c2, skP1, skP2, x ) ]
    --[ Received( x ) ]->
     [ Out( sign('test', x) ) ]
  */

rule (modulo E) incx_0_11111121[color=#408073, process="in(c2.1,x.2);"]:
   [ State_11111121( c1.1, c2.1, skP1.1, skP2.1 ), Message( c2.1, x.2 ) ]
  -->
   [ Let_111111211( x.2, c1.1, c2.1, skP1.1, skP2.1 ), Ack( c2.1, x.2 ) ]

  /*
  rule (modulo AC) incx_0_11111121[color=#408073, process="in(c2.1,x.2);"]:
     [ State_11111121( c1, c2, skP1, skP2 ), Message( c2, x ) ]
    -->
     [ Let_111111211( x, c1, c2, skP1, skP2 ), Ack( c2, x ) ]
  */

rule (modulo E) incx_1_11111121[color=#408073, process="in(c2.1,x.2);"]:
   [ Let_111111211( x.2, c1.1, c2.1, skP1.1, skP2.1 ) ]
  -->
   [ State_111111211( c1.1, c2.1, skP1.1, skP2.1, x.2 ) ]

  /*
  rule (modulo AC) incx_1_11111121[color=#408073, process="in(c2.1,x.2);"]:
     [ Let_111111211( x, c1, c2, skP1, skP2 ) ]
    -->
     [ State_111111211( c1, c2, skP1, skP2, x ) ]
  */

rule (modulo E) eventReceivedx_0_111111211[color=#408073,
                                           process="event Received2( x.2 );"]:
   [ State_111111211( c1.1, c2.1, skP1.1, skP2.1, x.2 ) ]
  --[ Received2( x.2 ) ]->
   [ Out( sign('test', x.2) ) ]

  /*
  rule (modulo AC) eventReceivedx_0_111111211[color=#408073,
                                              process="event Received2( x.2 );"]:
     [ State_111111211( c1, c2, skP1, skP2, x ) ]
    --[ Received2( x ) ]->
     [ Out( sign('test', x) ) ]
  */

rule (modulo E) insigntestskP_0_1111121[color=#407e80,
                                        process="in(sign('test', =skP1.1));"]:
   [ State_1111121( c1.1, c2.1, skP1.1, skP2.1 ), In( sign('test', skP1.1) )
   ]
  --[ Accept( skP1.1 ) ]->
   [ ]

  /*
  rule (modulo AC) insigntestskP_0_1111121[color=#407e80,
                                           process="in(sign('test', =skP1.1));"]:
     [ State_1111121( c1, c2, skP1, skP2 ), In( sign('test', skP1) ) ]
    --[ Accept( skP1 ) ]->
     [ ]
  */

rule (modulo E) Init[color=#ffffff, process="new skP1.1;"]:
   [ Fr( skP1.1 ), Fr( skP2.1 ), Fr( c1.1 ), Fr( c2.1 ) ]
  --[ Init( ) ]->
   [
   State_111121( c1.1, c2.1, skP1.1, skP2.1 ),
   State_1111121( c1.1, c2.1, skP1.1, skP2.1 ),
   State_11111121( c1.1, c2.1, skP1.1, skP2.1 ),
   State_111111121( c1.1, c2.1, skP1.1, skP2.1 ),
   State_111111111( c1.1, c2.1, skP1.1, skP2.1 )
   ]

  /*
  rule (modulo AC) Init[color=#ffffff, process="new skP1.1;"]:
     [ Fr( skP1 ), Fr( skP2 ), Fr( c1 ), Fr( c2 ) ]
    --[ Init( ) ]->
     [
     State_111121( c1, c2, skP1, skP2 ), State_1111121( c1, c2, skP1, skP2 ),
     State_11111121( c1, c2, skP1, skP2 ),
     State_111111121( c1, c2, skP1, skP2 ),
     State_111111111( c1, c2, skP1, skP2 )
     ]
  */

rule (modulo E) insigntestskP_0_111121[color=#806640,
                                       process="in(sign('test', =skP2.1));"]:
   [ State_111121( c1.1, c2.1, skP1.1, skP2.1 ), In( sign('test', skP2.1) )
   ]
  --[ Accept2( skP2.1 ) ]->
   [ ]

  /*
  rule (modulo AC) insigntestskP_0_111121[color=#806640,
                                          process="in(sign('test', =skP2.1));"]:
     [ State_111121( c1, c2, skP1, skP2 ), In( sign('test', skP2) ) ]
    --[ Accept2( skP2 ) ]->
     [ ]
  */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 3.0. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/feature-secret-channel/secret-channel.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/feature-secret-channel/secret-channel.spthy

  output:          examples/sapic/fast/feature-secret-channel/secret-channel.spthy.tmp
  processing time: 0.197641575s
  secret (all-traces): verified (3 steps)
  auth (all-traces): verified (5 steps)
  auth2 (all-traces): verified (5 steps)
  accept (exists-trace): verified (4 steps)
  accept2 (exists-trace): verified (5 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-secret-channel/secret-channel.spthy

  output:          examples/sapic/fast/feature-secret-channel/secret-channel.spthy.tmp
  processing time: 0.197641575s
  secret (all-traces): verified (3 steps)
  auth (all-traces): verified (5 steps)
  auth2 (all-traces): verified (5 steps)
  accept (exists-trace): verified (4 steps)
  accept2 (exists-trace): verified (5 steps)

==============================================================================
*/
