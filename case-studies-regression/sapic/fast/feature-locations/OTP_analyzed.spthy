theory OTP begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, cde/1, chall/1, chall2/1,
           check_rep/2[destructor], dcde/1, dchall/1, dchall2/1, dscode/1,
           dshared/1, dsko/1, fst/1, get_rep/1[destructor], h/1, hash/2, list/2,
           pair/2, pk/1, prog/2, rep/2[private,destructor], report/1, scode/1,
           sdec/2, senc/2, shared/1, sko/1, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    check_rep(rep(x.1, x.2), x.2) = x.1,
    dcde(cde(m)) = m,
    dscode(scode(m)) = m,
    dshared(shared(m)) = m,
    dsko(sko(m)) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(x.1, x.2)) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



heuristic: S







predicate: Report( x, y )<=>¬(y = 'loc')









lemma reachV:
  exists-trace "∃ pka k #t1. SessionV( pka, k ) @ #t1"
/*
guarded formula characterizing all satisfying traces:
"∃ pka k #t1. (SessionV( pka, k ) @ #t1)"
*/
simplify
solve( State_111111111121211111( cu, pc, pw, share, skV, cypher, signed
       ) ▶₀ #t1 )
  case ifaencadeccypherskVpkskVcheckrepsignedloc_0_11111111112121111
  solve( splitEqs(0) )
    case split_case_2
    solve( !KU( shared(<aenc(z, pk(~n.3)), rep(aenc(z, pk(~n.3)), 'loc')>)
           ) @ #vk )
      case c_shared
      solve( !KU( rep(aenc(z, pk(~n.3)), 'loc') ) @ #vk.3 )
        case newsharedk_0_11111111112111
        solve( !KU( aenc(~n.3, pk(~n.4)) ) @ #vk.3 )
          case newsharedk_0_11111111112111_case_1
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma secrecy_key [reuse]:
  all-traces "¬(∃ k #t1 #t2. (Key( k ) @ #t1) ∧ (!KU( k ) @ #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ k #t1 #t2. (Key( k ) @ #t1) ∧ (!KU( k ) @ #t2)"
*/
simplify
solve( State_1111111( cu, pc, pw, k ) ▶₀ #t1 )
  case eventChanpcchannel_0_11111
  solve( !KU( ~n.3 ) @ #t2 )
    case eventProvUcode_0_1111111111111
    solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.3 )
      case inpcchannelcode_1_111111111111_case_1
      solve( (#vr.4, 0) ~~> (#t2, 0) )
        case d_0_fst
        by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.9 )
      next
        case d_0_snd
        by solve( (#vr.10, 0) ~~> (#t2, 0) )
      qed
    next
      case inpcchannelcode_1_111111111111_case_2
      by solve( (#vr.4, 0) ~~> (#t2, 0) )
    qed
  qed
qed

lemma key_ex [reuse]:
  all-traces
  "∀ pka k #t1.
    (SessionV( pka, k ) @ #t1) ⇒
    (∃ #t2. (SessionP( pka, k ) @ #t2) ∧ (#t2 < #t1))"
/*
guarded formula characterizing all counter-examples:
"∃ pka k #t1.
  (SessionV( pka, k ) @ #t1)
 ∧
  ∀ #t2. (SessionP( pka, k ) @ #t2) ⇒ ¬(#t2 < #t1)"
*/
simplify
solve( State_111111111121211111( cu, pc, pw, share, skV, cypher, signed
       ) ▶₀ #t1 )
  case ifaencadeccypherskVpkskVcheckrepsignedloc_0_11111111112121111
  solve( splitEqs(0) )
    case split_case_1
    solve( !KU( shared(<cypher, 
                        rep(aenc(adec(cypher, ~n.3), pk(~n.3)), 'loc')>)
           ) @ #vk )
      case c_shared
      solve( !KU( rep(aenc(adec(cypher, ~n.3), pk(~n.3)), 'loc') ) @ #vk.3 )
        case ReportRule
        by contradiction /* from formulas */
      next
        case eventProvUcode_0_1111111111111
        solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.9 )
          case inpcchannelcode_1_111111111111_case_1
          solve( (#vr.10, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.15 )
          next
            case d_0_snd
            by contradiction /* impossible chain */
          qed
        next
          case inpcchannelcode_1_111111111111_case_2
          by contradiction /* impossible chain */
        qed
      qed
    next
      case eventProvUcode_0_1111111111111
      solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.9 )
        case inpcchannelcode_1_111111111111_case_1
        solve( (#vr.10, 0) ~~> (#vk, 0) )
          case d_0_fst
          by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.15 )
        next
          case d_0_snd
          by contradiction /* impossible chain */
        qed
      next
        case inpcchannelcode_1_111111111111_case_2
        by contradiction /* impossible chain */
      qed
    qed
  next
    case split_case_2
    solve( !KU( shared(<aenc(z, pk(~n.3)), rep(aenc(z, pk(~n.3)), 'loc')>)
           ) @ #vk )
      case c_shared
      solve( !KU( rep(aenc(z, pk(~n.3)), 'loc') ) @ #vk.3 )
        case ReportRule
        by contradiction /* from formulas */
      next
        case eventProvUcode_0_1111111111111
        solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.9 )
          case inpcchannelcode_1_111111111111_case_1
          solve( (#vr.10, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.15 )
          next
            case d_0_snd
            by contradiction /* impossible chain */
          qed
        next
          case inpcchannelcode_1_111111111111_case_2
          by contradiction /* impossible chain */
        qed
      next
        case newsharedk_0_11111111112111
        by contradiction /* from formulas */
      qed
    next
      case eventProvUcode_0_1111111111111
      solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.9 )
        case inpcchannelcode_1_111111111111_case_1
        solve( (#vr.10, 0) ~~> (#vk, 0) )
          case d_0_fst
          by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.15 )
        next
          case d_0_snd
          by contradiction /* impossible chain */
        qed
      next
        case inpcchannelcode_1_111111111111_case_2
        by contradiction /* impossible chain */
      qed
    next
      case newsharedk_0_11111111112111
      by contradiction /* from formulas */
    qed
  qed
qed

lemma secrecy_ex [reuse]:
  all-traces
  "¬(∃ pka k #t1 #t2. (SessionV( pka, k ) @ #t1) ∧ (!KU( k ) @ #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ pka k #t1 #t2. (SessionV( pka, k ) @ #t1) ∧ (!KU( k ) @ #t2)"
*/
simplify
solve( State_111111111121211111( cu, pc, pw, share, skV,
                                 aenc(~n, pk(skV)), signed
       ) ▶₀ #t1 )
  case ifaencadeccypherskVpkskVcheckrepsignedloc_0_11111111112121111
  solve( State_11111111112111( cu, pc, pw, ~n.4 ) ▶₀ #t2 )
    case p_1_11111111112
    solve( !KU( ~n.3 ) @ #t2.1 )
      case eventProvUcode_0_1111111111111
      solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.11 )
        case inpcchannelcode_1_111111111111_case_1
        solve( (#vr.12, 0) ~~> (#t2.1, 0) )
          case d_0_fst
          by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.17 )
        next
          case d_0_snd
          by solve( (#vr.18, 0) ~~> (#t2.1, 0) )
        qed
      next
        case inpcchannelcode_1_111111111111_case_2
        by solve( (#vr.12, 0) ~~> (#t2.1, 0) )
      qed
    next
      case newsharedk_0_11111111112111_case_1
      by contradiction /* from formulas */
    next
      case newsharedk_0_11111111112111_case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma unic [reuse]:
  all-traces
  "∀ #t1 #t2 pw fr.
    ((AskU( pw, fr ) @ #t1) ∧ (AskU( pw, fr ) @ #t2)) ⇒ (#t1 = #t2)"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 #t2 pw fr.
  (AskU( pw, fr ) @ #t1) ∧ (AskU( pw, fr ) @ #t2) ∧ ¬(#t1 = #t2)"
*/
simplify
by contradiction /* from formulas */

lemma secrecy_chall [reuse]:
  all-traces
  "¬(∃ pw chal fr k #t1 #t2.
      (Ask( pw, chal, fr, k ) @ #t1) ∧ (!KU( chal ) @ #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ pw chal fr k #t1 #t2.
  (Ask( pw, chal, fr, k ) @ #t1) ∧ (!KU( chal ) @ #t2)"
*/
simplify
solve( State_11111111112111111111111( cdcode, cu, pc, pw, k, skV,
                                      skosenc, fr
       ) ▶₀ #t1 )
  case incuchannelpwfr_1_1111111111211111111111
  solve( State_1111111111111( code, ~n, pc, ~n.2, skV ) ▶₀ #vr.5 )
    case inpcchannelcode_1_111111111111_case_1
    by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.17 )
  next
    case inpcchannelcode_1_111111111111_case_2
    solve( State_11111111112111( cu, pc, pw, ~n.4 ) ▶₀ #t2 )
      case p_1_11111111112
      solve( splitEqs(1) )
        case split_case_1
        solve( splitEqs(0) )
          case split_case_1
          solve( !KU( senc(chal, ~n.3) ) @ #vk )
            case c_senc
            solve( !KU( ~n.3 ) @ #vk.4 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
                next
                  case d_0_snd
                  by solve( (#vr.31, 0) ~~> (#vk.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
              qed
            next
              case newsharedk_0_11111111112111_case_1
              by contradiction /* from formulas */
            next
              case newsharedk_0_11111111112111_case_2
              by contradiction /* from formulas */
            qed
          next
            case eventProvScode_0_11111111112121111111111
            solve( !KU( ~n.6 ) @ #t2.1 )
              case eventProvScode_0_11111111112121111111111
              by contradiction /* from formulas */
            next
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.36 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.37, 0) ~~> (#t2.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.42 )
                next
                  case d_0_snd
                  by solve( (#vr.43, 0) ~~> (#t2.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.37, 0) ~~> (#t2.1, 0) )
              qed
            qed
          next
            case eventProvUcode_0_1111111111111
            solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
              case inpcchannelcode_1_111111111111_case_1
              solve( (#vr.25, 0) ~~> (#vk, 0) )
                case d_0_fst
                by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            next
              case inpcchannelcode_1_111111111111_case_2
              by contradiction /* impossible chain */
            qed
          next
            case p_1_11111111112121111111111111
            solve( !KU( ~n.6 ) @ #t2.1 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.36 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.37, 0) ~~> (#t2.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.42 )
                next
                  case d_0_snd
                  by solve( (#vr.43, 0) ~~> (#t2.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.37, 0) ~~> (#t2.1, 0) )
              qed
            next
              case p_1_11111111112121111111111111
              by contradiction /* from formulas */
            qed
          qed
        next
          case split_case_2
          solve( !KU( senc(chal, ~n.3) ) @ #vk )
            case c_senc
            solve( !KU( ~n.3 ) @ #vk.4 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
                next
                  case d_0_snd
                  by solve( (#vr.31, 0) ~~> (#vk.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
              qed
            next
              case newsharedk_0_11111111112111_case_1
              by contradiction /* from formulas */
            next
              case newsharedk_0_11111111112111_case_2
              by contradiction /* from formulas */
            qed
          next
            case eventProvScode_0_11111111112121111111111
            solve( !KU( ~n.6 ) @ #t2.1 )
              case eventProvScode_0_11111111112121111111111
              by contradiction /* from formulas */
            next
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.36 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.37, 0) ~~> (#t2.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.42 )
                next
                  case d_0_snd
                  by solve( (#vr.43, 0) ~~> (#t2.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.37, 0) ~~> (#t2.1, 0) )
              qed
            qed
          next
            case eventProvUcode_0_1111111111111
            solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
              case inpcchannelcode_1_111111111111_case_1
              solve( (#vr.25, 0) ~~> (#vk, 0) )
                case d_0_fst
                by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            next
              case inpcchannelcode_1_111111111111_case_2
              by contradiction /* impossible chain */
            qed
          next
            case p_1_11111111112121111111111111
            solve( !KU( ~n.6 ) @ #t2.1 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.36 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.37, 0) ~~> (#t2.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.42 )
                next
                  case d_0_snd
                  by solve( (#vr.43, 0) ~~> (#t2.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.37, 0) ~~> (#t2.1, 0) )
              qed
            next
              case p_1_11111111112121111111111111
              by contradiction /* from formulas */
            qed
          qed
        next
          case split_case_3
          solve( !KU( senc(chal, ~n.3) ) @ #vk )
            case c_senc
            solve( !KU( ~n.3 ) @ #vk.4 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
                next
                  case d_0_snd
                  by solve( (#vr.31, 0) ~~> (#vk.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
              qed
            next
              case newsharedk_0_11111111112111_case_1
              by contradiction /* from formulas */
            next
              case newsharedk_0_11111111112111_case_2
              by contradiction /* from formulas */
            qed
          next
            case eventProvScode_0_11111111112121111111111
            solve( !KU( ~n.6 ) @ #t2.1 )
              case eventProvScode_0_11111111112121111111111
              by contradiction /* from formulas */
            next
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.36 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.37, 0) ~~> (#t2.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.42 )
                next
                  case d_0_snd
                  by solve( (#vr.43, 0) ~~> (#t2.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.37, 0) ~~> (#t2.1, 0) )
              qed
            qed
          next
            case eventProvUcode_0_1111111111111
            solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
              case inpcchannelcode_1_111111111111_case_1
              solve( (#vr.25, 0) ~~> (#vk, 0) )
                case d_0_fst
                by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            next
              case inpcchannelcode_1_111111111111_case_2
              by contradiction /* impossible chain */
            qed
          next
            case p_1_11111111112121111111111111
            solve( !KU( ~n.6 ) @ #t2.1 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.36 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.37, 0) ~~> (#t2.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.42 )
                next
                  case d_0_snd
                  by solve( (#vr.43, 0) ~~> (#t2.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.37, 0) ~~> (#t2.1, 0) )
              qed
            next
              case p_1_11111111112121111111111111
              by contradiction /* from formulas */
            qed
          qed
        next
          case split_case_4
          solve( !KU( sdec(cypher, ~n.3) ) @ #t2.1 )
            case c_sdec
            solve( !KU( ~n.3 ) @ #vk.4 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.25, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
                next
                  case d_0_snd
                  by solve( (#vr.31, 0) ~~> (#vk, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.25, 0) ~~> (#vk, 0) )
              qed
            next
              case newsharedk_0_11111111112111_case_1
              by contradiction /* from formulas */
            next
              case newsharedk_0_11111111112111_case_2
              by contradiction /* from formulas */
            qed
          next
            case eventProvUcode_0_1111111111111
            solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
              case inpcchannelcode_1_111111111111_case_1
              solve( (#vr.25, 0) ~~> (#t2.1, 0) )
                case d_0_fst
                by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            next
              case inpcchannelcode_1_111111111111_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case split_case_5
          solve( !KU( sdec(cypher, ~n.3) ) @ #t2.1 )
            case c_sdec
            solve( !KU( ~n.3 ) @ #vk.4 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.25, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
                next
                  case d_0_snd
                  by solve( (#vr.31, 0) ~~> (#vk, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.25, 0) ~~> (#vk, 0) )
              qed
            next
              case newsharedk_0_11111111112111_case_1
              by contradiction /* from formulas */
            next
              case newsharedk_0_11111111112111_case_2
              by contradiction /* from formulas */
            qed
          next
            case eventProvUcode_0_1111111111111
            solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
              case inpcchannelcode_1_111111111111_case_1
              solve( (#vr.25, 0) ~~> (#t2.1, 0) )
                case d_0_fst
                by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            next
              case inpcchannelcode_1_111111111111_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case split_case_6
          solve( !KU( sdec(cypher, ~n.3) ) @ #t2.1 )
            case c_sdec
            solve( !KU( ~n.3 ) @ #vk.4 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.25, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
                next
                  case d_0_snd
                  by solve( (#vr.31, 0) ~~> (#vk, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.25, 0) ~~> (#vk, 0) )
              qed
            next
              case newsharedk_0_11111111112111_case_1
              by contradiction /* from formulas */
            next
              case newsharedk_0_11111111112111_case_2
              by contradiction /* from formulas */
            qed
          next
            case eventProvUcode_0_1111111111111
            solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
              case inpcchannelcode_1_111111111111_case_1
              solve( (#vr.25, 0) ~~> (#t2.1, 0) )
                case d_0_fst
                by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            next
              case inpcchannelcode_1_111111111111_case_2
              by contradiction /* impossible chain */
            qed
          qed
        qed
      next
        case split_case_2
        solve( splitEqs(0) )
          case split_case_1
          solve( !KU( senc(chal, ~n.3) ) @ #vk )
            case c_senc
            solve( !KU( ~n.3 ) @ #vk.4 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
                next
                  case d_0_snd
                  by solve( (#vr.31, 0) ~~> (#vk.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
              qed
            next
              case newsharedk_0_11111111112111_case_1
              by contradiction /* from formulas */
            next
              case newsharedk_0_11111111112111_case_2
              by contradiction /* from formulas */
            qed
          next
            case eventProvScode_0_11111111112121111111111
            solve( !KU( ~n.6 ) @ #t2.1 )
              case eventProvScode_0_11111111112121111111111
              by contradiction /* from formulas */
            next
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.36 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.37, 0) ~~> (#t2.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.42 )
                next
                  case d_0_snd
                  by solve( (#vr.43, 0) ~~> (#t2.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.37, 0) ~~> (#t2.1, 0) )
              qed
            qed
          next
            case eventProvUcode_0_1111111111111
            solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
              case inpcchannelcode_1_111111111111_case_1
              solve( (#vr.25, 0) ~~> (#vk, 0) )
                case d_0_fst
                by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            next
              case inpcchannelcode_1_111111111111_case_2
              by contradiction /* impossible chain */
            qed
          next
            case p_1_11111111112121111111111111
            solve( !KU( ~n.6 ) @ #t2.1 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.36 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.37, 0) ~~> (#t2.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.42 )
                next
                  case d_0_snd
                  by solve( (#vr.43, 0) ~~> (#t2.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.37, 0) ~~> (#t2.1, 0) )
              qed
            next
              case p_1_11111111112121111111111111
              by contradiction /* from formulas */
            qed
          qed
        next
          case split_case_2
          solve( !KU( senc(chal, ~n.3) ) @ #vk )
            case c_senc
            solve( !KU( ~n.3 ) @ #vk.4 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
                next
                  case d_0_snd
                  by solve( (#vr.31, 0) ~~> (#vk.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
              qed
            next
              case newsharedk_0_11111111112111_case_1
              by contradiction /* from formulas */
            next
              case newsharedk_0_11111111112111_case_2
              by contradiction /* from formulas */
            qed
          next
            case eventProvScode_0_11111111112121111111111
            solve( !KU( ~n.6 ) @ #t2.1 )
              case eventProvScode_0_11111111112121111111111
              by contradiction /* from formulas */
            next
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.36 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.37, 0) ~~> (#t2.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.42 )
                next
                  case d_0_snd
                  by solve( (#vr.43, 0) ~~> (#t2.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.37, 0) ~~> (#t2.1, 0) )
              qed
            qed
          next
            case eventProvUcode_0_1111111111111
            solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
              case inpcchannelcode_1_111111111111_case_1
              solve( (#vr.25, 0) ~~> (#vk, 0) )
                case d_0_fst
                by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            next
              case inpcchannelcode_1_111111111111_case_2
              by contradiction /* impossible chain */
            qed
          next
            case p_1_11111111112121111111111111
            solve( !KU( ~n.6 ) @ #t2.1 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.36 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.37, 0) ~~> (#t2.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.42 )
                next
                  case d_0_snd
                  by solve( (#vr.43, 0) ~~> (#t2.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.37, 0) ~~> (#t2.1, 0) )
              qed
            next
              case p_1_11111111112121111111111111
              by contradiction /* from formulas */
            qed
          qed
        next
          case split_case_3
          solve( !KU( senc(chal, ~n.3) ) @ #vk )
            case c_senc
            solve( !KU( ~n.3 ) @ #vk.4 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
                next
                  case d_0_snd
                  by solve( (#vr.31, 0) ~~> (#vk.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
              qed
            next
              case newsharedk_0_11111111112111_case_1
              by contradiction /* from formulas */
            next
              case newsharedk_0_11111111112111_case_2
              by contradiction /* from formulas */
            qed
          next
            case eventProvScode_0_11111111112121111111111
            solve( !KU( ~n.6 ) @ #t2.1 )
              case eventProvScode_0_11111111112121111111111
              by contradiction /* from formulas */
            next
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.36 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.37, 0) ~~> (#t2.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.42 )
                next
                  case d_0_snd
                  by solve( (#vr.43, 0) ~~> (#t2.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.37, 0) ~~> (#t2.1, 0) )
              qed
            qed
          next
            case eventProvUcode_0_1111111111111
            solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
              case inpcchannelcode_1_111111111111_case_1
              solve( (#vr.25, 0) ~~> (#vk, 0) )
                case d_0_fst
                by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            next
              case inpcchannelcode_1_111111111111_case_2
              by contradiction /* impossible chain */
            qed
          next
            case p_1_11111111112121111111111111
            solve( !KU( ~n.6 ) @ #t2.1 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.36 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.37, 0) ~~> (#t2.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.42 )
                next
                  case d_0_snd
                  by solve( (#vr.43, 0) ~~> (#t2.1, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.37, 0) ~~> (#t2.1, 0) )
              qed
            next
              case p_1_11111111112121111111111111
              by contradiction /* from formulas */
            qed
          qed
        next
          case split_case_4
          solve( !KU( sdec(cypher, ~n.3) ) @ #t2.1 )
            case c_sdec
            solve( !KU( ~n.3 ) @ #vk.4 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.25, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
                next
                  case d_0_snd
                  by solve( (#vr.31, 0) ~~> (#vk, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.25, 0) ~~> (#vk, 0) )
              qed
            next
              case newsharedk_0_11111111112111_case_1
              by contradiction /* from formulas */
            next
              case newsharedk_0_11111111112111_case_2
              by contradiction /* from formulas */
            qed
          next
            case eventProvUcode_0_1111111111111
            solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
              case inpcchannelcode_1_111111111111_case_1
              solve( (#vr.25, 0) ~~> (#t2.1, 0) )
                case d_0_fst
                by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            next
              case inpcchannelcode_1_111111111111_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case split_case_5
          solve( !KU( sdec(cypher, ~n.3) ) @ #t2.1 )
            case c_sdec
            solve( !KU( ~n.3 ) @ #vk.4 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.25, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
                next
                  case d_0_snd
                  by solve( (#vr.31, 0) ~~> (#vk, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.25, 0) ~~> (#vk, 0) )
              qed
            next
              case newsharedk_0_11111111112111_case_1
              by contradiction /* from formulas */
            next
              case newsharedk_0_11111111112111_case_2
              by contradiction /* from formulas */
            qed
          next
            case eventProvUcode_0_1111111111111
            solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
              case inpcchannelcode_1_111111111111_case_1
              solve( (#vr.25, 0) ~~> (#t2.1, 0) )
                case d_0_fst
                by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            next
              case inpcchannelcode_1_111111111111_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case split_case_6
          solve( !KU( sdec(cypher, ~n.3) ) @ #t2.1 )
            case c_sdec
            solve( !KU( ~n.3 ) @ #vk.4 )
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.25, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
                next
                  case d_0_snd
                  by solve( (#vr.31, 0) ~~> (#vk, 0) )
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by solve( (#vr.25, 0) ~~> (#vk, 0) )
              qed
            next
              case newsharedk_0_11111111112111_case_1
              by contradiction /* from formulas */
            next
              case newsharedk_0_11111111112111_case_2
              by contradiction /* from formulas */
            qed
          next
            case eventProvUcode_0_1111111111111
            solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.24 )
              case inpcchannelcode_1_111111111111_case_1
              solve( (#vr.25, 0) ~~> (#t2.1, 0) )
                case d_0_fst
                by solve( State_1111111111111( code, ~n.1, pc, pw, skV ) ▶₀ #vr.30 )
              next
                case d_0_snd
                by contradiction /* impossible chain */
              qed
            next
              case inpcchannelcode_1_111111111111_case_2
              by contradiction /* impossible chain */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma valid [reuse]:
  all-traces
  "∀ #t1 pw ch.
    (Accept( pw, ch ) @ #t1) ⇒
    (∃ #t2 #t3 fr k.
      ((Ask( pw, ch, fr, k ) @ #t2) ∧ (AskU( pw, fr ) @ #t3)) ∧ (#t2 < #t1))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 pw ch.
  (Accept( pw, ch ) @ #t1)
 ∧
  ∀ #t2 #t3 fr k.
   (Ask( pw, ch, fr, k ) @ #t2) ∧ (AskU( pw, fr ) @ #t3) ⇒ ¬(#t2 < #t1)"
*/
simplify
solve( State_11111111112121111111111111111111( cu, hashed, pc, pw,
                                               sccypher, share, skV, ch, cypher, kOTP, signed, code
       ) ▶₀ #t1 )
  case ifhashedhpwhashkOTPchallenge_0_1111111111212111111111111111111
  solve( State_11111111112111( cu, pc, pw, ~n.6 ) ▶₀ #t2 )
    case p_1_11111111112
    solve( !KU( h(~n.1) ) @ #vk.1 )
      case c_h
      solve( !KU( hash(~n.2, ~n.3) ) @ #vk.2 )
        case c_hash
        solve( !KU( ~n.2 ) @ #vk.6 )
          case eventProvScode_0_11111111112121111111111
          by contradiction /* from formulas */
        next
          case eventProvUcode_0_1111111111111
          solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.20 )
            case inpcchannelcode_1_111111111111_case_1
            solve( (#vr.21, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by solve( State_1111111111111( code, ~n.4, pc, pw, skV ) ▶₀ #vr.26 )
            next
              case d_0_snd
              by solve( (#vr.27, 0) ~~> (#vk.2, 0) )
            qed
          next
            case inpcchannelcode_1_111111111111_case_2
            by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
          qed
        qed
      next
        case eventProvUcode_0_1111111111111
        solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.20 )
          case inpcchannelcode_1_111111111111_case_1
          solve( (#vr.21, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by solve( State_1111111111111( code, ~n.4, pc, pw, skV ) ▶₀ #vr.26 )
          next
            case d_0_snd
            by contradiction /* impossible chain */
          qed
        next
          case inpcchannelcode_1_111111111111_case_2
          by contradiction /* impossible chain */
        qed
      next
        case incypher_0_11111111112111111111111
        by contradiction /* from formulas */
      qed
    next
      case eventProvUcode_0_1111111111111
      solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.20 )
        case inpcchannelcode_1_111111111111_case_1
        solve( (#vr.21, 0) ~~> (#vk, 0) )
          case d_0_fst
          by solve( State_1111111111111( code, ~n.4, pc, pw, skV ) ▶₀ #vr.26 )
        next
          case d_0_snd
          by contradiction /* impossible chain */
        qed
      next
        case inpcchannelcode_1_111111111111_case_2
        by contradiction /* impossible chain */
      qed
    next
      case incypher_0_11111111112111111111111
      solve( State_1111111111111( code, ~n, pc, ~n.1, skV ) ▶₀ #vr.27 )
        case inpcchannelcode_1_111111111111_case_1
        by solve( State_1111111111111( code, ~n.4, pc, pw, skV ) ▶₀ #vr.35 )
      next
        case inpcchannelcode_1_111111111111_case_2
        solve( State_11111111112111( cu, pc, pw, ~n.6 ) ▶₀ #t2.1 )
          case p_1_11111111112
          solve( splitEqs(8) )
            case split_case_1
            solve( !KU( hash(~n.2, ~n.3) ) @ #vk.2 )
              case c_hash
              solve( !KU( ~n.2 ) @ #vk.9 )
                case eventProvScode_0_11111111112121111111111
                by contradiction /* from formulas */
              next
                case eventProvUcode_0_1111111111111
                solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.42 )
                  case inpcchannelcode_1_111111111111_case_1
                  solve( (#vr.43, 0) ~~> (#vk.2, 0) )
                    case d_0_fst
                    by solve( State_1111111111111( code, ~n.4, pc, pw, skV ) ▶₀ #vr.48 )
                  next
                    case d_0_snd
                    by solve( (#vr.49, 0) ~~> (#vk.2, 0) )
                  qed
                next
                  case inpcchannelcode_1_111111111111_case_2
                  by solve( (#vr.43, 0) ~~> (#vk.2, 0) )
                qed
              qed
            next
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.42 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.43, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.4, pc, pw, skV ) ▶₀ #vr.48 )
                next
                  case d_0_snd
                  by contradiction /* impossible chain */
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by contradiction /* impossible chain */
              qed
            next
              case incypher_0_11111111112111111111111
              by contradiction /* from formulas */
            qed
          next
            case split_case_2
            solve( !KU( hash(~n.2, ~n.3) ) @ #vk.2 )
              case c_hash
              solve( !KU( ~n.2 ) @ #vk.9 )
                case eventProvScode_0_11111111112121111111111
                by contradiction /* from formulas */
              next
                case eventProvUcode_0_1111111111111
                solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.42 )
                  case inpcchannelcode_1_111111111111_case_1
                  solve( (#vr.43, 0) ~~> (#vk.2, 0) )
                    case d_0_fst
                    by solve( State_1111111111111( code, ~n.4, pc, pw, skV ) ▶₀ #vr.48 )
                  next
                    case d_0_snd
                    by solve( (#vr.49, 0) ~~> (#vk.2, 0) )
                  qed
                next
                  case inpcchannelcode_1_111111111111_case_2
                  by solve( (#vr.43, 0) ~~> (#vk.2, 0) )
                qed
              qed
            next
              case eventProvUcode_0_1111111111111
              solve( State_1111111111111( code, cu, pc, pw, skV ) ▶₀ #vr.42 )
                case inpcchannelcode_1_111111111111_case_1
                solve( (#vr.43, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by solve( State_1111111111111( code, ~n.4, pc, pw, skV ) ▶₀ #vr.48 )
                next
                  case d_0_snd
                  by contradiction /* impossible chain */
                qed
              next
                case inpcchannelcode_1_111111111111_case_2
                by contradiction /* impossible chain */
              qed
            next
              case incypher_0_11111111112111111111111
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma unic_2 [reuse]:
  all-traces
  "∀ #t1 #t2 pw ch fr k.
    ((Ask( pw, ch, fr, k ) @ #t1) ∧ (Ask( pw, ch, fr, k ) @ #t2)) ⇒
    (#t1 = #t2)"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 #t2 pw ch fr k.
  (Ask( pw, ch, fr, k ) @ #t1) ∧ (Ask( pw, ch, fr, k ) @ #t2)
 ∧
  ¬(#t1 = #t2)"
*/
simplify
solve( (#t1 < #t2)  ∥ (#t2 < #t1) )
  case case_1
  solve( State_11111111112111111111111( cdcode, cu, pc, pw, k, skV,
                                        skosenc, fr
         ) ▶₀ #t1 )
    case incuchannelpwfr_1_1111111111211111111111
    solve( State_11111111112111111111111( cdcode.1, cu, pc, ~n.2, ~n.3, skV,
                                          skosenc.1, ~n.5
           ) ▶₀ #t2 )
      case incuchannelpwfr_1_1111111111211111111111
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( State_11111111112111111111111( cdcode, cu, pc, pw, k, skV,
                                        skosenc, fr
         ) ▶₀ #t1 )
    case incuchannelpwfr_1_1111111111211111111111
    solve( State_11111111112111111111111( cdcode.1, cu, pc, ~n.2, ~n.3, skV,
                                          skosenc.1, ~n.5
           ) ▶₀ #t2 )
      case incuchannelpwfr_1_1111111111211111111111
      by contradiction /* cyclic */
    qed
  qed
qed

























































restriction Restr_ReportRule_1:
  "∀ x #NOW. (Restr_ReportRule_1( x ) @ #NOW) ⇒ (¬(x = 'loc'))"
  // safety formula

rule (modulo E) ReportRule[color=#ffffff, process="new skV.1;"]:
   [ In( <x, loc> ) ]
  --[ Restr_ReportRule_1( loc ) ]->
   [ Out( rep(x, loc) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init[color=#ffffff, process="new skV.1;"]:
   [ Fr( skV.1 ), Fr( pc.1 ), Fr( cu.1 ), Fr( pw.1 ) ]
  --[ Init( ) ]->
   [ State_1111( cu.1, pc.1, pw.1, skV.1 ) ]

  /*
  rule (modulo AC) Init[color=#ffffff, process="new skV.1;"]:
     [ Fr( skV ), Fr( pc ), Fr( cu ), Fr( pw ) ]
    --[ Init( ) ]->
     [ State_1111( cu, pc, pw, skV ) ]
  */

rule (modulo E) eventChancuchannel_0_1111[color=#ffffff,
                                          process="event Chan( cu.1:channel );"]:
   [ State_1111( cu.1, pc.1, pw.1, skV.1 ) ]
  --[ Chan( cu.1 ) ]->
   [ State_11111( cu.1, pc.1, pw.1, skV.1 ) ]

  /*
  rule (modulo AC) eventChancuchannel_0_1111[color=#ffffff,
                                             process="event Chan( cu.1:channel );"]:
     [ State_1111( cu, pc, pw, skV ) ]
    --[ Chan( cu ) ]->
     [ State_11111( cu, pc, pw, skV ) ]
  */

rule (modulo E) eventChanpcchannel_0_11111[color=#ffffff,
                                           process="event Chan( pc.1:channel );"]:
   [ State_11111( cu.1, pc.1, pw.1, skV.1 ) ]
  --[ Chan( pc.1 ) ]->
   [ State_1111111( cu.1, pc.1, pw.1, skV.1 ), Out( pw.1 ) ]

  /*
  rule (modulo AC) eventChanpcchannel_0_11111[color=#ffffff,
                                              process="event Chan( pc.1:channel );"]:
     [ State_11111( cu, pc, pw, skV ) ]
    --[ Chan( pc ) ]->
     [ State_1111111( cu, pc, pw, skV ), Out( pw ) ]
  */

rule (modulo E) eventKeyskV_0_1111111[color=#ffffff,
                                      process="event Key( skV.1 );"]:
   [ State_1111111( cu.1, pc.1, pw.1, skV.1 ) ]
  --[ Key( skV.1 ) ]->
   [ !Semistate_1111111111( cu.1, pc.1, pw.1, skV.1 ), Out( pk(skV.1) ) ]

  /*
  rule (modulo AC) eventKeyskV_0_1111111[color=#ffffff,
                                         process="event Key( skV.1 );"]:
     [ State_1111111( cu, pc, pw, skV ) ]
    --[ Key( skV ) ]->
     [ !Semistate_1111111111( cu, pc, pw, skV ), Out( pk(skV) ) ]
  */

rule (modulo E) inpcchannelcode_0_111111111111[color=#40807b,
                                               process="in(pc.1:channel,code.1);"]:
   [ State_111111111111( cu.1, pc.1, pw.1, skV.1 ), Message( pc.1, x.2 ) ]
  -->
   [ Let_1111111111111( x.2, cu.1, pc.1, pw.1, skV.1 ), Ack( pc.1, x.2 ) ]

  /*
  rule (modulo AC) inpcchannelcode_0_111111111111[color=#40807b,
                                                  process="in(pc.1:channel,code.1);"]:
     [ State_111111111111( cu, pc, pw, skV ), Message( pc, x ) ]
    -->
     [ Let_1111111111111( x, cu, pc, pw, skV ), Ack( pc, x ) ]
  */

rule (modulo E) inpcchannelcode_1_111111111111[color=#40807b,
                                               process="in(pc.1:channel,code.1);"]:
   [ Let_1111111111111( code.1, cu.1, pc.1, pw.1, skV.1 ) ]
  -->
   [ State_1111111111111( code.1, cu.1, pc.1, pw.1, skV.1 ) ]

  /*
  rule (modulo AC) inpcchannelcode_1_111111111111[color=#40807b,
                                                  process="in(pc.1:channel,code.1);"]:
     [ Let_1111111111111( code, cu, pc, pw, skV ) ]
    -->
     [ State_1111111111111( code, cu, pc, pw, skV ) ]
  */

rule (modulo E) eventProvUcode_0_1111111111111[color=#40807b,
                                               process="event ProvU( code.1 );"]:
   [ State_1111111111111( code.1, cu.1, pc.1, pw.1, skV.1 ) ]
  --[ ProvU( code.1 ) ]->
   [
   !Semistate_1111111111111111( code.1, cu.1, pc.1, pw.1, skV.1 ),
   Out( cde(code.1) )
   ]

  // loop breaker: [0]
  /*
  rule (modulo AC) eventProvUcode_0_1111111111111[color=#40807b,
                                                  process="event ProvU( code.1 );"]:
     [ State_1111111111111( code, cu, pc, pw, skV ) ]
    --[ ProvU( code ) ]->
     [ !Semistate_1111111111111111( code, cu, pc, pw, skV ), Out( cde(code) )
     ]
    // loop breaker: [0]
  */

rule (modulo E) p_1_111111111111111[color=#40807b, process="!"]:
   [
   !Semistate_1111111111111111( code.1, cu.1, pc.1, pw.1, skV.1 ),
   Fr( fr.1 )
   ]
  --[ AskU( pw.1, fr.1 ) ]->
   [
   Message( cu.1, <pw.1, fr.1> ),
   Semistate_1111111111111111111( code.1, cu.1, fr.1, pc.1, pw.1, skV.1 )
   ]

  /*
  rule (modulo AC) p_1_111111111111111[color=#40807b, process="!"]:
     [ !Semistate_1111111111111111( code, cu, pc, pw, skV ), Fr( fr ) ]
    --[ AskU( pw, fr ) ]->
     [
     Message( cu, <pw, fr> ),
     Semistate_1111111111111111111( code, cu, fr, pc, pw, skV )
     ]
  */

rule (modulo E) p_1_111111111[color=#ffffff, process="!"]:
   [ !Semistate_1111111111( cu.1, pc.1, pw.1, skV.1 ) ]
  -->
   [
   !Semistate_111111111121( cu.1, pc.1, pw.1, skV.1 ),
   State_111111111111( cu.1, pc.1, pw.1, skV.1 )
   ]

  /*
  rule (modulo AC) p_1_111111111[color=#ffffff, process="!"]:
     [ !Semistate_1111111111( cu, pc, pw, skV ) ]
    -->
     [
     !Semistate_111111111121( cu, pc, pw, skV ),
     State_111111111111( cu, pc, pw, skV )
     ]
  */

rule (modulo E) newsharedk_0_11111111112111[color=#408070,
                                            process="new shared_k.1;"]:
   [ State_11111111112111( cu.1, pc.1, pw.1, skV.1 ), Fr( shared_k.1 ) ]
  --[ SessionP( pk(skV.1), shared_k.1 ) ]->
   [
   State_11111111112111111( cu.1, pc.1, pw.1, shared_k.1, skV.1 ),
   Out( shared(<aenc(shared_k.1, pk(skV.1)), 
                rep(aenc(shared_k.1, pk(skV.1)), 'loc')>)
   )
   ]

  /*
  rule (modulo AC) newsharedk_0_11111111112111[color=#408070,
                                               process="new shared_k.1;"]:
     [ State_11111111112111( cu, pc, pw, skV ), Fr( shared_k ) ]
    --[ SessionP( pk(skV), shared_k ) ]->
     [
     State_11111111112111111( cu, pc, pw, shared_k, skV ),
     Out( shared(<aenc(shared_k, pk(skV)), rep(aenc(shared_k, pk(skV)), 'loc')
                 >)
     )
     ]
  */

rule (modulo E) incdcode_0_11111111112111111[color=#408070,
                                             process="in(cdcode.1);"]:
   [
   State_11111111112111111( cu.1, pc.1, pw.1, shared_k.1, skV.1 ),
   In( cdcode.1 )
   ]
  --[ ProvE( dcde(cdcode.1) ) ]->
   [
   State_11111111112111111111( cdcode.1, cu.1, pc.1, pw.1, shared_k.1, skV.1
   ),
   Out( dscode(senc(dcde(cdcode.1), shared_k.1)) )
   ]

  /*
  rule (modulo AC) incdcode_0_11111111112111111[color=#408070,
                                                process="in(cdcode.1);"]:
     [ State_11111111112111111( cu, pc, pw, shared_k, skV ), In( cdcode ) ]
    --[ ProvE( z ) ]->
     [
     State_11111111112111111111( cdcode, cu, pc, pw, shared_k, skV ),
     Out( dscode(senc(z, shared_k)) )
     ]
    variants (modulo AC)
    1. cdcode
             = cdcode.13
       z     = dcde(cdcode.13)
    
    2. cdcode
             = cde(z.13)
       z     = z.13
  */

rule (modulo E) inskosenc_0_11111111112111111111[color=#408070,
                                                 process="in(skosenc.1);"]:
   [
   State_11111111112111111111( cdcode.1, cu.1, pc.1, pw.1, shared_k.1, skV.1
   ),
   In( skosenc.1 )
   ]
  -->
   [
   !Semistate_1111111111211111111111( cdcode.1, cu.1, pc.1, pw.1,
                                      shared_k.1, skV.1, skosenc.1
   )
   ]

  /*
  rule (modulo AC) inskosenc_0_11111111112111111111[color=#408070,
                                                    process="in(skosenc.1);"]:
     [
     State_11111111112111111111( cdcode, cu, pc, pw, shared_k, skV ),
     In( skosenc )
     ]
    -->
     [
     !Semistate_1111111111211111111111( cdcode, cu, pc, pw, shared_k, skV,
                                        skosenc
     )
     ]
  */

rule (modulo E) p_1_111111111121111111111[color=#408070, process="!"]:
   [
   !Semistate_1111111111211111111111( cdcode.1, cu.1, pc.1, pw.1,
                                      shared_k.1, skV.1, skosenc.1
   ),
   Message( cu.1, x.2 )
   ]
  -->
   [
   Let_11111111112111111111111( x.2, cdcode.1, cu.1, pc.1, pw.1, shared_k.1,
                                skV.1, skosenc.1
   ),
   Ack( cu.1, x.2 )
   ]

  /*
  rule (modulo AC) p_1_111111111121111111111[color=#408070, process="!"]:
     [
     !Semistate_1111111111211111111111( cdcode, cu, pc, pw, shared_k, skV,
                                        skosenc
     ),
     Message( cu, x )
     ]
    -->
     [
     Let_11111111112111111111111( x, cdcode, cu, pc, pw, shared_k, skV,
                                  skosenc
     ),
     Ack( cu, x )
     ]
  */

rule (modulo E) incuchannelpwfr_1_1111111111211111111111[color=#408070,
                                                         process="in(cu.1:channel,<=pw.1, fr.2>);"]:
   [
   Let_11111111112111111111111( <pw.1, fr.2>, cdcode.1, cu.1, pc.1, pw.1,
                                shared_k.1, skV.1, skosenc.1
   )
   ]
  -->
   [
   State_11111111112111111111111( cdcode.1, cu.1, pc.1, pw.1, shared_k.1,
                                  skV.1, skosenc.1, fr.2
   )
   ]

  /*
  rule (modulo AC) incuchannelpwfr_1_1111111111211111111111[color=#408070,
                                                            process="in(cu.1:channel,<=pw.1, fr.2>);"]:
     [
     Let_11111111112111111111111( <pw, fr>, cdcode, cu, pc, pw, shared_k, skV,
                                  skosenc
     )
     ]
    -->
     [
     State_11111111112111111111111( cdcode, cu, pc, pw, shared_k, skV,
                                    skosenc, fr
     )
     ]
  */

rule (modulo E) incypher_0_11111111112111111111111[color=#408070,
                                                   process="in(cypher.1);"]:
   [
   State_11111111112111111111111( cdcode.1, cu.1, pc.1, pw.1, shared_k.1,
                                  skV.1, skosenc.1, fr.2
   ),
   In( cypher.1 )
   ]
  --[ Ask( pw.1, sdec(cypher.1, shared_k.1), fr.2, shared_k.1 ) ]->
   [
   Out( <h(pw.1), 
         hash(sdec(dsko(skosenc.1), shared_k.1), sdec(cypher.1, shared_k.1))>
   )
   ]

  /*
  rule (modulo AC) incypher_0_11111111112111111111111[color=#408070,
                                                      process="in(cypher.1);"]:
     [
     State_11111111112111111111111( cdcode, cu, pc, pw, shared_k, skV,
                                    skosenc, fr
     ),
     In( cypher )
     ]
    --[ Ask( pw, z.1, fr, shared_k ) ]->
     [ Out( <h(pw), hash(z, z.1)> ) ]
    variants (modulo AC)
    1. cypher
             = cypher.14
       shared_k
             = shared_k.14
       skosenc
             = skosenc.14
       z     = sdec(dsko(skosenc.14), shared_k.14)
       z.1   = sdec(cypher.14, shared_k.14)
    
    2. cypher
             = cypher.15
       shared_k
             = shared_k.15
       skosenc
             = sko(x.14)
       z     = sdec(x.14, shared_k.15)
       z.1   = sdec(cypher.15, shared_k.15)
    
    3. cypher
             = cypher.17
       shared_k
             = x.14
       skosenc
             = sko(senc(x.16, x.14))
       z     = x.16
       z.1   = sdec(cypher.17, x.14)
    
    4. cypher
             = senc(x.14, x.15)
       shared_k
             = x.15
       skosenc
             = skosenc.16
       z     = sdec(dsko(skosenc.16), x.15)
       z.1   = x.14
    
    5. cypher
             = senc(x.14, x.15)
       shared_k
             = x.15
       skosenc
             = sko(x.19)
       z     = sdec(x.19, x.15)
       z.1   = x.14
    
    6. cypher
             = senc(x.14, x.15)
       shared_k
             = x.15
       skosenc
             = sko(senc(x.19, x.15))
       z     = x.19
       z.1   = x.14
  */

rule (modulo E) p_1_11111111112[color=#ffffff, process="!"]:
   [ !Semistate_111111111121( cu.1, pc.1, pw.1, skV.1 ) ]
  -->
   [
   !Semistate_11111111112121( cu.1, pc.1, pw.1, skV.1 ),
   State_11111111112111( cu.1, pc.1, pw.1, skV.1 )
   ]

  /*
  rule (modulo AC) p_1_11111111112[color=#ffffff, process="!"]:
     [ !Semistate_111111111121( cu, pc, pw, skV ) ]
    -->
     [
     !Semistate_11111111112121( cu, pc, pw, skV ),
     State_11111111112111( cu, pc, pw, skV )
     ]
  */

rule (modulo E) p_1_1111111111212[color=#ffffff, process="!"]:
   [ !Semistate_11111111112121( cu.1, pc.1, pw.1, skV.1 ), In( share.1 ) ]
  -->
   [
   Let_11111111112121111( dshared(share.1), cu.1, pc.1, pw.1, share.1, skV.1
   )
   ]

  /*
  rule (modulo AC) p_1_1111111111212[color=#ffffff, process="!"]:
     [ !Semistate_11111111112121( cu, pc, pw, skV ), In( share ) ]
    -->
     [ Let_11111111112121111( z, cu, pc, pw, share, skV ) ]
    variants (modulo AC)
    1. share = share.8
       z     = dshared(share.8)
    
    2. share = shared(x.8)
       z     = x.8
  */

rule (modulo E) letcyphersigneddsharedshare_1_1111111111212111[color=#ffffff,
                                                               process="let <cypher.2, signed.2>=dshared(share.1)"]:
   [
   Let_11111111112121111( <cypher.2, signed.2>, cu.1, pc.1, pw.1, share.1,
                          skV.1
   )
   ]
  -->
   [
   State_11111111112121111( cu.1, pc.1, pw.1, share.1, skV.1, cypher.2,
                            signed.2
   )
   ]

  /*
  rule (modulo AC) letcyphersigneddsharedshare_1_1111111111212111[color=#ffffff,
                                                                  process="let <cypher.2, signed.2>=dshared(share.1)"]:
     [ Let_11111111112121111( <cypher, signed>, cu, pc, pw, share, skV ) ]
    -->
     [ State_11111111112121111( cu, pc, pw, share, skV, cypher, signed ) ]
  */

rule (modulo E) ifaencadeccypherskVpkskVcheckrepsignedloc_0_11111111112121111[color=#408046,
                                                                              process="if aenc(adec(cypher.2, skV.1), pk(skV.1))=check_rep(signed.2, 'loc')"]:
   [
   State_11111111112121111( cu.1, pc.1, pw.1, share.1, skV.1, cypher.2,
                            signed.2
   )
   ]
  --[
  Pred_Eq( aenc(adec(cypher.2, skV.1), pk(skV.1)),
           check_rep(signed.2, 'loc')
  )
  ]->
   [
   State_111111111121211111( cu.1, pc.1, pw.1, share.1, skV.1, cypher.2,
                             signed.2
   )
   ]

  /*
  rule (modulo AC) ifaencadeccypherskVpkskVcheckrepsignedloc_0_11111111112121111[color=#408046,
                                                                                 process="if aenc(adec(cypher.2, skV.1), pk(skV.1))=check_rep(signed.2, 'loc')"]:
     [ State_11111111112121111( cu, pc, pw, share, skV, cypher, signed ) ]
    --[ Pred_Eq( aenc(z, pk(skV)), z.1 ) ]->
     [ State_111111111121211111( cu, pc, pw, share, skV, cypher, signed ) ]
    variants (modulo AC)
    1. cypher
             = cypher.13
       signed
             = signed.13
       skV   = skV.12
       z     = adec(cypher.13, skV.12)
       z.1   = check_rep(signed.13, 'loc')
    
    2. cypher
             = aenc(x.13, pk(x.12))
       signed
             = signed.15
       skV   = x.12
       z     = x.13
       z.1   = check_rep(signed.15, 'loc')
    
    3. cypher
             = aenc(x.13, pk(x.12))
       signed
             = rep(x.14, 'loc')
       skV   = x.12
       z     = x.13
       z.1   = x.14
    
    4. cypher
             = cypher.14
       signed
             = rep(x.12, 'loc')
       skV   = skV.13
       z     = adec(cypher.14, skV.13)
       z.1   = x.12
  */

rule (modulo E) eventSessionVpkskVadeccypherskV_0_111111111121211111[color=#408046,
                                                                     process="event SessionV( pk(skV.1), adec(cypher.2, skV.1) );"]:
   [
   State_111111111121211111( cu.1, pc.1, pw.1, share.1, skV.1, cypher.2,
                             signed.2
   ),
   Fr( code.3 )
   ]
  --[ SessionV( pk(skV.1), adec(cypher.2, skV.1) ) ]->
   [
   Message( pc.1, code.3 ),
   Semistate_111111111121211111111( cu.1, pc.1, pw.1, share.1, skV.1,
                                    cypher.2, signed.2, code.3
   )
   ]

  /*
  rule (modulo AC) eventSessionVpkskVadeccypherskV_0_111111111121211111[color=#408046,
                                                                        process="event SessionV( pk(skV.1), adec(cypher.2, skV.1) );"]:
     [
     State_111111111121211111( cu, pc, pw, share, skV, cypher, signed ),
     Fr( code )
     ]
    --[ SessionV( pk(skV), z ) ]->
     [
     Message( pc, code ),
     Semistate_111111111121211111111( cu, pc, pw, share, skV, cypher, signed,
                                      code
     )
     ]
    variants (modulo AC)
    1. cypher
             = cypher.14
       skV   = skV.13
       z     = adec(cypher.14, skV.13)
    
    2. cypher
             = aenc(x.14, pk(x.13))
       skV   = x.13
       z     = x.14
  */

rule (modulo E) outpcchannelcode_1_11111111112121111111[color=#408046,
                                                        process="out(pc.1:channel,code.3);"]:
   [
   Semistate_111111111121211111111( cu.1, pc.1, pw.1, share.1, skV.1,
                                    cypher.2, signed.2, code.3
   ),
   Ack( pc.1, code.3 ), In( sccypher.1 )
   ]
  -->
   [
   State_1111111111212111111111( cu.1, pc.1, pw.1, sccypher.1, share.1,
                                 skV.1, cypher.2, signed.2, code.3
   )
   ]

  /*
  rule (modulo AC) outpcchannelcode_1_11111111112121111111[color=#408046,
                                                           process="out(pc.1:channel,code.3);"]:
     [
     Semistate_111111111121211111111( cu, pc, pw, share, skV, cypher, signed,
                                      code
     ),
     Ack( pc, code ), In( sccypher )
     ]
    -->
     [
     State_1111111111212111111111( cu, pc, pw, sccypher, share, skV, cypher,
                                   signed, code
     )
     ]
  */

rule (modulo E) ifsdecdscodesccypheradeccypherskVcode_0_1111111111212111111111[color=#408046,
                                                                               process="if sdec(dscode(sccypher.1), adec(cypher.2, skV.1))=code.3"]:
   [
   State_1111111111212111111111( cu.1, pc.1, pw.1, sccypher.1, share.1,
                                 skV.1, cypher.2, signed.2, code.3
   )
   ]
  --[ Pred_Eq( sdec(dscode(sccypher.1), adec(cypher.2, skV.1)), code.3 )
  ]->
   [
   State_11111111112121111111111( cu.1, pc.1, pw.1, sccypher.1, share.1,
                                  skV.1, cypher.2, signed.2, code.3
   )
   ]

  /*
  rule (modulo AC) ifsdecdscodesccypheradeccypherskVcode_0_1111111111212111111111[color=#408046,
                                                                                  process="if sdec(dscode(sccypher.1), adec(cypher.2, skV.1))=code.3"]:
     [
     State_1111111111212111111111( cu, pc, pw, sccypher, share, skV, cypher,
                                   signed, code
     )
     ]
    --[ Pred_Eq( z, code ) ]->
     [
     State_11111111112121111111111( cu, pc, pw, sccypher, share, skV, cypher,
                                    signed, code
     )
     ]
    variants (modulo AC)
    1. cypher
             = cypher.15
       sccypher
             = sccypher.14
       skV   = skV.14
       z     = sdec(dscode(sccypher.14), adec(cypher.15, skV.14))
    
    2. cypher
             = aenc(x.15, pk(x.14))
       sccypher
             = sccypher.16
       skV   = x.14
       z     = sdec(dscode(sccypher.16), x.15)
    
    3. cypher
             = cypher.16
       sccypher
             = scode(x.14)
       skV   = skV.15
       z     = sdec(x.14, adec(cypher.16, skV.15))
    
    4. cypher
             = aenc(x.17, pk(x.16))
       sccypher
             = scode(x.14)
       skV   = x.16
       z     = sdec(x.14, x.17)
    
    5. cypher
             = aenc(x.15, pk(x.17))
       sccypher
             = scode(senc(x.14, x.15))
       skV   = x.17
       z     = x.14
    
    6. cypher
             = x.15
       sccypher
             = scode(senc(x.14, adec(x.15, x.16)))
       skV   = x.16
       z     = x.14
  */

rule (modulo E) eventProvScode_0_11111111112121111111111[color=#408046,
                                                         process="event ProvS( code.3 );"]:
   [
   State_11111111112121111111111( cu.1, pc.1, pw.1, sccypher.1, share.1,
                                  skV.1, cypher.2, signed.2, code.3
   ),
   Fr( kOTP.2 )
   ]
  --[ ProvS( code.3 ) ]->
   [
   !Semistate_111111111121211111111111111( cu.1, pc.1, pw.1, sccypher.1,
                                           share.1, skV.1, cypher.2, kOTP.2, signed.2, code.3
   ),
   Out( sko(senc(kOTP.2, adec(cypher.2, skV.1))) )
   ]

  /*
  rule (modulo AC) eventProvScode_0_11111111112121111111111[color=#408046,
                                                            process="event ProvS( code.3 );"]:
     [
     State_11111111112121111111111( cu, pc, pw, sccypher, share, skV, cypher,
                                    signed, code
     ),
     Fr( kOTP )
     ]
    --[ ProvS( code ) ]->
     [
     !Semistate_111111111121211111111111111( cu, pc, pw, sccypher, share, skV,
                                             cypher, kOTP, signed, code
     ),
     Out( sko(senc(kOTP, z)) )
     ]
    variants (modulo AC)
    1. cypher
             = cypher.16
       skV   = skV.15
       z     = adec(cypher.16, skV.15)
    
    2. cypher
             = aenc(x.16, pk(x.15))
       skV   = x.15
       z     = x.16
  */

rule (modulo E) p_1_11111111112121111111111111[color=#408046,
                                               process="!"]:
   [
   !Semistate_111111111121211111111111111( cu.1, pc.1, pw.1, sccypher.1,
                                           share.1, skV.1, cypher.2, kOTP.2, signed.2, code.3
   ),
   Fr( challenge.2 )
   ]
  --[ Chall( challenge.2, adec(cypher.2, skV.1) ) ]->
   [
   State_111111111121211111111111111111( cu.1, pc.1, pw.1, sccypher.1,
                                         share.1, skV.1, challenge.2, cypher.2, kOTP.2, signed.2, code.3
   ),
   Out( senc(challenge.2, adec(cypher.2, skV.1)) )
   ]

  /*
  rule (modulo AC) p_1_11111111112121111111111111[color=#408046,
                                                  process="!"]:
     [
     !Semistate_111111111121211111111111111( cu, pc, pw, sccypher, share, skV,
                                             cypher, kOTP, signed, code
     ),
     Fr( challenge )
     ]
    --[ Chall( challenge, z ) ]->
     [
     State_111111111121211111111111111111( cu, pc, pw, sccypher, share, skV,
                                           challenge, cypher, kOTP, signed, code
     ),
     Out( senc(challenge, z) )
     ]
    variants (modulo AC)
    1. cypher
             = cypher.17
       skV   = skV.16
       z     = adec(cypher.17, skV.16)
    
    2. cypher
             = aenc(x.18, pk(x.16))
       skV   = x.16
       z     = x.18
  */

rule (modulo E) inhashed_0_111111111121211111111111111111[color=#408046,
                                                          process="in(hashed.1);"]:
   [
   State_111111111121211111111111111111( cu.1, pc.1, pw.1, sccypher.1,
                                         share.1, skV.1, challenge.2, cypher.2, kOTP.2, signed.2, code.3
   ),
   In( hashed.1 )
   ]
  -->
   [
   State_1111111111212111111111111111111( cu.1, hashed.1, pc.1, pw.1,
                                          sccypher.1, share.1, skV.1, challenge.2, cypher.2, kOTP.2, signed.2,
                                          code.3
   )
   ]

  /*
  rule (modulo AC) inhashed_0_111111111121211111111111111111[color=#408046,
                                                             process="in(hashed.1);"]:
     [
     State_111111111121211111111111111111( cu, pc, pw, sccypher, share, skV,
                                           challenge, cypher, kOTP, signed, code
     ),
     In( hashed )
     ]
    -->
     [
     State_1111111111212111111111111111111( cu, hashed, pc, pw, sccypher,
                                            share, skV, challenge, cypher, kOTP, signed, code
     )
     ]
  */

rule (modulo E) ifhashedhpwhashkOTPchallenge_0_1111111111212111111111111111111[color=#408046,
                                                                               process="if hashed.1=<h(pw.1), hash(kOTP.2, challenge.2)>"]:
   [
   State_1111111111212111111111111111111( cu.1, hashed.1, pc.1, pw.1,
                                          sccypher.1, share.1, skV.1, challenge.2, cypher.2, kOTP.2, signed.2,
                                          code.3
   )
   ]
  --[ Pred_Eq( hashed.1, <h(pw.1), hash(kOTP.2, challenge.2)> ) ]->
   [
   State_11111111112121111111111111111111( cu.1, hashed.1, pc.1, pw.1,
                                           sccypher.1, share.1, skV.1, challenge.2, cypher.2, kOTP.2,
                                           signed.2, code.3
   )
   ]

  /*
  rule (modulo AC) ifhashedhpwhashkOTPchallenge_0_1111111111212111111111111111111[color=#408046,
                                                                                  process="if hashed.1=<h(pw.1), hash(kOTP.2, challenge.2)>"]:
     [
     State_1111111111212111111111111111111( cu, hashed, pc, pw, sccypher,
                                            share, skV, challenge, cypher, kOTP, signed, code
     )
     ]
    --[ Pred_Eq( hashed, <h(pw), hash(kOTP, challenge)> ) ]->
     [
     State_11111111112121111111111111111111( cu, hashed, pc, pw, sccypher,
                                             share, skV, challenge, cypher, kOTP, signed, code
     )
     ]
  */

rule (modulo E) eventAcceptpwchallenge_0_11111111112121111111111111111111[color=#408046,
                                                                          process="event Accept( pw.1, challenge.2 );"]:
   [
   State_11111111112121111111111111111111( cu.1, hashed.1, pc.1, pw.1,
                                           sccypher.1, share.1, skV.1, challenge.2, cypher.2, kOTP.2,
                                           signed.2, code.3
   )
   ]
  --[ Accept( pw.1, challenge.2 ) ]->
   [ ]

  /*
  rule (modulo AC) eventAcceptpwchallenge_0_11111111112121111111111111111111[color=#408046,
                                                                             process="event Accept( pw.1, challenge.2 );"]:
     [
     State_11111111112121111111111111111111( cu, hashed, pc, pw, sccypher,
                                             share, skV, challenge, cypher, kOTP, signed, code
     )
     ]
    --[ Accept( pw, challenge ) ]->
     [ ]
  */

rule (modulo E) ifhashedhpwhashkOTPchallenge_1_1111111111212111111111111111111[color=#408046,
                                                                               process="if hashed.1=<h(pw.1), hash(kOTP.2, challenge.2)>"]:
   [
   State_1111111111212111111111111111111( cu.1, hashed.1, pc.1, pw.1,
                                          sccypher.1, share.1, skV.1, challenge.2, cypher.2, kOTP.2, signed.2,
                                          code.3
   )
   ]
  --[ Pred_Not_Eq( hashed.1, <h(pw.1), hash(kOTP.2, challenge.2)> ) ]->
   [ ]

  /*
  rule (modulo AC) ifhashedhpwhashkOTPchallenge_1_1111111111212111111111111111111[color=#408046,
                                                                                  process="if hashed.1=<h(pw.1), hash(kOTP.2, challenge.2)>"]:
     [
     State_1111111111212111111111111111111( cu, hashed, pc, pw, sccypher,
                                            share, skV, challenge, cypher, kOTP, signed, code
     )
     ]
    --[ Pred_Not_Eq( hashed, <h(pw), hash(kOTP, challenge)> ) ]->
     [ ]
  */

rule (modulo E) ifsdecdscodesccypheradeccypherskVcode_1_1111111111212111111111[color=#408046,
                                                                               process="if sdec(dscode(sccypher.1), adec(cypher.2, skV.1))=code.3"]:
   [
   State_1111111111212111111111( cu.1, pc.1, pw.1, sccypher.1, share.1,
                                 skV.1, cypher.2, signed.2, code.3
   )
   ]
  --[
  Pred_Not_Eq( sdec(dscode(sccypher.1), adec(cypher.2, skV.1)), code.3 )
  ]->
   [ ]

  /*
  rule (modulo AC) ifsdecdscodesccypheradeccypherskVcode_1_1111111111212111111111[color=#408046,
                                                                                  process="if sdec(dscode(sccypher.1), adec(cypher.2, skV.1))=code.3"]:
     [
     State_1111111111212111111111( cu, pc, pw, sccypher, share, skV, cypher,
                                   signed, code
     )
     ]
    --[ Pred_Not_Eq( z, code ) ]->
     [ ]
    variants (modulo AC)
    1. cypher
             = cypher.15
       sccypher
             = sccypher.14
       skV   = skV.14
       z     = sdec(dscode(sccypher.14), adec(cypher.15, skV.14))
    
    2. cypher
             = aenc(x.15, pk(x.14))
       sccypher
             = sccypher.16
       skV   = x.14
       z     = sdec(dscode(sccypher.16), x.15)
    
    3. cypher
             = cypher.16
       sccypher
             = scode(x.14)
       skV   = skV.15
       z     = sdec(x.14, adec(cypher.16, skV.15))
    
    4. cypher
             = aenc(x.17, pk(x.16))
       sccypher
             = scode(x.14)
       skV   = x.16
       z     = sdec(x.14, x.17)
    
    5. cypher
             = aenc(x.15, pk(x.17))
       sccypher
             = scode(senc(x.14, x.15))
       skV   = x.17
       z     = x.14
    
    6. cypher
             = x.15
       sccypher
             = scode(senc(x.14, adec(x.15, x.16)))
       skV   = x.16
       z     = x.14
  */

rule (modulo E) ifaencadeccypherskVpkskVcheckrepsignedloc_1_11111111112121111[color=#408046,
                                                                              process="if aenc(adec(cypher.2, skV.1), pk(skV.1))=check_rep(signed.2, 'loc')"]:
   [
   State_11111111112121111( cu.1, pc.1, pw.1, share.1, skV.1, cypher.2,
                            signed.2
   )
   ]
  --[
  Pred_Not_Eq( aenc(adec(cypher.2, skV.1), pk(skV.1)),
               check_rep(signed.2, 'loc')
  )
  ]->
   [ ]

  /*
  rule (modulo AC) ifaencadeccypherskVpkskVcheckrepsignedloc_1_11111111112121111[color=#408046,
                                                                                 process="if aenc(adec(cypher.2, skV.1), pk(skV.1))=check_rep(signed.2, 'loc')"]:
     [ State_11111111112121111( cu, pc, pw, share, skV, cypher, signed ) ]
    --[ Pred_Not_Eq( aenc(z, pk(skV)), z.1 ) ]->
     [ ]
    variants (modulo AC)
    1. cypher
             = cypher.13
       signed
             = signed.13
       skV   = skV.12
       z     = adec(cypher.13, skV.12)
       z.1   = check_rep(signed.13, 'loc')
    
    2. cypher
             = aenc(x.13, pk(x.12))
       signed
             = signed.15
       skV   = x.12
       z     = x.13
       z.1   = check_rep(signed.15, 'loc')
    
    3. cypher
             = aenc(x.13, pk(x.12))
       signed
             = rep(x.14, 'loc')
       skV   = x.12
       z     = x.13
       z.1   = x.14
    
    4. cypher
             = cypher.14
       signed
             = rep(x.12, 'loc')
       skV   = skV.13
       z     = adec(cypher.14, skV.13)
       z.1   = x.12
  */

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.7.1
Maude version 3.2.1
Git revision: 4b299c253445d7bbc7fce41abf0b0d5659bb1d58, branch: develop
Compiled at: 2023-06-26 11:54:20.223793825 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 3.2.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-locations/OTP.spthy

  output:          examples/sapic/fast/feature-locations/OTP.spthy.tmp
  processing time: 14.27s
  
  reachV (exists-trace): verified (7 steps)
  secrecy_key (all-traces): verified (8 steps)
  key_ex (all-traces): verified (31 steps)
  secrecy_ex (all-traces): verified (11 steps)
  unic (all-traces): verified (2 steps)
  secrecy_chall (all-traces): verified (260 steps)
  valid (all-traces): verified (55 steps)
  unic_2 (all-traces): verified (8 steps)

==============================================================================
*/
