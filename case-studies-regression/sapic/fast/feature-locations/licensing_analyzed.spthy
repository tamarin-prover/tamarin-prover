theory licensing begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, ask/2, check_rep/2[destructor], dec/1, dec1/1,
           dec2/1, fst/1, get_rep/1[destructor], ok/2, pair/2, pk/1, prg/1,
           rep/2[private,destructor], report/1, run/2, sdec/2, senc/2, snd/1, tkn/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    check_rep(rep(x.1, x.2), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(x.1, x.2)) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



heuristic: s







predicate: Report( x, y )<=>¬(fst(y) = 'loc')







lemma attested_comput:
  all-traces
  "∀ #t1 inp pk.
    (Poutput( inp, pk ) @ #t1) ⇒ (∃ #t2. (Token( pk ) @ #t2) ∧ (#t2 < #t1))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 inp pk.
  (Poutput( inp, pk ) @ #t1) ∧ ∀ #t2. (Token( pk ) @ #t2) ⇒ ¬(#t2 < #t1)"
*/
simplify
solve( State_111111111111111( inp, prog, prog2, shared_key, skV, pk, x
       ) ▶₀ #t1 )
  case p_1_1111111111
  solve( !KU( senc(ok(~n.2, tkn(pk)), ~n.1) ) @ #vk )
    case c_senc
    solve( !KU( ~n.1 ) @ #vk.6 )
      case p_1_111_case_1
      solve( !KU( senc(tkn(pk), ~n.1) ) @ #vk.3 )
        case c_senc
        solve( !KU( senc(prg(prog2), ~n.1) ) @ #vk.4 )
          case c_senc
          solve( !KU( ok(~n.2, tkn(pk)) ) @ #vk.6 )
            case c_ok
            by solve( !KU( ~n.2 ) @ #vk.10 )
          next
            case iftkntokentkntoken_0_11211111111111111
            by contradiction /* from formulas */
          qed
        next
          case eventSessionVpkskVsharedkey_0_1121111111
          by solve( !KU( ~n.2 ) @ #vk.10 )
        qed
      next
        case p_1_112111111111
        by contradiction /* from formulas */
      qed
    next
      case p_1_111_case_2
      solve( !KU( senc(tkn(pk), ~n.1) ) @ #vk.3 )
        case c_senc
        solve( !KU( senc(prg(prog2), ~n.1) ) @ #vk.4 )
          case c_senc
          solve( !KU( ok(~n.2, tkn(pk)) ) @ #vk.6 )
            case c_ok
            by solve( !KU( ~n.2 ) @ #vk.10 )
          next
            case iftkntokentkntoken_0_11211111111111111
            by contradiction /* from formulas */
          qed
        next
          case eventSessionVpkskVsharedkey_0_1121111111
          by solve( !KU( ~n.2 ) @ #vk.10 )
        qed
      next
        case p_1_112111111111
        by contradiction /* from formulas */
      qed
    qed
  next
    case iftkntokentkntoken_0_11211111111111111
    by contradiction /* from formulas */
  qed
qed

lemma unique:
  all-traces
  "¬(∃ #t1 #t2 pk inp inp2.
      ((Poutput( inp, pk ) @ #t1) ∧ (Poutput( inp2, pk ) @ #t2)) ∧
      (¬(inp = inp2)))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 #t2 pk inp inp2.
  (Poutput( inp, pk ) @ #t1) ∧ (Poutput( inp2, pk ) @ #t2) ∧ ¬(inp = inp2)"
*/
simplify
solve( State_111111111111111( inp, prog, prog2, shared_key, skV, pk, x
       ) ▶₀ #t1 )
  case p_1_1111111111
  solve( State_111111111111111( inp2, prog, prog2.1, shared_key, skV.1, pk,
                                x
         ) ▶₀ #t2 )
    case p_1_1111111111
    solve( !KU( senc(ok(~n.2, tkn(pk)), ~n.1) ) @ #vk )
      case c_senc
      solve( !KU( ~n.1 ) @ #vk.11 )
        case p_1_111_case_1
        solve( !KU( senc(ok(~n.4, tkn(pk)), ~n.3) ) @ #vk.2 )
          case c_senc
          solve( !KU( ~n.3 ) @ #vk.14 )
            case p_1_111_case_1
            solve( !KU( senc(tkn(pk), ~n.1) ) @ #vk.5 )
              case c_senc
              solve( !KU( senc(prg(prog2), ~n.1) ) @ #vk.6 )
                case c_senc
                solve( !KU( senc(tkn(pk), ~n.3) ) @ #vk.9 )
                  case c_senc
                  solve( !KU( senc(prg(prog2.1), ~n.3) ) @ #vk.10 )
                    case c_senc
                    solve( !KU( ok(~n.2, tkn(pk)) ) @ #vk.12 )
                      case c_ok
                      by solve( !KU( ~n.2 ) @ #vk.19 )
                    next
                      case iftkntokentkntoken_0_11211111111111111
                      solve( !KU( ~n.6 ) @ #vk.21 )
                        case p_1_111_case_1
                        by solve( !KU( ~n.7 ) @ #vk.25 )
                      next
                        case p_1_111_case_2
                        by solve( !KU( ~n.7 ) @ #vk.25 )
                      qed
                    qed
                  next
                    case eventSessionVpkskVsharedkey_0_1121111111
                    by solve( !KU( ~n.4 ) @ #vk.18 )
                  qed
                next
                  case p_1_112111111111
                  by solve( !KU( ~n.5 ) @ #vk.18 )
                qed
              next
                case eventSessionVpkskVsharedkey_0_1121111111
                by solve( !KU( ~n.2 ) @ #vk.16 )
              qed
            next
              case p_1_112111111111
              by solve( !KU( ~n.2 ) @ #vk.16 )
            qed
          next
            case p_1_111_case_2
            solve( !KU( senc(tkn(pk), ~n.1) ) @ #vk.5 )
              case c_senc
              solve( !KU( senc(prg(prog2), ~n.1) ) @ #vk.6 )
                case c_senc
                solve( !KU( senc(tkn(pk), ~n.3) ) @ #vk.9 )
                  case c_senc
                  solve( !KU( senc(prg(prog2.1), ~n.3) ) @ #vk.10 )
                    case c_senc
                    solve( !KU( ok(~n.2, tkn(pk)) ) @ #vk.12 )
                      case c_ok
                      by solve( !KU( ~n.2 ) @ #vk.19 )
                    next
                      case iftkntokentkntoken_0_11211111111111111
                      solve( !KU( ~n.6 ) @ #vk.21 )
                        case p_1_111_case_1
                        by solve( !KU( ~n.7 ) @ #vk.25 )
                      next
                        case p_1_111_case_2
                        by solve( !KU( ~n.7 ) @ #vk.25 )
                      qed
                    qed
                  next
                    case eventSessionVpkskVsharedkey_0_1121111111
                    by solve( !KU( ~n.4 ) @ #vk.18 )
                  qed
                next
                  case p_1_112111111111
                  by solve( !KU( ~n.5 ) @ #vk.18 )
                qed
              next
                case eventSessionVpkskVsharedkey_0_1121111111
                by solve( !KU( ~n.2 ) @ #vk.16 )
              qed
            next
              case p_1_112111111111
              by solve( !KU( ~n.2 ) @ #vk.16 )
            qed
          qed
        next
          case iftkntokentkntoken_0_11211111111111111
          solve( !KU( senc(tkn(~n.2), ~n.1) ) @ #vk.5 )
            case c_senc
            solve( !KU( senc(prg(prog2), ~n.1) ) @ #vk.7 )
              case c_senc
              solve( !KU( senc(prg(prog2.1), ~n.4) ) @ #vk.11 )
                case c_senc
                solve( !KU( ~n.4 ) @ #vk.20 )
                  case p_1_111_case_1
                  by solve( !KU( ~n.5 ) @ #vk.21 )
                next
                  case p_1_111_case_2
                  by solve( !KU( ~n.5 ) @ #vk.21 )
                qed
              next
                case eventSessionVpkskVsharedkey_0_1121111111
                solve( !KU( ok(~n.3, tkn(~n.2)) ) @ #vk.13 )
                  case c_ok
                  by solve( !KU( ~n.3 ) @ #vk.19 )
                qed
              qed
            next
              case eventSessionVpkskVsharedkey_0_1121111111
              by solve( !KU( ~n.2 ) @ #vk.17 )
            qed
          next
            case p_1_112111111111
            by solve( !KU( ~n.2 ) @ #vk.12 )
          qed
        qed
      next
        case p_1_111_case_2
        solve( !KU( senc(ok(~n.4, tkn(pk)), ~n.3) ) @ #vk.2 )
          case c_senc
          solve( !KU( ~n.3 ) @ #vk.14 )
            case p_1_111_case_1
            solve( !KU( senc(tkn(pk), ~n.1) ) @ #vk.5 )
              case c_senc
              solve( !KU( senc(prg(prog2), ~n.1) ) @ #vk.6 )
                case c_senc
                solve( !KU( senc(tkn(pk), ~n.3) ) @ #vk.9 )
                  case c_senc
                  solve( !KU( senc(prg(prog2.1), ~n.3) ) @ #vk.10 )
                    case c_senc
                    solve( !KU( ok(~n.2, tkn(pk)) ) @ #vk.12 )
                      case c_ok
                      by solve( !KU( ~n.2 ) @ #vk.19 )
                    next
                      case iftkntokentkntoken_0_11211111111111111
                      solve( !KU( ~n.6 ) @ #vk.21 )
                        case p_1_111_case_1
                        by solve( !KU( ~n.7 ) @ #vk.25 )
                      next
                        case p_1_111_case_2
                        by solve( !KU( ~n.7 ) @ #vk.25 )
                      qed
                    qed
                  next
                    case eventSessionVpkskVsharedkey_0_1121111111
                    by solve( !KU( ~n.4 ) @ #vk.18 )
                  qed
                next
                  case p_1_112111111111
                  by solve( !KU( ~n.5 ) @ #vk.18 )
                qed
              next
                case eventSessionVpkskVsharedkey_0_1121111111
                by solve( !KU( ~n.2 ) @ #vk.16 )
              qed
            next
              case p_1_112111111111
              by solve( !KU( ~n.2 ) @ #vk.16 )
            qed
          next
            case p_1_111_case_2
            solve( !KU( senc(tkn(pk), ~n.1) ) @ #vk.5 )
              case c_senc
              solve( !KU( senc(prg(prog2), ~n.1) ) @ #vk.6 )
                case c_senc
                solve( !KU( senc(tkn(pk), ~n.3) ) @ #vk.9 )
                  case c_senc
                  solve( !KU( senc(prg(prog2.1), ~n.3) ) @ #vk.10 )
                    case c_senc
                    solve( !KU( ok(~n.2, tkn(pk)) ) @ #vk.12 )
                      case c_ok
                      by solve( !KU( ~n.2 ) @ #vk.19 )
                    next
                      case iftkntokentkntoken_0_11211111111111111
                      solve( !KU( ~n.6 ) @ #vk.21 )
                        case p_1_111_case_1
                        by solve( !KU( ~n.7 ) @ #vk.25 )
                      next
                        case p_1_111_case_2
                        by solve( !KU( ~n.7 ) @ #vk.25 )
                      qed
                    qed
                  next
                    case eventSessionVpkskVsharedkey_0_1121111111
                    by solve( !KU( ~n.4 ) @ #vk.18 )
                  qed
                next
                  case p_1_112111111111
                  by solve( !KU( ~n.5 ) @ #vk.18 )
                qed
              next
                case eventSessionVpkskVsharedkey_0_1121111111
                by solve( !KU( ~n.2 ) @ #vk.16 )
              qed
            next
              case p_1_112111111111
              by solve( !KU( ~n.2 ) @ #vk.16 )
            qed
          qed
        next
          case iftkntokentkntoken_0_11211111111111111
          solve( !KU( senc(tkn(~n.2), ~n.1) ) @ #vk.5 )
            case c_senc
            solve( !KU( senc(prg(prog2), ~n.1) ) @ #vk.7 )
              case c_senc
              solve( !KU( senc(prg(prog2.1), ~n.4) ) @ #vk.11 )
                case c_senc
                solve( !KU( ~n.4 ) @ #vk.20 )
                  case p_1_111_case_1
                  by solve( !KU( ~n.5 ) @ #vk.21 )
                next
                  case p_1_111_case_2
                  by solve( !KU( ~n.5 ) @ #vk.21 )
                qed
              next
                case eventSessionVpkskVsharedkey_0_1121111111
                solve( !KU( ok(~n.3, tkn(~n.2)) ) @ #vk.13 )
                  case c_ok
                  by solve( !KU( ~n.3 ) @ #vk.19 )
                qed
              qed
            next
              case eventSessionVpkskVsharedkey_0_1121111111
              by solve( !KU( ~n.2 ) @ #vk.17 )
            qed
          next
            case p_1_112111111111
            by solve( !KU( ~n.2 ) @ #vk.12 )
          qed
        qed
      qed
    next
      case iftkntokentkntoken_0_11211111111111111
      solve( !KU( senc(ok(~n.6, tkn(~n.3)), ~n.5) ) @ #vk.2 )
        case c_senc
        solve( !KU( ~n.5 ) @ #vk.15 )
          case p_1_111_case_1
          solve( !KU( senc(prg(prog2), ~n.1) ) @ #vk.7 )
            case c_senc
            solve( !KU( ~n.1 ) @ #vk.18 )
              case p_1_111_case_1
              by solve( !KU( ~n.2 ) @ #vk.19 )
            next
              case p_1_111_case_2
              by solve( !KU( ~n.2 ) @ #vk.19 )
            qed
          next
            case eventSessionVpkskVsharedkey_0_1121111111
            solve( !KU( senc(tkn(~n.3), ~n.5) ) @ #vk.10 )
              case c_senc
              solve( !KU( senc(prg(prog2), ~n.5) ) @ #vk.11 )
                case c_senc
                solve( !KU( ok(~n.6, tkn(~n.3)) ) @ #vk.15 )
                  case c_ok
                  by solve( !KU( ~n.6 ) @ #vk.19 )
                qed
              next
                case eventSessionVpkskVsharedkey_0_1121111111
                by solve( !KU( ~n.6 ) @ #vk.18 )
              qed
            next
              case p_1_112111111111
              by solve( !KU( ~n.2 ) @ #vk.13 )
            qed
          qed
        next
          case p_1_111_case_2
          solve( !KU( senc(prg(prog2), ~n.1) ) @ #vk.7 )
            case c_senc
            solve( !KU( ~n.1 ) @ #vk.18 )
              case p_1_111_case_1
              by solve( !KU( ~n.2 ) @ #vk.19 )
            next
              case p_1_111_case_2
              by solve( !KU( ~n.2 ) @ #vk.19 )
            qed
          next
            case eventSessionVpkskVsharedkey_0_1121111111
            solve( !KU( senc(tkn(~n.3), ~n.5) ) @ #vk.10 )
              case c_senc
              solve( !KU( senc(prg(prog2), ~n.5) ) @ #vk.11 )
                case c_senc
                solve( !KU( ok(~n.6, tkn(~n.3)) ) @ #vk.15 )
                  case c_ok
                  by solve( !KU( ~n.6 ) @ #vk.19 )
                qed
              next
                case eventSessionVpkskVsharedkey_0_1121111111
                by solve( !KU( ~n.6 ) @ #vk.18 )
              qed
            next
              case p_1_112111111111
              by solve( !KU( ~n.2 ) @ #vk.13 )
            qed
          qed
        qed
      next
        case iftkntokentkntoken_0_11211111111111111
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma final:
  all-traces
  "∀ #t1 #t2 prog inp.
    ((K( run(prog, inp) ) @ #t1) ∧ (Auth( prog ) @ #t2)) ⇒
    (∃ #t3 #t4 pk.
      ((((Token( pk ) @ #t4) ∧ (#t4 < #t1)) ∧ (Poutput( inp, pk ) @ #t3)) ∧
       (#t3 < #t1)) ∧
      (¬(∃ #t5 inp2. (Poutput( inp2, pk ) @ #t5) ∧ (¬(inp = inp2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 #t2 prog inp.
  (K( run(prog, inp) ) @ #t1) ∧ (Auth( prog ) @ #t2)
 ∧
  ∀ #t3 #t4 pk.
   (Token( pk ) @ #t4) ∧ (Poutput( inp, pk ) @ #t3)
  ⇒
   ((¬(#t4 < #t1)) ∨
    (¬(#t3 < #t1)) ∨
    (∃ #t5 inp2. (Poutput( inp2, pk ) @ #t5) ∧ ¬(inp = inp2)))"
*/
simplify
solve( State_1( prog ) ▶₀ #t2 )
  case Init
  solve( !KU( run(~n, inp) ) @ #vk )
    case c_run
    by solve( !KU( ~n ) @ #vk.1 )
  next
    case insencokxtkntokensharedkey_0_111111111111111
    solve( !KU( senc(ok(~n.2, tkn(token)), ~n.1) ) @ #vk.1 )
      case c_senc
      solve( !KU( ~n.2 ) @ #vk.7 )
        case p_1_111_case_1
        solve( !KU( senc(tkn(token), ~n.2) ) @ #vk.4 )
          case c_senc
          solve( !KU( senc(prg(~n), ~n.2) ) @ #vk.5 )
            case c_senc
            solve( !KU( ok(~n.1, tkn(token)) ) @ #vk.7 )
              case c_ok
              by solve( !KU( ~n.1 ) @ #vk.11 )
            next
              case iftkntokentkntoken_0_11211111111111111
              solve( State_111111111111111( inp2, prog, prog2, shared_key, skV.1, ~n.2,
                                            x
                     ) ▶₀ #t5 )
                case p_1_1111111111
                solve( !KU( ~n.6 ) @ #vk.13 )
                  case p_1_111_case_1
                  by solve( !KU( ~n.7 ) @ #vk.22 )
                next
                  case p_1_111_case_2
                  by solve( !KU( ~n.7 ) @ #vk.22 )
                qed
              qed
            qed
          next
            case eventSessionVpkskVsharedkey_0_1121111111
            by solve( !KU( ~n.3 ) @ #vk.11 )
          qed
        next
          case p_1_112111111111
          solve( State_111111111111111( inp2, prog, prog2, shared_key, skV, ~n.2, x
                 ) ▶₀ #t5 )
            case p_1_1111111111
            by solve( !KU( ~n.6 ) @ #vk.11 )
          qed
        qed
      next
        case p_1_111_case_2
        solve( !KU( senc(tkn(token), ~n.2) ) @ #vk.4 )
          case c_senc
          solve( !KU( senc(prg(~n), ~n.2) ) @ #vk.5 )
            case c_senc
            solve( !KU( ok(~n.1, tkn(token)) ) @ #vk.7 )
              case c_ok
              by solve( !KU( ~n.1 ) @ #vk.11 )
            next
              case iftkntokentkntoken_0_11211111111111111
              solve( State_111111111111111( inp2, prog, prog2, shared_key, skV.1, ~n.2,
                                            x
                     ) ▶₀ #t5 )
                case p_1_1111111111
                solve( !KU( ~n.6 ) @ #vk.13 )
                  case p_1_111_case_1
                  by solve( !KU( ~n.7 ) @ #vk.22 )
                next
                  case p_1_111_case_2
                  by solve( !KU( ~n.7 ) @ #vk.22 )
                qed
              qed
            qed
          next
            case eventSessionVpkskVsharedkey_0_1121111111
            by solve( !KU( ~n.3 ) @ #vk.11 )
          qed
        next
          case p_1_112111111111
          solve( State_111111111111111( inp2, prog, prog2, shared_key, skV, ~n.2, x
                 ) ▶₀ #t5 )
            case p_1_1111111111
            by solve( !KU( ~n.6 ) @ #vk.11 )
          qed
        qed
      qed
    next
      case iftkntokentkntoken_0_11211111111111111
      solve( State_111111111111111( inp2, prog, prog2, shared_key, skV, ~n.2, x
             ) ▶₀ #t5 )
        case p_1_1111111111
        solve( !KU( senc(ok(~n.3, tkn(~n.2)), ~n.1) ) @ #vk.10 )
          case c_senc
          solve( !KU( ~n.1 ) @ #vk.16 )
            case p_1_111_case_1
            solve( !KU( senc(tkn(~n.2), ~n.1) ) @ #vk.13 )
              case c_senc
              solve( !KU( senc(prg(prog2), ~n.1) ) @ #vk.14 )
                case c_senc
                solve( !KU( ok(~n.3, tkn(~n.2)) ) @ #vk.16 )
                  case c_ok
                  by solve( !KU( ~n.3 ) @ #vk.20 )
                qed
              next
                case eventSessionVpkskVsharedkey_0_1121111111
                by solve( !KU( ~n.2 ) @ #vk.20 )
              qed
            next
              case p_1_112111111111
              by solve( !KU( ~n.2 ) @ #vk.14 )
            qed
          next
            case p_1_111_case_2
            solve( !KU( senc(tkn(~n.2), ~n.1) ) @ #vk.13 )
              case c_senc
              solve( !KU( senc(prg(prog2), ~n.1) ) @ #vk.14 )
                case c_senc
                solve( !KU( ok(~n.3, tkn(~n.2)) ) @ #vk.16 )
                  case c_ok
                  by solve( !KU( ~n.3 ) @ #vk.20 )
                qed
              next
                case eventSessionVpkskVsharedkey_0_1121111111
                by solve( !KU( ~n.2 ) @ #vk.19 )
              qed
            next
              case p_1_112111111111
              by solve( !KU( ~n.2 ) @ #vk.14 )
            qed
          qed
        next
          case iftkntokentkntoken_0_11211111111111111
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed









































restriction Restr_ReportRule_1:
  "∀ x #NOW. (Restr_ReportRule_1( x ) @ #NOW) ⇒ (¬(x = 'loc'))"
  // safety formula

rule (modulo E) ReportRule[color=#ffffff, process="new prog.1;"]:
   [ In( <x, loc> ) ]
  --[ Restr_ReportRule_1( fst(loc) ) ]->
   [ Out( rep(x, loc) ) ]

  /*
  rule (modulo AC) ReportRule[color=#ffffff, process="new prog.1;"]:
     [ In( <x, loc> ) ] --[ Restr_ReportRule_1( z ) ]-> [ Out( rep(x, loc) ) ]
    variants (modulo AC)
    1. loc   = loc.4
       z     = fst(loc.4)
    
    2. loc   = <x.4, x.5>
       z     = x.4
  */

rule (modulo E) Init[color=#ffffff, process="new prog.1;"]:
   [ Fr( prog.1 ) ] --[ Init( ) ]-> [ State_1( prog.1 ) ]

  /*
  rule (modulo AC) Init[color=#ffffff, process="new prog.1;"]:
     [ Fr( prog ) ] --[ Init( ) ]-> [ State_1( prog ) ]
  */

rule (modulo E) p_1_111[color=#ffffff, process="!"]:
   [ !Semistate_1111( prog.1 ), In( pk(skV.1) ), Fr( shared_key.1 ) ]
  --[ SessionP( pk(skV.1), shared_key.1 ) ]->
   [
   State_111111111( prog.1, shared_key.1, skV.1 ),
   Out( <aenc(shared_key.1, pk(skV.1)), 
         rep(aenc(shared_key.1, pk(skV.1)), <'loc', pk(skV.1)>)>
   )
   ]

  /*
  rule (modulo AC) p_1_111[color=#ffffff, process="!"]:
     [ !Semistate_1111( prog ), In( pk(skV) ), Fr( shared_key ) ]
    --[ SessionP( pk(skV), shared_key ) ]->
     [
     State_111111111( prog, shared_key, skV ),
     Out( <aenc(shared_key, pk(skV)), 
           rep(aenc(shared_key, pk(skV)), <'loc', pk(skV)>)>
     )
     ]
  */

rule (modulo E) insencprgprogsharedkey_0_111111111[color=#408053,
                                                   process="in(senc(prg(prog2.1), =shared_key.1));"]:
   [
   State_111111111( prog.1, shared_key.1, skV.1 ),
   In( senc(prg(prog2.1), shared_key.1) )
   ]
  -->
   [ !Semistate_11111111111( prog.1, prog2.1, shared_key.1, skV.1 ) ]

  /*
  rule (modulo AC) insencprgprogsharedkey_0_111111111[color=#408053,
                                                      process="in(senc(prg(prog2.1), =shared_key.1));"]:
     [
     State_111111111( prog, shared_key, skV ),
     In( senc(prg(prog2), shared_key) )
     ]
    -->
     [ !Semistate_11111111111( prog, prog2, shared_key, skV ) ]
  */

rule (modulo E) p_1_1111111111[color=#408053, process="!"]:
   [
   !Semistate_11111111111( prog.1, prog2.1, shared_key.1, skV.1 ),
   In( input.1 ), In( senc(tkn(token.1), shared_key.1) ), Fr( x.1 )
   ]
  -->
   [
   State_111111111111111( input.1, prog.1, prog2.1, shared_key.1, skV.1,
                          token.1, x.1
   ),
   Out( senc(ask(x.1, tkn(token.1)), shared_key.1) )
   ]

  /*
  rule (modulo AC) p_1_1111111111[color=#408053, process="!"]:
     [
     !Semistate_11111111111( prog, prog2, shared_key, skV ), In( input ),
     In( senc(tkn(token), shared_key) ), Fr( x )
     ]
    -->
     [
     State_111111111111111( input, prog, prog2, shared_key, skV, token, x ),
     Out( senc(ask(x, tkn(token)), shared_key) )
     ]
  */

rule (modulo E) insencokxtkntokensharedkey_0_111111111111111[color=#408053,
                                                             process="in(senc(ok(=x.1, tkn(=token.1)), =shared_key.1));"]:
   [
   State_111111111111111( input.1, prog.1, prog2.1, shared_key.1, skV.1,
                          token.1, x.1
   ),
   In( senc(ok(x.1, tkn(token.1)), shared_key.1) )
   ]
  --[ Poutput( input.1, token.1 ) ]->
   [ Out( run(prog2.1, input.1) ) ]

  /*
  rule (modulo AC) insencokxtkntokensharedkey_0_111111111111111[color=#408053,
                                                                process="in(senc(ok(=x.1, tkn(=token.1)), =shared_key.1));"]:
     [
     State_111111111111111( input, prog, prog2, shared_key, skV, token, x ),
     In( senc(ok(x, tkn(token)), shared_key) )
     ]
    --[ Poutput( input, token ) ]->
     [ Out( run(prog2, input) ) ]
  */

rule (modulo E) eventAuthprog_0_1[color=#ffffff,
                                  process="event Auth( prog.1 );"]:
   [ State_1( prog.1 ) ]
  --[ Auth( prog.1 ) ]->
   [ !Semistate_1121( prog.1 ), !Semistate_1111( prog.1 ) ]

  /*
  rule (modulo AC) eventAuthprog_0_1[color=#ffffff,
                                     process="event Auth( prog.1 );"]:
     [ State_1( prog ) ]
    --[ Auth( prog ) ]->
     [ !Semistate_1121( prog ), !Semistate_1111( prog ) ]
  */

rule (modulo E) p_1_112[color=#ffffff, process="!"]:
   [ !Semistate_1121( prog.1 ), Fr( skV.2 ) ]
  --[ HonestP( pk(skV.2) ) ]->
   [ State_11211111( prog.1, skV.2 ), Out( pk(skV.2) ) ]

  /*
  rule (modulo AC) p_1_112[color=#ffffff, process="!"]:
     [ !Semistate_1121( prog ), Fr( skV ) ]
    --[ HonestP( pk(skV) ) ]->
     [ State_11211111( prog, skV ), Out( pk(skV) ) ]
  */

rule (modulo E) inaencsharedkeypkskVsigned_0_11211111[color=#40807f,
                                                      process="in(<aenc(shared_key.2, pk(=skV.2)), signed.1>);"]:
   [
   State_11211111( prog.1, skV.2 ),
   In( <aenc(shared_key.2, pk(skV.2)), signed.1> )
   ]
  -->
   [ State_112111111( prog.1, signed.1, shared_key.2, skV.2 ) ]

  /*
  rule (modulo AC) inaencsharedkeypkskVsigned_0_11211111[color=#40807f,
                                                         process="in(<aenc(shared_key.2, pk(=skV.2)), signed.1>);"]:
     [ State_11211111( prog, skV ), In( <aenc(shared_key, pk(skV)), signed> )
     ]
    -->
     [ State_112111111( prog, signed, shared_key, skV ) ]
  */

rule (modulo E) ifaencsharedkeypkskVcheckrepsignedlocpkskV_0_112111111[color=#40807f,
                                                                       process="if aenc(shared_key.2, pk(skV.2))=check_rep(signed.1, <'loc', pk(skV.2)>)"]:
   [ State_112111111( prog.1, signed.1, shared_key.2, skV.2 ) ]
  --[
  Pred_Eq( aenc(shared_key.2, pk(skV.2)),
           check_rep(signed.1, <'loc', pk(skV.2)>)
  )
  ]->
   [ State_1121111111( prog.1, signed.1, shared_key.2, skV.2 ) ]

  /*
  rule (modulo AC) ifaencsharedkeypkskVcheckrepsignedlocpkskV_0_112111111[color=#40807f,
                                                                          process="if aenc(shared_key.2, pk(skV.2))=check_rep(signed.1, <'loc', pk(skV.2)>)"]:
     [ State_112111111( prog, signed, shared_key, skV ) ]
    --[ Pred_Eq( aenc(shared_key, pk(skV)), z ) ]->
     [ State_1121111111( prog, signed, shared_key, skV ) ]
    variants (modulo AC)
    1. signed
             = signed.8
       skV   = skV.9
       z     = check_rep(signed.8, <'loc', pk(skV.9)>)
    
    2. signed
             = rep(x.8, <'loc', pk(x.9)>)
       skV   = x.9
       z     = x.8
  */

rule (modulo E) eventSessionVpkskVsharedkey_0_1121111111[color=#40807f,
                                                         process="event SessionV( pk(skV.2), shared_key.2 );"]:
   [ State_1121111111( prog.1, signed.1, shared_key.2, skV.2 ) ]
  --[ SessionV( pk(skV.2), shared_key.2 ) ]->
   [
   !Semistate_1121111111111( prog.1, signed.1, shared_key.2, skV.2 ),
   Out( senc(prg(prog.1), shared_key.2) )
   ]

  /*
  rule (modulo AC) eventSessionVpkskVsharedkey_0_1121111111[color=#40807f,
                                                            process="event SessionV( pk(skV.2), shared_key.2 );"]:
     [ State_1121111111( prog, signed, shared_key, skV ) ]
    --[ SessionV( pk(skV), shared_key ) ]->
     [
     !Semistate_1121111111111( prog, signed, shared_key, skV ),
     Out( senc(prg(prog), shared_key) )
     ]
  */

rule (modulo E) p_1_112111111111[color=#40807f, process="!"]:
   [
   !Semistate_1121111111111( prog.1, signed.1, shared_key.2, skV.2 ),
   Fr( token.2 )
   ]
  --[ Token( token.2 ) ]->
   [
   State_1121111111111111( prog.1, signed.1, shared_key.2, skV.2, token.2 ),
   Out( senc(tkn(token.2), shared_key.2) )
   ]

  /*
  rule (modulo AC) p_1_112111111111[color=#40807f, process="!"]:
     [ !Semistate_1121111111111( prog, signed, shared_key, skV ), Fr( token )
     ]
    --[ Token( token ) ]->
     [
     State_1121111111111111( prog, signed, shared_key, skV, token ),
     Out( senc(tkn(token), shared_key) )
     ]
  */

rule (modulo E) insencaskxtkntokensharedkey_0_1121111111111111[color=#40807f,
                                                               process="in(senc(ask(x.2, tkn(token2.1)), =shared_key.2));"]:
   [
   State_1121111111111111( prog.1, signed.1, shared_key.2, skV.2, token.2 ),
   In( senc(ask(x.2, tkn(token2.1)), shared_key.2) )
   ]
  -->
   [
   State_11211111111111111( prog.1, signed.1, token2.1, shared_key.2, skV.2,
                            token.2, x.2
   )
   ]

  /*
  rule (modulo AC) insencaskxtkntokensharedkey_0_1121111111111111[color=#40807f,
                                                                  process="in(senc(ask(x.2, tkn(token2.1)), =shared_key.2));"]:
     [
     State_1121111111111111( prog, signed, shared_key, skV, token ),
     In( senc(ask(x, tkn(token2)), shared_key) )
     ]
    -->
     [
     State_11211111111111111( prog, signed, token2, shared_key, skV, token, x
     )
     ]
  */

rule (modulo E) iftkntokentkntoken_0_11211111111111111[color=#40807f,
                                                       process="if tkn(token.2)=tkn(token2.1)"]:
   [
   State_11211111111111111( prog.1, signed.1, token2.1, shared_key.2, skV.2,
                            token.2, x.2
   )
   ]
  --[ Pred_Eq( tkn(token.2), tkn(token2.1) ) ]->
   [ Out( senc(ok(x.2, tkn(token.2)), shared_key.2) ) ]

  /*
  rule (modulo AC) iftkntokentkntoken_0_11211111111111111[color=#40807f,
                                                          process="if tkn(token.2)=tkn(token2.1)"]:
     [
     State_11211111111111111( prog, signed, token2, shared_key, skV, token, x
     )
     ]
    --[ Pred_Eq( tkn(token), tkn(token2) ) ]->
     [ Out( senc(ok(x, tkn(token)), shared_key) ) ]
  */

rule (modulo E) iftkntokentkntoken_1_11211111111111111[color=#40807f,
                                                       process="if tkn(token.2)=tkn(token2.1)"]:
   [
   State_11211111111111111( prog.1, signed.1, token2.1, shared_key.2, skV.2,
                            token.2, x.2
   )
   ]
  --[ Pred_Not_Eq( tkn(token.2), tkn(token2.1) ) ]->
   [ ]

  /*
  rule (modulo AC) iftkntokentkntoken_1_11211111111111111[color=#40807f,
                                                          process="if tkn(token.2)=tkn(token2.1)"]:
     [
     State_11211111111111111( prog, signed, token2, shared_key, skV, token, x
     )
     ]
    --[ Pred_Not_Eq( tkn(token), tkn(token2) ) ]->
     [ ]
  */

rule (modulo E) ifaencsharedkeypkskVcheckrepsignedlocpkskV_1_112111111[color=#40807f,
                                                                       process="if aenc(shared_key.2, pk(skV.2))=check_rep(signed.1, <'loc', pk(skV.2)>)"]:
   [ State_112111111( prog.1, signed.1, shared_key.2, skV.2 ) ]
  --[
  Pred_Not_Eq( aenc(shared_key.2, pk(skV.2)),
               check_rep(signed.1, <'loc', pk(skV.2)>)
  )
  ]->
   [ ]

  /*
  rule (modulo AC) ifaencsharedkeypkskVcheckrepsignedlocpkskV_1_112111111[color=#40807f,
                                                                          process="if aenc(shared_key.2, pk(skV.2))=check_rep(signed.1, <'loc', pk(skV.2)>)"]:
     [ State_112111111( prog, signed, shared_key, skV ) ]
    --[ Pred_Not_Eq( aenc(shared_key, pk(skV)), z ) ]->
     [ ]
    variants (modulo AC)
    1. signed
             = signed.8
       skV   = skV.9
       z     = check_rep(signed.8, <'loc', pk(skV.9)>)
    
    2. signed
             = rep(x.8, <'loc', pk(x.9)>)
       skV   = x.9
       z     = x.8
  */

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/*
WARNING: the following wellformedness checks failed!

The variables of the follwing rule(s) are not derivable from their premises, you may be performing unintended pattern matching
  p_1_111
Failed to derive Variable(s): skV.1
  
  insencprgprogsharedkey_0_111111111
Failed to derive Variable(s): prog2.1
  
  p_1_1111111111
Failed to derive Variable(s): token.1
  
  insencaskxtkntokensharedkey_0_1121111111111111
Failed to derive Variable(s): token2.1, x.2
*/

/*
Generated from:
Tamarin version 1.7.1
Maude version 2.7.1
Git revision: 4b98299e4a9d45b005a55cefa35edd01c0ae0eb3 (with uncommited changes), branch: issues527
Compiled at: 2023-07-03 08:19:31.808496576 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-locations/licensing.spthy

  output:          examples/sapic/fast/feature-locations/licensing.spthy.tmp
  processing time: 3.45s
  
  WARNING: 4 wellformedness check failed!
           The analysis results might be wrong!
  
  attested_comput (all-traces): verified (19 steps)
  unique (all-traces): verified (104 steps)
  final (all-traces): verified (44 steps)

==============================================================================
*/
