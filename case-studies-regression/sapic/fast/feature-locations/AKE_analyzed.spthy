theory AKE begin

// Function signature and definition of the equational theory E

functions: adec/2[destructor], aenc/2, check_rep/2[destructor], first/1,
           fst/1[destructor], get_rep/1[destructor], pair/2, pk/1,
           rep/2[private,destructor], report/1, snd/1[destructor]
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    check_rep(rep(x.1, x.2), x.2) = x.1,
    first(<x, y>) = x,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(x.1, x.2)) = x.1,
    snd(<x.1, x.2>) = x.2

heuristic: p





predicate: Report( x, y )<=>¬(first(y) = 'loc')







lemma can_run_p:
  exists-trace "∃ #t h1 h2. Poutput( h1, h2 ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t h1 h2. (Poutput( h1, h2 ) @ #t)"
*/
simplify
solve( State_1111111( k, pkV ) ▶₀ #t )
  case p_1_1111
  SOLVED // trace found
qed

lemma can_run_v:
  exists-trace "∃ #t h1 h2. Voutput( h1, h2 ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t h1 h2. (Voutput( h1, h2 ) @ #t)"
*/
simplify
solve( State_2111111111( cypher, skV, k, h2 ) ▶₀ #t )
  case ifcyphercheckrepsignedlocpkskVskey_0_211111111
  solve( !KU( aenc(~n, pk(~n.1)) ) @ #vk.2 )
    case eventPoutputaenckpkVrepaenckpkVlocpkV_0_1111111_case_1
    solve( !KU( pk(~n.1) ) @ #vk.3 )
      case p_1_2
      SOLVED // trace found
    qed
  qed
qed

lemma sanity1:
  exists-trace "∃ pka k #t1. SessionP( pka, k ) @ #t1"
/*
guarded formula characterizing all satisfying traces:
"∃ pka k #t1. (SessionP( pka, k ) @ #t1)"
*/
simplify
solve( !Semistate_11111( pka ) ▶₀ #t1 )
  case p_1_1
  SOLVED // trace found
qed

lemma sanity2:
  exists-trace "∃ pka k #t1. SessionV( pka, k ) @ #t1"
/*
guarded formula characterizing all satisfying traces:
"∃ pka k #t1. (SessionV( pka, k ) @ #t1)"
*/
simplify
solve( State_21111111111( cypher, skV, k, signed ) ▶₀ #t1 )
  case eventVoutputaenckpkskVskeysigned_0_2111111111
  solve( !KU( aenc(~n, pk(~n.1)) ) @ #vk.2 )
    case eventPoutputaenckpkVrepaenckpkVlocpkV_0_1111111_case_1
    solve( !KU( pk(~n.1) ) @ #vk.3 )
      case p_1_2
      SOLVED // trace found
    qed
  qed
qed

lemma sanity3 [reuse]:
  all-traces
  "∀ pka k #t1.
    (SessionV( pka, k ) @ #t1) ⇒
    (∃ #t2. (SessionP( pka, k ) @ #t2) ∧ (#t2 < #t1))"
/*
guarded formula characterizing all counter-examples:
"∃ pka k #t1.
  (SessionV( pka, k ) @ #t1)
 ∧
  ∀ #t2. (SessionP( pka, k ) @ #t2) ⇒ ¬(#t2 < #t1)"
*/
simplify
solve( State_21111111111( cypher, skV, k, signed ) ▶₀ #t1 )
  case eventVoutputaenckpkskVskeysigned_0_2111111111
  by contradiction /* from formulas */
qed

lemma secrecy [reuse]:
  all-traces
  "¬(∃ pka k #t1 #t2. (SessionV( pka, k ) @ #t1) ∧ (!KU( k ) @ #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ pka k #t1 #t2. (SessionV( pka, k ) @ #t1) ∧ (!KU( k ) @ #t2)"
*/
simplify
solve( State_21111111111( cypher, skV, ~n, signed ) ▶₀ #t1 )
  case eventVoutputaenckpkskVskeysigned_0_2111111111
  solve( !KU( ~n ) @ #t2.1 )
    case eventPoutputaenckpkVrepaenckpkVlocpkV_0_1111111_case_1
    by solve( !KU( ~n.1 ) @ #vk.4 )
  next
    case eventPoutputaenckpkVrepaenckpkVlocpkV_0_1111111_case_2
    by solve( !KU( ~n.1 ) @ #vk.4 )
  next
    case eventPoutputaenckpkVrepaenckpkVlocpkV_0_1111111_case_3
    by solve( !KU( ~n.1 ) @ #vk.4 )
  qed
qed













restriction Restr_ReportRule_1:
  "∀ x #NOW. (Restr_ReportRule_1( x ) @ #NOW) ⇒ (¬(x = 'loc'))"
  // safety formula

rule (modulo E) ReportRule[color=#ffffff, process="|"]:
   [ In( <x, loc> ) ]
  --[ Restr_ReportRule_1( first(loc) ) ]->
   [ Out( rep(x, loc) ) ]

  /*
  rule (modulo AC) ReportRule[color=#ffffff, process="|"]:
     [ In( <x, loc> ) ] --[ Restr_ReportRule_1( z ) ]-> [ Out( rep(x, loc) ) ]
    variants (modulo AC)
    1. loc   = loc.4
       z     = first(loc.4)
    
    2. loc   = <x.4, x.5>
       z     = x.4
  */

rule (modulo E) p_1_1[color=#ffffff, process="!"]:
   [ !Semistate_11( ), In( pkV.1 ) ] --> [ !Semistate_11111( pkV.1 ) ]

  /*
  rule (modulo AC) p_1_1[color=#ffffff, process="!"]:
     [ !Semistate_11( ), In( pkV ) ] --> [ !Semistate_11111( pkV ) ]
  */

rule (modulo E) p_1_1111[color=#405280, process="!"]:
   [ !Semistate_11111( pkV.1 ), Fr( k.1 ) ]
  --[ SessionP( pkV.1, k.1 ) ]->
   [ State_1111111( k.1, pkV.1 ) ]

  /*
  rule (modulo AC) p_1_1111[color=#405280, process="!"]:
     [ !Semistate_11111( pkV ), Fr( k ) ]
    --[ SessionP( pkV, k ) ]->
     [ State_1111111( k, pkV ) ]
  */

rule (modulo E) eventPoutputaenckpkVrepaenckpkVlocpkV_0_1111111[color=#405280,
                                                                process="event Poutput( aenc(k.1, pkV.1), rep(aenc(k.1, pkV.1), <'loc', pkV.1>) );"]:
   [ State_1111111( k.1, pkV.1 ) ]
  --[ Poutput( aenc(k.1, pkV.1), rep(aenc(k.1, pkV.1), <'loc', pkV.1>) )
  ]->
   [ Out( <aenc(k.1, pkV.1), rep(aenc(k.1, pkV.1), <'loc', pkV.1>)> ) ]

  /*
  rule (modulo AC) eventPoutputaenckpkVrepaenckpkVlocpkV_0_1111111[color=#405280,
                                                                   process="event Poutput( aenc(k.1, pkV.1), rep(aenc(k.1, pkV.1), <'loc', pkV.1>) );"]:
     [ State_1111111( k, pkV ) ]
    --[ Poutput( aenc(k, pkV), rep(aenc(k, pkV), <'loc', pkV>) ) ]->
     [ Out( <aenc(k, pkV), rep(aenc(k, pkV), <'loc', pkV>)> ) ]
  */

rule (modulo E) Init[color=#ffffff, process="|"]:
   [ ] --[ Init( ) ]-> [ !Semistate_21( ), !Semistate_11( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_2[color=#ffffff, process="!"]:
   [ !Semistate_21( ), Fr( skV.1 ) ]
  --[ HonestP( pk(skV.1), 'pubkey' ) ]->
   [ State_211111( skV.1 ), Out( pk(skV.1) ) ]

  /*
  rule (modulo AC) p_1_2[color=#ffffff, process="!"]:
     [ !Semistate_21( ), Fr( skV ) ]
    --[ HonestP( pk(skV), 'pubkey' ) ]->
     [ State_211111( skV ), Out( pk(skV) ) ]
  */

rule (modulo E) incyphersigned_0_211111[color=#658040,
                                        process="in(<cypher.1, signed.2>);"]:
   [ State_211111( skV.1 ), In( <cypher.1, signed.2> ) ]
  -->
   [ Let_21111111( <cypher.1, skV.1>, cypher.1, skV.1, signed.2 ) ]

  /*
  rule (modulo AC) incyphersigned_0_211111[color=#658040,
                                           process="in(<cypher.1, signed.2>);"]:
     [ State_211111( skV ), In( <cypher, signed> ) ]
    -->
     [ Let_21111111( <cypher, skV>, cypher, skV, signed ) ]
  */

rule (modulo E) letkadeccypherskVskey_1_2111111[color=#ffffff,
                                                process="let k.2=adec(cypher.1, skV.1:skey)"]:
   [ Let_21111111( <aenc(k.2, pk(x.2)), x.2>, cypher.1, skV.1, signed.2 ) ]
  -->
   [ State_21111111( cypher.1, skV.1, k.2, signed.2 ) ]

  /*
  rule (modulo AC) letkadeccypherskVskey_1_2111111[color=#ffffff,
                                                   process="let k.2=adec(cypher.1, skV.1:skey)"]:
     [ Let_21111111( <aenc(k, pk(x)), x>, cypher, skV, signed ) ]
    -->
     [ State_21111111( cypher, skV, k, signed ) ]
  */

rule (modulo E) eventTest_0_21111111[color=#658040,
                                     process="event Test( );"]:
   [ State_21111111( cypher.1, skV.1, k.2, signed.2 ) ]
  --[ Test( ) ]->
   [ State_211111111( cypher.1, skV.1, k.2, signed.2 ) ]

  /*
  rule (modulo AC) eventTest_0_21111111[color=#658040,
                                        process="event Test( );"]:
     [ State_21111111( cypher, skV, k, signed ) ]
    --[ Test( ) ]->
     [ State_211111111( cypher, skV, k, signed ) ]
  */

rule (modulo E) ifcyphercheckrepsignedlocpkskVskey_0_211111111[color=#658040,
                                                               process="if cypher.1=check_rep(signed.2, <'loc', pk(skV.1:skey)>)"]:
   [ State_211111111( cypher.1, skV.1, k.2, signed.2 ) ]
  --[ Pred_Eq( cypher.1, check_rep(signed.2, <'loc', pk(skV.1)>) ) ]->
   [ State_2111111111( cypher.1, skV.1, k.2, signed.2 ) ]

  /*
  rule (modulo AC) ifcyphercheckrepsignedlocpkskVskey_0_211111111[color=#658040,
                                                                  process="if cypher.1=check_rep(signed.2, <'loc', pk(skV.1:skey)>)"]:
     [ State_211111111( cypher, skV, k, signed ) ]
    --[ Pred_Eq( cypher, z ) ]->
     [ State_2111111111( cypher, skV, k, signed ) ]
    variants (modulo AC)
    1. signed
             = signed.9
       skV   = skV.8
       z     = check_rep(signed.9, <'loc', pk(skV.8)>)
    
    2. signed
             = rep(x.10, <'loc', pk(x.8)>)
       skV   = x.8
       z     = x.10
  */

rule (modulo E) eventVoutputaenckpkskVskeysigned_0_2111111111[color=#658040,
                                                              process="event Voutput( aenc(k.2, pk(skV.1:skey)), signed.2 );"]:
   [ State_2111111111( cypher.1, skV.1, k.2, signed.2 ) ]
  --[ Voutput( aenc(k.2, pk(skV.1)), signed.2 ) ]->
   [ State_21111111111( cypher.1, skV.1, k.2, signed.2 ) ]

  /*
  rule (modulo AC) eventVoutputaenckpkskVskeysigned_0_2111111111[color=#658040,
                                                                 process="event Voutput( aenc(k.2, pk(skV.1:skey)), signed.2 );"]:
     [ State_2111111111( cypher, skV, k, signed ) ]
    --[ Voutput( aenc(k, pk(skV)), signed ) ]->
     [ State_21111111111( cypher, skV, k, signed ) ]
  */

rule (modulo E) eventSessionVpkskVskeyk_0_21111111111[color=#658040,
                                                      process="event SessionV( pk(skV.1:skey), k.2 );"]:
   [ State_21111111111( cypher.1, skV.1, k.2, signed.2 ) ]
  --[ SessionV( pk(skV.1), k.2 ) ]->
   [ ]

  /*
  rule (modulo AC) eventSessionVpkskVskeyk_0_21111111111[color=#658040,
                                                         process="event SessionV( pk(skV.1:skey), k.2 );"]:
     [ State_21111111111( cypher, skV, k, signed ) ]
    --[ SessionV( pk(skV), k ) ]->
     [ ]
  */

rule (modulo E) ifcyphercheckrepsignedlocpkskVskey_1_211111111[color=#658040,
                                                               process="if cypher.1=check_rep(signed.2, <'loc', pk(skV.1:skey)>)"]:
   [ State_211111111( cypher.1, skV.1, k.2, signed.2 ) ]
  --[ Pred_Not_Eq( cypher.1, check_rep(signed.2, <'loc', pk(skV.1)>) ) ]->
   [ ]

  /*
  rule (modulo AC) ifcyphercheckrepsignedlocpkskVskey_1_211111111[color=#658040,
                                                                  process="if cypher.1=check_rep(signed.2, <'loc', pk(skV.1:skey)>)"]:
     [ State_211111111( cypher, skV, k, signed ) ]
    --[ Pred_Not_Eq( cypher, z ) ]->
     [ ]
    variants (modulo AC)
    1. signed
             = signed.9
       skV   = skV.8
       z     = check_rep(signed.9, <'loc', pk(skV.8)>)
    
    2. signed
             = rep(x.10, <'loc', pk(x.8)>)
       skV   = x.8
       z     = x.10
  */

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 3.0. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/feature-locations/AKE.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/feature-locations/AKE.spthy

  output:          examples/sapic/fast/feature-locations/AKE.spthy.tmp
  processing time: 0.619246571s
  can_run_p (exists-trace): verified (3 steps)
  can_run_v (exists-trace): verified (5 steps)
  sanity1 (exists-trace): verified (3 steps)
  sanity2 (exists-trace): verified (5 steps)
  sanity3 (all-traces): verified (3 steps)
  secrecy (all-traces): verified (6 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-locations/AKE.spthy

  output:          examples/sapic/fast/feature-locations/AKE.spthy.tmp
  processing time: 0.619246571s
  can_run_p (exists-trace): verified (3 steps)
  can_run_v (exists-trace): verified (5 steps)
  sanity1 (exists-trace): verified (3 steps)
  sanity2 (exists-trace): verified (5 steps)
  sanity3 (all-traces): verified (3 steps)
  secrecy (all-traces): verified (6 steps)

==============================================================================
*/
