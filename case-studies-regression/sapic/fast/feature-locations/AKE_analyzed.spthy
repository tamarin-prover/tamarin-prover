theory AKE begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, check_rep/2, fst/1, get_rep/1, pair/2, pk/1,
           rep/2 [private], report/1, sdec/2, senc/2, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    check_rep(rep(x.1, x.2), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(x.1, x.2)) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

heuristic: p

predicate: Report( x, y )<=>¬(∃ z. y = <'loc', z>)

lemma sanity3 [reuse]:
  all-traces
  "∀ pka k #t1.
    (SessionV( pka, k ) @ #t1) ⇒
    (∃ #t2. (SessionP( pka, k ) @ #t2) ∧ (#t2 < #t1))"
/*
guarded formula characterizing all counter-examples:
"∃ pka k #t1.
  (SessionV( pka, k ) @ #t1)
 ∧
  ∀ #t2. (SessionP( pka, k ) @ #t2) ⇒ ¬(#t2 < #t1)"
*/
simplify
solve( State_121111111( init, k, signed, skV ) ▶₀ #t1 )
  case eventVoutputaenckpkskVsigned_0_12111111
  by contradiction /* from formulas */
qed

lemma secrecy [reuse]:
  all-traces
  "¬(∃ pka k #t1 #t2. (SessionV( pka, k ) @ #t1) ∧ (K( k ) @ #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ pka k #t1 #t2. (SessionV( pka, k ) @ #t1) ∧ (K( k ) @ #t2)"
*/
simplify
solve( State_121111111( init, k, signed, skV ) ▶₀ #t1 )
  case eventVoutputaenckpkskVsigned_0_12111111
  solve( State_111111( init, ~n.1, ~n.2 ) ▶₀ #t2.1 )
    case newk_0_11111
    solve( State_111111( init, ~n.1, ~n.2 ) ▶₀ #t2.2 )
      case newk_0_11111
      solve( !KU( ~n.1 ) @ #vk.2 )
        case outaenckpkskVrepaenckpkskVlocpkskV_0_11111111_case_1
        by solve( !KU( ~n.2 ) @ #vk.5 )
      next
        case outaenckpkskVrepaenckpkskVlocpkskV_0_11111111_case_2
        by solve( !KU( ~n.2 ) @ #vk.5 )
      qed
    qed
  qed
qed

restriction Restr_ReportRule_1:
  "∀ x #NOW. (Restr_ReportRule_1( x ) @ #NOW) ⇒ (¬(∃ z. x = <'loc', z>))"
  // safety formula

rule (modulo E) ReportRule[color=#ffffff, process="new init;"]:
   [ In( <x, loc> ) ]
  --[ Restr_ReportRule_1( loc ) ]->
   [ Out( rep(x, loc) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init[color=#ffffff, process="new init;"]:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newinit_0_[color=#ffffff, process="new init;"]:
   [ State_( ), Fr( init ) ] --> [ State_1( init ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1[color=#ffffff, process="|"]:
   [ State_1( init ) ] --> [ State_11( init ), State_12( init ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11[color=#ffffff, process="!"]:
   [ State_11( init ) ] --> [ !Semistate_111( init ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_11[color=#ffffff, process="!"]:
   [ !Semistate_111( init ) ] --> [ State_111( init ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inpkskV_0_111[color=#405280, process="in(pk(skV));"]:
   [ State_111( init ), In( pk(skV) ) ] --> [ State_1111( init, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1111[color=#405280, process="!"]:
   [ State_1111( init, skV ) ] --> [ !Semistate_11111( init, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_1111[color=#405280, process="!"]:
   [ !Semistate_11111( init, skV ) ] --> [ State_11111( init, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newk_0_11111[color=#405280, process="new k;"]:
   [ State_11111( init, skV ), Fr( k ) ]
  -->
   [ State_111111( init, k, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventSessionPpkskVk_0_111111[color=#405280,
                                             process="event SessionP( pk(skV), k );"]:
   [ State_111111( init, k, skV ) ]
  --[ SessionP( pk(skV), k ) ]->
   [ State_1111111( init, k, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventPoutputaenckpkskVrepaenckpkskVlocpkskV_0_1111111[color=#405280,
                                                                      process="event Poutput( <aenc(k, pk(skV)), rep(aenc(k, pk(skV)), <'loc', pk(skV)>)
         >
);"]:
   [ State_1111111( init, k, skV ) ]
  --[
  Poutput( <aenc(k, pk(skV)), rep(aenc(k, pk(skV)), <'loc', pk(skV)>)> )
  ]->
   [ State_11111111( init, k, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outaenckpkskVrepaenckpkskVlocpkskV_0_11111111[color=#405280,
                                                              process="out(<aenc(k, pk(skV)), rep(aenc(k, pk(skV)), <'loc', pk(skV)>)>);"]:
   [ State_11111111( init, k, skV ) ]
  -->
   [
   State_111111111( init, k, skV ),
   Out( <aenc(k, pk(skV)), rep(aenc(k, pk(skV)), <'loc', pk(skV)>)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_111111111[color=#405280, process="0"]:
   [ State_111111111( init, k, skV ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_12[color=#ffffff, process="!"]:
   [ State_12( init ) ] --> [ !Semistate_121( init ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_12[color=#ffffff, process="!"]:
   [ !Semistate_121( init ) ] --> [ State_121( init ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newskV_0_121[color=#658040, process="new skV;"]:
   [ State_121( init ), Fr( skV ) ] --> [ State_1211( init, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventHonestPpkskV_0_1211[color=#658040,
                                         process="event HonestP( pk(skV) );"]:
   [ State_1211( init, skV ) ]
  --[ HonestP( pk(skV) ) ]->
   [ State_12111( init, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outpkskV_0_12111[color=#658040, process="out(pk(skV));"]:
   [ State_12111( init, skV ) ]
  -->
   [ State_121111( init, skV ), Out( pk(skV) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inaenckpkskVsigned_0_121111[color=#658040,
                                            process="in(<aenc(k, pk(skV)), signed>);"]:
   [ State_121111( init, skV ), In( <aenc(k, pk(skV)), signed> ) ]
  -->
   [ State_1211111( init, k, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifaenckpkskVcheckrepsignedlocpkskV_0_1211111[color=#658040,
                                                             process="if aenc(k, pk(skV))=check_rep(signed, <'loc', pk(skV)>)"]:
   [ State_1211111( init, k, signed, skV ) ]
  --[ Pred_Eq( aenc(k, pk(skV)), check_rep(signed, <'loc', pk(skV)>) ) ]->
   [ State_12111111( init, k, signed, skV ) ]

  /*
  rule (modulo AC) ifaenckpkskVcheckrepsignedlocpkskV_0_1211111[color=#658040,
                                                                process="if aenc(k, pk(skV))=check_rep(signed, <'loc', pk(skV)>)"]:
     [ State_1211111( init, k, signed, skV ) ]
    --[ Pred_Eq( aenc(k, pk(skV)), z ) ]->
     [ State_12111111( init, k, signed, skV ) ]
    variants (modulo AC)
    1. signed
             = signed.6
       skV   = skV.6
       z     = check_rep(signed.6, <'loc', pk(skV.6)>)
    
    2. signed
             = rep(x.6, <'loc', pk(x.7)>)
       skV   = x.7
       z     = x.6
  */

rule (modulo E) ifaenckpkskVcheckrepsignedlocpkskV_1_1211111[color=#658040,
                                                             process="if aenc(k, pk(skV))=check_rep(signed, <'loc', pk(skV)>)"]:
   [ State_1211111( init, k, signed, skV ) ]
  --[ Pred_Not_Eq( aenc(k, pk(skV)), check_rep(signed, <'loc', pk(skV)>) )
  ]->
   [ State_12111112( init, k, signed, skV ) ]

  /*
  rule (modulo AC) ifaenckpkskVcheckrepsignedlocpkskV_1_1211111[color=#658040,
                                                                process="if aenc(k, pk(skV))=check_rep(signed, <'loc', pk(skV)>)"]:
     [ State_1211111( init, k, signed, skV ) ]
    --[ Pred_Not_Eq( aenc(k, pk(skV)), z ) ]->
     [ State_12111112( init, k, signed, skV ) ]
    variants (modulo AC)
    1. signed
             = signed.6
       skV   = skV.6
       z     = check_rep(signed.6, <'loc', pk(skV.6)>)
    
    2. signed
             = rep(x.6, <'loc', pk(x.7)>)
       skV   = x.7
       z     = x.6
  */

rule (modulo E) eventVoutputaenckpkskVsigned_0_12111111[color=#658040,
                                                        process="event Voutput( <aenc(k, pk(skV)), signed> );"]:
   [ State_12111111( init, k, signed, skV ) ]
  --[ Voutput( <aenc(k, pk(skV)), signed> ) ]->
   [ State_121111111( init, k, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventSessionVpkskVk_0_121111111[color=#658040,
                                                process="event SessionV( pk(skV), k );"]:
   [ State_121111111( init, k, signed, skV ) ]
  --[ SessionV( pk(skV), k ) ]->
   [ State_1211111111( init, k, signed, skV ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1211111111[color=#658040, process="0"]:
   [ State_1211111111( init, k, signed, skV ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_12111112[color=#658040, process="0"]:
   [ State_12111112( init, k, signed, skV ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/feature-locations/AKE.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/feature-locations/AKE.spthy

  output:          examples/sapic/fast/feature-locations/AKE.spthy.tmp
  processing time: 0.633703224s
  sanity3 (all-traces): verified (3 steps)
  secrecy (all-traces): verified (7 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-locations/AKE.spthy

  output:          examples/sapic/fast/feature-locations/AKE.spthy.tmp
  processing time: 0.633703224s
  sanity3 (all-traces): verified (3 steps)
  secrecy (all-traces): verified (7 steps)

==============================================================================
*/
