theory Test begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

heuristic: p

lemma no_acceptP:
  all-traces "¬(∃ #i. AcceptP( ) @ #i)"
/*
guarded formula characterizing all counter-examples:
"∃ #i. (AcceptP( ) @ #i)"
*/
simplify
by solve( State_1111( a, c ) ▶₀ #i )

lemma acceptQ:
  exists-trace "∃ #i. AcceptQ( ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (AcceptQ( ) @ #i)"
*/
simplify
solve( State_211( c ) ▶₀ #i )
  case inctesttoto_0_21
  SOLVED // trace found
qed

rule (modulo E) Init[color=#ffffff, process="|"]:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_[color=#ffffff, process="|"]:
   [ State_( ) ] --> [ State_1( ), State_2( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inc_0_1[color=#6c8040, process="in(c);"]:
   [ State_1( ), In( c ) ] --> [ State_11( c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newa_0_11[color=#6c8040, process="new a;"]:
   [ State_11( c ), Fr( a ) ] --> [ State_111( a, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inatesttoto_0_111[color=#6c8040,
                                  process="in(<<a, 'test'>, 'toto'>);"]:
   [ State_111( a, c ), In( <<a, 'test'>, 'toto'> ) ]
  -->
   [ State_1111( a, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventAcceptP_0_1111[color=#6c8040,
                                    process="event AcceptP( );"]:
   [ State_1111( a, c ) ] --[ AcceptP( ) ]-> [ State_11111( a, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11111[color=#6c8040, process="0"]:
   [ State_11111( a, c ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) inc_0_2[color=#807140, process="in(c);"]:
   [ State_2( ), In( c ) ] --> [ State_21( c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inctesttoto_0_21[color=#807140,
                                 process="in(<<c, 'test'>, 'toto'>);"]:
   [ State_21( c ), In( <<c, 'test'>, 'toto'> ) ] --> [ State_211( c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventAcceptQ_0_211[color=#807140,
                                   process="event AcceptQ( );"]:
   [ State_211( c ) ] --[ AcceptQ( ) ]-> [ State_2111( c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_2111[color=#807140, process="0"]:
   [ State_2111( c ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/feature-let-bindings/match_new.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/feature-let-bindings/match_new.spthy

  output:          examples/sapic/fast/feature-let-bindings/match_new.spthy.tmp
  processing time: 0.078117298s
  no_acceptP (all-traces): verified (2 steps)
  acceptQ (exists-trace): verified (3 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-let-bindings/match_new.spthy

  output:          examples/sapic/fast/feature-let-bindings/match_new.spthy.tmp
  processing time: 0.078117298s
  no_acceptP (all-traces): verified (2 steps)
  acceptQ (exists-trace): verified (3 steps)

==============================================================================
*/
