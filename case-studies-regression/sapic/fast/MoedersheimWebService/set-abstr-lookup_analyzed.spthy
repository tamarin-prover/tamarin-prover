theory SetAbst begin

// Function signature and definition of the equational theory E

functions: adec/2[destructor], aenc/2, fst/1[destructor], pair/2, pk/1,
           sign/2, snd/1[destructor], true/0, verify/3[destructor]
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: p

section{* The PKI-example *}











lemma Knows_Honest_Key_imp_Revoked:
  all-traces
  "∀ sk #i #d.
    ((HonestKey( sk ) @ #i) ∧ (K( sk ) @ #d)) ⇒ (∃ #r. Revoked( sk ) @ #r)"
/*
guarded formula characterizing all counter-examples:
"∃ sk #i #d.
  (HonestKey( sk ) @ #i) ∧ (K( sk ) @ #d) ∧ ∀ #r. (Revoked( sk ) @ #r) ⇒ ⊥"
*/
simplify
solve( HonestKey( sk ) @ #i )
  case eventHonestKeynsk_0_11121111111
  solve( State_11121111111( ~nsk, pki, lock, user, ~sk ) ▶₀ #i )
    case lookupUSERuserassk_0_1112111111
    solve( !KU( ~nsk ) @ #vk )
      case insignconfirmsignrenewuserpknskskpki_0_11121111111111111
      by contradiction /* from formulas */
    qed
  qed
next
  case eventHonestKeysk_0_111111111
  solve( State_111111111( lock, ~sk, pki, user ) ▶₀ #i )
    case innewuser_0_111111
    solve( !KU( ~sk ) @ #vk )
      case insignconfirmsignrenewuserpknskskpki_0_11121111111111111
      by contradiction /* from formulas */
    qed
  qed
next
  case eventHonestKeysk_0_111111111111
  solve( State_111111111111( lock, ~sk, pki, user ) ▶₀ #i )
    case insertUSERusersk_0_11111111111
    solve( !KU( ~sk ) @ #vk )
      case insignconfirmsignrenewuserpknskskpki_0_11121111111111111
      by contradiction /* from formulas */
    qed
  qed
qed





rule (modulo E) Init[color=#ffffff, process="!"]:
   [ ] --[ Init( ) ]-> [ !Semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_[color=#ffffff, process="!"]:
   [ !Semistate_1( ), Fr( pki.1 ) ] --> [ !Semistate_111( pki.1 ) ]

  /*
  rule (modulo AC) p_1_[color=#ffffff, process="!"]:
     [ !Semistate_1( ), Fr( pki ) ] --> [ !Semistate_111( pki ) ]
  */

rule (modulo E) innewuser_0_111111[color=#806040,
                                   process="in(<'new', user.1>);"]:
   [ State_111111( pki.1 ), In( <'new', user.1> ), Fr( ~sk.1 ), Fr( lock ) ]
  --[
  Lock_0( '0', lock, <'SERVER', user.1> ),
  Lock( '0', lock, <'SERVER', user.1> )
  ]->
   [ State_111111111( lock, ~sk.1, pki.1, user.1 ) ]

  /*
  rule (modulo AC) innewuser_0_111111[color=#806040,
                                      process="in(<'new', user.1>);"]:
     [ State_111111( pki ), In( <'new', user> ), Fr( ~sk ), Fr( lock ) ]
    --[
    Lock_0( '0', lock, <'SERVER', user> ),
    Lock( '0', lock, <'SERVER', user> )
    ]->
     [ State_111111111( lock, ~sk, pki, user ) ]
  */

rule (modulo E) eventHonestKeysk_0_111111111[color=#806040,
                                             process="event HonestKey( ~sk.1 );"]:
   [ State_111111111( lock, ~sk.1, pki.1, user.1 ) ]
  --[ HonestKey( ~sk.1 ) ]->
   [ State_1111111111( lock, ~sk.1, pki.1, user.1 ) ]

  /*
  rule (modulo AC) eventHonestKeysk_0_111111111[color=#806040,
                                                process="event HonestKey( ~sk.1 );"]:
     [ State_111111111( lock, ~sk, pki, user ) ]
    --[ HonestKey( ~sk ) ]->
     [ State_1111111111( lock, ~sk, pki, user ) ]
  */

rule (modulo E) insertSERVERpkiuserpksk_0_1111111111[color=#806040,
                                                     process="insert <'SERVER', pki.1, user.1>,pk(~sk.1);"]:
   [ State_1111111111( lock, ~sk.1, pki.1, user.1 ) ]
  --[ Insert( <'SERVER', pki.1, user.1>, pk(~sk.1) ) ]->
   [ State_11111111111( lock, ~sk.1, pki.1, user.1 ) ]

  /*
  rule (modulo AC) insertSERVERpkiuserpksk_0_1111111111[color=#806040,
                                                        process="insert <'SERVER', pki.1, user.1>,pk(~sk.1);"]:
     [ State_1111111111( lock, ~sk, pki, user ) ]
    --[ Insert( <'SERVER', pki, user>, pk(~sk) ) ]->
     [ State_11111111111( lock, ~sk, pki, user ) ]
  */

rule (modulo E) insertUSERusersk_0_11111111111[color=#806040,
                                               process="insert <'USER', user.1>,~sk.1;"]:
   [ State_11111111111( lock, ~sk.1, pki.1, user.1 ) ]
  --[ Insert( <'USER', user.1>, ~sk.1 ) ]->
   [ State_111111111111( lock, ~sk.1, pki.1, user.1 ) ]

  /*
  rule (modulo AC) insertUSERusersk_0_11111111111[color=#806040,
                                                  process="insert <'USER', user.1>,~sk.1;"]:
     [ State_11111111111( lock, ~sk, pki, user ) ]
    --[ Insert( <'USER', user>, ~sk ) ]->
     [ State_111111111111( lock, ~sk, pki, user ) ]
  */

rule (modulo E) eventHonestKeysk_0_111111111111[color=#806040,
                                                process="event HonestKey( ~sk.1 );"]:
   [ State_111111111111( lock, ~sk.1, pki.1, user.1 ) ]
  --[ HonestKey( ~sk.1 ) ]->
   [ State_1111111111111( lock, ~sk.1, pki.1, user.1 ) ]

  /*
  rule (modulo AC) eventHonestKeysk_0_111111111111[color=#806040,
                                                   process="event HonestKey( ~sk.1 );"]:
     [ State_111111111111( lock, ~sk, pki, user ) ]
    --[ HonestKey( ~sk ) ]->
     [ State_1111111111111( lock, ~sk, pki, user ) ]
  */

rule (modulo E) unlockSERVERuser_0_1111111111111[color=#806040,
                                                 process="unlock <'SERVER', user.1>;"]:
   [ State_1111111111111( lock, ~sk.1, pki.1, user.1 ) ]
  --[
  Unlock_0( '0', lock, <'SERVER', user.1> ),
  Unlock( '0', lock, <'SERVER', user.1> )
  ]->
   [ Out( pk(~sk.1) ) ]

  /*
  rule (modulo AC) unlockSERVERuser_0_1111111111111[color=#806040,
                                                    process="unlock <'SERVER', user.1>;"]:
     [ State_1111111111111( lock, ~sk, pki, user ) ]
    --[
    Unlock_0( '0', lock, <'SERVER', user> ),
    Unlock( '0', lock, <'SERVER', user> )
    ]->
     [ Out( pk(~sk) ) ]
  */

rule (modulo E) inrenewuserpknsk_0_111112[color=#806040,
                                          process="in(<'renew', =user, pk(=nsk)>);"]:
   [
   State_111112( pki.1 ), In( <'renew', user, pk(nsk)> ),
   In( sign(<'renew', user, pk(nsk)>, sk.2) ), Fr( lock.1 )
   ]
  --[
  Lock_1( '1', lock.1, <'SERVER', user> ),
  Lock( '1', lock.1, <'SERVER', user> )
  ]->
   [ State_111112111( nsk, user, lock.1, pki.1, sk.2 ) ]

  /*
  rule (modulo AC) inrenewuserpknsk_0_111112[color=#806040,
                                             process="in(<'renew', =user, pk(=nsk)>);"]:
     [
     State_111112( pki ), In( <'renew', user, pk(nsk)> ),
     In( sign(<'renew', user, pk(nsk)>, sk) ), Fr( lock )
     ]
    --[
    Lock_1( '1', lock, <'SERVER', user> ),
    Lock( '1', lock, <'SERVER', user> )
    ]->
     [ State_111112111( nsk, user, lock, pki, sk ) ]
  */

rule (modulo E) lookupSERVERpkiuseraspksk_0_111112111[color=#806040,
                                                      process="lookup <'SERVER', pki.1, user> as pksk.1"]:
   [ State_111112111( nsk, user, lock.1, pki.1, sk.2 ) ]
  --[ IsIn( <'SERVER', pki.1, user>, pksk.1 ) ]->
   [ State_1111121111( nsk, user, lock.1, pki.1, pksk.1, sk.2 ) ]

  /*
  rule (modulo AC) lookupSERVERpkiuseraspksk_0_111112111[color=#806040,
                                                         process="lookup <'SERVER', pki.1, user> as pksk.1"]:
     [ State_111112111( nsk, user, lock, pki, sk ) ]
    --[ IsIn( <'SERVER', pki, user>, pksk ) ]->
     [ State_1111121111( nsk, user, lock, pki, pksk, sk ) ]
  */

rule (modulo E) ifpkskpksk_0_1111121111[color=#806040,
                                        process="if pksk.1=pk(sk.2)"]:
   [ State_1111121111( nsk, user, lock.1, pki.1, pksk.1, sk.2 ) ]
  --[ Pred_Eq( pksk.1, pk(sk.2) ) ]->
   [ State_11111211111( nsk, user, lock.1, pki.1, pksk.1, sk.2 ) ]

  /*
  rule (modulo AC) ifpkskpksk_0_1111121111[color=#806040,
                                           process="if pksk.1=pk(sk.2)"]:
     [ State_1111121111( nsk, user, lock, pki, pksk, sk ) ]
    --[ Pred_Eq( pksk, pk(sk) ) ]->
     [ State_11111211111( nsk, user, lock, pki, pksk, sk ) ]
  */

rule (modulo E) deleteSERVERpkiuser_0_11111211111[color=#806040,
                                                  process="delete <'SERVER', pki.1, user>;"]:
   [ State_11111211111( nsk, user, lock.1, pki.1, pksk.1, sk.2 ) ]
  --[ Delete( <'SERVER', pki.1, user> ) ]->
   [ State_111112111111( nsk, user, lock.1, pki.1, pksk.1, sk.2 ) ]

  /*
  rule (modulo AC) deleteSERVERpkiuser_0_11111211111[color=#806040,
                                                     process="delete <'SERVER', pki.1, user>;"]:
     [ State_11111211111( nsk, user, lock, pki, pksk, sk ) ]
    --[ Delete( <'SERVER', pki, user> ) ]->
     [ State_111112111111( nsk, user, lock, pki, pksk, sk ) ]
  */

rule (modulo E) insertSERVERpkiuserpknsk_0_111112111111[color=#806040,
                                                        process="insert <'SERVER', pki.1, user>,pk(nsk);"]:
   [ State_111112111111( nsk, user, lock.1, pki.1, pksk.1, sk.2 ) ]
  --[ Insert( <'SERVER', pki.1, user>, pk(nsk) ) ]->
   [ State_1111121111111( nsk, user, lock.1, pki.1, pksk.1, sk.2 ) ]

  /*
  rule (modulo AC) insertSERVERpkiuserpknsk_0_111112111111[color=#806040,
                                                           process="insert <'SERVER', pki.1, user>,pk(nsk);"]:
     [ State_111112111111( nsk, user, lock, pki, pksk, sk ) ]
    --[ Insert( <'SERVER', pki, user>, pk(nsk) ) ]->
     [ State_1111121111111( nsk, user, lock, pki, pksk, sk ) ]
  */

rule (modulo E) unlockSERVERuser_0_1111121111111[color=#806040,
                                                 process="unlock <'SERVER', user>;"]:
   [ State_1111121111111( nsk, user, lock.1, pki.1, pksk.1, sk.2 ) ]
  --[
  Unlock_1( '1', lock.1, <'SERVER', user> ),
  Unlock( '1', lock.1, <'SERVER', user> )
  ]->
   [ Out( sign(<'confirm', sign(<'renew', user, pk(nsk)>, sk.2)>, pki.1) ) ]

  /*
  rule (modulo AC) unlockSERVERuser_0_1111121111111[color=#806040,
                                                    process="unlock <'SERVER', user>;"]:
     [ State_1111121111111( nsk, user, lock, pki, pksk, sk ) ]
    --[
    Unlock_1( '1', lock, <'SERVER', user> ),
    Unlock( '1', lock, <'SERVER', user> )
    ]->
     [ Out( sign(<'confirm', sign(<'renew', user, pk(nsk)>, sk)>, pki) ) ]
  */

rule (modulo E) ifpkskpksk_1_1111121111[color=#806040,
                                        process="if pksk.1=pk(sk.2)"]:
   [ State_1111121111( nsk, user, lock.1, pki.1, pksk.1, sk.2 ) ]
  --[ Pred_Not_Eq( pksk.1, pk(sk.2) ) ]->
   [ ]

  /*
  rule (modulo AC) ifpkskpksk_1_1111121111[color=#806040,
                                           process="if pksk.1=pk(sk.2)"]:
     [ State_1111121111( nsk, user, lock, pki, pksk, sk ) ]
    --[ Pred_Not_Eq( pksk, pk(sk) ) ]->
     [ ]
  */

rule (modulo E) lookupSERVERpkiuseraspksk_1_111112111[color=#806040,
                                                      process="lookup <'SERVER', pki.1, user> as pksk.1"]:
   [ State_111112111( nsk, user, lock.1, pki.1, sk.2 ) ]
  --[ IsNotSet( <'SERVER', pki.1, user> ) ]->
   [ ]

  /*
  rule (modulo AC) lookupSERVERpkiuseraspksk_1_111112111[color=#806040,
                                                         process="lookup <'SERVER', pki.1, user> as pksk.1"]:
     [ State_111112111( nsk, user, lock, pki, sk ) ]
    --[ IsNotSet( <'SERVER', pki, user> ) ]->
     [ ]
  */

rule (modulo E) p_1_11[color=#ffffff, process="!"]:
   [ !Semistate_111( pki.1 ) ]
  -->
   [ State_111111( pki.1 ), State_111112( pki.1 ), State_1112( pki.1 ) ]

  /*
  rule (modulo AC) p_1_11[color=#ffffff, process="!"]:
     [ !Semistate_111( pki ) ]
    -->
     [ State_111111( pki ), State_111112( pki ), State_1112( pki ) ]
  */

rule (modulo E) newuser_0_1112[color=#ffffff, process="new user.2;"]:
   [ State_1112( pki.1 ), Fr( user.2 ) ]
  -->
   [ !Semistate_1112111( pki.1, user.2 ), Out( user.2 ) ]

  /*
  rule (modulo AC) newuser_0_1112[color=#ffffff, process="new user.2;"]:
     [ State_1112( pki ), Fr( user ) ]
    -->
     [ !Semistate_1112111( pki, user ), Out( user ) ]
  */

rule (modulo E) p_1_111211[color=#ffffff, process="!"]:
   [ !Semistate_1112111( pki.1, user.2 ), Fr( ~nsk.1 ), Fr( lock.2 ) ]
  --[
  Lock_2( '2', lock.2, <'USER', user.2> ),
  Lock( '2', lock.2, <'USER', user.2> )
  ]->
   [ State_1112111111( ~nsk.1, pki.1, lock.2, user.2 ) ]

  /*
  rule (modulo AC) p_1_111211[color=#ffffff, process="!"]:
     [ !Semistate_1112111( pki, user ), Fr( ~nsk ), Fr( lock ) ]
    --[
    Lock_2( '2', lock, <'USER', user> ), Lock( '2', lock, <'USER', user> )
    ]->
     [ State_1112111111( ~nsk, pki, lock, user ) ]
  */

rule (modulo E) lookupUSERuserassk_0_1112111111[color=#518040,
                                                process="lookup <'USER', user.2> as ~sk.3"]:
   [ State_1112111111( ~nsk.1, pki.1, lock.2, user.2 ) ]
  --[ IsIn( <'USER', user.2>, ~sk.3 ) ]->
   [ State_11121111111( ~nsk.1, pki.1, lock.2, user.2, ~sk.3 ) ]

  /*
  rule (modulo AC) lookupUSERuserassk_0_1112111111[color=#518040,
                                                   process="lookup <'USER', user.2> as ~sk.3"]:
     [ State_1112111111( ~nsk, pki, lock, user ) ]
    --[ IsIn( <'USER', user>, ~sk ) ]->
     [ State_11121111111( ~nsk, pki, lock, user, ~sk ) ]
  */

rule (modulo E) eventHonestKeynsk_0_11121111111[color=#518040,
                                                process="event HonestKey( ~nsk.1 );"]:
   [ State_11121111111( ~nsk.1, pki.1, lock.2, user.2, ~sk.3 ) ]
  --[ HonestKey( ~nsk.1 ) ]->
   [ State_111211111111( ~nsk.1, pki.1, lock.2, user.2, ~sk.3 ) ]

  /*
  rule (modulo AC) eventHonestKeynsk_0_11121111111[color=#518040,
                                                   process="event HonestKey( ~nsk.1 );"]:
     [ State_11121111111( ~nsk, pki, lock, user, ~sk ) ]
    --[ HonestKey( ~nsk ) ]->
     [ State_111211111111( ~nsk, pki, lock, user, ~sk ) ]
  */

rule (modulo E) deleteUSERuser_0_111211111111[color=#518040,
                                              process="delete <'USER', user.2>;"]:
   [ State_111211111111( ~nsk.1, pki.1, lock.2, user.2, ~sk.3 ) ]
  --[ Delete( <'USER', user.2> ) ]->
   [ State_1112111111111( ~nsk.1, pki.1, lock.2, user.2, ~sk.3 ) ]

  /*
  rule (modulo AC) deleteUSERuser_0_111211111111[color=#518040,
                                                 process="delete <'USER', user.2>;"]:
     [ State_111211111111( ~nsk, pki, lock, user, ~sk ) ]
    --[ Delete( <'USER', user> ) ]->
     [ State_1112111111111( ~nsk, pki, lock, user, ~sk ) ]
  */

rule (modulo E) insertUSERusernsk_0_1112111111111[color=#518040,
                                                  process="insert <'USER', user.2>,~nsk.1;"]:
   [ State_1112111111111( ~nsk.1, pki.1, lock.2, user.2, ~sk.3 ) ]
  --[ Insert( <'USER', user.2>, ~nsk.1 ) ]->
   [ State_11121111111111( ~nsk.1, pki.1, lock.2, user.2, ~sk.3 ) ]

  /*
  rule (modulo AC) insertUSERusernsk_0_1112111111111[color=#518040,
                                                     process="insert <'USER', user.2>,~nsk.1;"]:
     [ State_1112111111111( ~nsk, pki, lock, user, ~sk ) ]
    --[ Insert( <'USER', user>, ~nsk ) ]->
     [ State_11121111111111( ~nsk, pki, lock, user, ~sk ) ]
  */

rule (modulo E) unlockUSERuser_0_11121111111111[color=#518040,
                                                process="unlock <'USER', user.2>;"]:
   [ State_11121111111111( ~nsk.1, pki.1, lock.2, user.2, ~sk.3 ) ]
  --[
  Unlock_2( '2', lock.2, <'USER', user.2> ),
  Unlock( '2', lock.2, <'USER', user.2> )
  ]->
   [
   State_1112111111111111( ~nsk.1, pki.1, lock.2, user.2, ~sk.3 ),
   Out( <'renew', user.2, pk(~nsk.1)> )
   ]

  /*
  rule (modulo AC) unlockUSERuser_0_11121111111111[color=#518040,
                                                   process="unlock <'USER', user.2>;"]:
     [ State_11121111111111( ~nsk, pki, lock, user, ~sk ) ]
    --[
    Unlock_2( '2', lock, <'USER', user> ),
    Unlock( '2', lock, <'USER', user> )
    ]->
     [
     State_1112111111111111( ~nsk, pki, lock, user, ~sk ),
     Out( <'renew', user, pk(~nsk)> )
     ]
  */

rule (modulo E) outsignrenewuserpknsksk_0_1112111111111111[color=#518040,
                                                           process="out(sign(<'renew', user.2, pk(~nsk.1)>, ~sk.3));"]:
   [ State_1112111111111111( ~nsk.1, pki.1, lock.2, user.2, ~sk.3 ) ]
  -->
   [
   State_11121111111111111( ~nsk.1, pki.1, lock.2, user.2, ~sk.3 ),
   Out( sign(<'renew', user.2, pk(~nsk.1)>, ~sk.3) )
   ]

  /*
  rule (modulo AC) outsignrenewuserpknsksk_0_1112111111111111[color=#518040,
                                                              process="out(sign(<'renew', user.2, pk(~nsk.1)>, ~sk.3));"]:
     [ State_1112111111111111( ~nsk, pki, lock, user, ~sk ) ]
    -->
     [
     State_11121111111111111( ~nsk, pki, lock, user, ~sk ),
     Out( sign(<'renew', user, pk(~nsk)>, ~sk) )
     ]
  */

rule (modulo E) insignconfirmsignrenewuserpknskskpki_0_11121111111111111[color=#518040,
                                                                         process="in(sign(<'confirm', sign(<'renew', =user.2, pk(=~nsk.1)>, =~sk.3)>,
     =pki.1));"]:
   [
   State_11121111111111111( ~nsk.1, pki.1, lock.2, user.2, ~sk.3 ),
   In( sign(<'confirm', sign(<'renew', user.2, pk(~nsk.1)>, ~sk.3)>, pki.1)
   )
   ]
  --[ Revoked( ~sk.3 ) ]->
   [ Out( ~sk.3 ) ]

  /*
  rule (modulo AC) insignconfirmsignrenewuserpknskskpki_0_11121111111111111[color=#518040,
                                                                            process="in(sign(<'confirm', sign(<'renew', =user.2, pk(=~nsk.1)>, =~sk.3)>,
     =pki.1));"]:
     [
     State_11121111111111111( ~nsk, pki, lock, user, ~sk ),
     In( sign(<'confirm', sign(<'renew', user, pk(~nsk)>, ~sk)>, pki) )
     ]
    --[ Revoked( ~sk ) ]->
     [ Out( ~sk ) ]
  */

rule (modulo E) lookupUSERuserassk_1_1112111111[color=#518040,
                                                process="lookup <'USER', user.2> as ~sk.3"]:
   [ State_1112111111( ~nsk.1, pki.1, lock.2, user.2 ) ]
  --[ IsNotSet( <'USER', user.2> ) ]->
   [ ]

  /*
  rule (modulo AC) lookupUSERuserassk_1_1112111111[color=#518040,
                                                   process="lookup <'USER', user.2> as ~sk.3"]:
     [ State_1112111111( ~nsk, pki, lock, user ) ]
    --[ IsNotSet( <'USER', user> ) ]->
     [ ]
  */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      (((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
       (∀ #t1. (Delete( x ) @ #t1) ⇒ ((#t1 < #t2) ∨ (#t3 < #t1)))) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒
    ((∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1)) ∨
     (∃ #t1.
       ((Delete( x ) @ #t1) ∧ (#t1 < #t3)) ∧
       (∀ #t2 y. ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ⇒ (#t2 < #t1))))"

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction locking_0:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_0( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_1:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_1( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_2:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_2( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_2( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 3.0. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/MoedersheimWebService/set-abstr-lookup.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/MoedersheimWebService/set-abstr-lookup.spthy

  output:          examples/sapic/fast/MoedersheimWebService/set-abstr-lookup.spthy.tmp
  processing time: 0.533477797s
  Knows_Honest_Key_imp_Revoked (all-traces): verified (11 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/MoedersheimWebService/set-abstr-lookup.spthy

  output:          examples/sapic/fast/MoedersheimWebService/set-abstr-lookup.spthy.tmp
  processing time: 0.533477797s
  Knows_Honest_Key_imp_Revoked (all-traces): verified (11 steps)

==============================================================================
*/
