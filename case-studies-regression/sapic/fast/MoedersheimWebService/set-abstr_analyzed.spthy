theory SetAbst begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, fst/1, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



heuristic: s i

section{* The PKI-example *}











lemma Knows_Honest_Key_imp_Revoked:
  all-traces
  "∀ sk #i #d.
    ((HonestKey( sk ) @ #i) ∧ (K( sk ) @ #d)) ⇒ (∃ #r. Revoked( sk ) @ #r)"
/*
guarded formula characterizing all counter-examples:
"∃ sk #i #d.
  (HonestKey( sk ) @ #i) ∧ (K( sk ) @ #d) ∧ ∀ #r. (Revoked( sk ) @ #r) ⇒ ⊥"
*/
simplify
solve( HonestKey( sk ) @ #i )
  case innewuser_0_1111111
  solve( State_1111111( pki ) ▶₀ #i )
    case p_1_11
    solve( !KU( ~sk ) @ #vk )
      case insignconfirmsignrenewuserpknskskpki_0_11121111111
      by contradiction /* from formulas */
    qed
  qed
next
  case p_1_11121
  solve( !Semistate_111211( pki, user ) ▶₀ #i )
    case newuser_0_1112
    solve( !KU( ~nsk ) @ #vk )
      case insignconfirmsignrenewuserpknskskpki_0_11121111111
      by contradiction /* from formulas */
    qed
  qed
qed



















rule (modulo E) Init[color=#ffffff, process="!"]:
   [ ] --[ Init( ) ]-> [ !Semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_[color=#ffffff, process="!"]:
   [ !Semistate_1( ), Fr( pki.1 ) ] --> [ !Semistate_111( pki.1 ) ]

  /*
  rule (modulo AC) p_1_[color=#ffffff, process="!"]:
     [ !Semistate_1( ), Fr( pki ) ] --> [ !Semistate_111( pki ) ]
  */

rule (modulo E) innewuser_0_1111111[color=#408051,
                                    process="in(<'new', user.1>);"]:
   [ State_1111111( pki.1 ), In( <'new', user.1> ), Fr( ~sk.1 ) ]
  --[ HonestKey( ~sk.1 ) ]->
   [
   Out( pk(~sk.1) ), ServerDB( pki.1, user.1, pk(~sk.1) ),
   ClientKey( user.1, ~sk.1 )
   ]

  /*
  rule (modulo AC) innewuser_0_1111111[color=#408051,
                                       process="in(<'new', user.1>);"]:
     [ State_1111111( pki ), In( <'new', user> ), Fr( ~sk ) ]
    --[ HonestKey( ~sk ) ]->
     [ Out( pk(~sk) ), ServerDB( pki, user, pk(~sk) ), ClientKey( user, ~sk )
     ]
  */

rule (modulo E) inusersk_0_1111112[color=#408051,
                                   process="in(<user.2, sk.2>);"]:
   [ State_1111112( pki.1 ), In( <user.2, sk.2> ) ]
  -->
   [ ServerDB( pki.1, user.2, pk(sk.2) ) ]

  /*
  rule (modulo AC) inusersk_0_1111112[color=#408051,
                                      process="in(<user.2, sk.2>);"]:
     [ State_1111112( pki ), In( <user, sk> ) ]
    -->
     [ ServerDB( pki, user, pk(sk) ) ]
  */

rule (modulo E) inrenewuserpknsk_0_111112[color=#408051,
                                          process="in(<'renew', user.3, pk(nsk.1)>);"]:
   [
   State_111112( pki.1 ), In( <'renew', user.3, pk(nsk.1)> ),
   In( sign(<'renew', user.3, pk(nsk.1)>, sk.3) ),
   ServerDB( pki.1, user.3, pk(sk.3) )
   ]
  -->
   [
   Out( sign(<'confirm', sign(<'renew', user.3, pk(nsk.1)>, sk.3)>, pki.1)
   ),
   ServerDB( pki.1, user.3, pk(nsk.1) )
   ]

  // loop breaker: [3]
  /*
  rule (modulo AC) inrenewuserpknsk_0_111112[color=#408051,
                                             process="in(<'renew', user.3, pk(nsk.1)>);"]:
     [
     State_111112( pki ), In( <'renew', user, pk(nsk)> ),
     In( sign(<'renew', user, pk(nsk)>, sk) ), ServerDB( pki, user, pk(sk) )
     ]
    -->
     [
     Out( sign(<'confirm', sign(<'renew', user, pk(nsk)>, sk)>, pki) ),
     ServerDB( pki, user, pk(nsk) )
     ]
    // loop breaker: [3]
  */

rule (modulo E) p_1_11[color=#ffffff, process="!"]:
   [ !Semistate_111( pki.1 ) ]
  -->
   [
   State_1111111( pki.1 ), State_1111112( pki.1 ), State_111112( pki.1 ),
   State_1112( pki.1 )
   ]

  /*
  rule (modulo AC) p_1_11[color=#ffffff, process="!"]:
     [ !Semistate_111( pki ) ]
    -->
     [
     State_1111111( pki ), State_1111112( pki ), State_111112( pki ),
     State_1112( pki )
     ]
  */

rule (modulo E) newuser_0_1112[color=#ffffff, process="new user.4;"]:
   [ State_1112( pki.1 ), Fr( user.4 ) ]
  -->
   [ !Semistate_111211( pki.1, user.4 ) ]

  /*
  rule (modulo AC) newuser_0_1112[color=#ffffff, process="new user.4;"]:
     [ State_1112( pki ), Fr( user ) ] --> [ !Semistate_111211( pki, user ) ]
  */

rule (modulo E) p_1_11121[color=#ffffff, process="!"]:
   [
   !Semistate_111211( pki.1, user.4 ), Fr( ~nsk.2 ),
   ClientKey( user.4, ~sk.4 )
   ]
  --[ HonestKey( ~nsk.2 ) ]->
   [
   State_1112111111( pki.1, ~nsk.2, ~sk.4, user.4 ),
   Out( <'renew', user.4, pk(~nsk.2)> ), ClientKey( user.4, ~nsk.2 )
   ]

  // loop breaker: [2]
  /*
  rule (modulo AC) p_1_11121[color=#ffffff, process="!"]:
     [ !Semistate_111211( pki, user ), Fr( ~nsk ), ClientKey( user, ~sk ) ]
    --[ HonestKey( ~nsk ) ]->
     [
     State_1112111111( pki, ~nsk, ~sk, user ),
     Out( <'renew', user, pk(~nsk)> ), ClientKey( user, ~nsk )
     ]
    // loop breaker: [2]
  */

rule (modulo E) outsignrenewuserpknsksk_0_1112111111[color=#408041,
                                                     process="out(sign(<'renew', user.4, pk(~nsk.2)>, ~sk.4));"]:
   [ State_1112111111( pki.1, ~nsk.2, ~sk.4, user.4 ) ]
  -->
   [
   State_11121111111( pki.1, ~nsk.2, ~sk.4, user.4 ),
   Out( sign(<'renew', user.4, pk(~nsk.2)>, ~sk.4) )
   ]

  /*
  rule (modulo AC) outsignrenewuserpknsksk_0_1112111111[color=#408041,
                                                        process="out(sign(<'renew', user.4, pk(~nsk.2)>, ~sk.4));"]:
     [ State_1112111111( pki, ~nsk, ~sk, user ) ]
    -->
     [
     State_11121111111( pki, ~nsk, ~sk, user ),
     Out( sign(<'renew', user, pk(~nsk)>, ~sk) )
     ]
  */

rule (modulo E) insignconfirmsignrenewuserpknskskpki_0_11121111111[color=#408041,
                                                                   process="in(sign(<'confirm', sign(<'renew', =user.4, pk(=~nsk.2)>, =~sk.4)>,
     =pki.1));"]:
   [
   State_11121111111( pki.1, ~nsk.2, ~sk.4, user.4 ),
   In( sign(<'confirm', sign(<'renew', user.4, pk(~nsk.2)>, ~sk.4)>, pki.1)
   )
   ]
  --[ Revoked( ~sk.4 ) ]->
   [ Out( ~sk.4 ) ]

  /*
  rule (modulo AC) insignconfirmsignrenewuserpknskskpki_0_11121111111[color=#408041,
                                                                      process="in(sign(<'confirm', sign(<'renew', =user.4, pk(=~nsk.2)>, =~sk.4)>,
     =pki.1));"]:
     [
     State_11121111111( pki, ~nsk, ~sk, user ),
     In( sign(<'confirm', sign(<'renew', user, pk(~nsk)>, ~sk)>, pki) )
     ]
    --[ Revoked( ~sk ) ]->
     [ Out( ~sk ) ]
  */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/*
WARNING: the following wellformedness checks failed!

The variables of the follwing rule(s) are not derivable from their premises, you may be performing unintended pattern matching:
  inrenewuserpknsk_0_111112
Failed to derive Variable(s): nsk.1, sk.3
*/

/*
Generated from:
Tamarin version 1.7.1
Maude version 3.2.1
Git revision: 4b299c253445d7bbc7fce41abf0b0d5659bb1d58, branch: develop
Compiled at: 2023-06-26 11:54:20.223793825 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 3.2.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/MoedersheimWebService/set-abstr.spthy

  output:          examples/sapic/fast/MoedersheimWebService/set-abstr.spthy.tmp
  processing time: 0.25s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  Knows_Honest_Key_imp_Revoked (all-traces): verified (8 steps)

==============================================================================
*/
