theory DecWrapDestr begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

heuristic: p

predicate: EncSucc( c, k )<=>∃ m. senc(m, k) = c

lemma can_create_key:
  exists-trace "∃ #t h k. NewKey( h, k ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t h k. (NewKey( h, k ) @ #t)"
*/
simplify
solve( State_111111( h, k ) ▶₀ #t )
  case newk_0_11111
  SOLVED // trace found
qed

lemma can_obtain_wrapping:
  exists-trace "∃ #t k1 k2. Wrap( k1, k2 ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t k1 k2. (Wrap( k1, k2 ) @ #t)"
*/
simplify
solve( State_1211111( a1, h1, h2, k1, k2 ) ▶₀ #t )
  case lookupkeyhask_0_121111
  solve( Insert( <'key', h2>, k2 ) @ #t2 )
    case insertkeyhk_0_1111111
    solve( State_1111111( h2, k2 ) ▶₀ #t2 )
      case eventNewKeyhk_0_111111
      solve( Insert( <'key', h1>, k1 ) @ #t2.1 )
        case insertkeyhk_0_1111111
        solve( State_1111111( h1, k1 ) ▶₀ #t2.1 )
          case eventNewKeyhk_0_111111
          solve( Insert( <'att', ~n>, 'wrap' ) @ #t2.2 )
            case insertatthwrap_0_111211
            solve( State_111211( ~n, lock ) ▶₀ #t2.2 )
              case lockh_0_11121
              solve( !KU( ~n.1 ) @ #vk.2 )
                case outh_0_111111111
                solve( !KU( ~n ) @ #vk.2 )
                  case outh_0_111111111
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dec_limits [reuse, sources]:
  all-traces
  "∀ k m #t1.
    (DecUsing( k, m ) @ #t1) ⇒
    (∃ h k2 #t2 #t3.
      (((NewKey( h, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)) ∧ (#t2 < #t1)) ∧
      (#t3 < #t1))"
/*
guarded formula characterizing all counter-examples:
"∃ k m #t1.
  (DecUsing( k, m ) @ #t1)
 ∧
  ∀ h k2 #t2 #t3.
   (NewKey( h, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
  ⇒
   ((¬(#t2 < #t1)) ∨ (¬(#t3 < #t1)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ k m #t1.
           (DecUsing( k, m ) @ #t1)
          ⇒
           ((last(#t1)) ∨
            (∃ h k2 #t2 #t3.
              (NewKey( h, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
             ∧
              (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1))))  ∥
         (∃ x #NOW x.1.
           (Restr_ifEncSuccck_0_1121111_1( x, x.1 ) @ #NOW)
          ∧
           (¬(last(#NOW))) ∧ (∀ m. (senc(m, x) = x.1) ⇒ ⊥))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t1 yp.
                (Insert( x, yp ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (¬(#t1 = #t2)) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_0( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3))) )
    case case_1
    solve( (last(#t1))  ∥
           (∃ h k2 #t2 #t3.
             (NewKey( h, k2 ) @ #t2) ∧ (!KU( k2 ) @ #t3)
            ∧
             (¬(last(#t3))) ∧ (¬(last(#t2))) ∧ (#t2 < #t1) ∧ (#t3 < #t1)) )
      case case_1
      solve( State_11211111( a, c, h, k ) ▶₀ #t1 )
        case ifEncSuccck_0_1121111
        solve( Insert( <'key', h>, k ) @ #t2 )
          case insertkeyhk_0_1111111
          solve( State_1111111( h, k ) ▶₀ #t2 )
            case eventNewKeyhk_0_111111
            solve( Insert( <'att', ~n.1>, 'dec' ) @ #t2.1 )
              case insertatthdec_0_11111111
              solve( State_11111111( ~n.1, k ) ▶₀ #t2.1 )
                case insertkeyhk_0_1111111
                solve( !KU( senc(m, ~n) ) @ #vk.2 )
                  case c_senc
                  by contradiction /* from formulas */
                next
                  case outsdecck_0_112111111
                  by contradiction /* from formulas */
                next
                  case outsenckk_0_12111111_case_1
                  solve( !KU( ~n.1 ) @ #vk.2 )
                    case outh_0_111111111
                    solve( Insert( <'key', h2>, m ) @ #t2.2 )
                      case insertkeyhk_0_1111111
                      solve( State_1111111( h2, m ) ▶₀ #t2.2 )
                        case eventNewKeyhk_0_111111
                        solve( Insert( <'key', h1>, ~n.1 ) @ #t2.3 )
                          case insertkeyhk_0_1111111
                          solve( State_1111111( h1, ~n.1 ) ▶₀ #t2.3 )
                            case eventNewKeyhk_0_111111
                            solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by solve( Insert( <'att', ~n.2>, 'wrap' ) @ #t2.1 )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case outsdecck_0_112111111
                    by contradiction /* from formulas */
                  next
                    case outsenckk_0_12111111
                    solve( Insert( <'key', h2>, m ) @ #t2.2 )
                      case insertkeyhk_0_1111111
                      solve( State_1111111( h2, m ) ▶₀ #t2.2 )
                        case eventNewKeyhk_0_111111
                        solve( Insert( <'key', h1>, ~n.1 ) @ #t2.3 )
                          case insertkeyhk_0_1111111
                          solve( State_1111111( h1, ~n.1 ) ▶₀ #t2.3 )
                            case eventNewKeyhk_0_111111
                            solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3)  ∥ (#vr.22 < #t2.1) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by solve( Insert( <'att', ~n.2>, 'wrap' ) @ #t2.1 )
                            next
                              case case_3
                              solve( Insert( <'att', ~n.2>, 'wrap' ) @ #t2.3 )
                                case insertatthwrap_0_111211
                                solve( State_111211( ~n.2, lock ) ▶₀ #t2.3 )
                                  case lockh_0_11121
                                  solve( Insert( <'key', h2>, k2 ) @ #t2.4 )
                                    case insertkeyhk_0_1111111
                                    solve( State_1111111( h2, k2 ) ▶₀ #t2.4 )
                                      case eventNewKeyhk_0_111111
                                      by solve( (#vr.27, 0) ~~> (#vk.1, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case outsenckk_0_12111111_case_2
                  solve( !KU( ~n.1 ) @ #vk.2 )
                    case outh_0_111111111
                    solve( Insert( <'key', h2>, k2 ) @ #t2.2 )
                      case insertkeyhk_0_1111111
                      solve( State_1111111( h2, k2 ) ▶₀ #t2.2 )
                        case eventNewKeyhk_0_111111
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case outsdecck_0_112111111
                    by contradiction /* from formulas */
                  next
                    case outsenckk_0_12111111
                    solve( Insert( <'key', h2>, k2 ) @ #t2.2 )
                      case insertkeyhk_0_1111111
                      solve( State_1111111( h2, k2 ) ▶₀ #t2.2 )
                        case eventNewKeyhk_0_111111
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_2
    by contradiction /* from formulas */
  next
    case case_3
    solve( (#t1.1 = #t2)  ∥ (#t2 < #t1.1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_4
    solve( (#t1.1 = #t3)  ∥ (#t3 < #t1.1)  ∥
           (∀ #t2.
             (Unlock_0( '0', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1.1 = #t2) ∨
              (#t2 < #t1.1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (¬(#t0 = #t1.1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1.1)  ∥ (#t1.1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n.1, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (¬(#t0 = #t1.1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1.1) ∨ (#t1.1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1.1)  ∥ (#t1.1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case case_3
          solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma cannot_obtain_key_ind [reuse, use_induction]:
  all-traces "¬(∃ #i #j h k. (NewKey( h, k ) @ #i) ∧ (!KU( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j h k. (NewKey( h, k ) @ #i) ∧ (!KU( k ) @ #j)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ #i #j h k.
           (NewKey( h, k ) @ #i) ∧ (!KU( k ) @ #j) ⇒ ((last(#j)) ∨ (last(#i))))  ∥
         (∃ x #NOW x.1.
           (Restr_ifEncSuccck_0_1121111_1( x, x.1 ) @ #NOW)
          ∧
           (¬(last(#NOW))) ∧ (∀ m. (senc(m, x) = x.1) ⇒ ⊥))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t1 yp.
                (Insert( x, yp ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (¬(#t1 = #t2)) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_0( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3))) )
    case case_1
    solve( (last(#j))  ∥ (last(#i)) )
      case case_1
      solve( State_111111( h, k ) ▶₀ #i )
        case newk_0_11111
        solve( !KU( ~n.1 ) @ #j )
          case outsdecck_0_112111111
          by contradiction /* from formulas */
        next
          case outsenckk_0_12111111
          solve( Insert( <'key', h2>, k2 ) @ #t2 )
            case insertkeyhk_0_1111111
            solve( State_1111111( h2, k2 ) ▶₀ #t2 )
              case eventNewKeyhk_0_111111
              solve( (#vr.9, 0) ~~> (#j, 0) )
                case Var_fresh_3_n
                solve( Insert( <'key', h1>, k1 ) @ #t2.1 )
                  case insertkeyhk_0_1111111
                  solve( State_1111111( h1, k1 ) ▶₀ #t2.1 )
                    case eventNewKeyhk_0_111111
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( State_111111( h, k ) ▶₀ #i )
        case newk_0_11111
        solve( !KU( ~n.1 ) @ #j )
          case outsdecck_0_112111111
          by contradiction /* from formulas */
        next
          case outsenckk_0_12111111
          solve( Insert( <'key', h2>, k2 ) @ #t2 )
            case insertkeyhk_0_1111111
            solve( State_1111111( h2, k2 ) ▶₀ #t2 )
              case eventNewKeyhk_0_111111
              solve( (#vr.9, 0) ~~> (#j, 0) )
                case Var_fresh_3_n
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  next
    case case_3
    solve( (#t1 = #t2)  ∥ (#t2 < #t1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_4
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_0( '0', ~n, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case case_3
          solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma cannot_obtain_key:
  all-traces "¬(∃ #i #j h k. (NewKey( h, k ) @ #i) ∧ (K( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j h k. (NewKey( h, k ) @ #i) ∧ (K( k ) @ #j)"
*/
simplify
by contradiction /* from formulas */

rule (modulo E) Init[color=#ffffff, process="!"]:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_[color=#ffffff, process="!"]:
   [ State_( ) ] --> [ !Semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_[color=#ffffff, process="!"]:
   [ !Semistate_1( ) ] --> [ State_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1[color=#ffffff, process="|"]:
   [ State_1( ) ] --> [ State_11( ), State_12( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11[color=#ffffff, process="|"]:
   [ State_11( ) ] --> [ State_111( ), State_112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_111[color=#ffffff, process="|"]:
   [ State_111( ) ] --> [ State_1111( ), State_1112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newh_0_1111[color=#ffffff, process="new h;"]:
   [ State_1111( ), Fr( h ) ] --> [ State_11111( h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newk_0_11111[color=#ffffff, process="new k;"]:
   [ State_11111( h ), Fr( k ) ] --> [ State_111111( h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventNewKeyhk_0_111111[color=#ffffff,
                                       process="event NewKey( h, k );"]:
   [ State_111111( h, k ) ] --[ NewKey( h, k ) ]-> [ State_1111111( h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertkeyhk_0_1111111[color=#ffffff,
                                      process="insert <'key', h>,k;"]:
   [ State_1111111( h, k ) ]
  --[ Insert( <'key', h>, k ) ]->
   [ State_11111111( h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertatthdec_0_11111111[color=#ffffff,
                                         process="insert <'att', h>,'dec';"]:
   [ State_11111111( h, k ) ]
  --[ Insert( <'att', h>, 'dec' ) ]->
   [ State_111111111( h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outh_0_111111111[color=#ffffff, process="out(h);"]:
   [ State_111111111( h, k ) ] --> [ State_1111111111( h, k ), Out( h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1111111111[color=#ffffff, process="0"]:
   [ State_1111111111( h, k ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) inh_0_1112[color=#ffffff, process="in(h);"]:
   [ State_1112( ), In( h ) ] --> [ State_11121( h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lockh_0_11121[color=#ffffff, process="lock h;"]:
   [ State_11121( h ), Fr( lock ) ]
  --[ Lock_0( '0', lock, h ), Lock( '0', lock, h ) ]->
   [ State_111211( h, lock ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertatthwrap_0_111211[color=#ffffff,
                                        process="insert <'att', h>,'wrap';"]:
   [ State_111211( h, lock ) ]
  --[ Insert( <'att', h>, 'wrap' ) ]->
   [ State_1112111( h, lock ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlockh_0_1112111[color=#ffffff, process="unlock h;"]:
   [ State_1112111( h, lock ) ]
  --[ Unlock_0( '0', lock, h ), Unlock( '0', lock, h ) ]->
   [ State_11121111( h, lock ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11121111[color=#ffffff, process="0"]:
   [ State_11121111( h, lock ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) inhc_0_112[color=#ffffff, process="in(<h, c>);"]:
   [ State_112( ), In( <h, c> ) ] --> [ State_1121( c, h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupatthasa_0_1121[color=#ffffff,
                                     process="lookup <'att', h> as a"]:
   [ State_1121( c, h ) ]
  --[ IsIn( <'att', h>, a ) ]->
   [ State_11211( a, c, h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupatthasa_1_1121[color=#ffffff,
                                     process="lookup <'att', h> as a"]:
   [ State_1121( c, h ) ]
  --[ IsNotSet( <'att', h> ) ]->
   [ State_11212( c, h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifadec_0_11211[color=#ffffff, process="if a='dec'"]:
   [ State_11211( a, c, h ) ]
  --[ Pred_Eq( a, 'dec' ) ]->
   [ State_112111( a, c, h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifadec_1_11211[color=#ffffff, process="if a='dec'"]:
   [ State_11211( a, c, h ) ]
  --[ Pred_Not_Eq( a, 'dec' ) ]->
   [ State_112112( a, c, h ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupkeyhask_0_112111[color=#ffffff,
                                       process="lookup <'key', h> as k"]:
   [ State_112111( a, c, h ) ]
  --[ IsIn( <'key', h>, k ) ]->
   [ State_1121111( a, c, h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupkeyhask_1_112111[color=#ffffff,
                                       process="lookup <'key', h> as k"]:
   [ State_112111( a, c, h ) ]
  --[ IsNotSet( <'key', h> ) ]->
   [ State_1121112( a, c, h ) ]

  /* has exactly the trivial AC variant */

restriction Restr_ifEncSuccck_0_1121111_1:
  "∀ x #NOW x.1.
    (Restr_ifEncSuccck_0_1121111_1( x, x.1 ) @ #NOW) ⇒
    (∃ m. senc(m, x) = x.1)"

rule (modulo E) ifEncSuccck_0_1121111[color=#ffffff,
                                      process="if EncSucc( c, k )"]:
   [ State_1121111( a, c, h, k ) ]
  --[ Restr_ifEncSuccck_0_1121111_1( k, c ) ]->
   [ State_11211111( a, c, h, k ) ]

  /* has exactly the trivial AC variant */

restriction Restr_ifEncSuccck_1_1121111_1:
  "∀ x #NOW x.1.
    (Restr_ifEncSuccck_1_1121111_1( x, x.1 ) @ #NOW) ⇒
    (¬(∃ m. senc(m, x) = x.1))"
  // safety formula

rule (modulo E) ifEncSuccck_1_1121111[color=#ffffff,
                                      process="if EncSucc( c, k )"]:
   [ State_1121111( a, c, h, k ) ]
  --[ Restr_ifEncSuccck_1_1121111_1( k, c ) ]->
   [ State_11211112( a, c, h, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventDecUsingksdecck_0_11211111[color=#ffffff,
                                                process="event DecUsing( k, sdec(c, k) );"]:
   [ State_11211111( a, c, h, k ) ]
  --[ DecUsing( k, sdec(c, k) ) ]->
   [ State_112111111( a, c, h, k ) ]

  /*
  rule (modulo AC) eventDecUsingksdecck_0_11211111[color=#ffffff,
                                                   process="event DecUsing( k, sdec(c, k) );"]:
     [ State_11211111( a, c, h, k ) ]
    --[ DecUsing( k, z ) ]->
     [ State_112111111( a, c, h, k ) ]
    variants (modulo AC)
    1. c     = c.6
       k     = k.6
       z     = sdec(c.6, k.6)
    
    2. c     = senc(x.6, x.7)
       k     = x.7
       z     = x.6
  */

rule (modulo E) outsdecck_0_112111111[color=#ffffff,
                                      process="out(sdec(c, k));"]:
   [ State_112111111( a, c, h, k ) ]
  -->
   [ State_1121111111( a, c, h, k ), Out( sdec(c, k) ) ]

  /*
  rule (modulo AC) outsdecck_0_112111111[color=#ffffff,
                                         process="out(sdec(c, k));"]:
     [ State_112111111( a, c, h, k ) ]
    -->
     [ State_1121111111( a, c, h, k ), Out( z ) ]
    variants (modulo AC)
    1. c     = c.6
       k     = k.6
       z     = sdec(c.6, k.6)
    
    2. c     = senc(x.6, x.7)
       k     = x.7
       z     = x.6
  */

rule (modulo E) p_0_1121111111[color=#ffffff, process="0"]:
   [ State_1121111111( a, c, h, k ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11211112[color=#ffffff, process="0"]:
   [ State_11211112( a, c, h, k ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1121112[color=#ffffff, process="0"]:
   [ State_1121112( a, c, h ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_112112[color=#ffffff, process="0"]:
   [ State_112112( a, c, h ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11212[color=#ffffff, process="0"]:
   [ State_11212( c, h ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) inhh_0_12[color=#ffffff, process="in(<h1, h2>);"]:
   [ State_12( ), In( <h1, h2> ) ] --> [ State_121( h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupatthasa_0_121[color=#ffffff,
                                    process="lookup <'att', h1> as a1"]:
   [ State_121( h1, h2 ) ]
  --[ IsIn( <'att', h1>, a1 ) ]->
   [ State_1211( a1, h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupatthasa_1_121[color=#ffffff,
                                    process="lookup <'att', h1> as a1"]:
   [ State_121( h1, h2 ) ]
  --[ IsNotSet( <'att', h1> ) ]->
   [ State_1212( h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifawrap_0_1211[color=#ffffff, process="if a1='wrap'"]:
   [ State_1211( a1, h1, h2 ) ]
  --[ Pred_Eq( a1, 'wrap' ) ]->
   [ State_12111( a1, h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifawrap_1_1211[color=#ffffff, process="if a1='wrap'"]:
   [ State_1211( a1, h1, h2 ) ]
  --[ Pred_Not_Eq( a1, 'wrap' ) ]->
   [ State_12112( a1, h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupkeyhask_0_12111[color=#ffffff,
                                      process="lookup <'key', h1> as k1"]:
   [ State_12111( a1, h1, h2 ) ]
  --[ IsIn( <'key', h1>, k1 ) ]->
   [ State_121111( a1, h1, h2, k1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupkeyhask_1_12111[color=#ffffff,
                                      process="lookup <'key', h1> as k1"]:
   [ State_12111( a1, h1, h2 ) ]
  --[ IsNotSet( <'key', h1> ) ]->
   [ State_121112( a1, h1, h2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupkeyhask_0_121111[color=#ffffff,
                                       process="lookup <'key', h2> as k2"]:
   [ State_121111( a1, h1, h2, k1 ) ]
  --[ IsIn( <'key', h2>, k2 ) ]->
   [ State_1211111( a1, h1, h2, k1, k2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupkeyhask_1_121111[color=#ffffff,
                                       process="lookup <'key', h2> as k2"]:
   [ State_121111( a1, h1, h2, k1 ) ]
  --[ IsNotSet( <'key', h2> ) ]->
   [ State_1211112( a1, h1, h2, k1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventWrapkk_0_1211111[color=#ffffff,
                                      process="event Wrap( k1, k2 );"]:
   [ State_1211111( a1, h1, h2, k1, k2 ) ]
  --[ Wrap( k1, k2 ) ]->
   [ State_12111111( a1, h1, h2, k1, k2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outsenckk_0_12111111[color=#ffffff,
                                     process="out(senc(k2, k1));"]:
   [ State_12111111( a1, h1, h2, k1, k2 ) ]
  -->
   [ State_121111111( a1, h1, h2, k1, k2 ), Out( senc(k2, k1) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_121111111[color=#ffffff, process="0"]:
   [ State_121111111( a1, h1, h2, k1, k2 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1211112[color=#ffffff, process="0"]:
   [ State_1211112( a1, h1, h2, k1 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_121112[color=#ffffff, process="0"]:
   [ State_121112( a1, h1, h2 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_12112[color=#ffffff, process="0"]:
   [ State_12112( a1, h1, h2 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1212[color=#ffffff, process="0"]:
   [ State_1212( h1, h2 ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒ (∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1))"
  // safety formula

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction locking_0:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_0( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/feature-predicates/decwrap-destr-restrict-variant.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/feature-predicates/decwrap-destr-restrict-variant.spthy

  output:          examples/sapic/fast/feature-predicates/decwrap-destr-restrict-variant.spthy.tmp
  processing time: 2.562856241s
  can_create_key (exists-trace): verified (3 steps)
  can_obtain_wrapping (exists-trace): verified (11 steps)
  dec_limits (all-traces): verified (60 steps)
  cannot_obtain_key_ind (all-traces): verified (38 steps)
  cannot_obtain_key (all-traces): verified (2 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-predicates/decwrap-destr-restrict-variant.spthy

  output:          examples/sapic/fast/feature-predicates/decwrap-destr-restrict-variant.spthy.tmp
  processing time: 2.562856241s
  can_create_key (exists-trace): verified (3 steps)
  can_obtain_wrapping (exists-trace): verified (11 steps)
  dec_limits (all-traces): verified (60 steps)
  cannot_obtain_key_ind (all-traces): verified (38 steps)
  cannot_obtain_key (all-traces): verified (2 steps)

==============================================================================
*/
