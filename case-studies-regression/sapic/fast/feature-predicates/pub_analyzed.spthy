theory pubInRestr begin

// Function signature and definition of the equational theory E

functions: eq/2, fst/1, pair/2, snd/1, true/0
equations: eq(x, x) = true, fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



heuristic: p

predicate: True( x )<=>x = true

predicate: And2( x, y )<=>(x = true) ∧ (y = true)



restriction Restr_testA_1:
  "∀ #NOW. (Restr_testA_1( ) @ #NOW) ⇒ ('true' = true)"
  // safety formula

rule (modulo E) testA:
   [ ] --[ Restr_testA_1( ) ]-> [ ]

  /* has exactly the trivial AC variant */

restriction Restr_testB_1:
  "∀ x #NOW. (Restr_testB_1( x ) @ #NOW) ⇒ (x = true)"
  // safety formula

rule (modulo E) testB:
   [ In( x ) ] --[ Restr_testB_1( x ) ]-> [ ]

  /* has exactly the trivial AC variant */











rule (modulo E) Init[color=#ffffff, process="in(x.1);"]:
   [ In( x.1 ) ] --[ Init( ) ]-> [ State_1( x.1 ) ]

  /*
  rule (modulo AC) Init[color=#ffffff, process="in(x.1);"]:
     [ In( x ) ] --[ Init( ) ]-> [ State_1( x ) ]
  */

restriction Restr_ifTruex_0_1_1:
  "∀ x #NOW. (Restr_ifTruex_0_1_1( x ) @ #NOW) ⇒ (x = true)"
  // safety formula

rule (modulo E) ifTruex_0_1[color=#ffffff, process="if True( x.1 )"]:
   [ State_1( x.1 ) ] --[ Restr_ifTruex_0_1_1( x.1 ) ]-> [ State_11( x.1 ) ]

  /*
  rule (modulo AC) ifTruex_0_1[color=#ffffff, process="if True( x.1 )"]:
     [ State_1( x ) ] --[ Restr_ifTruex_0_1_1( x ) ]-> [ State_11( x ) ]
  */

restriction Restr_ifTruetrue_0_11_1:
  "∀ #NOW. (Restr_ifTruetrue_0_11_1( ) @ #NOW) ⇒ (true = true)"
  // safety formula

rule (modulo E) ifTruetrue_0_11[color=#ffffff,
                                process="if True( true )"]:
   [ State_11( x.1 ) ]
  --[ Restr_ifTruetrue_0_11_1( ) ]->
   [ State_111( x.1 ) ]

  /*
  rule (modulo AC) ifTruetrue_0_11[color=#ffffff,
                                   process="if True( true )"]:
     [ State_11( x ) ] --[ Restr_ifTruetrue_0_11_1( ) ]-> [ State_111( x ) ]
  */

restriction Restr_ifTrueeqxx_0_111_1:
  "∀ x #NOW. (Restr_ifTrueeqxx_0_111_1( x ) @ #NOW) ⇒ (x = true)"
  // safety formula

rule (modulo E) ifTrueeqxx_0_111[color=#ffffff,
                                 process="if True( eq(x.1, x.1) )"]:
   [ State_111( x.1 ) ]
  --[ Restr_ifTrueeqxx_0_111_1( eq(x.1, x.1) ) ]->
   [ State_1111( x.1 ) ]

  /*
  rule (modulo AC) ifTrueeqxx_0_111[color=#ffffff,
                                    process="if True( eq(x.1, x.1) )"]:
     [ State_111( x ) ]
    --[ Restr_ifTrueeqxx_0_111_1( true ) ]->
     [ State_1111( x ) ]
  */

restriction Restr_ifTrueeqxtest_0_1111_1:
  "∀ x #NOW. (Restr_ifTrueeqxtest_0_1111_1( x ) @ #NOW) ⇒ (x = true)"
  // safety formula

rule (modulo E) ifTrueeqxtest_0_1111[color=#ffffff,
                                     process="if True( eq(x.1, 'test') )"]:
   [ State_1111( x.1 ) ]
  --[ Restr_ifTrueeqxtest_0_1111_1( eq(x.1, 'test') ) ]->
   [ State_11111( x.1 ) ]

  /*
  rule (modulo AC) ifTrueeqxtest_0_1111[color=#ffffff,
                                        process="if True( eq(x.1, 'test') )"]:
     [ State_1111( x ) ]
    --[ Restr_ifTrueeqxtest_0_1111_1( z ) ]->
     [ State_11111( x ) ]
    variants (modulo AC)
    1. x     = 'test'
       z     = true
    
    2. x     = x.4
       z     = eq(x.4, 'test')
  */

restriction Restr_ifAndeqxtesttrue_0_11111_1:
  "∀ x #NOW.
    (Restr_ifAndeqxtesttrue_0_11111_1( x ) @ #NOW) ⇒
    ((x = true) ∧ (true = true))"
  // safety formula

rule (modulo E) ifAndeqxtesttrue_0_11111[color=#ffffff,
                                         process="if And2( eq(x.1, 'test'), true )"]:
   [ State_11111( x.1 ) ]
  --[ Restr_ifAndeqxtesttrue_0_11111_1( eq(x.1, 'test') ) ]->
   [ State_111111( x.1 ) ]

  /*
  rule (modulo AC) ifAndeqxtesttrue_0_11111[color=#ffffff,
                                            process="if And2( eq(x.1, 'test'), true )"]:
     [ State_11111( x ) ]
    --[ Restr_ifAndeqxtesttrue_0_11111_1( z ) ]->
     [ State_111111( x ) ]
    variants (modulo AC)
    1. x     = 'test'
       z     = true
    
    2. x     = x.4
       z     = eq(x.4, 'test')
  */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.7.1
Maude version 3.2.1
Git revision: 4b299c253445d7bbc7fce41abf0b0d5659bb1d58, branch: develop
Compiled at: 2023-06-26 11:54:20.223793825 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 3.2.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-predicates/pub.spthy

  output:          examples/sapic/fast/feature-predicates/pub.spthy.tmp
  processing time: 0.08s
  

==============================================================================
*/
