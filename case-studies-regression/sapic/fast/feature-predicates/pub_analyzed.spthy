theory pubInRestr begin

// Function signature and definition of the equational theory E

functions: eq/2, fst/1, pair/2, snd/1, true/0
equations: eq(x, x) = true, fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

heuristic: p

predicate: True( x )<=>x = true

predicate: And2( x, y )<=>(x = true) ∧ (y = true)

restriction Restr_testA_1:
  "∀ #NOW. (Restr_testA_1( ) @ #NOW) ⇒ ('true' = true)"
  // safety formula

rule (modulo E) testA:
   [ ] --[ Restr_testA_1( ) ]-> [ ]

  /* has exactly the trivial AC variant */

restriction Restr_testB_1:
  "∀ x #NOW. (Restr_testB_1( x ) @ #NOW) ⇒ (x = true)"
  // safety formula

rule (modulo E) testB:
   [ In( x ) ] --[ Restr_testB_1( x ) ]-> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init[color=#ffffff, process="in(x);"]:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inx_0_[color=#ffffff, process="in(x);"]:
   [ State_( ), In( x ) ] --> [ State_1( x ) ]

  /* has exactly the trivial AC variant */

restriction Restr_ifTruex_0_1_1:
  "∀ x #NOW. (Restr_ifTruex_0_1_1( x ) @ #NOW) ⇒ (x = true)"
  // safety formula

rule (modulo E) ifTruex_0_1[color=#ffffff, process="if True( x )"]:
   [ State_1( x ) ] --[ Restr_ifTruex_0_1_1( x ) ]-> [ State_11( x ) ]

  /* has exactly the trivial AC variant */

restriction Restr_ifTruex_1_1_1:
  "∀ x #NOW. (Restr_ifTruex_1_1_1( x ) @ #NOW) ⇒ (¬(x = true))"
  // safety formula

rule (modulo E) ifTruex_1_1[color=#ffffff, process="if True( x )"]:
   [ State_1( x ) ] --[ Restr_ifTruex_1_1_1( x ) ]-> [ State_12( x ) ]

  /* has exactly the trivial AC variant */

restriction Restr_ifTruetrue_0_11_1:
  "∀ #NOW. (Restr_ifTruetrue_0_11_1( ) @ #NOW) ⇒ (true = true)"
  // safety formula

rule (modulo E) ifTruetrue_0_11[color=#ffffff,
                                process="if True( true )"]:
   [ State_11( x ) ] --[ Restr_ifTruetrue_0_11_1( ) ]-> [ State_111( x ) ]

  /* has exactly the trivial AC variant */

restriction Restr_ifTruetrue_1_11_1:
  "∀ #NOW. (Restr_ifTruetrue_1_11_1( ) @ #NOW) ⇒ (¬(true = true))"
  // safety formula

rule (modulo E) ifTruetrue_1_11[color=#ffffff,
                                process="if True( true )"]:
   [ State_11( x ) ] --[ Restr_ifTruetrue_1_11_1( ) ]-> [ State_112( x ) ]

  /* has exactly the trivial AC variant */

restriction Restr_ifTrueeqxx_0_111_1:
  "∀ x #NOW. (Restr_ifTrueeqxx_0_111_1( x ) @ #NOW) ⇒ (x = true)"
  // safety formula

rule (modulo E) ifTrueeqxx_0_111[color=#ffffff,
                                 process="if True( eq(x, x) )"]:
   [ State_111( x ) ]
  --[ Restr_ifTrueeqxx_0_111_1( eq(x, x) ) ]->
   [ State_1111( x ) ]

  /*
  rule (modulo AC) ifTrueeqxx_0_111[color=#ffffff,
                                    process="if True( eq(x, x) )"]:
     [ State_111( x ) ]
    --[ Restr_ifTrueeqxx_0_111_1( true ) ]->
     [ State_1111( x ) ]
  */

restriction Restr_ifTrueeqxx_1_111_1:
  "∀ x #NOW. (Restr_ifTrueeqxx_1_111_1( x ) @ #NOW) ⇒ (¬(x = true))"
  // safety formula

rule (modulo E) ifTrueeqxx_1_111[color=#ffffff,
                                 process="if True( eq(x, x) )"]:
   [ State_111( x ) ]
  --[ Restr_ifTrueeqxx_1_111_1( eq(x, x) ) ]->
   [ State_1112( x ) ]

  /*
  rule (modulo AC) ifTrueeqxx_1_111[color=#ffffff,
                                    process="if True( eq(x, x) )"]:
     [ State_111( x ) ]
    --[ Restr_ifTrueeqxx_1_111_1( true ) ]->
     [ State_1112( x ) ]
  */

restriction Restr_ifTrueeqxtest_0_1111_1:
  "∀ x #NOW. (Restr_ifTrueeqxtest_0_1111_1( x ) @ #NOW) ⇒ (x = true)"
  // safety formula

rule (modulo E) ifTrueeqxtest_0_1111[color=#ffffff,
                                     process="if True( eq(x, 'test') )"]:
   [ State_1111( x ) ]
  --[ Restr_ifTrueeqxtest_0_1111_1( eq(x, 'test') ) ]->
   [ State_11111( x ) ]

  /*
  rule (modulo AC) ifTrueeqxtest_0_1111[color=#ffffff,
                                        process="if True( eq(x, 'test') )"]:
     [ State_1111( x ) ]
    --[ Restr_ifTrueeqxtest_0_1111_1( z ) ]->
     [ State_11111( x ) ]
    variants (modulo AC)
    1. x     = 'test'
       z     = true
    
    2. x     = x.3
       z     = eq(x.3, 'test')
  */

restriction Restr_ifTrueeqxtest_1_1111_1:
  "∀ x #NOW. (Restr_ifTrueeqxtest_1_1111_1( x ) @ #NOW) ⇒ (¬(x = true))"
  // safety formula

rule (modulo E) ifTrueeqxtest_1_1111[color=#ffffff,
                                     process="if True( eq(x, 'test') )"]:
   [ State_1111( x ) ]
  --[ Restr_ifTrueeqxtest_1_1111_1( eq(x, 'test') ) ]->
   [ State_11112( x ) ]

  /*
  rule (modulo AC) ifTrueeqxtest_1_1111[color=#ffffff,
                                        process="if True( eq(x, 'test') )"]:
     [ State_1111( x ) ]
    --[ Restr_ifTrueeqxtest_1_1111_1( z ) ]->
     [ State_11112( x ) ]
    variants (modulo AC)
    1. x     = 'test'
       z     = true
    
    2. x     = x.3
       z     = eq(x.3, 'test')
  */

restriction Restr_ifAndeqxtesttrue_0_11111_1:
  "∀ x #NOW.
    (Restr_ifAndeqxtesttrue_0_11111_1( x ) @ #NOW) ⇒
    ((x = true) ∧ (true = true))"
  // safety formula

rule (modulo E) ifAndeqxtesttrue_0_11111[color=#ffffff,
                                         process="if And2( eq(x, 'test'), true )"]:
   [ State_11111( x ) ]
  --[ Restr_ifAndeqxtesttrue_0_11111_1( eq(x, 'test') ) ]->
   [ State_111111( x ) ]

  /*
  rule (modulo AC) ifAndeqxtesttrue_0_11111[color=#ffffff,
                                            process="if And2( eq(x, 'test'), true )"]:
     [ State_11111( x ) ]
    --[ Restr_ifAndeqxtesttrue_0_11111_1( z ) ]->
     [ State_111111( x ) ]
    variants (modulo AC)
    1. x     = 'test'
       z     = true
    
    2. x     = x.3
       z     = eq(x.3, 'test')
  */

restriction Restr_ifAndeqxtesttrue_1_11111_1:
  "∀ x #NOW.
    (Restr_ifAndeqxtesttrue_1_11111_1( x ) @ #NOW) ⇒
    (¬((x = true) ∧ (true = true)))"
  // safety formula

rule (modulo E) ifAndeqxtesttrue_1_11111[color=#ffffff,
                                         process="if And2( eq(x, 'test'), true )"]:
   [ State_11111( x ) ]
  --[ Restr_ifAndeqxtesttrue_1_11111_1( eq(x, 'test') ) ]->
   [ State_111112( x ) ]

  /*
  rule (modulo AC) ifAndeqxtesttrue_1_11111[color=#ffffff,
                                            process="if And2( eq(x, 'test'), true )"]:
     [ State_11111( x ) ]
    --[ Restr_ifAndeqxtesttrue_1_11111_1( z ) ]->
     [ State_111112( x ) ]
    variants (modulo AC)
    1. x     = 'test'
       z     = true
    
    2. x     = x.3
       z     = eq(x.3, 'test')
  */

restriction Restr_ifTrueeqxtest_0_111111_1:
  "∀ x #NOW. (Restr_ifTrueeqxtest_0_111111_1( x ) @ #NOW) ⇒ (x = true)"
  // safety formula

rule (modulo E) ifTrueeqxtest_0_111111[color=#ffffff,
                                       process="if True( eq(x, 'test') )"]:
   [ State_111111( x ) ]
  --[ Restr_ifTrueeqxtest_0_111111_1( eq(x, 'test') ) ]->
   [ State_1111111( x ) ]

  /*
  rule (modulo AC) ifTrueeqxtest_0_111111[color=#ffffff,
                                          process="if True( eq(x, 'test') )"]:
     [ State_111111( x ) ]
    --[ Restr_ifTrueeqxtest_0_111111_1( z ) ]->
     [ State_1111111( x ) ]
    variants (modulo AC)
    1. x     = 'test'
       z     = true
    
    2. x     = x.3
       z     = eq(x.3, 'test')
  */

restriction Restr_ifTrueeqxtest_1_111111_1:
  "∀ x #NOW. (Restr_ifTrueeqxtest_1_111111_1( x ) @ #NOW) ⇒ (¬(x = true))"
  // safety formula

rule (modulo E) ifTrueeqxtest_1_111111[color=#ffffff,
                                       process="if True( eq(x, 'test') )"]:
   [ State_111111( x ) ]
  --[ Restr_ifTrueeqxtest_1_111111_1( eq(x, 'test') ) ]->
   [ State_1111112( x ) ]

  /*
  rule (modulo AC) ifTrueeqxtest_1_111111[color=#ffffff,
                                          process="if True( eq(x, 'test') )"]:
     [ State_111111( x ) ]
    --[ Restr_ifTrueeqxtest_1_111111_1( z ) ]->
     [ State_1111112( x ) ]
    variants (modulo AC)
    1. x     = 'test'
       z     = true
    
    2. x     = x.3
       z     = eq(x.3, 'test')
  */

rule (modulo E) p_0_1111111[color=#ffffff, process="0"]:
   [ State_1111111( x ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1111112[color=#ffffff, process="0"]:
   [ State_1111112( x ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_111112[color=#ffffff, process="0"]:
   [ State_111112( x ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11112[color=#ffffff, process="0"]:
   [ State_11112( x ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1112[color=#ffffff, process="0"]:
   [ State_1112( x ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_112[color=#ffffff, process="0"]:
   [ State_112( x ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_12[color=#ffffff, process="0"]:
   [ State_12( x ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/feature-predicates/pub.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/feature-predicates/pub.spthy

  output:          examples/sapic/fast/feature-predicates/pub.spthy.tmp
  processing time: 0.071516061s


------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-predicates/pub.spthy

  output:          examples/sapic/fast/feature-predicates/pub.spthy.tmp
  processing time: 0.071516061s


==============================================================================
*/
