theory CRXOR begin

// Function signature and definition of the equational theory E

builtins: xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

heuristic: p

lemma alive:
  all-traces "∀ x y #i. (Alive( x, y ) @ #i) ⇒ (∃ #j. Response( y ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x y #i. (Alive( x, y ) @ #i) ∧ ∀ #j. (Response( y ) @ #j) ⇒ ⊥"
*/
simplify
solve( State_11111111( ~k, ~na, m, nb ) ▶₀ #i )
  case ifhknanbm_0_1111111
  solve( splitEqs(1) )
    case split_case_1
    solve( !KU( h(~na) ) @ #vk.1 )
      case c_h
      by solve( !KU( ~k ) @ #vk.2 )
    next
      case outhknbnanb_0_11211211
      by contradiction /* from formulas */
    qed
  next
    case split_case_2
    solve( !KU( h(~k) ) @ #vk.1 )
      case c_h
      by solve( !KU( ~k ) @ #vk.3 )
    next
      case outhknbnanb_0_11211211
      by contradiction /* cyclic */
    qed
  next
    case split_case_3
    solve( !KU( h((~k⊕~na⊕nb)) ) @ #vk.1 )
      case c_h
      solve( !KU( (~k⊕~na⊕nb) ) @ #vk.3 )
        case c_xor_case_1
        solve( !KU( (~k⊕nb) ) @ #vk.4 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.6 )
        next
          case coerce
          solve( !KD( (~k⊕nb) ) ▶₀ #vk.2 )
            case outhknbnanb_0_11211211
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by solve( (#vr.11, 0) ~~> (#vk.2, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          next
            case outna_0_11111
            by contradiction /* impossible chain */
          qed
        qed
      next
        case c_xor_case_2
        solve( !KU( (~na⊕nb) ) @ #vk.4 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~na⊕nb) ) ▶₀ #vk.2 )
            case outhknbnanb_0_11211211
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by solve( (#vr.11, 0) ~~> (#vk.2, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          next
            case outna_0_11111
            by contradiction /* impossible chain */
          qed
        qed
      next
        case c_xor_case_3
        solve( !KU( (~k⊕~na) ) @ #vk.4 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.6 )
        next
          case coerce
          solve( !KD( (~k⊕~na) ) ▶₀ #vk.2 )
            case outhknbnanb_0_11211211
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by solve( (#vr.11, 0) ~~> (#vk.2, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          next
            case outna_0_11111
            by contradiction /* impossible chain */
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~na⊕nb) ) ▶₀ #vk.1 )
          case outhknbnanb_0_11211211
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by solve( (#vr.11, 0) ~~> (#vk.1, 0) )
          next
            case d_0_snd
            by contradiction /* impossible chain */
          qed
        next
          case outna_0_11111
          by contradiction /* impossible chain */
        qed
      qed
    next
      case outhknbnanb_0_11211211
      by contradiction /* from formulas */
    qed
  next
    case split_case_4
    solve( !KU( h((~k⊕~na)) ) @ #vk.1 )
      case c_h
      solve( !KU( (~k⊕~na) ) @ #vk.3 )
        case c_xor
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case coerce
        solve( !KD( (~k⊕~na) ) ▶₀ #vk.1 )
          case outhknbnanb_0_11211211
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by solve( (#vr.11, 0) ~~> (#vk.1, 0) )
          next
            case d_0_snd
            by contradiction /* impossible chain */
          qed
        next
          case outna_0_11111
          by contradiction /* impossible chain */
        qed
      qed
    next
      case outhknbnanb_0_11211211
      by contradiction /* from formulas */
    qed
  next
    case split_case_5
    solve( !KU( (~k⊕~na) ) @ #vk.2 )
      case c_xor
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case coerce
      solve( !KD( (~k⊕~na) ) ▶₀ #vk )
        case outhknbnanb_0_11211211
        solve( (#vl, 0) ~~> (#vk, 0) )
          case d_0_fst
          by solve( (#vr.11, 0) ~~> (#vk, 0) )
        next
          case d_0_snd
          by contradiction /* impossible chain */
        qed
      next
        case outna_0_11111
        by contradiction /* impossible chain */
      qed
    qed
  next
    case split_case_6
    solve( !KU( (~k⊕~na⊕z) ) @ #vk.2 )
      case c_xor_case_1
      solve( !KU( (~k⊕z) ) @ #vk.3 )
        case c_xor
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case coerce
        solve( !KD( (~k⊕z) ) ▶₀ #vk.1 )
          case outhknbnanb_0_11211211
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by solve( (#vr.11, 0) ~~> (#vk.1, 0) )
          next
            case d_0_snd
            by contradiction /* impossible chain */
          qed
        next
          case outna_0_11111
          by contradiction /* impossible chain */
        qed
      qed
    next
      case c_xor_case_2
      solve( !KU( (~na⊕z) ) @ #vk.3 )
        case c_xor
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case coerce
        solve( !KD( (~na⊕z) ) ▶₀ #vk.1 )
          case outhknbnanb_0_11211211
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by solve( (#vr.11, 0) ~~> (#vk.1, 0) )
          next
            case d_0_snd
            by contradiction /* impossible chain */
          qed
        next
          case outna_0_11111
          by contradiction /* impossible chain */
        qed
      qed
    next
      case c_xor_case_3
      solve( !KU( (~k⊕~na) ) @ #vk.4 )
        case c_xor
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case coerce
        solve( !KD( (~k⊕~na) ) ▶₀ #vk.1 )
          case outhknbnanb_0_11211211
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by solve( (#vr.11, 0) ~~> (#vk.1, 0) )
          next
            case d_0_snd
            by contradiction /* impossible chain */
          qed
        next
          case outna_0_11111
          by contradiction /* impossible chain */
        qed
      qed
    next
      case coerce
      solve( !KD( (~k⊕~na⊕z) ) ▶₀ #vk )
        case outhknbnanb_0_11211211
        solve( (#vl, 0) ~~> (#vk, 0) )
          case d_0_fst
          by solve( (#vr.11, 0) ~~> (#vk, 0) )
        next
          case d_0_snd
          by contradiction /* impossible chain */
        qed
      next
        case outna_0_11111
        by contradiction /* impossible chain */
      qed
    qed
  next
    case split_case_7
    solve( !KU( h((~k⊕x)) ) @ #vk.1 )
      case c_h
      solve( !KU( (~na⊕x) ) @ #vk.2 )
        case c_xor
        solve( !KU( (~k⊕x) ) @ #vk.3 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.6 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.2 )
            case outhknbnanb_0_11211211
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by solve( (#vr.11, 0) ~~> (#vk.2, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          next
            case outna_0_11111
            by contradiction /* impossible chain */
          qed
        qed
      next
        case coerce
        solve( !KD( (~na⊕x) ) ▶₀ #vk.1 )
          case outhknbnanb_0_11211211
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by solve( (#vr.11, 0) ~~> (#vk.1, 0) )
          next
            case d_0_snd
            by contradiction /* impossible chain */
          qed
        next
          case outna_0_11111
          by contradiction /* impossible chain */
        qed
      qed
    next
      case outhknbnanb_0_11211211
      by contradiction /* from formulas */
    qed
  next
    case split_case_8
    solve( !KU( h((~na⊕x)) ) @ #vk.1 )
      case c_h
      solve( !KU( (~k⊕x) ) @ #vk.2 )
        case c_xor
        solve( !KU( (~na⊕x) ) @ #vk.3 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~na⊕x) ) ▶₀ #vk.2 )
            case outhknbnanb_0_11211211
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by solve( (#vr.11, 0) ~~> (#vk.2, 0) )
            next
              case d_0_snd
              by contradiction /* impossible chain */
            qed
          next
            case outna_0_11111
            by contradiction /* impossible chain */
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
          case outhknbnanb_0_11211211
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by solve( (#vr.11, 0) ~~> (#vk.1, 0) )
          next
            case d_0_snd
            by contradiction /* impossible chain */
          qed
        next
          case outna_0_11111
          by contradiction /* impossible chain */
        qed
      qed
    next
      case outhknbnanb_0_11211211
      by contradiction /* from formulas */
    qed
  qed
qed

lemma recentalive_tag:
  exists-trace
  "¬(∀ x y #i.
      (Alive( x, y ) @ #i) ⇒
      (∃ #j #k.
        (((Challenge( x ) @ #k) ∧ (Response( y ) @ #j)) ∧ (#k < #j)) ∧
        (#j < #i)))"
/*
guarded formula characterizing all satisfying traces:
"∃ x y #i.
  (Alive( x, y ) @ #i)
 ∧
  ∀ #j #k.
   (Challenge( x ) @ #k) ∧ (Response( y ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
simplify
solve( State_11111111( ~k, ~na, m, nb ) ▶₀ #i )
  case ifhknanbm_0_1111111
  solve( splitEqs(1) )
    case split_case_7
    solve( !KU( h((~k⊕x)) ) @ #vk.1 )
      case outhknbnanb_0_11211211
      solve( !KU( (~na⊕x) ) @ #vk.2 )
        case c_xor
        solve( splitEqs(3) )
          case split_case_2
          solve( !KU( (~nb⊕na.1) ) @ #vk.4 )
            case c_xor
            solve( !KU( ~na ) @ #vk.5 )
              case outna_0_11111
              solve( !KU( ~nb ) @ #vk.6 )
                case outhknbnanb_0_11211211
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma executable:
  exists-trace
  "∃ x y #i #j.
    (((Alive( x, y ) @ #i) ∧ (Response( y ) @ #j)) ∧
     (¬(∃ #k. (Response( y ) @ #k) ∧ (¬(#j = #k))))) ∧
    (¬(∃ #l. NeqForExec( x, x ) @ #l))"
/*
guarded formula characterizing all satisfying traces:
"∃ x y #i #j.
  (Alive( x, y ) @ #i) ∧ (Response( y ) @ #j)
 ∧
  (∀ #k. (Response( y ) @ #k) ⇒ #j = #k) ∧
  (∀ #l. (NeqForExec( x, x ) @ #l) ⇒ ⊥)"
*/
simplify
solve( State_11111111( ~k, ~na, m, nb ) ▶₀ #i )
  case ifhknanbm_0_1111111
  solve( State_1121121( ~k, ~nb.1, na.1 ) ▶₀ #j )
    case eventNeqForExecnazero_0_112112
    solve( splitEqs(2) )
      case split_case_3
      solve( !KU( h((~k⊕~na⊕nb)) ) @ #vk.1 )
        case outhknbnanb_0_11211211
        solve( splitEqs(4) )
          case split_case_2
          solve( !KU( ~nb ) @ #vk.2 )
            case outhknbnanb_0_11211211
            solve( !KU( ~na ) @ #vk.3 )
              case outna_0_11111
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

rule (modulo E) Init[color=#ffffff, process="new ~k;"]:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newk_0_[color=#ffffff, process="new ~k;"]:
   [ State_( ), Fr( ~k ) ] --> [ State_1( ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1[color=#ffffff, process="!"]:
   [ State_1( ~k ) ] --> [ !Semistate_11( ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_1[color=#ffffff, process="!"]:
   [ !Semistate_11( ~k ) ] --> [ State_11( ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11[color=#ffffff, process="|"]:
   [ State_11( ~k ) ] --> [ State_111( ~k ), State_112( ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newna_0_111[color=#80404f, process="new ~na;"]:
   [ State_111( ~k ), Fr( ~na ) ] --> [ State_1111( ~k, ~na ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventChallengena_0_1111[color=#80404f,
                                        process="event Challenge( ~na );"]:
   [ State_1111( ~k, ~na ) ]
  --[ Challenge( ~na ) ]->
   [ State_11111( ~k, ~na ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outna_0_11111[color=#80404f, process="out(~na);"]:
   [ State_11111( ~k, ~na ) ] --> [ State_111111( ~k, ~na ), Out( ~na ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inmnb_0_111111[color=#80404f, process="in(<m, nb>);"]:
   [ State_111111( ~k, ~na ), In( <m, nb> ) ]
  -->
   [ State_1111111( ~k, ~na, m, nb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifhknanbm_0_1111111[color=#80404f,
                                    process="if h((~k⊕~na⊕nb))=m"]:
   [ State_1111111( ~k, ~na, m, nb ) ]
  --[ Pred_Eq( h((~k⊕~na⊕nb)), m ) ]->
   [ State_11111111( ~k, ~na, m, nb ) ]

  /*
  rule (modulo AC) ifhknanbm_0_1111111[color=#80404f,
                                       process="if h((~k⊕~na⊕nb))=m"]:
     [ State_1111111( ~k, ~na, m, nb ) ]
    --[ Pred_Eq( h(z), m ) ]->
     [ State_11111111( ~k, ~na, m, nb ) ]
    variants (modulo AC)
    1. ~k    = ~k.6
       ~na   = ~na.6
       nb    = nb.6
       z     = (~k.6⊕~na.6⊕nb.6)
    
    2. ~k    = ~k.6
       ~na   = ~na.6
       nb    = zero
       z     = (~k.6⊕~na.6)
    
    3. ~k    = ~x.6
       ~na   = ~x.6
       nb    = nb.7
       z     = nb.7
    
    4. ~k    = ~x.6
       ~na   = ~na.7
       nb    = ~x.6
       z     = ~na.7
    
    5. ~k    = ~x.6
       ~na   = ~x.7
       nb    = (~x.6⊕~x.7)
       z     = zero
    
    6. ~k    = ~x.6
       ~na   = ~x.7
       nb    = (~x.6⊕~x.7⊕x.9)
       z     = x.9
    
    7. ~k    = ~x.6
       ~na   = ~na.10
       nb    = (~x.6⊕x.9)
       z     = (x.9⊕~na.10)
    
    8. ~k    = ~k.7
       ~na   = ~x.6
       nb    = ~x.6
       z     = ~k.7
    
    9. ~k    = ~k.9
       ~na   = ~x.6
       nb    = (~x.6⊕x.8)
       z     = (x.8⊕~k.9)
  */

rule (modulo E) ifhknanbm_1_1111111[color=#80404f,
                                    process="if h((~k⊕~na⊕nb))=m"]:
   [ State_1111111( ~k, ~na, m, nb ) ]
  --[ Pred_Not_Eq( h((~k⊕~na⊕nb)), m ) ]->
   [ State_11111112( ~k, ~na, m, nb ) ]

  /*
  rule (modulo AC) ifhknanbm_1_1111111[color=#80404f,
                                       process="if h((~k⊕~na⊕nb))=m"]:
     [ State_1111111( ~k, ~na, m, nb ) ]
    --[ Pred_Not_Eq( h(z), m ) ]->
     [ State_11111112( ~k, ~na, m, nb ) ]
    variants (modulo AC)
    1. ~k    = ~k.6
       ~na   = ~na.6
       nb    = nb.6
       z     = (~k.6⊕~na.6⊕nb.6)
    
    2. ~k    = ~k.6
       ~na   = ~na.6
       nb    = zero
       z     = (~k.6⊕~na.6)
    
    3. ~k    = ~x.6
       ~na   = ~x.6
       nb    = nb.7
       z     = nb.7
    
    4. ~k    = ~x.6
       ~na   = ~na.7
       nb    = ~x.6
       z     = ~na.7
    
    5. ~k    = ~x.6
       ~na   = ~x.7
       nb    = (~x.6⊕~x.7)
       z     = zero
    
    6. ~k    = ~x.6
       ~na   = ~x.7
       nb    = (~x.6⊕~x.7⊕x.9)
       z     = x.9
    
    7. ~k    = ~x.6
       ~na   = ~na.10
       nb    = (~x.6⊕x.9)
       z     = (x.9⊕~na.10)
    
    8. ~k    = ~k.7
       ~na   = ~x.6
       nb    = ~x.6
       z     = ~k.7
    
    9. ~k    = ~k.9
       ~na   = ~x.6
       nb    = (~x.6⊕x.8)
       z     = (x.8⊕~k.9)
  */

rule (modulo E) eventAlivenak_0_11111111[color=#80404f,
                                         process="event Alive( ~na, ~k );"]:
   [ State_11111111( ~k, ~na, m, nb ) ]
  --[ Alive( ~na, ~k ) ]->
   [ State_111111111( ~k, ~na, m, nb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_111111111[color=#80404f, process="0"]:
   [ State_111111111( ~k, ~na, m, nb ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11111112[color=#80404f, process="0"]:
   [ State_11111112( ~k, ~na, m, nb ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) inna_0_112[color=#805d40, process="in(na);"]:
   [ State_112( ~k ), In( na ) ] --> [ State_1121( ~k, na ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newnb_0_1121[color=#805d40, process="new ~nb;"]:
   [ State_1121( ~k, na ), Fr( ~nb ) ] --> [ State_11211( ~k, ~nb, na ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifnazero_0_11211[color=#805d40, process="if na=zero"]:
   [ State_11211( ~k, ~nb, na ) ]
  --[ Pred_Eq( na, zero ) ]->
   [ State_112111( ~k, ~nb, na ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ifnazero_1_11211[color=#805d40, process="if na=zero"]:
   [ State_11211( ~k, ~nb, na ) ]
  --[ Pred_Not_Eq( na, zero ) ]->
   [ State_112112( ~k, ~nb, na ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_112111[color=#805d40, process="0"]:
   [ State_112111( ~k, ~nb, na ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventNeqForExecnazero_0_112112[color=#805d40,
                                               process="event NeqForExec( na, zero );"]:
   [ State_112112( ~k, ~nb, na ) ]
  --[ NeqForExec( na, zero ) ]->
   [ State_1121121( ~k, ~nb, na ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventResponsek_0_1121121[color=#805d40,
                                         process="event Response( ~k );"]:
   [ State_1121121( ~k, ~nb, na ) ]
  --[ Response( ~k ) ]->
   [ State_11211211( ~k, ~nb, na ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outhknbnanb_0_11211211[color=#805d40,
                                       process="out(<h((~k⊕~nb⊕na)), ~nb>);"]:
   [ State_11211211( ~k, ~nb, na ) ]
  -->
   [ State_112112111( ~k, ~nb, na ), Out( <h((~k⊕~nb⊕na)), ~nb> ) ]

  /*
  rule (modulo AC) outhknbnanb_0_11211211[color=#805d40,
                                          process="out(<h((~k⊕~nb⊕na)), ~nb>);"]:
     [ State_11211211( ~k, ~nb, na ) ]
    -->
     [ State_112112111( ~k, ~nb, na ), Out( <h(z), ~nb> ) ]
    variants (modulo AC)
    1. ~k    = ~k.5
       ~nb   = ~nb.5
       na    = na.5
       z     = (~k.5⊕~nb.5⊕na.5)
    
    2. ~k    = ~k.5
       ~nb   = ~nb.5
       na    = zero
       z     = (~k.5⊕~nb.5)
    
    3. ~k    = ~x.5
       ~nb   = ~x.5
       na    = na.6
       z     = na.6
    
    4. ~k    = ~x.5
       ~nb   = ~nb.6
       na    = ~x.5
       z     = ~nb.6
    
    5. ~k    = ~x.5
       ~nb   = ~x.6
       na    = (~x.5⊕~x.6)
       z     = zero
    
    6. ~k    = ~x.5
       ~nb   = ~x.6
       na    = (~x.5⊕~x.6⊕x.7)
       z     = x.7
    
    7. ~k    = ~x.5
       ~nb   = ~nb.8
       na    = (~x.5⊕x.7)
       z     = (x.7⊕~nb.8)
    
    8. ~k    = ~k.6
       ~nb   = ~x.5
       na    = ~x.5
       z     = ~k.6
    
    9. ~k    = ~k.7
       ~nb   = ~x.5
       na    = (~x.5⊕x.6)
       z     = (x.6⊕~k.7)
  */

rule (modulo E) p_0_112112111[color=#805d40, process="0"]:
   [ State_112112111( ~k, ~nb, na ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/feature-xor/CRxor.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/feature-xor/CRxor.spthy

  output:          examples/sapic/fast/feature-xor/CRxor.spthy.tmp
  processing time: 2.04466097s
  alive (all-traces): verified (111 steps)
  recentalive_tag (exists-trace): verified (10 steps)
  executable (exists-trace): verified (9 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-xor/CRxor.spthy

  output:          examples/sapic/fast/feature-xor/CRxor.spthy.tmp
  processing time: 2.04466097s
  alive (all-traces): verified (111 steps)
  recentalive_tag (exists-trace): verified (10 steps)
  executable (exists-trace): verified (9 steps)

==============================================================================
*/
