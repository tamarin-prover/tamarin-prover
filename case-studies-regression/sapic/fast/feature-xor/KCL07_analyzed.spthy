theory KCL07 begin

// Function signature and definition of the equational theory E

builtins: xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



heuristic: p











lemma recentalive_tag:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
simplify
solve( State_1111111111( ~id, ~k, ~r1, xoredhash ) ▶₀ #i )
  case ifxoredhashidhrk_0_111111111
  solve( !KU( (~id⊕h(<~r1, ~k>)) ) @ #vk )
    case c_xor
    solve( !KU( h(<~r1, ~k>) ) @ #vk.1 )
      case c_h
      solve( !KU( ~id ) @ #vk.2 )
        case p_1_1112
        by solve( !KU( ~k ) @ #vk.5 )
      qed
    next
      case p_1_1112
      by contradiction /* from formulas */
    qed
  next
    case coerce
    solve( !KD( (~id⊕h(<~r1, ~k>)) ) ▶₀ #vk )
      case newr_0_11111
      by contradiction /* impossible chain */
    next
      case p_1_1112
      solve( (#vl, 0) ~~> (#vk, 0) )
        case d_0_fst
        solve( !Semistate_11121( ~id.1, ~k.1 ) ▶₀ #vr.5 )
          case p_1_11
          solve( splitEqs(1) )
            case split
            solve( (#vr.6, 0) ~~> (#vk, 0) )
              case d_xor_case_1
              solve( (#vr.8, 0) ~~> (#vk, 0) )
                case Xor
                solve( !KU( (~r2⊕h(<~r1, ~k>)) ) @ #vk.2 )
                  case c_xor
                  solve( !KU( h(<~r1, ~k>) ) @ #vk.3 )
                    case c_h
                    solve( !KU( ~r2 ) @ #vk.4 )
                      case p_1_1112_case_1
                      by solve( !KU( ~k ) @ #vk.7 )
                    next
                      case p_1_1112_case_2
                      by solve( !KU( ~k ) @ #vk.7 )
                    qed
                  next
                    case p_1_1112
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~r2⊕h(<~r1, ~k>)) ) ▶₀ #vk.1 )
                    case newr_0_11111
                    by contradiction /* impossible chain */
                  next
                    case p_1_1112
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_fst
                      solve( !Semistate_11121( ~id.1, ~k.1 ) ▶₀ #vr.9 )
                        case p_1_11
                        solve( splitEqs(7) )
                          case split
                          solve( (#vr.10, 0) ~~> (#vk.1, 0) )
                            case d_xor_case_1
                            by solve( (#vr.12, 0) ~~> (#vk.1, 0) )
                          next
                            case d_xor_case_2
                            solve( (#vr.12, 0) ~~> (#vk.1, 0) )
                              case Xor
                              by contradiction /* cyclic */
                            qed
                          next
                            case d_xor_case_3
                            by contradiction /* impossible chain */
                          next
                            case d_xor_case_4
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      solve( (#vr.10, 0) ~~> (#vk.1, 0) )
                        case Xor
                        by contradiction /* cyclic */
                      next
                        case d_xor_case_1
                        solve( (#vr.11, 0) ~~> (#vk.1, 0) )
                          case Xor
                          solve( !KU( (h(<~r1, ~k>)⊕h(<r1.1, ~k>)) ) @ #vk.3 )
                            case c_xor
                            solve( !KU( h(<r1.1, ~k>) ) @ #vk.4 )
                              case c_h
                              solve( !KU( h(<~r1, ~k>) ) @ #vk.6 )
                                case c_h
                                by solve( !KU( ~k ) @ #vk.7 )
                              next
                                case p_1_1112
                                by contradiction /* from formulas */
                              qed
                            next
                              case p_1_1112
                              solve( splitEqs(12) )
                                case split
                                solve( !KU( h(<~r1, ~k>) ) @ #vk.5 )
                                  case c_h
                                  solve( !KU( ~r2.1 ) @ #vk.6 )
                                    case p_1_1112_case_1
                                    by solve( !KU( ~k ) @ #vk.9 )
                                  next
                                    case p_1_1112_case_2
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case p_1_1112
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          next
                            case coerce
                            solve( !KD( (h(<~r1, ~k>)⊕h(<r1.1, ~k>)) ) ▶₀ #vk.2 )
                              case newr_0_11111
                              by contradiction /* impossible chain */
                            next
                              case p_1_1112
                              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                solve( !Semistate_11121( ~id.1, ~k.1 ) ▶₀ #vr.11 )
                                  case p_1_11
                                  solve( splitEqs(12) )
                                    case split
                                    solve( (#vr.12, 0) ~~> (#vk.2, 0) )
                                      case d_xor_case_1
                                      by solve( (#vr.14, 0) ~~> (#vk.2, 0) )
                                    next
                                      case d_xor_case_2
                                      by solve( (#vr.14, 0) ~~> (#vk.2, 0) )
                                    next
                                      case d_xor_case_3
                                      by contradiction /* impossible chain */
                                    next
                                      case d_xor_case_4
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                qed
                              next
                                case d_0_snd
                                solve( (#vr.12, 0) ~~> (#vk.2, 0) )
                                  case d_xor_case_1
                                  by solve( (#vr.13, 0) ~~> (#vk.2, 0) )
                                next
                                  case d_xor_case_2
                                  solve( (#vr.13, 0) ~~> (#vk.2, 0) )
                                    case Xor_case_1
                                    solve( !Semistate_11121( ~id.1, ~k ) ▶₀ #vr.11 )
                                      case p_1_11
                                      solve( splitEqs(12) )
                                        case split
                                        solve( !KU( (~r2.1⊕h(<~r1, ~k>)) ) @ #vk.4 )
                                          case c_xor
                                          solve( !KU( h(<~r1, ~k>) ) @ #vk.5 )
                                            case c_h
                                            solve( !KU( ~r2.1 ) @ #vk.6 )
                                              case p_1_1112_case_1
                                              by solve( !KU( ~k ) @ #vk.9 )
                                            next
                                              case p_1_1112_case_2
                                              by solve( !KU( ~k ) @ #vk.9 )
                                            qed
                                          next
                                            case p_1_1112
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case coerce
                                          solve( !KD( (~r2.1⊕h(<~r1, ~k>)) ) ▶₀ #vk.3 )
                                            case newr_0_11111
                                            by contradiction /* impossible chain */
                                          next
                                            case p_1_1112
                                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                              case d_0_fst
                                              solve( !Semistate_11121( ~id.1, ~k.1 ) ▶₀ #vr.15 )
                                                case p_1_11
                                                solve( splitEqs(18) )
                                                  case split
                                                  solve( (#vr.16, 0) ~~> (#vk.3, 0) )
                                                    case d_xor_case_1
                                                    by solve( (#vr.18, 0) ~~> (#vk.3, 0) )
                                                  next
                                                    case d_xor_case_2
                                                    solve( (#vr.18, 0) ~~> (#vk.3, 0) )
                                                      case Xor
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case d_xor_case_3
                                                    by contradiction /* impossible chain */
                                                  next
                                                    case d_xor_case_4
                                                    by contradiction /* impossible chain */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case d_0_snd
                                              solve( (#vr.16, 0) ~~> (#vk.3, 0) )
                                                case d_xor_case_1
                                                solve( (#vr.17, 0) ~~> (#vk.3, 0) )
                                                  case Xor
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case d_xor_case_2
                                                solve( (#vr.17, 0) ~~> (#vk.3, 0) )
                                                  case Xor
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case d_xor_case_3
                                                by contradiction /* impossible chain */
                                              next
                                                case d_xor_case_4
                                                by solve( (#vr.17, 0) ~~> (#vk.3, 0) )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Xor_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case d_xor_case_3
                                  by contradiction /* impossible chain */
                                next
                                  case d_xor_case_4
                                  by solve( (#vr.13, 0) ~~> (#vk.2, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case d_xor_case_2
                        solve( (#vr.11, 0) ~~> (#vk.1, 0) )
                          case Xor
                          by contradiction /* from formulas */
                        qed
                      next
                        case d_xor_case_3
                        by contradiction /* impossible chain */
                      next
                        case d_xor_case_4
                        by solve( (#vr.11, 0) ~~> (#vk.1, 0) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case d_xor_case_2
              by solve( (#vr.8, 0) ~~> (#vk, 0) )
            next
              case d_xor_case_3
              by contradiction /* impossible chain */
            next
              case d_xor_case_4
              by contradiction /* impossible chain */
            qed
          qed
        qed
      next
        case d_0_snd
        solve( (#vr.6, 0) ~~> (#vk, 0) )
          case d_xor_case_1
          by solve( (#vr.7, 0) ~~> (#vk, 0) )
        next
          case d_xor_case_2
          solve( (#vr.7, 0) ~~> (#vk, 0) )
            case Xor
            by contradiction /* from formulas */
          qed
        next
          case d_xor_case_3
          by contradiction /* impossible chain */
        next
          case d_xor_case_4
          by solve( (#vr.7, 0) ~~> (#vk, 0) )
        qed
      qed
    qed
  qed
qed

lemma executable:
  exists-trace
  "∃ x #i #j.
    ((Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)) ∧
    (¬(∃ #k. (Response( x, 'Tag' ) @ #k) ∧ (¬(#j = #k))))"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j.
  (Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)
 ∧
  ∀ #k. (Response( x, 'Tag' ) @ #k) ⇒ #j = #k"
*/
simplify
solve( State_1111111111( ~id, ~k, ~r1, xoredhash ) ▶₀ #i )
  case ifxoredhashidhrk_0_111111111
  solve( !Semistate_11121( ~id.1, ~k ) ▶₀ #j )
    case p_1_11
    solve( splitEqs(1) )
      case split
      solve( !KU( (~id⊕h(<~r1, ~k>)) ) @ #vk.1 )
        case coerce
        solve( !KD( (~id⊕h(<~r1, ~k>)) ) ▶₀ #vk )
          case p_1_1112
          solve( (#vl, 0) ~~> (#vk, 0) )
            case d_0_fst
            solve( !Semistate_11121( ~id.1, ~k.1 ) ▶₀ #vr.6 )
              case p_1_11
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_xor_case_1
                solve( (#vr.7, 0) ~~> (#vk, 0) )
                  case Xor
                  solve( !KU( (~r2⊕h(<~r1, ~k>)) ) @ #vk.2 )
                    case coerce
                    solve( !KD( (~r2⊕h(<~r1, ~k>)) ) ▶₀ #vk.1 )
                      case p_1_1112
                      solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                        case d_0_snd
                        solve( (#vr.9, 0) ~~> (#vk.1, 0) )
                          case Xor
                          solve( !KU( ~r1 ) @ #vk.2 )
                            case newr_0_11111
                            SOLVED // trace found
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed









rule (modulo E) Init[color=#ffffff, process="new ~k.1;"]:
   [ Fr( ~k.1 ), Fr( ~id.1 ) ]
  --[ Init( ) ]->
   [ !Semistate_111( ~id.1, ~k.1 ) ]

  /*
  rule (modulo AC) Init[color=#ffffff, process="new ~k.1;"]:
     [ Fr( ~k ), Fr( ~id ) ] --[ Init( ) ]-> [ !Semistate_111( ~id, ~k ) ]
  */

rule (modulo E) newr_0_11111[color=#40805f, process="new ~r1.1;"]:
   [ State_11111( ~id.1, ~k.1 ), Fr( ~r1.1 ) ]
  --[ Challenge( ~r1.1, 'Reader' ) ]->
   [ State_11111111( ~id.1, ~k.1, ~r1.1 ), Out( ~r1.1 ) ]

  /*
  rule (modulo AC) newr_0_11111[color=#40805f, process="new ~r1.1;"]:
     [ State_11111( ~id, ~k ), Fr( ~r1 ) ]
    --[ Challenge( ~r1, 'Reader' ) ]->
     [ State_11111111( ~id, ~k, ~r1 ), Out( ~r1 ) ]
  */

rule (modulo E) inxoredhash_0_11111111[color=#40805f,
                                       process="in(xoredhash.1);"]:
   [ State_11111111( ~id.1, ~k.1, ~r1.1 ), In( xoredhash.1 ) ]
  -->
   [ State_111111111( ~id.1, ~k.1, ~r1.1, xoredhash.1 ) ]

  /*
  rule (modulo AC) inxoredhash_0_11111111[color=#40805f,
                                          process="in(xoredhash.1);"]:
     [ State_11111111( ~id, ~k, ~r1 ), In( xoredhash ) ]
    -->
     [ State_111111111( ~id, ~k, ~r1, xoredhash ) ]
  */

rule (modulo E) ifxoredhashidhrk_0_111111111[color=#40805f,
                                             process="if xoredhash.1=(~id.1⊕h(<~r1.1, ~k.1>))"]:
   [ State_111111111( ~id.1, ~k.1, ~r1.1, xoredhash.1 ) ]
  --[ Pred_Eq( xoredhash.1, (~id.1⊕h(<~r1.1, ~k.1>)) ) ]->
   [ State_1111111111( ~id.1, ~k.1, ~r1.1, xoredhash.1 ) ]

  /*
  rule (modulo AC) ifxoredhashidhrk_0_111111111[color=#40805f,
                                                process="if xoredhash.1=(~id.1⊕h(<~r1.1, ~k.1>))"]:
     [ State_111111111( ~id, ~k, ~r1, xoredhash ) ]
    --[ Pred_Eq( xoredhash, (~id⊕h(<~r1, ~k>)) ) ]->
     [ State_1111111111( ~id, ~k, ~r1, xoredhash ) ]
  */

rule (modulo E) eventAlivekTag_0_1111111111[color=#40805f,
                                            process="event Alive( ~k.1, 'Tag' );"]:
   [ State_1111111111( ~id.1, ~k.1, ~r1.1, xoredhash.1 ) ]
  --[ Alive( ~k.1, 'Tag' ) ]->
   [ ]

  /*
  rule (modulo AC) eventAlivekTag_0_1111111111[color=#40805f,
                                               process="event Alive( ~k.1, 'Tag' );"]:
     [ State_1111111111( ~id, ~k, ~r1, xoredhash ) ]
    --[ Alive( ~k, 'Tag' ) ]->
     [ ]
  */

rule (modulo E) ifxoredhashidhrk_1_111111111[color=#40805f,
                                             process="if xoredhash.1=(~id.1⊕h(<~r1.1, ~k.1>))"]:
   [ State_111111111( ~id.1, ~k.1, ~r1.1, xoredhash.1 ) ]
  --[ Pred_Not_Eq( xoredhash.1, (~id.1⊕h(<~r1.1, ~k.1>)) ) ]->
   [ ]

  /*
  rule (modulo AC) ifxoredhashidhrk_1_111111111[color=#40805f,
                                                process="if xoredhash.1=(~id.1⊕h(<~r1.1, ~k.1>))"]:
     [ State_111111111( ~id, ~k, ~r1, xoredhash ) ]
    --[ Pred_Not_Eq( xoredhash, (~id⊕h(<~r1, ~k>)) ) ]->
     [ ]
  */

rule (modulo E) p_1_11[color=#ffffff, process="!"]:
   [ !Semistate_111( ~id.1, ~k.1 ) ]
  -->
   [ !Semistate_11121( ~id.1, ~k.1 ), State_11111( ~id.1, ~k.1 ) ]

  /*
  rule (modulo AC) p_1_11[color=#ffffff, process="!"]:
     [ !Semistate_111( ~id, ~k ) ]
    -->
     [ !Semistate_11121( ~id, ~k ), State_11111( ~id, ~k ) ]
  */

rule (modulo E) p_1_1112[color=#ffffff, process="!"]:
   [ !Semistate_11121( ~id.1, ~k.1 ), In( r1.2 ), Fr( ~r2.1 ) ]
  --[ Response( ~k.1, 'Tag' ) ]->
   [ Out( <(~id.1⊕~r2.1), (~r2.1⊕h(<r1.2, ~k.1>))> ) ]

  /*
  rule (modulo AC) p_1_1112[color=#ffffff, process="!"]:
     [ !Semistate_11121( ~id, ~k ), In( r1 ), Fr( ~r2 ) ]
    --[ Response( ~k, 'Tag' ) ]->
     [ Out( <z, (~r2⊕h(<r1, ~k>))> ) ]
    variants (modulo AC)
    1. ~id   = ~id.19
       ~r2   = ~id.19
       z     = zero
    
    2. ~id   = ~id.19
       ~r2   = ~r2.21
       z     = (~id.19⊕~r2.21)
  */

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.7.1
Maude version 3.2.1
Git revision: 4b299c253445d7bbc7fce41abf0b0d5659bb1d58, branch: develop
Compiled at: 2023-06-26 11:54:20.223793825 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 3.2.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-xor/KCL07.spthy

  output:          examples/sapic/fast/feature-xor/KCL07.spthy.tmp
  processing time: 0.61s
  
  recentalive_tag (all-traces): verified (100 steps)
  executable (exists-trace): verified (16 steps)

==============================================================================
*/
