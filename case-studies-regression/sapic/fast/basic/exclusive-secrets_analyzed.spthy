theory ExclusiveSecrets begin

// Function signature and definition of the equational theory E

functions: fst/1, left/0, pair/2, right/0, snd/1, store/0
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



heuristic: p





lemma a_not_secret:
  exists-trace "∃ #i #j x y. (Secret( x, y ) @ #i) ∧ (K( x ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j x y. (Secret( x, y ) @ #i) ∧ (K( x ) @ #j)"
*/
simplify
solve( State_11111( x, y, x.1 ) ▶₀ #i )
  case eventSetStorex_0_11
  solve( !KU( ~n ) @ #vk )
    case ifvleft_0_111111111
    solve( (#vr.1 < #t2)  ∥ (#vr.1 = #t2) )
      case case_2
      SOLVED // trace found
    qed
  qed
qed

lemma b_not_secret:
  exists-trace "∃ #i #j x y. (Secret( x, y ) @ #i) ∧ (K( y ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j x y. (Secret( x, y ) @ #i) ∧ (K( y ) @ #j)"
*/
simplify
solve( State_11111( x, y, x.1 ) ▶₀ #i )
  case eventSetStorex_0_11
  solve( !KU( ~n.1 ) @ #vk )
    case ifvright_0_1111111112
    solve( (#vr.1 < #t2)  ∥ (#vr.1 = #t2) )
      case case_2
      SOLVED // trace found
    qed
  qed
qed

lemma sanity:
  all-traces
  "∀ #i #j #k x y z.
    (((Secret( x, y ) @ #i) ∧ (K( x ) @ #j)) ∧ (SetStore( z ) @ #k)) ⇒
    (z = left)"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j #k x y z.
  (Secret( x, y ) @ #i) ∧ (K( x ) @ #j) ∧ (SetStore( z ) @ #k)
 ∧
  ¬(z = left)"
*/
simplify
solve( State_11111( x, y, x.1 ) ▶₀ #i )
  case eventSetStorex_0_11
  solve( State_11( z ) ▶₀ #k )
    case insertstorex_0_1
    solve( !KU( ~n ) @ #vk )
      case ifvleft_0_111111111
      solve( (#vr < #t2)  ∥ (#vr = #t2) )
        case case_1
        solve( State_1( left ) ▶₀ #t2 )
          case Init
          by contradiction /* cyclic */
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma exclusive_secrets:
  all-traces
  "¬(∃ #i #j #k x y.
      ((Secret( x, y ) @ #i) ∧ (K( x ) @ #j)) ∧ (K( y ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j #k x y. (Secret( x, y ) @ #i) ∧ (K( x ) @ #j) ∧ (K( y ) @ #k)"
*/
simplify
solve( State_11111( x, y, x.1 ) ▶₀ #i )
  case eventSetStorex_0_11
  solve( !KU( ~n ) @ #vk )
    case ifvleft_0_111111111
    solve( (#vr.1 < #t2)  ∥ (#vr.1 = #t2) )
      case case_1
      solve( State_1( left ) ▶₀ #t2 )
        case Init
        by contradiction /* cyclic */
      qed
    next
      case case_2
      solve( !KU( ~n.1 ) @ #vk.1 )
        case ifvright_0_1111111112
        by solve( State_1( right ) ▶₀ #t2.1 )
      qed
    qed
  qed
qed













rule (modulo E) Init[color=#ffffff, process="in(x.1);"]:
   [ In( x.1 ) ] --[ Init( ) ]-> [ State_1( x.1 ) ]

  /*
  rule (modulo AC) Init[color=#ffffff, process="in(x.1);"]:
     [ In( x ) ] --[ Init( ) ]-> [ State_1( x ) ]
  */

rule (modulo E) insertstorex_0_1[color=#ffffff,
                                 process="insert store,x.1;"]:
   [ State_1( x.1 ) ] --[ Insert( store, x.1 ) ]-> [ State_11( x.1 ) ]

  /*
  rule (modulo AC) insertstorex_0_1[color=#ffffff,
                                    process="insert store,x.1;"]:
     [ State_1( x ) ] --[ Insert( store, x ) ]-> [ State_11( x ) ]
  */

rule (modulo E) eventSetStorex_0_11[color=#ffffff,
                                    process="event SetStore( x.1 );"]:
   [ State_11( x.1 ), Fr( a.1 ), Fr( b.1 ) ]
  --[ SetStore( x.1 ) ]->
   [ State_11111( a.1, b.1, x.1 ) ]

  /*
  rule (modulo AC) eventSetStorex_0_11[color=#ffffff,
                                       process="event SetStore( x.1 );"]:
     [ State_11( x ), Fr( a ), Fr( b ) ]
    --[ SetStore( x ) ]->
     [ State_11111( a, b, x ) ]
  */

rule (modulo E) eventSecretab_0_11111[color=#ffffff,
                                      process="event Secret( a.1, b.1 );"]:
   [ State_11111( a.1, b.1, x.1 ) ]
  --[ Secret( a.1, b.1 ) ]->
   [ !Semistate_1111111( a.1, b.1, x.1 ) ]

  /*
  rule (modulo AC) eventSecretab_0_11111[color=#ffffff,
                                         process="event Secret( a.1, b.1 );"]:
     [ State_11111( a, b, x ) ]
    --[ Secret( a, b ) ]->
     [ !Semistate_1111111( a, b, x ) ]
  */

rule (modulo E) p_1_111111[color=#ffffff, process="!"]:
   [ !Semistate_1111111( a.1, b.1, x.1 ) ]
  -->
   [ State_11111111( a.1, b.1, x.1 ) ]

  /*
  rule (modulo AC) p_1_111111[color=#ffffff, process="!"]:
     [ !Semistate_1111111( a, b, x ) ] --> [ State_11111111( a, b, x ) ]
  */

rule (modulo E) lookupstoreasv_0_11111111[color=#408051,
                                          process="lookup store as v.1"]:
   [ State_11111111( a.1, b.1, x.1 ) ]
  --[ IsIn( store, v.1 ) ]->
   [ State_111111111( a.1, b.1, v.1, x.1 ) ]

  /*
  rule (modulo AC) lookupstoreasv_0_11111111[color=#408051,
                                             process="lookup store as v.1"]:
     [ State_11111111( a, b, x ) ]
    --[ IsIn( store, v ) ]->
     [ State_111111111( a, b, v, x ) ]
  */

rule (modulo E) ifvleft_0_111111111[color=#408051,
                                    process="if v.1=left"]:
   [ State_111111111( a.1, b.1, v.1, x.1 ) ]
  --[ Pred_Eq( v.1, left ) ]->
   [ Out( a.1 ) ]

  /*
  rule (modulo AC) ifvleft_0_111111111[color=#408051,
                                       process="if v.1=left"]:
     [ State_111111111( a, b, v, x ) ] --[ Pred_Eq( v, left ) ]-> [ Out( a ) ]
  */

rule (modulo E) ifvleft_1_111111111[color=#408051,
                                    process="if v.1=left"]:
   [ State_111111111( a.1, b.1, v.1, x.1 ) ]
  --[ Pred_Not_Eq( v.1, left ) ]->
   [ State_1111111112( a.1, b.1, v.1, x.1 ) ]

  /*
  rule (modulo AC) ifvleft_1_111111111[color=#408051,
                                       process="if v.1=left"]:
     [ State_111111111( a, b, v, x ) ]
    --[ Pred_Not_Eq( v, left ) ]->
     [ State_1111111112( a, b, v, x ) ]
  */

rule (modulo E) ifvright_0_1111111112[color=#408051,
                                      process="if v.1=right"]:
   [ State_1111111112( a.1, b.1, v.1, x.1 ) ]
  --[ Pred_Eq( v.1, right ) ]->
   [ Out( b.1 ) ]

  /*
  rule (modulo AC) ifvright_0_1111111112[color=#408051,
                                         process="if v.1=right"]:
     [ State_1111111112( a, b, v, x ) ]
    --[ Pred_Eq( v, right ) ]->
     [ Out( b ) ]
  */

rule (modulo E) ifvright_1_1111111112[color=#408051,
                                      process="if v.1=right"]:
   [ State_1111111112( a.1, b.1, v.1, x.1 ) ]
  --[ Pred_Not_Eq( v.1, right ) ]->
   [ ]

  /*
  rule (modulo AC) ifvright_1_1111111112[color=#408051,
                                         process="if v.1=right"]:
     [ State_1111111112( a, b, v, x ) ] --[ Pred_Not_Eq( v, right ) ]-> [ ]
  */

rule (modulo E) lookupstoreasv_1_11111111[color=#408051,
                                          process="lookup store as v.1"]:
   [ State_11111111( a.1, b.1, x.1 ) ] --[ IsNotSet( store ) ]-> [ ]

  /*
  rule (modulo AC) lookupstoreasv_1_11111111[color=#408051,
                                             process="lookup store as v.1"]:
     [ State_11111111( a, b, x ) ] --[ IsNotSet( store ) ]-> [ ]
  */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒ (∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1))"
  // safety formula

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/*
WARNING: the following wellformedness checks failed!

The variables of the follwing rule(s) are not derivable from their premises, you may be performing unintended pattern matching:
  lookupstoreasv_0_11111111
Failed to derive Variable(s): v.1
*/

/*
Generated from:
Tamarin version 1.7.1
Maude version 3.2.1
Git revision: 4b299c253445d7bbc7fce41abf0b0d5659bb1d58, branch: develop
Compiled at: 2023-06-26 11:54:20.223793825 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 3.2.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/basic/exclusive-secrets.spthy

  output:          examples/sapic/fast/basic/exclusive-secrets.spthy.tmp
  processing time: 0.31s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  a_not_secret (exists-trace): verified (5 steps)
  b_not_secret (exists-trace): verified (5 steps)
  sanity (all-traces): verified (8 steps)
  exclusive_secrets (all-traces): verified (8 steps)

==============================================================================
*/
