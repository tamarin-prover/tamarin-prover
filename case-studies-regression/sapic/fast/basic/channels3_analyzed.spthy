theory ChannelsTestThree begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



heuristic: p







lemma not_secret:
  exists-trace "∃ #i #j x. (Received( x ) @ #i) ∧ (!KU( x ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j x. (Received( x ) @ #i) ∧ (!KU( x ) @ #j)"
*/
simplify
solve( State_211( x ) ▶₀ #i )
  case incx_1_21_case_2
  solve( (#vf < #t2)  ∥ (#vf = #t2) )
    case case_1
    SOLVED // trace found
  qed
qed

lemma internal_comm:
  exists-trace
  "∃ x #i. (Received( x ) @ #i) ∧ (∀ y #j. (K( y ) @ #j) ⇒ (¬(x = y)))"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i. (Received( x ) @ #i) ∧ ∀ y #j. (K( y ) @ #j) ⇒ ¬(x = y)"
*/
simplify
solve( State_211( x ) ▶₀ #i )
  case incx_1_21_case_1
  SOLVED // trace found
qed







rule (modulo E) newa_0_11[color=#408051, process="new a.1;"]:
   [ State_11( ), Fr( a.1 ) ] --> [ State_111( a.1 ) ]

  /*
  rule (modulo AC) newa_0_11[color=#408051, process="new a.1;"]:
     [ State_11( ), Fr( a ) ] --> [ State_111( a ) ]
  */

rule (modulo E) outca_1_111[color=#408051, process="out('c',a.1);"]:
   [ State_111( a.1 ) ] --> [ Message( 'c', a.1 ), Semistate_1111( a.1 ) ]

  /*
  rule (modulo AC) outca_1_111[color=#408051, process="out('c',a.1);"]:
     [ State_111( a ) ] --> [ Message( 'c', a ), Semistate_1111( a ) ]
  */

rule (modulo E) outca_0_111[color=#408051, process="out('c',a.1);"]:
   [ State_111( a.1 ), In( 'c' ) ]
  --[ ChannelIn( 'c' ) ]->
   [ Out( a.1 ), State_1111( a.1 ) ]

  /*
  rule (modulo AC) outca_0_111[color=#408051, process="out('c',a.1);"]:
     [ State_111( a ), In( 'c' ) ]
    --[ ChannelIn( 'c' ) ]->
     [ Out( a ), State_1111( a ) ]
  */

rule (modulo E) outca_2_111[color=#408051, process="out('c',a.1);"]:
   [ Semistate_1111( a.1 ), Ack( 'c', a.1 ) ] --> [ State_1111( a.1 ) ]

  /*
  rule (modulo AC) outca_2_111[color=#408051, process="out('c',a.1);"]:
     [ Semistate_1111( a ), Ack( 'c', a ) ] --> [ State_1111( a ) ]
  */

rule (modulo E) Init[color=#ffffff, process="|"]:
   [ ] --[ Init( ) ]-> [ State_21( ), State_11( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) incx_0_21[color=#408065, process="in('c',x.1);"]:
   [ State_21( ), Message( 'c', x ) ] --> [ Let_211( x ), Ack( 'c', x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) incx_2_21[color=#408065, process="in('c',x.1);"]:
   [ State_21( ), In( <'c', x> ) ]
  --[ ChannelIn( <'c', x> ) ]->
   [ Let_211( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) incx_1_21[color=#408065, process="in('c',x.1);"]:
   [ Let_211( x.1 ) ] --> [ State_211( x.1 ) ]

  /*
  rule (modulo AC) incx_1_21[color=#408065, process="in('c',x.1);"]:
     [ Let_211( x ) ] --> [ State_211( x ) ]
  */

rule (modulo E) incx_3_21[color=#408065, process="in('c',x.1);"]:
   [ Let_211( x.1 ) ] --> [ State_211( x.1 ) ]

  /*
  rule (modulo AC) incx_3_21[color=#408065, process="in('c',x.1);"]:
     [ Let_211( x ) ] --> [ State_211( x ) ]
  */

rule (modulo E) eventReceivedx_0_211[color=#408065,
                                     process="event Received( x.1 );"]:
   [ State_211( x.1 ) ] --[ Received( x.1 ), Event( ) ]-> [ ]

  /*
  rule (modulo AC) eventReceivedx_0_211[color=#408065,
                                        process="event Received( x.1 );"]:
     [ State_211( x ) ] --[ Received( x ), Event( ) ]-> [ ]
  */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction in_event:
  "∀ x #t3.
    (ChannelIn( x ) @ #t3) ⇒
    (∃ #t2.
      (((K( x ) @ #t2) ∧ (#t2 < #t3)) ∧
       (∀ #t1. (Event( ) @ #t1) ⇒ ((#t1 < #t2) ∨ (#t3 < #t1)))) ∧
      (∀ #t1 xp.
        (K( xp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.7.1
Maude version 3.2.1
Git revision: 4b299c253445d7bbc7fce41abf0b0d5659bb1d58, branch: develop
Compiled at: 2023-06-26 11:54:20.223793825 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 3.2.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/basic/channels3.spthy

  output:          examples/sapic/fast/basic/channels3.spthy.tmp
  processing time: 0.11s
  
  not_secret (exists-trace): verified (4 steps)
  internal_comm (exists-trace): verified (3 steps)

==============================================================================
*/
