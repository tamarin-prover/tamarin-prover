theory ChannelsTestOne begin

// Function signature and definition of the equational theory E

functions: fst/1[destructor], pair/2, snd/1[destructor]
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

heuristic: p







lemma secret:
  all-traces "∀ x #i. (Secret( x ) @ #i) ⇒ (¬(∃ #j. K( x ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (Secret( x ) @ #i) ∧ ∃ #j. (K( x ) @ #j)"
*/
simplify
solve( State_111( c ) ▶₀ #i )
  case Init
  by solve( !KU( ~n.1 ) @ #vk )
qed

lemma received:
  exists-trace "∃ x #i. Received( x ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i. (Received( x ) @ #i)"
*/
simplify
solve( State_1211( c, x ) ▶₀ #i )
  case incx_1_121
  SOLVED // trace found
qed

rule (modulo E) newa_0_111[color=#6c8040, process="new a.1;"]:
   [ State_111( c.1 ), Fr( a.1 ) ]
  --[ Secret( a.1 ) ]->
   [ Message( c.1, a.1 ), Semistate_111111( a.1, c.1 ) ]

  /*
  rule (modulo AC) newa_0_111[color=#6c8040, process="new a.1;"]:
     [ State_111( c ), Fr( a ) ]
    --[ Secret( a ) ]->
     [ Message( c, a ), Semistate_111111( a, c ) ]
  */

rule (modulo E) Init[color=#ffffff, process="new c.1;"]:
   [ Fr( c.1 ) ] --[ Init( ) ]-> [ State_121( c.1 ), State_111( c.1 ) ]

  /*
  rule (modulo AC) Init[color=#ffffff, process="new c.1;"]:
     [ Fr( c ) ] --[ Init( ) ]-> [ State_121( c ), State_111( c ) ]
  */

rule (modulo E) incx_0_121[color=#807140, process="in(c.1,x.1);"]:
   [ State_121( c.1 ), Message( c.1, x.2 ) ]
  -->
   [ Let_1211( x.2, c.1 ), Ack( c.1, x.2 ) ]

  /*
  rule (modulo AC) incx_0_121[color=#807140, process="in(c.1,x.1);"]:
     [ State_121( c ), Message( c, x ) ] --> [ Let_1211( x, c ), Ack( c, x ) ]
  */

rule (modulo E) incx_1_121[color=#807140, process="in(c.1,x.1);"]:
   [ Let_1211( x.1, c.1 ) ] --> [ State_1211( c.1, x.1 ) ]

  /*
  rule (modulo AC) incx_1_121[color=#807140, process="in(c.1,x.1);"]:
     [ Let_1211( x, c ) ] --> [ State_1211( c, x ) ]
  */

rule (modulo E) eventReceivedx_0_1211[color=#807140,
                                      process="event Received( x.1 );"]:
   [ State_1211( c.1, x.1 ) ] --[ Received( x.1 ) ]-> [ ]

  /*
  rule (modulo AC) eventReceivedx_0_1211[color=#807140,
                                         process="event Received( x.1 );"]:
     [ State_1211( c, x ) ] --[ Received( x ) ]-> [ ]
  */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 3.0. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/basic/channels4.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/basic/channels4.spthy

  output:          examples/sapic/fast/basic/channels4.spthy.tmp
  processing time: 0.022714764s
  secret (all-traces): verified (3 steps)
  received (exists-trace): verified (3 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/basic/channels4.spthy

  output:          examples/sapic/fast/basic/channels4.spthy.tmp
  processing time: 0.022714764s
  secret (all-traces): verified (3 steps)
  received (exists-trace): verified (3 steps)

==============================================================================
*/
