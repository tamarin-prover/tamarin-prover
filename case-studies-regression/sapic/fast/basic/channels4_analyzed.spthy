theory ChannelsTestOne begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

heuristic: p

lemma secret:
  all-traces "∀ x #i. (Secret( x ) @ #i) ⇒ (¬(∃ #j. K( x ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (Secret( x ) @ #i) ∧ ∃ #j. (K( x ) @ #j)"
*/
simplify
solve( State_111( x, c ) ▶₀ #i )
  case newa_0_11
  by solve( !KU( ~n ) @ #vk )
qed

lemma received:
  exists-trace "∃ x #i. Received( x ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i. (Received( x ) @ #i)"
*/
simplify
solve( State_121( c, x ) ▶₀ #i )
  case incx_0_12
  SOLVED // trace found
qed

rule (modulo E) Init[color=#ffffff, process="new c;"]:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newc_0_[color=#ffffff, process="new c;"]:
   [ State_( ), Fr( c ) ] --> [ State_1( c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1[color=#ffffff, process="|"]:
   [ State_1( c ) ] --> [ State_11( c ), State_12( c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newa_0_11[color=#6c8040, process="new a;"]:
   [ State_11( c ), Fr( a ) ] --> [ State_111( a, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventSecreta_0_111[color=#6c8040,
                                   process="event Secret( a );"]:
   [ State_111( a, c ) ] --[ Secret( a ) ]-> [ State_1111( a, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outca_0_1111[color=#6c8040, process="out(c,a);"]:
   [ State_1111( a, c ) ] --> [ Message( c, a ), Semistate_11111( a, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outca_1_1111[color=#6c8040, process="out(c,a);"]:
   [ Semistate_11111( a, c ), Ack( c, a ) ] --> [ State_11111( a, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11111[color=#6c8040, process="0"]:
   [ State_11111( a, c ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) incx_0_12[color=#807140, process="in(c,x);"]:
   [ State_12( c ), Message( c, x ) ] --> [ Ack( c, x ), State_121( c, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventReceivedx_0_121[color=#807140,
                                     process="event Received( x );"]:
   [ State_121( c, x ) ] --[ Received( x ) ]-> [ State_1211( c, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_1211[color=#807140, process="0"]:
   [ State_1211( c, x ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/basic/channels4.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/basic/channels4.spthy

  output:          examples/sapic/fast/basic/channels4.spthy.tmp
  processing time: 0.093255297s
  secret (all-traces): verified (3 steps)
  received (exists-trace): verified (3 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/basic/channels4.spthy

  output:          examples/sapic/fast/basic/channels4.spthy.tmp
  processing time: 0.093255297s
  secret (all-traces): verified (3 steps)
  received (exists-trace): verified (3 steps)

==============================================================================
*/
