theory DesignChoices begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



heuristic: p



lemma visit_once:
  all-traces
  "∀ #t1 #t2. ((Visit( ) @ #t1) ∧ (Visit( ) @ #t2)) ⇒ (#t1 = #t2)"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 #t2. (Visit( ) @ #t1) ∧ (Visit( ) @ #t2) ∧ ¬(#t1 = #t2)"
*/
simplify
solve( (#t1 < #t2)  ∥ (#t2 < #t1) )
  case case_1
  solve( State_112( lock ) ▶₀ #t1 )
    case lookupvisitedasv_1_11
    solve( State_112( lock ) ▶₀ #t2 )
      case lookupvisitedasv_1_11
      solve( ((#vr.1 < #vr.4) ∧
              (∃ #t2.
                (Unlock_0( '0', ~n, 's' ) @ #t2)
               ∧
                (#vr.1 < #t2) ∧
                (#t2 < #vr.4) ∧
                (∀ #t0 pp. (Unlock( pp, ~n, 's' ) @ #t0) ⇒ #t0 = #t2) ∧
                (∀ pp lpp #t0.
                  (Lock( pp, lpp, 's' ) @ #t0)
                 ⇒
                  ((#t0 < #vr.1) ∨ (#t0 = #vr.1) ∨ (#t2 < #t0))) ∧
                (∀ pp lpp #t0.
                  (Unlock( pp, lpp, 's' ) @ #t0)
                 ⇒
                  ((#t0 < #vr.1) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
             (#vr.4 < #vr.1)  ∥ (#vr.1 = #vr.4) )
        case case_1
        solve( Unlock_0( '0', ~n, 's' ) @ #t2.1 )
          case unlocks_0_111
          by solve( State_111( ~n, v ) ▶₀ #t2.1 )
        next
          case unlocks_0_11211
          solve( State_11211( ~n ) ▶₀ #t2.1 )
            case insertvisiteds_0_1121
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( Unlock_0( '0', ~n.1, 's' ) @ #t2.1 )
          case unlocks_0_111
          by solve( State_111( ~n.1, v ) ▶₀ #t2.1 )
        next
          case unlocks_0_11211
          solve( State_11211( ~n.1 ) ▶₀ #t2.1 )
            case insertvisiteds_0_1121
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_3
        by contradiction /* cyclic */
      qed
    qed
  qed
next
  case case_2
  solve( State_112( lock ) ▶₀ #t1 )
    case lookupvisitedasv_1_11
    solve( State_112( lock ) ▶₀ #t2 )
      case lookupvisitedasv_1_11
      solve( ((#vr.1 < #vr.4) ∧
              (∃ #t2.
                (Unlock_0( '0', ~n, 's' ) @ #t2)
               ∧
                (#vr.1 < #t2) ∧
                (#t2 < #vr.4) ∧
                (∀ #t0 pp. (Unlock( pp, ~n, 's' ) @ #t0) ⇒ #t0 = #t2) ∧
                (∀ pp lpp #t0.
                  (Lock( pp, lpp, 's' ) @ #t0)
                 ⇒
                  ((#t0 < #vr.1) ∨ (#t0 = #vr.1) ∨ (#t2 < #t0))) ∧
                (∀ pp lpp #t0.
                  (Unlock( pp, lpp, 's' ) @ #t0)
                 ⇒
                  ((#t0 < #vr.1) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
             (#vr.4 < #vr.1)  ∥ (#vr.1 = #vr.4) )
        case case_1
        solve( Unlock_0( '0', ~n, 's' ) @ #t2.1 )
          case unlocks_0_111
          by solve( State_111( ~n, v ) ▶₀ #t2.1 )
        next
          case unlocks_0_11211
          solve( State_11211( ~n ) ▶₀ #t2.1 )
            case insertvisiteds_0_1121
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( Unlock_0( '0', ~n.1, 's' ) @ #t2.1 )
          case unlocks_0_111
          by solve( State_111( ~n.1, v ) ▶₀ #t2.1 )
        next
          case unlocks_0_11211
          solve( State_11211( ~n.1 ) ▶₀ #t2.1 )
            case insertvisiteds_0_1121
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_3
        by contradiction /* cyclic */
      qed
    qed
  qed
qed







rule (modulo E) Init[color=#ffffff, process="!"]:
   [ ] --[ Init( ) ]-> [ !Semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_[color=#ffffff, process="!"]:
   [ !Semistate_1( ), Fr( lock ) ]
  --[ Lock_0( '0', lock, 's' ), Lock( '0', lock, 's' ) ]->
   [ State_11( lock ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupvisitedasv_0_11[color=#ffffff,
                                      process="lookup 'visited' as v.1"]:
   [ State_11( lock ) ]
  --[ IsIn( 'visited', v.1 ) ]->
   [ State_111( lock, v.1 ) ]

  /*
  rule (modulo AC) lookupvisitedasv_0_11[color=#ffffff,
                                         process="lookup 'visited' as v.1"]:
     [ State_11( lock ) ]
    --[ IsIn( 'visited', v ) ]->
     [ State_111( lock, v ) ]
  */

rule (modulo E) unlocks_0_111[color=#ffffff, process="unlock 's';"]:
   [ State_111( lock, v.1 ) ]
  --[ Unlock_0( '0', lock, 's' ), Unlock( '0', lock, 's' ) ]->
   [ ]

  /*
  rule (modulo AC) unlocks_0_111[color=#ffffff, process="unlock 's';"]:
     [ State_111( lock, v ) ]
    --[ Unlock_0( '0', lock, 's' ), Unlock( '0', lock, 's' ) ]->
     [ ]
  */

rule (modulo E) lookupvisitedasv_1_11[color=#ffffff,
                                      process="lookup 'visited' as v.1"]:
   [ State_11( lock ) ] --[ IsNotSet( 'visited' ) ]-> [ State_112( lock ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventVisit_0_112[color=#ffffff,
                                 process="event Visit( );"]:
   [ State_112( lock ) ] --[ Visit( ) ]-> [ State_1121( lock ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertvisiteds_0_1121[color=#ffffff,
                                      process="insert 'visited','s';"]:
   [ State_1121( lock ) ]
  --[ Insert( 'visited', 's' ) ]->
   [ State_11211( lock ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlocks_0_11211[color=#ffffff, process="unlock 's';"]:
   [ State_11211( lock ) ]
  --[ Unlock_0( '0', lock, 's' ), Unlock( '0', lock, 's' ) ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒ (∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction locking_0:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_0( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

/*
WARNING: the following wellformedness checks failed!

The variables of the follwing rule(s) are not derivable from their premises, you may be performing unintended pattern matching:
  lookupvisitedasv_0_11
Failed to derive Variable(s): v.1
*/

/*
Generated from:
Tamarin version 1.7.1
Maude version 3.2.1
Git revision: 4b299c253445d7bbc7fce41abf0b0d5659bb1d58, branch: develop
Compiled at: 2023-06-26 11:54:20.223793825 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 3.2.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/basic/design-choices.spthy

  output:          examples/sapic/fast/basic/design-choices.spthy.tmp
  processing time: 0.18s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  visit_once (all-traces): verified (26 steps)

==============================================================================
*/
