theory PatternMatchLet begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



heuristic: p

section{* A few test cases for operator precedence *}



lemma first:
  all-traces "∀ #e x. (E( x ) @ #e) ⇒ (x = '1')"
/*
guarded formula characterizing all counter-examples:
"∃ #e x. (E( x ) @ #e) ∧ ¬(x = '1')"
*/
simplify
solve( State_1( x, y ) ▶₀ #e )
  case letxy_1_
  by contradiction /* from formulas */
qed

lemma first2:
  all-traces "¬(∃ #e x. Fail( x ) @ #e)"
/*
guarded formula characterizing all counter-examples:
"∃ #e x. (Fail( x ) @ #e)"
*/
simplify
by solve( State_2( ) ▶₀ #e )







rule (modulo E) Init[color=#ffffff, process="let <x.1, y.1>=<'1', '2'>"]:
   [ ] --[ Init( ) ]-> [ Let_1( <'1', '2'> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) letxy_1_[color=#ffffff,
                         process="let <x.1, y.1>=<'1', '2'>"]:
   [ Let_1( <x.1, y.1> ) ] --> [ State_1( x.1, y.1 ) ]

  /*
  rule (modulo AC) letxy_1_[color=#ffffff,
                            process="let <x.1, y.1>=<'1', '2'>"]:
     [ Let_1( <x, y> ) ] --> [ State_1( x, y ) ]
  */

rule (modulo E) inpatx_0_1[color=#ffffff, process="in(pat_x.1);"]:
   [ State_1( x.1, y.1 ), In( pat_x.1 ) ] --[ E( x.1 ) ]-> [ ]

  /*
  rule (modulo AC) inpatx_0_1[color=#ffffff, process="in(pat_x.1);"]:
     [ State_1( x, y ), In( pat_x ) ] --[ E( x ) ]-> [ ]
  */

restriction Restr_letxy_2__1:
  "∀ #NOW.
    (Restr_letxy_2__1( ) @ #NOW) ⇒ (∀ x y. (<x, y> = <'1', '2'>) ⇒ (⊥))"
  // safety formula

rule (modulo E) letxy_2_[color=#ffffff,
                         process="let <x.1, y.1>=<'1', '2'>"]:
   [ Let_1( <'1', '2'> ) ] --[ Restr_letxy_2__1( ) ]-> [ State_2( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inpatx_0_2[color=#ffffff, process="in(pat_x.2);"]:
   [ State_2( ), In( pat_x.2 ) ] --[ Fail( pat_x.2 ) ]-> [ ]

  /*
  rule (modulo AC) inpatx_0_2[color=#ffffff, process="in(pat_x.2);"]:
     [ State_2( ), In( pat_x ) ] --[ Fail( pat_x ) ]-> [ ]
  */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.7.1
Maude version 3.2.1
Git revision: 4b299c253445d7bbc7fce41abf0b0d5659bb1d58, branch: develop
Compiled at: 2023-06-26 11:54:20.223793825 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 3.2.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/basic/let_pattern.spthy

  output:          examples/sapic/fast/basic/let_pattern.spthy.tmp
  processing time: 0.07s
  
  first (all-traces): verified (3 steps)
  first2 (all-traces): verified (2 steps)

==============================================================================
*/
