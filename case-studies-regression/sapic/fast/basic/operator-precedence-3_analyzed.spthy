theory OperatorPrecedenceLookup begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

heuristic: p

section{* A few test cases for operator precedence *}

predicate: True( )<=>⊤

lemma elseIsResolvedInnerFirst:
  exists-trace
  "(∃ #l. LookupElse( ) @ #l) ∧ (∃ #p. PositiveBranch( ) @ #p)"
/*
guarded formula characterizing all satisfying traces:
"(∃ #l. (LookupElse( ) @ #l)) ∧ (∃ #p. (PositiveBranch( ) @ #p))"
*/
simplify
solve( State_112( ) ▶₀ #l )
  case lookupxasx_1_11
  solve( State_1( ) ▶₀ #p )
    case ifTrue_0_
    SOLVED // trace found
  qed
qed

rule (modulo E) Init[color=#ffffff, process="if True( )"]:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

restriction Restr_ifTrue_0__1:
  "∀ #NOW. (Restr_ifTrue_0__1( ) @ #NOW) ⇒ (⊤)"
  // safety formula

rule (modulo E) ifTrue_0_[color=#ffffff, process="if True( )"]:
   [ State_( ) ] --[ Restr_ifTrue_0__1( ) ]-> [ State_1( ) ]

  /* has exactly the trivial AC variant */

restriction Restr_ifTrue_1__1:
  "∀ #NOW. (Restr_ifTrue_1__1( ) @ #NOW) ⇒ (¬(⊤))"
  // safety formula

rule (modulo E) ifTrue_1_[color=#ffffff, process="if True( )"]:
   [ State_( ) ] --[ Restr_ifTrue_1__1( ) ]-> [ State_2( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventPositiveBranch_0_1[color=#ffffff,
                                        process="event PositiveBranch( );"]:
   [ State_1( ) ] --[ PositiveBranch( ) ]-> [ State_11( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupxasx_0_11[color=#ffffff,
                                process="lookup 'x' as x"]:
   [ State_11( ) ] --[ IsIn( 'x', x ) ]-> [ State_111( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupxasx_1_11[color=#ffffff,
                                process="lookup 'x' as x"]:
   [ State_11( ) ] --[ IsNotSet( 'x' ) ]-> [ State_112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_111[color=#ffffff, process="0"]:
   [ State_111( x ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventLookupElse_0_112[color=#ffffff,
                                      process="event LookupElse( );"]:
   [ State_112( ) ] --[ LookupElse( ) ]-> [ State_1121( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertyy_0_1121[color=#ffffff,
                                process="insert 'y','y';"]:
   [ State_1121( ) ] --[ Insert( 'y', 'y' ) ]-> [ State_11211( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_11211[color=#ffffff, process="0"]:
   [ State_11211( ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_2[color=#ffffff, process="0"]:
   [ State_2( ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒ (∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/sapic/fast/basic/operator-precedence-3.spthy

------------------------------------------------------------------------------
analyzed: examples/sapic/fast/basic/operator-precedence-3.spthy

  output:          examples/sapic/fast/basic/operator-precedence-3.spthy.tmp
  processing time: 0.08061182s
  elseIsResolvedInnerFirst (exists-trace): verified (4 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/basic/operator-precedence-3.spthy

  output:          examples/sapic/fast/basic/operator-precedence-3.spthy.tmp
  processing time: 0.08061182s
  elseIsResolvedInnerFirst (exists-trace): verified (4 steps)

==============================================================================
*/
