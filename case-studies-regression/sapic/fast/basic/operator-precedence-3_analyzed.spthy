theory OperatorPrecedenceLookup begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



heuristic: p

section{* A few test cases for operator precedence *}

predicate: True( )<=>⊤



lemma elseIsResolvedInnerFirst:
  exists-trace
  "(∃ #l. LookupElse( ) @ #l) ∧ (∃ #p. PositiveBranch( ) @ #p)"
/*
guarded formula characterizing all satisfying traces:
"(∃ #l. (LookupElse( ) @ #l)) ∧ (∃ #p. (PositiveBranch( ) @ #p))"
*/
simplify
solve( State_112( ) ▶₀ #l )
  case lookupxasx_1_11
  solve( State_( ) ▶₀ #p )
    case Init
    SOLVED // trace found
  qed
qed







rule (modulo E) Init[color=#ffffff, process="if True( )"]:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

restriction Restr_ifTrue_0__1:
  "∀ #NOW. (Restr_ifTrue_0__1( ) @ #NOW) ⇒ (⊤)"
  // safety formula

rule (modulo E) ifTrue_0_[color=#ffffff, process="if True( )"]:
   [ State_( ) ]
  --[ PositiveBranch( ), Restr_ifTrue_0__1( ) ]->
   [ State_11( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookupxasx_0_11[color=#ffffff,
                                process="lookup 'x' as x.1"]:
   [ State_11( ) ] --[ IsIn( 'x', x.1 ) ]-> [ ]

  /*
  rule (modulo AC) lookupxasx_0_11[color=#ffffff,
                                   process="lookup 'x' as x.1"]:
     [ State_11( ) ] --[ IsIn( 'x', x ) ]-> [ ]
  */

rule (modulo E) lookupxasx_1_11[color=#ffffff,
                                process="lookup 'x' as x.1"]:
   [ State_11( ) ] --[ IsNotSet( 'x' ) ]-> [ State_112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventLookupElse_0_112[color=#ffffff,
                                      process="event LookupElse( );"]:
   [ State_112( ) ] --[ LookupElse( ) ]-> [ State_1121( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insertyy_0_1121[color=#ffffff,
                                process="insert 'y','y';"]:
   [ State_1121( ) ] --[ Insert( 'y', 'y' ) ]-> [ ]

  /* has exactly the trivial AC variant */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒ (∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/*
WARNING: the following wellformedness checks failed!

The variables of the follwing rule(s) are not derivable from their premises, you may be performing unintended pattern matching:
  lookupxasx_0_11
Failed to derive Variable(s): x.1
*/

/*
Generated from:
Tamarin version 1.7.1
Maude version 3.2.1
Git revision: 4b299c253445d7bbc7fce41abf0b0d5659bb1d58, branch: develop
Compiled at: 2023-06-26 11:54:20.223793825 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 3.2.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/basic/operator-precedence-3.spthy

  output:          examples/sapic/fast/basic/operator-precedence-3.spthy.tmp
  processing time: 0.06s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  elseIsResolvedInnerFirst (exists-trace): verified (4 steps)

==============================================================================
*/
